{"version":3,"sources":["node_modules/browser-pack/_prelude.js","../animatex/index.js","../animatex/src/animation-job.js","../animatex/src/animator.js","../animatex/src/frame-latency-profiler.js","../animatex/src/index.js","../animatex/src/persistent-animation-job.js","../animatex/src/transient-animation-job.js","../animatex/src/util.js","node_modules/lsl-animatex/index.js","node_modules/lsl-animatex/src/animation-job.js","node_modules/lsl-animatex/src/animator.js","node_modules/lsl-animatex/src/frame-latency-profiler.js","node_modules/lsl-animatex/src/persistent-animation-job.js","node_modules/lsl-animatex/src/transient-animation-job.js","node_modules/lsl-animatex/src/util.js","node_modules/lsl-physx/index.js","src/cameras/index.js","src/cameras/src/camera.js","src/cameras/src/first-person-camera.js","src/cameras/src/fixed-camera.js","src/cameras/src/fixed-follow-camera.js","src/cameras/src/follow-camera.js","src/cameras/src/overhead-camera.js","src/cameras/src/third-person-camera.js","src/index.js","src/models/index.js","src/models/src/default-model.js","src/models/src/invisible-model-controller.js","src/models/src/model-controller.js","src/models/src/model-group-controller.js","src/models/src/model.js","src/models/src/standard-model-controller.js","src/program-wrapper/index.js","src/program-wrapper/src/group-program-wrapper.js","src/program-wrapper/src/program-wrapper-store.js","src/program-wrapper/src/program-wrapper.js","src/program-wrapper/src/texture-store.js","src/program-wrapper/src/uniform-setter.js","src/renderable-shapes/index.js","src/renderable-shapes/src/renderable-shape-factory.js","src/renderable-shapes/src/renderable-shape-store.js","src/renderable-shapes/src/shape-configs/capsule-renderable-shape.js","src/renderable-shapes/src/shape-configs/cube-renderable-shape.js","src/renderable-shapes/src/shape-configs/icosahedron-renderable-shape.js","src/renderable-shapes/src/shape-configs/icosphere-renderable-shape.js","src/renderable-shapes/src/shape-configs/lat-long-sphere-renderable-shape.js","src/renderable-shapes/src/shape-configs/tetrahedron-renderable-shape.js","src/src/grafx-controller.js","src/src/light.js","src/src/scene.js","src/util/index.js","src/util/src/geometry.js","src/util/src/gl-util.js","src/util/src/hash-map.js","src/util/src/util.js"],"names":[],"mappings":"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","file":"grafx.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export * from './src';\n","/**\n * An AnimationJob is used with the animator controller to update and re-draw something each frame.\n *\n * @abstract\n */\nclass AnimationJob {\n  /**\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(onComplete) {\n    // AnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === AnimationJob) {\n      throw new TypeError('Cannot construct AnimationJob instances directly');\n    }\n\n    this._startTime = 0;\n    this._isComplete = true;\n    this._onComplete = onComplete;\n  }\n\n  /**\n   * Indicates whether this AnimationJob is complete.\n   *\n   * @return {boolean}\n   */\n  get isComplete() {\n    return this._isComplete;\n  }\n\n  /**\n   * Sets this AnimationJob as started.\n   *\n   * @param {DOMHighResTimeStamp} startTime\n   */\n  start(startTime) {\n    this._startTime = startTime;\n    this._isComplete = false;\n  }\n\n  /**\n   * Updates the animation progress of this AnimationJob to match the given time.\n   *\n   * This is called from the overall animation loop.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @abstract\n   */\n  update(currentTime, deltaTime) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * Draws the current state of this AnimationJob.\n   *\n   * This is called from the overall animation loop.\n   *\n   * @abstract\n   */\n  draw() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * Handles any necessary state for this AnimationJob being finished.\n   *\n   * @param {boolean} isCancelled\n   */\n  finish(isCancelled) {\n    console.log(`${this.constructor.name} ${isCancelled ? 'cancelled' : 'completed'}`);\n\n    this._isComplete = true;\n\n    if (this._onComplete) {\n      this._onComplete();\n    }\n  }\n}\n\nexport {AnimationJob};\n","import {FrameLatencyProfiler} from './frame-latency-profiler';\nimport {PersistentAnimationJob} from './persistent-animation-job';\nimport {TransientAnimationJob} from './transient-animation-job';\n\nconst _DELTA_TIME_UPPER_THRESHOLD = 200;\nconst _FRAME_DURATION_WARNING_THRESHOLD = 1000 / 30;\nconst _FRAME_LATENCY_LOG_PERIOD = 5000;\nconst _LATENCY_LOG_LABEL = 'Animation frame period';\n\n/**\n * This class handles the animation loop.\n *\n * This class's responsibilities include:\n * - updating modules for the current frame,\n * - drawing renderables for the current frame,\n * - starting and stopping transient animation jobs,\n * - capping time step durations at a max threshold.\n */\nclass Animator {\n  constructor() {\n    this._jobs = [];\n    this._previousTime = null;\n    this._isPaused = true;\n    this._requestAnimationFrameId = null;\n    this._totalUnpausedRunTime = 0;\n    this._lastUnpauseTime = null;\n    this._latencyProfiler = new FrameLatencyProfiler(_FRAME_LATENCY_LOG_PERIOD,\n        _FRAME_DURATION_WARNING_THRESHOLD, _LATENCY_LOG_LABEL);\n  }\n\n  /**\n   * Starts the given AnimationJob.\n   *\n   * @param {AnimationJob} job\n   */\n  startJob(job) {\n    // Is this a restart?\n    if (!job.isComplete) {\n      console.debug(`Restarting AnimationJob: ${job.constructor.name}`);\n\n      if (job instanceof PersistentAnimationJob) {\n        job.reset();\n      } else {\n        job.finish(true);\n        job.start(window.performance.now());\n      }\n    } else {\n      console.debug(`Starting AnimationJob: ${job.constructor.name}`);\n\n      job.start(this._previousTime);\n      this._jobs.push(job);\n    }\n\n    this._startAnimationLoop();\n  }\n\n  /**\n   * Cancels the given AnimationJob.\n   *\n   * @param {AnimationJob} job\n   */\n  cancelJob(job) {\n    console.debug(`Cancelling AnimationJob: ${job.constructor.name}`);\n    job.finish(true);\n  }\n\n  /**\n   * Cancels all running AnimationJobs.\n   */\n  cancelAll() {\n    while (this._jobs.length) {\n      this.cancelJob(this._jobs[0]);\n    }\n  }\n\n  /** @returns {DOMHighResTimeStamp} */\n  get currentTime() {\n    return this._previousTime;\n  }\n\n  /** @returns {boolean} */\n  get isPaused() {\n    return this._isPaused;\n  }\n\n  pause() {\n    this._stopAnimationLoop();\n    console.debug('Animator paused');\n  }\n\n  unpause() {\n    this._startAnimationLoop();\n    console.debug('Animator unpaused');\n  }\n\n  /**\n   * This is the animation loop that drives all of the animation.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @private\n   */\n  _animationLoop(currentTime) {\n    // When pausing and restarting, it's possible for the previous time to be slightly inconsistent\n    // with the animationFrame time.\n    if (currentTime < this._previousTime) {\n      this._previousTime = currentTime - 1;\n    }\n\n    let deltaTime = currentTime - this._previousTime;\n    this._previousTime = currentTime;\n\n    this._latencyProfiler.recordFrameLatency(deltaTime);\n\n    // Large delays between frames can cause lead to instability in the system, so this caps them to\n    // a max threshold.\n    deltaTime = deltaTime > _DELTA_TIME_UPPER_THRESHOLD ?\n        _DELTA_TIME_UPPER_THRESHOLD : deltaTime;\n\n    if (!this._isPaused) {\n      this._requestAnimationFrameId =\n          window.requestAnimationFrame(currentTime => this._animationLoop(currentTime));\n      this._updateJobs(currentTime, deltaTime);\n      this._drawJobs();\n    }\n  }\n\n  /**\n   * Updates all of the active AnimationJobs.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @private\n   */\n  _updateJobs(currentTime, deltaTime) {\n    for (let i = 0, count = this._jobs.length; i < count; i++) {\n      let job = this._jobs[i];\n\n      // Remove jobs from the list after they are complete.\n      if (job.isComplete) {\n        this._removeJob(job, i);\n        i--;\n        count--;\n        continue;\n      }\n\n      // Check whether the job is transient and has reached its end.\n      if (job instanceof TransientAnimationJob && job.endTime < currentTime) {\n        job.finish(false);\n      } else {\n        job.update(currentTime, deltaTime);\n      }\n    }\n  }\n\n  /**\n   * Removes the given job from the collection of active, animating jobs.\n   *\n   * @param {AnimationJob} job\n   * @param {number} [index=-1]\n   * @private\n   */\n  _removeJob(job, index = -1) {\n    console.debug(`Removing AnimationJob: ${job.constructor.name}`);\n\n    if (index >= 0) {\n      this._jobs.splice(index, 1);\n    } else {\n      const count = this._jobs.length;\n      for (index = 0; index < count; index++) {\n        if (this._jobs[index] === job) {\n          this._jobs.splice(index, 1);\n          break;\n        }\n      }\n    }\n\n    // Stop the animation loop when there are no more jobs to animate.\n    if (this._jobs.length === 0) {\n      this._stopAnimationLoop();\n    }\n  }\n\n  /**\n   * Draws all of the active AnimationJobs.\n   *\n   * @private\n   */\n  _drawJobs() {\n    for (let i = 0, count = this._jobs.length; i < count; i++) {\n      this._jobs[i].draw();\n    }\n  }\n\n  /**\n   * Starts the animation loop if it is not already running.\n   *\n   * This method is idempotent.\n   *\n   * @private\n   */\n  _startAnimationLoop() {\n    if (this._isPaused) {\n      this._lastUnpauseTime = window.performance.now();\n    }\n    this._isPaused = false;\n\n    // Only actually start the loop if it isn't already running and the page has focus.\n    if (!this._requestAnimationFrameId && !document.hidden) {\n      this._latencyProfiler.start();\n      this._previousTime = window.performance.now();\n      this._requestAnimationFrameId =\n          window.requestAnimationFrame(time => this._animationLoop(time));\n    }\n  }\n\n  /**\n   * Stops the animation loop.\n   *\n   * @private\n   */\n  _stopAnimationLoop() {\n    if (!this._isPaused) {\n      this._totalUnpausedRunTime += this._timeSinceLastPaused;\n    }\n    this._isPaused = true;\n    window.cancelAnimationFrame(this._requestAnimationFrameId);\n    this._requestAnimationFrameId = null;\n    this._latencyProfiler.stop();\n  }\n\n  /**\n   * Creates a promise that will resolve on the next animation loop.\n   *\n   * @returns {Promise}\n   */\n  resolveOnNextFrame() {\n    return new Promise(window.requestAnimationFrame);\n  }\n\n  /**\n   * Gets the total amount of time the animator has been running while not paused.\n   *\n   * @returns {DOMHighResTimeStamp}\n   */\n  get totalRunTime() {\n    return this._isPaused\n        ? this._totalUnpausedRunTime\n        : this._totalUnpausedRunTime + this._timeSinceLastPaused;\n  }\n\n  /**\n   * @returns {DOMHighResTimeStamp}\n   */\n  get _timeSinceLastPaused() {\n    return window.performance.now() - this._lastUnpauseTime;\n  }\n}\n\nconst animator = new Animator();\n\nexport {animator};\n\n/**\n * @typedef {number} DOMHighResTimeStamp A number of milliseconds, accurate to one thousandth of a\n * millisecond.\n */\n\n","/**\n * This class keeps track of avg/min/max frame latencies over the last logging time period and\n * periodically logs these values.\n */\nclass FrameLatencyProfiler {\n  /**\n   * @param {number} logPeriod The period at which to print latency log messages. In milliseconds.\n   * @param {number} latencyWarningThreshold If the average latency exceeds this threshold, then the\n   * log message is shown as a warning. In milliseconds.\n   * @param {string} logLabel A label to show for each latency log message.\n   */\n  constructor(logPeriod, latencyWarningThreshold, logLabel) {\n    this._logPeriod = logPeriod;\n    this._latencyWarningThreshold = latencyWarningThreshold;\n    this._logLabel = logLabel;\n\n    this._frameCount = null;\n    this._maxFrameLatency = null;\n    this._minFrameLatency = null;\n    this._avgFrameLatency = null;\n\n    this._intervalId = null;\n  }\n\n  start() {\n    this.stop();\n    this.reset();\n\n    this._intervalId = setInterval(() => {\n      this.logFrameLatency();\n      this.reset();\n    }, this._logPeriod);\n  }\n\n  stop() {\n    clearInterval(this._intervalId);\n  }\n\n  reset() {\n    this._frameCount = 0;\n    this._maxFrameLatency = Number.MIN_VALUE;\n    this._minFrameLatency = Number.MAX_VALUE;\n    this._avgFrameLatency = 0;\n  }\n\n  /**\n   * Keeps track of a running average, min value, and max value for the frame latencies.\n   *\n   * @param {DOMHighResTimeStamp} frameLatency\n   */\n  recordFrameLatency(frameLatency) {\n    this._frameCount++;\n    this._maxFrameLatency =\n        this._maxFrameLatency < frameLatency ? frameLatency : this._maxFrameLatency;\n    this._minFrameLatency =\n        this._minFrameLatency > frameLatency ? frameLatency : this._minFrameLatency;\n    this._avgFrameLatency =\n        this._avgFrameLatency + (frameLatency - this._avgFrameLatency) / this._frameCount;\n  }\n\n  logFrameLatency() {\n    if (this._frameCount > 0) {\n      const message = `${this._logLabel}:  AVG=${this._avgFrameLatency.toFixed(3)}  ` +\n          `(MAX=${this._maxFrameLatency.toFixed(3)}; MIN=${this._minFrameLatency.toFixed(3)})`;\n      if (this._maxFrameLatency >= this._latencyWarningThreshold) {\n        console.warn(message);\n      } else {\n        console.debug(message);\n      }\n    }\n  }\n}\n\nexport {FrameLatencyProfiler};\n","export * from './animation-job';\nexport * from './animator';\nexport * from './frame-latency-profiler';\nexport * from './persistent-animation-job';\nexport * from './transient-animation-job';\n","import {AnimationJob} from './animation-job';\n\n/**\n * A PersistentAnimationJob recurs or has an indefinite duration.\n *\n * @abstract\n */\nclass PersistentAnimationJob extends AnimationJob {\n  /**\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(onComplete) {\n    super(onComplete);\n\n    // PersistentAnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === PersistentAnimationJob) {\n      throw new TypeError('Cannot construct PersistentAnimationJob instances directly');\n    }\n  }\n\n  /**\n   * @abstract\n   */\n  reset() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n}\n\nexport {PersistentAnimationJob};\n","import {_util} from './util';\n\nimport {AnimationJob} from './animation-job';\n\n/**\n * A TransientAnimationJob is temporary and has a definite beginning and end.\n *\n * @abstract\n */\nclass TransientAnimationJob extends AnimationJob {\n  /**\n   * @param {number} duration\n   * @param {number} delay\n   * @param {Function|String} easingFunction\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(duration, delay, easingFunction, onComplete) {\n    super(onComplete);\n\n    // TransientAnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === TransientAnimationJob) {\n      throw new TypeError('Cannot construct TransientAnimationJob instances directly');\n    }\n\n    this._duration = duration;\n    this._delay = delay;\n    this._easingFunction = typeof easingFunction === 'function'\n        ? easingFunction\n        : _util.easingFunctions[easingFunction];\n  }\n\n  /**\n   * @returns {number}\n   */\n  get endTime() {\n    return this._startTime + this._duration + this._delay;\n  }\n}\n\nexport {TransientAnimationJob};\n","/**\n * This module defines a collection of static utility functions.\n */\n\n// A collection of different types of easing functions.\nconst easingFunctions = {\n  linear: t => t,\n  easeInQuad: t => t * t,\n  easeOutQuad: t => t * (2 - t),\n  easeInOutQuad: t => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t,\n  easeInCubic: t => t * t * t,\n  easeOutCubic: t => 1 + --t * t * t,\n  easeInOutCubic: t => t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,\n  easeInQuart: t => t * t * t * t,\n  easeOutQuart: t => 1 - --t * t * t * t,\n  easeInOutQuart: t => t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t,\n  easeInQuint: t => t * t * t * t * t,\n  easeOutQuint: t => 1 + --t * t * t * t * t,\n  easeInOutQuint: t => t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t\n};\n\nconst _util = {\n  easingFunctions,\n};\n\nexport {\n  _util,\n};\n","export * from './src/animation-job';\nexport * from './src/animator';\nexport * from './src/frame-latency-profiler';\nexport * from './src/persistent-animation-job';\nexport * from './src/transient-animation-job';\n","/**\n * An AnimationJob is used with the animator controller to update and re-draw something each frame.\n *\n * @abstract\n */\nclass AnimationJob {\n  /**\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(onComplete) {\n    // AnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === AnimationJob) {\n      throw new TypeError('Cannot construct AnimationJob instances directly');\n    }\n\n    this._startTime = 0;\n    this._isComplete = true;\n    this._onComplete = onComplete;\n  }\n\n  /**\n   * Indicates whether this AnimationJob is complete.\n   *\n   * @return {boolean}\n   */\n  get isComplete() {\n    return this._isComplete;\n  }\n\n  /**\n   * Sets this AnimationJob as started.\n   *\n   * @param {DOMHighResTimeStamp} startTime\n   */\n  start(startTime) {\n    this._startTime = startTime;\n    this._isComplete = false;\n  }\n\n  /**\n   * Updates the animation progress of this AnimationJob to match the given time.\n   *\n   * This is called from the overall animation loop.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @abstract\n   */\n  update(currentTime, deltaTime) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * Draws the current state of this AnimationJob.\n   *\n   * This is called from the overall animation loop.\n   *\n   * @abstract\n   */\n  draw() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * Handles any necessary state for this AnimationJob being finished.\n   *\n   * @param {boolean} isCancelled\n   */\n  finish(isCancelled) {\n    console.log(`${this.constructor.name} ${isCancelled ? 'cancelled' : 'completed'}`);\n\n    this._isComplete = true;\n\n    if (this._onComplete) {\n      this._onComplete();\n    }\n  }\n}\n\nexport {AnimationJob};\n","import {FrameLatencyProfiler} from './frame-latency-profiler';\nimport {PersistentAnimationJob} from './persistent-animation-job';\nimport {TransientAnimationJob} from './transient-animation-job';\n\nconst _DELTA_TIME_UPPER_THRESHOLD = 200;\nconst _FRAME_DURATION_WARNING_THRESHOLD = 1000 / 30;\nconst _FRAME_LATENCY_LOG_PERIOD = 5000;\nconst _LATENCY_LOG_LABEL = 'Animation frame period';\n\n/**\n * This class handles the animation loop.\n *\n * This class's responsibilities include:\n * - updating modules for the current frame,\n * - drawing renderables for the current frame,\n * - starting and stopping transient animation jobs,\n * - capping time step durations at a max threshold.\n */\nclass Animator {\n  constructor() {\n    this._jobs = [];\n    this._previousTime = null;\n    this._isPaused = true;\n    this._requestAnimationFrameId = null;\n    this._totalUnpausedRunTime = 0;\n    this._lastUnpauseTime = null;\n    this._latencyProfiler = new FrameLatencyProfiler(_FRAME_LATENCY_LOG_PERIOD,\n        _FRAME_DURATION_WARNING_THRESHOLD, _LATENCY_LOG_LABEL);\n  }\n\n  /**\n   * Starts the given AnimationJob.\n   *\n   * @param {AnimationJob} job\n   */\n  startJob(job) {\n    // Is this a restart?\n    if (!job.isComplete) {\n      console.debug(`Restarting AnimationJob: ${job.constructor.name}`);\n\n      if (job instanceof PersistentAnimationJob) {\n        job.reset();\n      } else {\n        job.finish(true);\n        job.start(window.performance.now());\n      }\n    } else {\n      console.debug(`Starting AnimationJob: ${job.constructor.name}`);\n\n      job.start(this._previousTime);\n      this._jobs.push(job);\n    }\n\n    this._startAnimationLoop();\n  }\n\n  /**\n   * Cancels the given AnimationJob.\n   *\n   * @param {AnimationJob} job\n   */\n  cancelJob(job) {\n    console.debug(`Cancelling AnimationJob: ${job.constructor.name}`);\n    job.finish(true);\n  }\n\n  /**\n   * Cancels all running AnimationJobs.\n   */\n  cancelAll() {\n    while (this._jobs.length) {\n      this.cancelJob(this._jobs[0]);\n    }\n  }\n\n  /** @returns {DOMHighResTimeStamp} */\n  get currentTime() {\n    return this._previousTime;\n  }\n\n  /** @returns {boolean} */\n  get isPaused() {\n    return this._isPaused;\n  }\n\n  pause() {\n    this._stopAnimationLoop();\n    console.debug('Animator paused');\n  }\n\n  unpause() {\n    this._startAnimationLoop();\n    console.debug('Animator unpaused');\n  }\n\n  /**\n   * This is the animation loop that drives all of the animation.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @private\n   */\n  _animationLoop(currentTime) {\n    // When pausing and restarting, it's possible for the previous time to be slightly inconsistent\n    // with the animationFrame time.\n    if (currentTime < this._previousTime) {\n      this._previousTime = currentTime - 1;\n    }\n\n    let deltaTime = currentTime - this._previousTime;\n    this._previousTime = currentTime;\n\n    this._latencyProfiler.recordFrameLatency(deltaTime);\n\n    // Large delays between frames can cause lead to instability in the system, so this caps them to\n    // a max threshold.\n    deltaTime = deltaTime > _DELTA_TIME_UPPER_THRESHOLD ?\n        _DELTA_TIME_UPPER_THRESHOLD : deltaTime;\n\n    if (!this._isPaused) {\n      this._requestAnimationFrameId =\n          window.requestAnimationFrame(currentTime => this._animationLoop(currentTime));\n      this._updateJobs(currentTime, deltaTime);\n      this._drawJobs();\n    }\n  }\n\n  /**\n   * Updates all of the active AnimationJobs.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @private\n   */\n  _updateJobs(currentTime, deltaTime) {\n    for (let i = 0, count = this._jobs.length; i < count; i++) {\n      let job = this._jobs[i];\n\n      // Remove jobs from the list after they are complete.\n      if (job.isComplete) {\n        this._removeJob(job, i);\n        i--;\n        count--;\n        continue;\n      }\n\n      // Check whether the job is transient and has reached its end.\n      if (job instanceof TransientAnimationJob && job.endTime < currentTime) {\n        job.finish(false);\n      } else {\n        job.update(currentTime, deltaTime);\n      }\n    }\n  }\n\n  /**\n   * Removes the given job from the collection of active, animating jobs.\n   *\n   * @param {AnimationJob} job\n   * @param {number} [index=-1]\n   * @private\n   */\n  _removeJob(job, index = -1) {\n    console.debug(`Removing AnimationJob: ${job.constructor.name}`);\n\n    if (index >= 0) {\n      this._jobs.splice(index, 1);\n    } else {\n      const count = this._jobs.length;\n      for (index = 0; index < count; index++) {\n        if (this._jobs[index] === job) {\n          this._jobs.splice(index, 1);\n          break;\n        }\n      }\n    }\n\n    // Stop the animation loop when there are no more jobs to animate.\n    if (this._jobs.length === 0) {\n      this._stopAnimationLoop();\n    }\n  }\n\n  /**\n   * Draws all of the active AnimationJobs.\n   *\n   * @private\n   */\n  _drawJobs() {\n    for (let i = 0, count = this._jobs.length; i < count; i++) {\n      this._jobs[i].draw();\n    }\n  }\n\n  /**\n   * Starts the animation loop if it is not already running.\n   *\n   * This method is idempotent.\n   *\n   * @private\n   */\n  _startAnimationLoop() {\n    if (this._isPaused) {\n      this._lastUnpauseTime = window.performance.now();\n    }\n    this._isPaused = false;\n\n    // Only actually start the loop if it isn't already running and the page has focus.\n    if (!this._requestAnimationFrameId && !document.hidden) {\n      this._latencyProfiler.start();\n      this._previousTime = window.performance.now();\n      this._requestAnimationFrameId =\n          window.requestAnimationFrame(time => this._animationLoop(time));\n    }\n  }\n\n  /**\n   * Stops the animation loop.\n   *\n   * @private\n   */\n  _stopAnimationLoop() {\n    if (!this._isPaused) {\n      this._totalUnpausedRunTime += this._timeSinceLastPaused;\n    }\n    this._isPaused = true;\n    window.cancelAnimationFrame(this._requestAnimationFrameId);\n    this._requestAnimationFrameId = null;\n    this._latencyProfiler.stop();\n  }\n\n  /**\n   * Creates a promise that will resolve on the next animation loop.\n   *\n   * @returns {Promise}\n   */\n  resolveOnNextFrame() {\n    return new Promise(window.requestAnimationFrame);\n  }\n\n  /**\n   * Gets the total amount of time the animator has been running while not paused.\n   *\n   * @returns {DOMHighResTimeStamp}\n   */\n  get totalRunTime() {\n    return this._isPaused\n        ? this._totalUnpausedRunTime\n        : this._totalUnpausedRunTime + this._timeSinceLastPaused;\n  }\n\n  /**\n   * @returns {DOMHighResTimeStamp}\n   */\n  get _timeSinceLastPaused() {\n    return window.performance.now() - this._lastUnpauseTime;\n  }\n}\n\nconst animator = new Animator();\n\nexport {animator};\n\n/**\n * @typedef {number} DOMHighResTimeStamp A number of milliseconds, accurate to one thousandth of a\n * millisecond.\n */\n\n","/**\n * This class keeps track of avg/min/max frame latencies over the last logging time period and\n * periodically logs these values.\n */\nclass FrameLatencyProfiler {\n  /**\n   * @param {number} logPeriod The period at which to print latency log messages. In milliseconds.\n   * @param {number} latencyWarningThreshold If the average latency exceeds this threshold, then the\n   * log message is shown as a warning. In milliseconds.\n   * @param {string} logLabel A label to show for each latency log message.\n   */\n  constructor(logPeriod, latencyWarningThreshold, logLabel) {\n    this._logPeriod = logPeriod;\n    this._latencyWarningThreshold = latencyWarningThreshold;\n    this._logLabel = logLabel;\n\n    this._frameCount = null;\n    this._maxFrameLatency = null;\n    this._minFrameLatency = null;\n    this._avgFrameLatency = null;\n\n    this._intervalId = null;\n  }\n\n  start() {\n    this.stop();\n    this.reset();\n\n    this._intervalId = setInterval(() => {\n      this.logFrameLatency();\n      this.reset();\n    }, this._logPeriod);\n  }\n\n  stop() {\n    clearInterval(this._intervalId);\n  }\n\n  reset() {\n    this._frameCount = 0;\n    this._maxFrameLatency = Number.MIN_VALUE;\n    this._minFrameLatency = Number.MAX_VALUE;\n    this._avgFrameLatency = 0;\n  }\n\n  /**\n   * Keeps track of a running average, min value, and max value for the frame latencies.\n   *\n   * @param {DOMHighResTimeStamp} frameLatency\n   */\n  recordFrameLatency(frameLatency) {\n    this._frameCount++;\n    this._maxFrameLatency =\n        this._maxFrameLatency < frameLatency ? frameLatency : this._maxFrameLatency;\n    this._minFrameLatency =\n        this._minFrameLatency > frameLatency ? frameLatency : this._minFrameLatency;\n    this._avgFrameLatency =\n        this._avgFrameLatency + (frameLatency - this._avgFrameLatency) / this._frameCount;\n  }\n\n  logFrameLatency() {\n    if (this._frameCount > 0) {\n      const message = `${this._logLabel}:  AVG=${this._avgFrameLatency.toFixed(3)}  ` +\n          `(MAX=${this._maxFrameLatency.toFixed(3)}; MIN=${this._minFrameLatency.toFixed(3)})`;\n      if (this._maxFrameLatency >= this._latencyWarningThreshold) {\n        console.warn(message);\n      } else {\n        console.debug(message);\n      }\n    }\n  }\n}\n\nexport {FrameLatencyProfiler};\n","import {AnimationJob} from './animation-job';\n\n/**\n * A PersistentAnimationJob recurs or has an indefinite duration.\n *\n * @abstract\n */\nclass PersistentAnimationJob extends AnimationJob {\n  /**\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(onComplete) {\n    super(onComplete);\n\n    // PersistentAnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === PersistentAnimationJob) {\n      throw new TypeError('Cannot construct PersistentAnimationJob instances directly');\n    }\n  }\n\n  /**\n   * @abstract\n   */\n  reset() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n}\n\nexport {PersistentAnimationJob};\n","import {_util} from './util';\n\nimport {AnimationJob} from './animation-job';\n\n/**\n * A TransientAnimationJob is temporary and has a definite beginning and end.\n *\n * @abstract\n */\nclass TransientAnimationJob extends AnimationJob {\n  /**\n   * @param {number} duration\n   * @param {number} delay\n   * @param {Function|String} easingFunction\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(duration, delay, easingFunction, onComplete) {\n    super(onComplete);\n\n    // TransientAnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === TransientAnimationJob) {\n      throw new TypeError('Cannot construct TransientAnimationJob instances directly');\n    }\n\n    this._duration = duration;\n    this._delay = delay;\n    this._easingFunction = typeof easingFunction === 'function'\n        ? easingFunction\n        : _util.easingFunctions[easingFunction];\n  }\n\n  /**\n   * @returns {number}\n   */\n  get endTime() {\n    return this._startTime + this._duration + this._delay;\n  }\n}\n\nexport {TransientAnimationJob};\n","/**\n * This module defines a collection of static utility functions.\n */\n\n// A collection of different types of easing functions.\nconst easingFunctions = {\n  linear: t => t,\n  easeInQuad: t => t * t,\n  easeOutQuad: t => t * (2 - t),\n  easeInOutQuad: t => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t,\n  easeInCubic: t => t * t * t,\n  easeOutCubic: t => 1 + --t * t * t,\n  easeInOutCubic: t => t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,\n  easeInQuart: t => t * t * t * t,\n  easeOutQuart: t => 1 - --t * t * t * t,\n  easeInOutQuart: t => t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t,\n  easeInQuint: t => t * t * t * t * t,\n  easeOutQuint: t => 1 + --t * t * t * t * t,\n  easeInOutQuint: t => t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t\n};\n\nconst _util = {\n  easingFunctions,\n};\n\nexport {\n  _util,\n};\n","module.exports = {}; // FIXME: Point this to dist\n","export * from './src/camera';\nexport * from './src/first-person-camera';\nexport * from './src/fixed-camera';\nexport * from './src/fixed-follow-camera';\nexport * from './src/follow-camera';\nexport * from './src/third-person-camera';\nexport * from './src/overhead-camera';\n","import { PersistentAnimationJob } from 'lsl-animatex';\n\n// TODO: Make the rotation quaternion based with 6DoF.\n\n// TODO: Add support for scripting the camera to follow a curve:\n// (https://msdn.microsoft.com/en-us/library/bb203908(v=xnagamestudio.31).aspx)\n\n/**\n * This class defines common camera logic.\n *\n * @abstract\n */\nclass Camera extends PersistentAnimationJob {\n  /**\n   * If oldCamera is given, then the state of the new camera will be initialized to match that of\n   * the old camera. This enables a smooth transition when changing cameras.\n   *\n   * @param {CameraConfig} cameraParams\n   * @param {Camera} [oldCamera]\n   */\n  constructor(cameraParams, oldCamera) {\n    super();\n\n    // Camera is an abstract class. It should not be instantiated directly.\n    if (new.target === Camera) {\n      throw new TypeError('Cannot construct Camera instances directly');\n    }\n\n    this._cameraParams = cameraParams;\n    this._fovY = null;\n    this._aspectRatio = null;\n    this._zNear = null;\n    this._zFar = null;\n    this._position = vec3.create();\n    this._orientation = quat.create(); // TODO: Use this.\n    this._viewMatrix = mat4.create();\n    this._projectionMatrix = mat4.create();\n    this._viewProjectionMatrix = mat4.create();\n\n    this._matchOldCamera(oldCamera);\n  }\n\n  reset() {\n    this._setPerspective(this._cameraParams.fovY, this._cameraParams.defaultAspectRatio,\n      this._cameraParams.zNear, this._cameraParams.zFar);\n  }\n\n  // TODO: Call this after adding support for dynamically switching cameras.\n  destroy() {}\n\n  /**\n   * Set this camera's orientation and position.\n   *\n   * @param {vec3} eye The camera position.\n   * @param {vec3} target The focal point.\n   * @param {vec3} up The local up direction.\n   * @param {vec3} viewDirection The (normalized) direction the camera is looking.\n   * @protected\n   */\n  _setPositionAndLookAt(eye, target, up, viewDirection) {\n    vec3.copy(this._position, eye);\n    this._setLookAtFromCurrentPosition(target, up, viewDirection);\n  }\n\n  /**\n   * Set this camera's orientation, but do not change its position.\n   *\n   * @param {vec3} target The focal point.\n   * @param {vec3} up The local up direction.\n   * @param {vec3} viewDirection The (normalized) direction the camera is looking.\n   * @protected\n   */\n  _setLookAtFromCurrentPosition(target, up, viewDirection) {\n    mat4.lookAt(this._viewMatrix, this._position, target, up);\n    quat.rotationTo(this._orientation, this._cameraParams._defaultLookAtDirection, viewDirection); // TODO: Check this; might need to swap arguments.\n    this._updateViewProjectionMatrix();\n  }\n\n  /**\n   * Translate this camera by the given amount from its current position.\n   *\n   * @param {vec3} translation\n   * @protected\n   */\n  _translate(translation) {\n    vec3.add(this._position, this._position, translation);\n  }\n\n  /**\n   * Rotate this camera by the given amount from its current orientation.\n   *\n   * @param {quat} rotation\n   * @protected\n   */\n  _rotate(rotation) {\n    // TODO\n  }\n\n  /**\n   * @param {number} fovY In radians.\n   * @param {number} aspectRatio Width / height.\n   * @param {number} zNear\n   * @param {number} zFar\n   * @protected\n   */\n  _setPerspective(fovY, aspectRatio, zNear, zFar) {\n    this._fovY = fovY;\n    this._aspectRatio = aspectRatio;\n    this._zNear = zNear;\n    this._zFar = zFar;\n    this._updateProjectionMatrix();\n  }\n\n  /**\n   * Re-calculates the view-projection matrix. This should be called any time either the view or\n   * projection matrices is updated.\n   *\n   * @protected\n   */\n  _updateProjectionMatrix() {\n    mat4.perspective(\n      this._projectionMatrix, this._fovY, this._aspectRatio, this._zNear, this._zFar);\n    this._updateViewProjectionMatrix();\n  }\n\n  /**\n   * Re-calculates the view-projection matrix. This should be called any time either the view or\n   * projection matrices is updated.\n   *\n   * @protected\n   */\n  _updateViewProjectionMatrix() {\n    mat4.multiply(this._viewProjectionMatrix, this._projectionMatrix, this._viewMatrix);\n  }\n\n  /**\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @abstract\n   */\n  update(currentTime, deltaTime) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  draw() {}\n\n  /**\n   * @param {number} fovY The vertical field of view, in radians.\n   * @protected\n   */\n  set fov(fovY) {\n    this._fovY = fovY;\n    this._updateProjectionMatrix();\n  }\n\n  /**\n   * @param {number} aspectRatio Width / height.\n   */\n  set aspectRatio(aspectRatio) {\n    this._setPerspective(this._cameraParams.fovY, aspectRatio, this._cameraParams.zNear,\n      this._cameraParams.zFar);\n  }\n\n  /** @returns {vec3} */\n  get position() {\n    return this._position;\n  }\n  /** @returns {quat} */\n  get orientation() {\n    return this._orientation;\n  }\n  /** @returns {mat4} */\n  get viewMatrix() {\n    return this._viewMatrix;\n  }\n  /** @returns {mat4} */\n  get projectionMatrix() {\n    return this._projectionMatrix;\n  }\n  /** @returns {mat4} */\n  get viewProjectionMatrix() { // TODO: Stop using the above two getters and use this instead?\n    return this._viewProjectionMatrix;\n  }\n\n  /**\n   * Update this camera's state to match the given old camera.\n   *\n   * @param {Camera} oldCamera\n   * @protected\n   */\n  _matchOldCamera(oldCamera) {\n    if (!oldCamera) {\n      return;\n    }\n    this._fovY = oldCamera._fovY;\n    this._aspectRatio = oldCamera._aspectRatio;\n    this._zNear = oldCamera._zNear;\n    this._zFar = oldCamera._zFar;\n    vec3.copy(this._position, oldCamera._position);\n    vec3.copy(this._orientation, oldCamera._orientation);\n    mat4.copy(this._viewMatrix, oldCamera._viewMatrix);\n    mat4.copy(this._projectionMatrix, oldCamera._projectionMatrix);\n    mat4.copy(this._viewProjectionMatrix, oldCamera._viewProjectionMatrix);\n  }\n}\n\nexport { Camera };\n\n/**\n * @typedef {Function} CameraConfig\n * @property {number} fovY\n * @property {number} zNear\n * @property {number} zFar\n * @property {number} defaultAspectRatio\n * @property {vec3} _defaultLookAtDirection\n */\n\n/**\n * @typedef {Object} FollowCameraConfig\n * @property {number} springCoefficient\n * @property {number} dampingCoefficient\n * @property {number} intendedDistanceFromTarget\n * @property {number} intendedRotationAngleFromTarget\n * @property {vec3} intendedRotationAxisFromTarget\n * @property {vec3} _intendedTranslationFromTarget\n */\n\n/**\n * @typedef {Object} FirstPersonCameraConfig\n * @property {vec3} intendedDisplacementFromTarget\n * @property {vec3} viewDirection\n * @property {number} targetDistance\n */\n\n/**\n * @typedef {Object} FixedCameraConfig\n * @property {vec3} position\n * @property {vec3} viewDirection\n * @property {vec3} _up\n */\n","import { Camera } from './camera';\n\n/**\n * This class defines a first-person camera.\n *\n * A first-person camera is positioned at a character and moves and rotates with the character.\n */\nclass FirstPersonCamera extends Camera {\n  /**\n   * @param {CameraTarget} cameraTarget\n   * @param {FirstPersonCameraConfig} firstPersonCameraParams\n   * @param {CameraConfig} cameraParams\n   * @param {Camera} [oldCamera]\n   */\n  constructor(cameraTarget, firstPersonCameraParams, cameraParams, oldCamera) {\n    super(cameraParams, oldCamera);\n    this._cameraTarget = cameraTarget;\n    this._firstPersonCameraParams = firstPersonCameraParams;\n    this._cameraTarget = cameraTarget;\n  }\n\n  /**\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  update(currentTime, deltaTime) {\n    this._updatePosition();\n    this._updateOrientation();\n  }\n\n  /**\n   * @private\n   */\n  _updatePosition() {\n    const intendedPosition = this._getIntendedPosition();\n    vec3.copy(this._position, intendedPosition);\n  }\n\n  /**\n   * Update the camera's orientation using the \"look at\" method according to its position and the\n   * position of its target.\n   *\n   * @protected\n   */\n  _updateOrientation() {\n    // Get the view direction, and transform it to align with the target's orientation.\n    const viewDirection = vec3.create();\n    vec3.copy(viewDirection, this._firstPersonCameraParams.viewDirection);\n    vec3.transformQuat(viewDirection, viewDirection, this._cameraTarget.orientation);\n\n    const target = vec3.create();\n    vec3.scaleAndAdd(target, this._position, viewDirection,\n      this._firstPersonCameraParams.targetDistance);\n\n    // Initialize \"up\" as the world z-axis.\n    const up = vec3.fromValues(0, 1, 0);\n\n    // Transform \"up\" to align with the camera target's local z-axis.\n    vec3.transformQuat(up, up, this._cameraTarget.orientation);\n\n    const right = vec3.create();\n    vec3.cross(right, viewDirection, up);\n\n    // Transform \"up\" to align with the camera's local z-axis.\n    vec3.cross(up, right, viewDirection);\n\n    this._setPositionAndLookAt(this._position, target, up, viewDirection);\n  }\n\n  /**\n   * The intended position for this camera to be in according to the position and orientation of the\n   * camera target.\n   *\n   * @returns {vec3}\n   * @protected\n   * @abstract\n   */\n  _getIntendedPosition() {\n    const intendedPosition = vec3.create();\n    vec3.transformMat4(\n      intendedPosition,\n      this._firstPersonCameraParams.intendedDisplacementFromTarget,\n      this._cameraTarget.worldTransform);\n    return intendedPosition;\n  }\n}\n\nexport { FirstPersonCamera };\n","import {Camera} from './camera';\n\n/**\n * This class defines a fixed camera.\n *\n * A fixed camera's position and orientation are updated manually and remain fixed until a later\n * update.\n */\nclass FixedCamera extends Camera {\n  /**\n   * If oldCamera is given, then the state of the new camera will be initialized to match that of\n   * the old camera. This enables a smooth transition when changing cameras.\n   *\n   * @param {FixedCameraConfig} fixedCameraParams\n   * @param {CameraConfig} cameraParams\n   * @param {Camera} [oldCamera]\n   */\n  constructor(fixedCameraParams, cameraParams, oldCamera) {\n    super(cameraParams, oldCamera);\n\n    this._position = fixedCameraParams.position;\n    this._viewDirection = fixedCameraParams.viewDirection;\n    this._up = fixedCameraParams._up;\n    this.__target = vec3.create();\n  }\n\n  reset() {\n    super.reset();\n    this._update();\n  }\n\n  /**\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  update(currentTime, deltaTime) {}\n\n  _update() {\n    vec3.normalize(this._viewDirection, this._viewDirection);\n    vec3.normalize(this._up, this._up);\n\n    // Transform \"up\" to align with the camera's local z-axis.\n    const right = vec3.create();\n    vec3.cross(right, this._viewDirection, this._up);\n    vec3.cross(this._up, right, this._viewDirection);\n\n    this._setPositionAndLookAt(this._position, this._target, this._up, this._viewDirection);\n  }\n\n  /** @param {vec3} newDirection */\n  set viewDirection(newDirection) {\n    vec3.copy(this._viewDirection, newDirection);\n    this._update();\n  }\n\n  /** @param {vec3} newUp */\n  set up(newUp) {\n    vec3.copy(this._up, newUp);\n    this._update();\n  }\n\n  /** @param {vec3} newPosition */\n  set position(newPosition) {\n    vec3.copy(this._position, newPosition);\n    this._update();\n  }\n\n  /** @returns {vec3} */\n  // TODO: Look into whatever bug prevents the parent-class getter from working.\n  get position() {\n    return this._position;\n  }\n\n  /** @returns {vec3} */\n  get viewDirection() {\n    return this._viewDirection;\n  }\n  /** @returns {vec3} */\n  get up() {\n    return this._up;\n  }\n  /**\n   * @returns {vec3}\n   * @private\n   */\n  get _target() {\n    return vec3.add(this.__target, this._position, this._viewDirection);\n  }\n\n  /**\n   * @param {Camera} oldCamera\n   * @protected\n   */\n  _matchOldCamera(oldCamera) {\n    super._matchOldCamera(oldCamera);\n    if (oldCamera instanceof FixedCamera) {\n      vec3.copy(this._viewDirection, oldCamera._viewDirection);\n      vec3.copy(this._up, oldCamera._up);\n    }\n  }\n}\n\nexport {FixedCamera};\n","import {FollowCamera} from './follow-camera';\n\n/**\n * This class defines a fixed-offset follow camera.\n *\n * This camera is positioned at a relative, fixed distance and rotation from the observed target\n * and follows the target's position and orientation at this fixed distance.\n *\n * A follow camera rotates in all three dimensions; it does not have a fixed roll.\n */\nclass FixedFollowCamera extends FollowCamera {\n  /**\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  update(currentTime, deltaTime) {\n    this._updatePosition();\n    this._updateOrientation();\n  }\n\n  /**\n   * @private\n   */\n  _updatePosition() {\n    const intendedPosition = this._getIntendedPosition();\n    vec3.copy(this._position, intendedPosition);\n  }\n}\n\nexport {FixedFollowCamera};\n","import {ThirdPersonCamera} from './third-person-camera';\n\n/**\n * This class defines an abstract follow camera.\n *\n * This is a third-person type of camera whose roll always matches that of the target.\n */\nclass FollowCamera extends ThirdPersonCamera {\n  /**\n   * Update the camera's orientation using the \"look at\" method according to its position and the\n   * position of its target.\n   *\n   * @protected\n   */\n  _updateOrientation() {\n    const target = this._cameraTarget.position;\n\n    const viewDirection = vec3.create();\n    vec3.subtract(viewDirection, target, this._position);\n    vec3.normalize(viewDirection, viewDirection);\n\n    // Initialize \"up\" as the world z-axis.\n    const up = vec3.fromValues(0, 1, 0);\n\n    // Transform \"up\" to align with the camera target's local z-axis.\n    vec3.transformQuat(up, up, this._cameraTarget.orientation);\n\n    const right = vec3.create();\n    vec3.cross(right, viewDirection, up);\n\n    // Transform \"up\" to align with the camera's local z-axis.\n    vec3.cross(up, right, viewDirection);\n\n    this._setPositionAndLookAt(this._position, target, up, viewDirection);\n  }\n}\n\nexport {FollowCamera};\n","import {ThirdPersonCamera} from './third-person-camera';\n\n/**\n * This class defines an overhead camera.\n *\n * An overhead camera sits above the observed character and moves relative to the character without\n * rotating.\n *\n * An overhead camera's rotation with the character includes only yaw; it has a fixed pitch and\n * roll.\n */\nclass OverheadCamera extends ThirdPersonCamera {\n  /**\n   * If oldCamera is given, then the state of the new camera will be initialized to match that of\n   * the old camera. This enables a smooth transition when changing cameras.\n   *\n   * @param {CameraTarget} cameraTarget\n   * @param {FollowCameraConfig} followCameraParams\n   * @param {CameraConfig} cameraParams\n   * @param {Camera} [oldCamera]\n   */\n  constructor(cameraTarget, followCameraParams, cameraParams, oldCamera) {\n    super(cameraTarget, followCameraParams, cameraParams, oldCamera);\n\n    this.reset();\n  }\n\n  reset() {\n    super.reset();\n  }\n\n  // TODO: Implement this!\n}\n\nexport {OverheadCamera};\n","import {Camera} from './camera';\n\n/**\n * This class defines an abstract third-person camera.\n *\n * A third-person camera follows a target from a distance.\n *\n * @abstract\n */\nclass ThirdPersonCamera extends Camera {\n  /**\n   * If oldCamera is given, then the state of the new camera will be initialized to match that of\n   * the old camera. This enables a smooth transition when changing cameras.\n   *\n   * @param {CameraTarget} cameraTarget\n   * @param {FollowCameraConfig} followCameraParams\n   * @param {CameraConfig} cameraParams\n   * @param {Camera} [oldCamera]\n   */\n  constructor(cameraTarget, followCameraParams, cameraParams, oldCamera) {\n    super(cameraParams, oldCamera);\n\n    // ThirdPersonCamera is an abstract class. It should not be instantiated directly.\n    if (new.target === ThirdPersonCamera) {\n      throw new TypeError('Cannot construct ThirdPersonCamera instances directly');\n    }\n\n    this._followCameraParams = followCameraParams;\n    this._cameraTarget = cameraTarget;\n  }\n\n  /**\n   * The intended position for this camera to be in according to the position and orientation of the\n   * camera target.\n   *\n   * @returns {vec3}\n   * @protected\n   * @abstract\n   */\n  _getIntendedPosition() {\n    const intendedPosition = vec3.create();\n    vec3.transformMat4(\n        intendedPosition,\n        this._followCameraParams._intendedTranslationFromTarget,\n        this._cameraTarget.worldTransform);\n    return intendedPosition;\n  }\n\n  /** @param {CameraTarget} cameraTarget */\n  set cameraTarget(cameraTarget) {\n    this._cameraTarget = cameraTarget;\n  }\n}\n\nexport {ThirdPersonCamera};\n\n/**\n * @typedef {Object} CameraTarget\n * @property {vec3} position In world coordinates.\n * @property {quat} orientation Relative to the world axes.\n * @property {mat4} worldTransform The model transform matrix, in world coordinates.\n */\n","/**\n * This module re-exports all of the exports in the grafx framework. This makes the entire framework\n * conveniently accessible via this single module.\n */\n\nexport * from './cameras';\nexport * from './models';\nexport * from './program-wrapper';\nexport * from './renderable-shapes';\nexport * from './util';\n\nexport * from './src/grafx-controller';\nexport * from './src/light';\nexport * from './src/scene';\n","export * from './src/default-model';\nexport * from './src/invisible-model-controller';\nexport * from './src/model';\nexport * from './src/model-controller';\nexport * from './src/model-group-controller';\nexport * from './src/standard-model-controller';\n","import {createBufferFromData} from '../../util';\nimport {Model} from './model';\n\n/**\n * This class defines a default implementation of the rigid model.\n *\n * This implementation accepts a RenderableShape and applies standard OpenGL binding logic on top\n * of it.\n */\nclass DefaultModel extends Model {\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {RenderableShape} shapeConfig\n   */\n  constructor(gl, shapeConfig) {\n    super(gl);\n    this._shapeConfig = shapeConfig;\n    this._initializeBuffers();\n    this._initializeConfigs();\n  }\n\n  _initializeBuffers() {\n    // Create, bind, and move data into buffers for the vertex positions, normals, texture\n    // coordinates, and element array.\n    this._vertexPositionsBuffer = createBufferFromData(this._gl, this._shapeConfig.vertexPositions);\n    this._vertexNormalsBuffer = createBufferFromData(this._gl, this._shapeConfig.vertexNormals);\n    this._textureCoordinatesBuffer =\n        createBufferFromData(this._gl, this._shapeConfig.textureCoordinates);\n    if (this._shapeConfig.vertexIndices) {\n      this._vertexIndicesBuffer = createBufferFromData(this._gl, this._shapeConfig.vertexIndices,\n          this._gl.ELEMENT_ARRAY_BUFFER);\n    }\n  }\n\n  _initializeConfigs() {\n    this._vertexPositionsConfig = {\n      buffer: this._vertexPositionsBuffer,\n      size: 3,\n      type: this._gl.FLOAT,\n      normalized: false,\n      stride: 0,\n      offset: 0\n    };\n    this._textureCoordinatesConfig = {\n      buffer: this._textureCoordinatesBuffer,\n      size: 2,\n      type: this._gl.FLOAT,\n      normalized: false,\n      stride: 0,\n      offset: 0\n    };\n    this._vertexNormalsConfig = {\n      buffer: this._vertexNormalsBuffer,\n      size: 3,\n      type: this._gl.FLOAT,\n      normalized: false,\n      stride: 0,\n      offset: 0\n    };\n  }\n\n  /** @returns {number} */\n  get elementCount() {\n    return this._shapeConfig.elementCount;\n  }\n\n  /** @returns {number} */\n  get mode() {\n    return this._gl.TRIANGLES;\n    //return this._gl.LINE_STRIP;// TODO: REMOVE ME\n  }\n}\n\nexport {DefaultModel};\n","import {ModelController} from './model-controller';\n\n/**\n * This class defines an extension of the model-controller class that will maintain state but will\n * never render anything.\n */\nclass InvisibleModelController extends ModelController {\n  /**\n   * @param {ModelControllerConfig} params\n   */\n  constructor(params) {\n    super(params);\n  }\n\n  destroy() {}\n\n  update(currentTime, deltaTime) {}\n\n  draw() {}\n\n  /**\n   * Initializes the program variables configuration.\n   *\n   * @protected\n   */\n  _setUpProgramVariablesConfig() {\n    this._programVariablesConfig = {};\n  }\n\n  /**\n   * Overrides the default method to instead do nothing.\n   *\n   * @param {string} id\n   * @returns {Promise}\n   */\n  _setUpProgramWrapper(id) {\n    this._programWrapperId = id;\n    this._programWrapperPromise = Promise.resolve(null);\n    return this._programWrapperPromise;\n  }\n}\n\nexport {InvisibleModelController};\n","import {PersistentAnimationJob} from 'lsl-animatex';\nimport {\n  programWrapperStore,\n  textureStore,\n} from '../../program-wrapper';\n\n/**\n * This class defines a model-controller class.\n *\n * This should be extended by all components that handle models--i.e., anything that will be\n * rendering shapes.\n *\n * @implements {ModelControllerInterface}\n * @abstract\n */\nclass ModelController extends PersistentAnimationJob {\n  /**\n   * PRECONDITION: The ProgramWrapper referenced by the given params must have already been\n   * registered.\n   *\n   * @param {ModelControllerConfig} params\n   */\n  constructor(params) {\n    super();\n\n    // ModelController is an abstract class. It should not be instantiated directly.\n    if (new.target === ModelController) {\n      throw new TypeError('Cannot construct ModelController instances directly');\n    }\n\n    this._gl = params.gl;\n    this._getViewMatrix = params.getViewMatrix;\n    this._getProjectionMatrix = params.getProjectionMatrix;\n    this._getParentWorldTransform = params.getParentWorldTransform;\n    this._localTransform = mat4.create();\n    this._worldTransform = mat4.create();\n    this._texture = null;\n    this._programWrapper = null;\n    this._programWrapperId = null;\n    this._drawFrameHandler = () => this.draw();\n    this._programVariablesConfig = null;\n\n    this.position = vec3.create();\n    this.scale = vec3.fromValues(1, 1, 1);\n\n    this._setUpTexture(params.texturePath);\n    this._setUpProgramWrapper(params.programWrapperId);\n\n    this._isReadyPromise = Promise.all([\n      this._texturePromise,\n      this._programWrapperPromise,\n    ]);\n  }\n\n  reset() {}\n\n  /**\n   * Called when this is done being used, and is being destroyed from memory.\n   */\n  destroy() {\n    programWrapperStore.unregisterDrawFrameHandler(this._programWrapperId, this._drawFrameHandler);\n  }\n\n  /**\n   * Calls update, updateTransforms, and updateChildren.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  updateSelfAndChildren(currentTime, deltaTime) {\n    this.update(currentTime, deltaTime);\n    this.updateTransforms();\n    this.updateChildren(currentTime, deltaTime);\n  }\n\n  /**\n   * Updates relevant state for the sub-class.\n   *\n   * - This does not recursively update descendant model controllers; that's handled by\n   *   updateChildren.\n   * - This does not update the local or world-coordinate transforms; that's handled by\n   *   updateTransforms.\n   * - This is called before updateLocalTransform and updateChildren.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  update(currentTime, deltaTime) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * Updates the world-coordinate and local-coordinate model matrices.\n   *\n   * This is called after update and before updateChildren.\n   *\n   * NOTE: All overrides of this method should update [this._localTransform].\n   */\n  updateTransforms() {\n    mat4.multiply(this._worldTransform, this._getParentWorldTransform(), this._localTransform);\n  }\n\n  /**\n   * Updates relevant state for any children model controllers.\n   *\n   * This is called after update and updateLocalTransform.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  updateChildren(currentTime, deltaTime) {}\n\n  /**\n   * @abstract\n   */\n  draw() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * Gets the model transform matrix, in local coordinates.\n   *\n   * @returns {mat4}\n   */\n  get localTransform() {\n    return this._localTransform;\n  }\n\n  /**\n   * Gets the model transform matrix, in world coordinates.\n   *\n   * @returns {mat4}\n   */\n  get worldTransform() {\n    return this._worldTransform;\n  }\n\n  /**\n   * Returns a promise that resolves when this model controller is ready for the app to run.\n   *\n   * @returns {Promise}\n   */\n  getIsReady() {\n    return this._isReadyPromise;\n  }\n\n  /** @param {string} id */\n  set programWrapperId(id) {\n    programWrapperStore.unregisterDrawFrameHandler(this._programWrapperId, this._drawFrameHandler);\n    this._setUpProgramWrapper(id);\n  }\n\n  /** @param {string} value */\n  set texturePath(value) {\n    this._setUpTexture(value);\n  }\n\n  /**\n   * Initializes the program variables configuration.\n   *\n   * @protected\n   * @abstract\n   */\n  _setUpProgramVariablesConfig() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * @param {string} [texturePath]\n   * @returns {Promise}\n   * @private\n   */\n  _setUpTexture(texturePath) {\n    this._texturePromise = texturePath\n        ? textureStore.loadTexture(this._gl, texturePath)\n        : Promise.resolve(null);\n\n    // Assign the actual texture.\n    this._texturePromise = this._texturePromise\n        .then(texture => this._texture = texture)\n        .then(() => this._setUpProgramVariablesConfig());\n\n    return this._texturePromise;\n  }\n\n  /**\n   * @param {string} id\n   * @returns {Promise}\n   * @private\n   */\n  _setUpProgramWrapper(id) {\n    this._programWrapperId = id;\n    this._programWrapperPromise = programWrapperStore.getProgramWrapperPromise(id)\n        .then(programWrapper => this._programWrapper = programWrapper);\n    Promise.all([this._programWrapperPromise, this._texturePromise])\n        .then(() => programWrapperStore.registerDrawFrameHandler(id, this._drawFrameHandler));\n    return this._programWrapperPromise;\n  }\n}\n\nexport {ModelController};\n\n/**\n * @typedef {Object} ModelControllerInterface\n * @property {Function.<Promise>} getIsReady\n * @property {Function} reset\n * @property {Function} destroy\n * @property {mat4} localTransform\n * @property {mat4} worldTransform\n * @property {vec3} position\n */\n\n/**\n * @typedef {Object} ModelControllerConfig\n * @property {WebGLRenderingContext} gl\n * @property {Function.<mat4>} getViewMatrix\n * @property {Function.<mat4>} getProjectionMatrix\n * @property {Function.<mat4>} getParentWorldTransform\n * @property {string} programWrapperId\n * @property {string} [texturePath]\n */\n\n/**\n * @typedef {Object} ModelGroupControllerConfig\n * @property {WebGLRenderingContext} gl\n * @property {Function.<mat4>} getViewMatrix\n * @property {Function.<mat4>} getProjectionMatrix\n * @property {Function.<mat4>} getParentWorldTransform\n */\n","import { PersistentAnimationJob } from 'lsl-animatex';\n\n/**\n * This class controls groups of models.\n *\n * This is useful for higher-level controllers that control other models and also transform them.\n *\n * @implements {ModelControllerInterface}\n * @abstract\n */\nclass ModelGroupController extends PersistentAnimationJob {\n  /**\n   * If either of the shader paths are omitted, then this model controller will not create a\n   * rendering program configuration.\n   *\n   * @param {ModelGroupControllerConfig} params\n   */\n  constructor(params) {\n    super();\n\n    // ModelGroupController is an abstract class. It should not be instantiated directly.\n    if (new.target === ModelGroupController) {\n      throw new TypeError('Cannot construct ModelGroupController instances directly');\n    }\n\n    this._gl = params.gl;\n    this._getViewMatrix = params.getViewMatrix;\n    this._getProjectionMatrix = params.getProjectionMatrix;\n    this._getParentWorldTransform = params.getParentWorldTransform || (() => mat4.create());\n    this._localTransform = mat4.create();\n    this._worldTransform = mat4.create();\n    this._modelCtrls = [];\n  }\n\n  destroy() {\n    this.clearModelControllers();\n  }\n\n  reset() {\n    this._triggerOnAllModelControllers('reset');\n  }\n\n  clearModelControllers() {\n    this._triggerOnAllModelControllers('destroy');\n    this._modelCtrls = [];\n  }\n\n  /**\n   * Calls update, updateTransforms, and updateChildren.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  updateSelfAndChildren(currentTime, deltaTime) {\n    this.update(currentTime, deltaTime);\n    this.updateTransforms();\n    this.updateChildren(currentTime, deltaTime);\n  }\n\n  /**\n   * Updates relevant state for the sub-class.\n   *\n   * - This does not recursively update descendant model controllers; that's handled by\n   *   updateChildren.\n   * - This does not update the local or world-coordinate transforms; that's handled by\n   *   updateTransforms.\n   * - This is called before updateLocalTransform and updateChildren.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  update(currentTime, deltaTime) {}\n\n  /**\n   * Updates the world-coordinate and local-coordinate model matrices.\n   *\n   * This is called after update and before updateChildren.\n   *\n   * NOTE: All implementations of this method should update [this._localTransform].\n   */\n  updateTransforms() {\n    mat4.multiply(this._worldTransform, this._getParentWorldTransform(), this._localTransform);\n  }\n\n  /**\n   * Updates relevant state for any children model controllers.\n   *\n   * This is called after update and updateLocalTransform.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  updateChildren(currentTime, deltaTime) {\n    this._triggerOnAllModelControllers('updateSelfAndChildren', [currentTime, deltaTime]);\n  }\n\n  draw() {\n    // We don't call draw on the children model controllers, because they register themselves to be\n    // drawn with their given shader program.\n  }\n\n  /**\n   * @param {ModelControllerInterface} modelCtrl\n   * @returns {Promise.<ModelControllerInterface>}\n   * @protected\n   */\n  _startModelController(modelCtrl) {\n    return modelCtrl.getIsReady().then(() => {\n      modelCtrl.reset();\n      this._modelCtrls.push(modelCtrl);\n      return modelCtrl;\n    });\n  }\n\n  /**\n   * @param {ModelControllerInterface} modelCtrl\n   * @protected\n   */\n  _onModelControllerDestroyed(modelCtrl) {\n    const index = this._modelCtrls.indexOf(modelCtrl);\n    this._modelCtrls.splice(index, 1);\n    modelCtrl.destroy();\n  }\n\n  /**\n   * @param {vec3} targetPosition\n   * @param {number} maxSquaredDistance\n   * @protected\n   */\n  _removeDistantModelControllers(targetPosition, maxSquaredDistance) {\n    this._modelCtrls\n      // Get the ModelControllers that are too far away.\n      .filter(modelCtrl =>\n        vec3.squaredDistance(modelCtrl.position, targetPosition) > maxSquaredDistance)\n      // Remove the far-away ModelControllers.\n      .forEach(modelCtrl => this._onModelControllerDestroyed(modelCtrl));\n  }\n\n  /**\n   * Gets the model transform matrix, in local coordinates.\n   *\n   * @returns {mat4}\n   */\n  get localTransform() {\n    return this._localTransform;\n  }\n\n  /**\n   * Gets the model transform matrix, in world coordinates.\n   *\n   * @returns {mat4}\n   */\n  get worldTransform() {\n    return this._worldTransform;\n  }\n\n  /**\n   * Returns a promise that resolves when this model controller is ready for the app to run.\n   *\n   * @returns {Promise}\n   */\n  getIsReady() {\n    return Promise.all(this._modelCtrls.map(controller => controller.getIsReady()));\n  }\n\n  /**\n   * @param {string} methodName\n   * @param {Array.<*>} [args]\n   * @protected\n   */\n  _triggerOnAllModelControllers(methodName, args = []) {\n    //this._demoObject[methodName](...args);\n    this._modelCtrls.forEach(object => object[methodName](...args));\n  }\n}\n\nexport { ModelGroupController };\n","/**\n * This class defines a top-level model.\n *\n * @abstract\n */\nclass Model {\n  /**\n   * @param {WebGLRenderingContext} gl\n   */\n  constructor(gl) {\n    // Model is an abstract class. It should not be instantiated directly.\n    if (new.target === Model) {\n      throw new TypeError('Cannot construct Model instances directly');\n    }\n\n    this._gl = gl;\n    this.bounds = null;\n\n    this._vertexPositionsBuffer = null;\n    this._vertexNormalsBuffer = null;\n    this._textureCoordinatesBuffer = null;\n\n    this._vertexPositionsConfig = null;\n    this._textureCoordinatesConfig = null;\n    this._vertexNormalsConfig = null;\n\n    // If this is kept null, then gl.drawArrays will be used (with gl.ARRAY_BUFFER) instead of\n    // gl.drawElements (with gl.ELEMENT_ARRAY_BUFFER).\n    this._vertexIndicesBuffer = null;\n  }\n\n  /**\n   * Updates the normals on this shape to either be spherical (point outwards from the center) or\n   * orthogonal to the faces of their triangles.\n   *\n   * @param {boolean} isUsingSphericalNormals\n   * @protected\n   * @abstract\n   */\n  _setNormals(isUsingSphericalNormals) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /** @returns {?AttributeConfig} */\n  get vertexPositionsConfig() {\n    return this._vertexPositionsConfig;\n  }\n\n  /** @returns {?AttributeConfig} */\n  get textureCoordinatesConfig() {\n    return this._textureCoordinatesConfig;\n  }\n\n  /** @returns {?AttributeConfig} */\n  get vertexNormalsConfig() {\n    return this._vertexNormalsConfig;\n  }\n\n  /** @returns {?WebGLBuffer} */\n  get vertexIndicesBuffer() {\n    return this._vertexIndicesBuffer;\n  }\n\n  /**\n   * @returns {number}\n   * @abstract\n   */\n  get elementCount() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * @returns {number}\n   * @abstract\n   */\n  get mode() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n}\n\nexport {Model};\n","import {renderableShapeFactory} from '../../renderable-shapes';\n\nimport {ModelController} from './model-controller';\n\n/**\n * This class defines an extension of the model-controller class that uses a common set of program\n * variables and transformation matrices.\n */\nclass StandardModelController extends ModelController {\n  /**\n   * @param {ModelControllerConfig} params\n   * @param {RenderableShapeConfig} shapeParams\n   */\n  constructor(params, shapeParams) {\n    super(params);\n\n    this.scale = shapeParams.scale || vec3.fromValues(1, 1, 1);\n    this._mvMatrix = mat4.create();\n    this._normalMatrix = mat4.create();\n    this._model = renderableShapeFactory.createModel(this._gl, shapeParams);\n  }\n\n  update(currentTime, deltaTime) {}\n\n  draw() {\n    // Update the model-view matrix.\n    mat4.multiply(this._mvMatrix, this._getViewMatrix(), this._worldTransform);\n\n    // Update the normal matrix.\n    mat4.invert(this._normalMatrix, this._mvMatrix);\n    mat4.transpose(this._normalMatrix, this._normalMatrix);\n\n    // Update the uniform variables.\n    this._programVariablesConfig.uniforms['uPMatrix'] = this._getProjectionMatrix();\n    this._programVariablesConfig.uniforms['uMVMatrix'] = this._mvMatrix;\n    this._programVariablesConfig.uniforms['uNormalMatrix'] = this._normalMatrix;\n\n    // Draw shapes using the current variables configuration.\n    this._programWrapper.draw(this._gl, this._programVariablesConfig, 0, this._model.elementCount);\n  }\n\n  /**\n   * Initializes the program variables configuration.\n   *\n   * @protected\n   */\n  _setUpProgramVariablesConfig() {\n    this._programVariablesConfig = {\n      attributes: {\n        aVertexPosition: this._model.vertexPositionsConfig,\n        aTextureCoord: this._model.textureCoordinatesConfig,\n        aVertexNormal: this._model.vertexNormalsConfig,\n      },\n      uniforms: {\n        uPMatrix: this._getProjectionMatrix(),\n        uMVMatrix: this._mvMatrix,\n        uNormalMatrix: this._normalMatrix,\n        uSampler: this._texture,\n      },\n      mode: this._model.mode,\n      vertexIndices: this._model.vertexIndicesBuffer,\n      elementCount: this._model.elementCount,\n    };\n  }\n}\n\nexport {StandardModelController};\n","export * from './src/program-wrapper';\nexport * from './src/program-wrapper-store';\nexport * from './src/texture-store';\nexport * from './src/uniform-setter';\n","import {bindFramebuffer} from '../../util';\n\nimport {programWrapperStore} from './program-wrapper-store';\n\n/**\n * This class wraps a collection of ProgramWrappers and supports drawing them as a group.\n */\nclass GroupProgramWrapper {\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramWrapperConfig} config\n   */\n  constructor(gl, config) {\n    this.config = config;\n    this._childrenProgramWrappers = [];\n    this._isReady = null;\n\n    this._loadChildren(gl, config).then(() => {\n      if (config.initialize) config.initialize(gl);\n      if (config.isAPostProcessor) {\n        _createChildrenFramebuffersAndTextures(gl, config);\n      }\n    });\n  }\n\n  /** @returns {string} */\n  get programId() {\n    return this.config.id;\n  }\n\n  /** @returns {Promise} */\n  getIsReady() {\n    return this._isReady;\n  }\n\n  /**\n   * Renders shapes using this program.\n   *\n   * @param {WebGLRenderingContext} gl\n   */\n  draw(gl) {\n    if (this.config.webGLStateSetter) this.config.webGLStateSetter(gl);\n    this.config.childrenFramebufferIds.forEach(_clearFramebuffer.bind(this, gl));\n    this.config.childrenProgramsToDraw.forEach(_drawChildProgramWrapper.bind(this, gl));\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramWrapperConfig} config\n   * @private\n   */\n  _loadChildren(gl, config) {\n    this._isReady = Promise.all(\n        config.childrenProgramConfigs.map(config =>\n            programWrapperStore.loadProgramWrapper(gl, config)\n                .then(programWrapper => this._childrenProgramWrappers.push(programWrapper))));\n    return this._isReady;\n  }\n}\n\n/**\n * @param {WebGLRenderingContext} gl\n * @param {string} id\n * @private\n */\nfunction _clearFramebuffer(gl, id) {\n  const framebuffer = programWrapperStore.getFramebuffer(id);\n  bindFramebuffer(gl, framebuffer);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n}\n\n/**\n * @param {WebGLRenderingContext} gl\n * @param {ProgramWrapperConfig} config\n * @private\n */\nfunction _createChildrenFramebuffersAndTextures(gl, config) {\n  config.childrenFramebufferIds.forEach(id =>\n      programWrapperStore.createNewFramebufferAndTexture(gl, id, false));\n}\n\n/**\n * @param {WebGLRenderingContext} gl\n * @param {ChildProgramAndFramebufferIds} childProgramAndFramebufferIds\n * @private\n */\nfunction _drawChildProgramWrapper(gl, childProgramAndFramebufferIds) {\n  const {programId, inputFramebufferIds, outputFramebufferId} = childProgramAndFramebufferIds;\n\n  const framebuffer = outputFramebufferId ?\n      programWrapperStore.getFramebuffer(outputFramebufferId) : null;\n  const programWrapper = programWrapperStore.getProgramWrapper(programId);\n  const programVariablesConfig =\n      programWrapper.config.getProgramVariablesConfig(gl, inputFramebufferIds);\n\n  bindFramebuffer(gl, framebuffer);\n  programWrapper.setProgram(gl);\n  programWrapper.draw(gl, programVariablesConfig);\n}\n\nexport {GroupProgramWrapper};\n","import {createFramebuffer, createRenderBuffer, createTextureForRendering} from '../../util';\n\nimport {GroupProgramWrapper} from './group-program-wrapper';\nimport {ProgramWrapper} from './program-wrapper';\n\n/**\n * This class loads, compiles, and stores WebGL rendering programs.\n *\n * Also, this stores draw-frame handlers for a given program. This makes it easy for a top-level\n * controller to group together draw calls for a given program and therefore minimize program\n * switches.\n *\n * Also, this distinguishes between rendering programs that are used for rendering individual models\n * and post-processing programs that are used for manipulating the entire frame after all the models\n * have rendered.\n *\n * This also allows for grouping programs, which consist of multiple child programs that are all\n * rendered in sequence for a related purpose.\n */\nclass ProgramWrapperStore {\n  constructor() {\n    this._modelProgramCache = {};\n    this._sortedModelPrograms = [];\n    this._postProcessingProgramCache = {};\n    this._sortedPostProcessingPrograms = [];\n    this._frambuffers = {};\n    this._textures = {};\n    this._renderBuffers = {};\n  }\n\n  /**\n   * Loads and caches a program wrapper using the given configuration.\n   *\n   * This method is idempotent; a given program will only be cached once.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramWrapperConfig} params\n   * @returns {Promise.<ProgramWrapper|GroupProgramWrapper, Error>}\n   * @private\n   */\n  loadProgramWrapper(gl, params) {\n    let cache;\n    let sortedList;\n    if (params.isAPostProcessor) {\n      cache = this._postProcessingProgramCache;\n      sortedList = this._sortedPostProcessingPrograms;\n    } else {\n      cache = this._modelProgramCache;\n      sortedList = this._sortedModelPrograms;\n    }\n    let cacheInfo = cache[params.id];\n\n    // Cache the program if it has not been previously registered.\n    if (!cacheInfo) {\n      cacheInfo = {};\n\n      cacheInfo.params = params;\n      cacheInfo.renderPriority = params.renderPriority;\n\n      let programWrapper = params.childrenProgramConfigs ?\n          new GroupProgramWrapper(gl, params) : new ProgramWrapper(gl, params);\n\n      cacheInfo.programWrapper = programWrapper;\n      cacheInfo.promise = programWrapper.getIsReady().then(() => cacheInfo.programWrapper);\n\n      if (params.isAPostProcessor) {\n        // As soon as we know we'll use a post-processing program, make sure we create the default\n        // framebuffer/texture for rendering models into.\n        if (!this.modelsFramebuffer) {\n          this.createNewFramebufferAndTexture(gl, MODELS_FRAMEBUFFER_ID, true);\n        }\n      } else {\n        // Post-processing programs are not used for rendering individual models.\n        cacheInfo.drawFrameHandlers = new Set();\n      }\n\n      // Store the program cache info in both a map and a list that is sorted by render priority.\n      cache[params.id] = cacheInfo;\n      sortedList.push(cacheInfo);\n      sortedList.sort(_compareProgramCacheInfo);\n    }\n\n    return cacheInfo.promise;\n  }\n\n  /**\n   * Registers the given draw-frame event handler for the given program.\n   *\n   * This method is idempotent; draw-frame handlers are stored in a set, so duplicate additions will\n   * overwrite previous additions.\n   *\n   * @param {string} id\n   * @param {Function} drawFrameHandler\n   */\n  registerDrawFrameHandler(id, drawFrameHandler) {\n    const programCacheInfo = this._modelProgramCache[id];\n\n    if (!programCacheInfo) {\n      if (this._postProcessingProgramCache[id]) {\n        // The program is not set up for rendering individual models.\n        throw new Error(`Cannot register a draw-frame handler for a program that is not set up for \n                         rendering individual models registered: ${id}`);\n      } else {\n        // The program has not been registered.\n        throw new Error(`Cannot register a draw-frame handler for a program that has not yet been \n                         registered: ${id}`);\n      }\n    }\n\n    // Store the draw-frame handler.\n    programCacheInfo.drawFrameHandlers.add(drawFrameHandler);\n  }\n\n  /**\n   * WARNING: This will remove the program from the store even if there are still other components\n   * depending on this program or its draw-frame handlers.\n   *\n   * @param {string} id\n   */\n  deleteProgramWrapper(id) {\n    // Determine which collections we're removing the program from.\n    let sortedPrograms;\n    let programCache;\n    if (this._modelProgramCache[id]) {\n      sortedPrograms = this._sortedModelPrograms;\n      programCache = this._modelProgramCache;\n    } else {\n      sortedPrograms = this._sortedPostProcessingPrograms;\n      programCache = this._postProcessingProgramCache;\n    }\n    const programCacheInfo = programCache[id];\n\n    // Remove the program.\n    sortedPrograms.splice(sortedPrograms.indexOf(programCacheInfo), 1);\n    delete programCache[id];\n  }\n\n  // TODO: Don't forget to unregister draw-frame handlers when destroying models (asteroids, UFOs,\n  // etc.)\n  /**\n   * @param {string} id\n   * @param {Function} drawFrameHandler\n   */\n  unregisterDrawFrameHandler(id, drawFrameHandler) {\n    this._modelProgramCache[id].drawFrameHandlers.delete(drawFrameHandler);\n  }\n\n  /**\n   * @param {string} id\n   * @returns {Promise}\n   * @throws If there is no program registered with the given ID.\n   */\n  getProgramWrapperPromise(id) {\n    const cacheInfo = this._modelProgramCache[id] || this._postProcessingProgramCache[id];\n    return cacheInfo.promise;\n  }\n\n  /**\n   * @param {string} id\n   * @returns {ProgramWrapper}\n   * @throws If there is no program registered with the given ID.\n   */\n  getProgramWrapper(id) {\n    const cacheInfo = this._modelProgramCache[id] || this._postProcessingProgramCache[id];\n    return cacheInfo.programWrapper;\n  }\n\n  /**\n   * Calls the given callback once for each registered per-model program wrapper.\n   *\n   * The callback is passed two arguments: the program wrapper and the registered draw-frame\n   * handlers.\n   *\n   * @param {Function} callback\n   */\n  forEachModelProgram(callback) {\n    this._sortedModelPrograms.forEach(programCacheInfo =>\n        callback(programCacheInfo.programWrapper, programCacheInfo.drawFrameHandlers));\n  }\n\n  /**\n   * Calls the given callback once for each registered post-processing program wrapper.\n   *\n   * @param {Function} callback\n   */\n  forEachPostProcessingProgram(callback) {\n    this._sortedPostProcessingPrograms.forEach(\n        programCacheInfo => callback(programCacheInfo.programWrapper));\n  }\n\n  /** @returns {boolean} */\n  get isUsingPostProcessingPrograms() {\n    return this._sortedPostProcessingPrograms.length > 0;\n  }\n\n  /**\n   * Creates and stores a framebuffer with a texture.\n   *\n   * Both the framebuffer and texture can be accessed later using the given ID.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @param {string} id\n   * @param {boolean} [shouldStoreDepthInfo=false]\n   */\n  createNewFramebufferAndTexture(gl, id, shouldStoreDepthInfo=false) {\n    let renderBuffer;\n    if (shouldStoreDepthInfo) {\n      renderBuffer = createRenderBuffer(gl);\n      this._renderBuffers[id] = renderBuffer;\n    }\n\n    const texture = createTextureForRendering(gl);\n    this._textures[id] = texture;\n\n    const framebuffer = createFramebuffer(gl, texture, renderBuffer);\n    this._frambuffers[id] = framebuffer;\n  }\n\n  /**\n   * @param {string} id\n   * @returns {?WebGLFramebuffer}\n   */\n  getFramebuffer(id) {\n    return this._frambuffers[id];\n  }\n\n  /**\n   * @param {string} id\n   * @returns {?WebGLTexture}\n   */\n  getTexture(id) {\n    return this._textures[id];\n  }\n\n  /**\n   * If we are using a post-processing program, then this is the default framebuffer for rendering\n   * models into.\n   *\n   * @returns {?WebGLFramebuffer}\n   */\n  get modelsFramebuffer() {\n    return this._frambuffers[MODELS_FRAMEBUFFER_ID];\n  }\n\n  /**\n   * If we are using a post-processing program, then this is the default texture for rendering\n   * models into.\n   *\n   * @returns {?WebGLTexture}\n   */\n  get modelsTexture() {\n    return this._textures[MODELS_FRAMEBUFFER_ID];\n  }\n\n  /**\n   * If we are using a post-processing program, then this is the default depth render buffer for\n   * rendering models.\n   *\n   * @returns {?WebGLRenderBuffer}\n   */\n  get modelsRenderBuffer() {\n    return this._renderBuffers[MODELS_FRAMEBUFFER_ID];\n  }\n}\n\nfunction _compareProgramCacheInfo(a, b) {\n  return a.renderPriority - b.renderPriority;\n}\n\nexport const MODELS_FRAMEBUFFER_ID = 'models';\n\nexport const programWrapperStore = new ProgramWrapperStore();\n\n/**\n * @typedef {Object} ProgramCacheInfo\n * @property {ProgramWrapperConfig} params\n * @property {ProgramWrapper|GroupProgramWrapper} [programWrapper]\n * @property {Set.<Function>} [drawFrameHandlers]\n * @property {Array.<ProgramWrapper>} [childrenProgramWrappers]\n */\n","import {\n  isInDevMode,\n  getViewportHeight,\n  getViewportWidth,\n  loadProgram,\n} from '../../util';\n\nimport {UniformSetter} from './uniform-setter';\n\n/**\n * This class wraps a native WebGLProgram object and provides convenience methods for:\n * - setting the wrapped program for use on the WebGL rendering context,\n * - enabling the attribute variables for the program,\n * - setting the attribute and uniform variables for the program,\n * - drawing shapes with the program and its current configuration.\n */\nclass ProgramWrapper {\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramWrapperConfig} config\n   */\n  constructor(gl, config) {\n    this.config = config;\n    this._program = null;\n    this._uniformSetters = null;\n    this._attributeEnablers = null;\n    this._attributeSetters = null;\n\n    // This is used for assigning different textures to different texture units.\n    this.baseTextureUnitIndex = 0;\n\n    this._buildWebGLProgramPromise = this._buildWebGLProgram(gl, config);\n\n    // TODO: Freeze this object after initializing\n  }\n\n  /** @returns {string} */\n  get programId() {\n    return this.config.id;\n  }\n\n  /** @returns {Promise} */\n  getIsReady() {\n    return this._buildWebGLProgramPromise;\n  }\n\n  /**\n   * Sets this program to use for rendering on the given WebGL context.\n   *\n   * This also enables all relevant attribute variables for this program.\n   *\n   * @param {WebGLRenderingContext} gl\n   */\n  setProgram(gl) {\n    gl.useProgram(this._program);\n    this._enableAttributes();\n    if (this.config.webGLStateSetter) this.config.webGLStateSetter(gl);\n  }\n\n  /**\n   * Renders shapes using this program with the given variables configuration.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramVariablesConfig} [programVariablesConfig]\n   * @param {number} [offset=0] Offset into the element array buffer to render from.\n   * @param {number} [count=programVariablesConfig.elementCount] The number of elements to render.\n   */\n  draw(gl, programVariablesConfig, offset, count) {\n    programVariablesConfig = programVariablesConfig || this.config.getProgramVariablesConfig(gl);\n    this._setVariables(gl, programVariablesConfig);\n    this._draw(gl, programVariablesConfig, offset, count);\n  }\n\n  /**\n   * Sets up this WebGL rendering program to draw shapes with the given program variables\n   * configuration and the attribute/uniform setters that have been set up for this program.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramVariablesConfig} programVariablesConfig\n   * @private\n   */\n  _setVariables(gl, programVariablesConfig) {\n    this._setAttributes(programVariablesConfig.attributes);\n    this._setUniforms(programVariablesConfig.uniforms);\n\n    // Check whether we are set up to draw using gl.drawElements rather than gl.drawArrays.\n    if (programVariablesConfig.vertexIndices) {\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, programVariablesConfig.vertexIndices);\n    }\n  }\n\n  /**\n   * Renders shapes according to this program's current configuration.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramVariablesConfig} programVariablesConfig\n   * @param {number} [offset=0] Offset into the element array buffer to render from.\n   * @param {number} [count=programVariablesConfig.elementCount] The number of elements to render.\n   * @private\n   */\n  _draw(gl, programVariablesConfig, offset, count) {\n    offset = typeof offset === 'number' ? offset : 0;\n    count = typeof count === 'number' ? count : programVariablesConfig.elementCount;\n\n    if (isInDevMode) {\n      this._checkThatGivenVariablesMatchProgram(programVariablesConfig);\n    }\n\n    // Check whether we are set up to draw using gl.drawElements or gl.drawArrays.\n    if (programVariablesConfig.vertexIndices) {\n      gl.drawElements(programVariablesConfig.mode, count, gl.UNSIGNED_SHORT, offset);\n    } else {\n      gl.drawArrays(programVariablesConfig.mode, offset, count);\n    }\n  }\n\n  /**\n   * Checks whether the attribute and uniform variables specified in the given config match those\n   * defined in this program.\n   *\n   * @param {ProgramVariablesConfig} programVariablesConfig\n   * @private\n   */\n  _checkThatGivenVariablesMatchProgram(programVariablesConfig) {\n    if (Object.keys(programVariablesConfig.attributes).length !==\n            Object.keys(this._attributeSetters).length ||\n        Object.keys(programVariablesConfig.uniforms).length !==\n            Object.keys(this._uniformSetters).length) {\n      console.warn('The attribute/uniform variables in the ProgramVariablesConfig do not match ' +\n          'those specified in the shaders.', programVariablesConfig, this);\n    }\n  }\n\n  /**\n   * Sets the uniform values for this program.\n   *\n   * Specifically, this calls `gl.uniform<...>(location, value)` for each\n   * variable-name/variable-value key-value pair in the given map. As part of the setup process, the\n   * uniform variable locations are stored in a map from their corresponding variable names. So only\n   * the variable names are needed in order to call this function at render time.\n   *\n   * @param {Object.<String, UniformData>} uniformValues\n   */\n  _setUniforms(uniformValues) {\n    Object.keys(uniformValues).forEach(uniformName => {\n      const uniformSetter = this._uniformSetters[uniformName];\n      const uniformValue = uniformValues[uniformName];\n      uniformSetter.setUniform(uniformValue);\n    });\n  }\n\n  /**\n   * Sets the attribute buffers for this program.\n   *\n   * Specifically, this calls `gl.bindBuffer(...)` and `gl.vertexAttribPointer(...)` for each\n   * variable-name/variable-value pair in the given attribute-info map. As part of the setup\n   * process, the uniform variable locations are stored in a map from their corresponding variable\n   * names. So only the variable names are needed in order to call this function at render time.\n   *\n   * @param {Object.<String, AttributeConfig>} attributeConfigs\n   */\n  _setAttributes(attributeConfigs) {\n    Object.keys(attributeConfigs).forEach(attributeName => {\n      const attributeSetter = this._attributeSetters[attributeName];\n      const attributeConfig = attributeConfigs[attributeName];\n      attributeSetter(attributeConfig);\n    });\n  }\n\n  /**\n   * @private\n   */\n  _enableAttributes() {\n    this._attributeEnablers.forEach(attributeEnabler => attributeEnabler());\n  }\n\n  /**\n   * Creates uniform setters for this program and saves them in the _uniformSetters property.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @private\n   */\n  _createUniformSetters(gl) {\n    const uniformCount = gl.getProgramParameter(this._program, gl.ACTIVE_UNIFORMS);\n\n    this._uniformSetters = {};\n\n    for (let index = 0; index < uniformCount; index++) {\n      const uniformInfo = gl.getActiveUniform(this._program, index);\n      let uniformName = uniformInfo.name;\n\n      // Remove any array suffix.\n      // TODO: Is this removal redundant with the isArray check below??\n      if (uniformName.substr(-3) === '[0]') {\n        uniformName = uniformName.substr(0, uniformName.length - 3);\n      }\n\n      this._uniformSetters[uniformName] = new UniformSetter(gl, this._program, uniformInfo, this);\n    }\n  }\n\n  /**\n   * Creates attribute enablers and setters for this program and saves them in the\n   * _attributeEnablers and _attributeSetters properties, respectively.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @private\n   */\n  _createAttributeEnablersAndSetters(gl) {\n    this._attributeEnablers = [];\n    this._attributeSetters = {};\n\n    const attributeCount = gl.getProgramParameter(this._program, gl.ACTIVE_ATTRIBUTES);\n\n    for (let index = 0; index < attributeCount; index++) {\n      const attributeName = gl.getActiveAttrib(this._program, index).name;\n      const location = gl.getAttribLocation(this._program, attributeName);\n\n      this._attributeEnablers.push(ProgramWrapper._createAttributeEnabler(gl, location));\n      this._attributeSetters[attributeName] = ProgramWrapper._createAttributeSetter(gl, location);\n    }\n  }\n\n  /**\n   * Loads the shader source code from the given URLs, compiles the shader source code, and creates\n   * a program from the resulting shaders.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramWrapperConfig} config\n   * @returns {Promise}\n   * @private\n   */\n  _buildWebGLProgram(gl, config) {\n    return loadProgram(gl, config.vertexShaderPath, config.fragmentShaderPath)\n        .then(webGLProgram => {\n          this._program = webGLProgram;\n          this._createUniformSetters(gl);\n          this._createAttributeEnablersAndSetters(gl);\n          if (config.initialize) config.initialize(gl);\n        })\n        .then(() => console.info(`Program loaded: ${config.id}`));\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {number} location\n   * @returns {Function}\n   * @private\n   */\n  static _createAttributeEnabler(gl, location) {\n    return () => gl.enableVertexAttribArray(location);\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {number} location\n   * @returns {Function.<AttributeConfig>}\n   * @private\n   */\n  static _createAttributeSetter(gl, location) {\n    return attributeConfig => {\n      gl.bindBuffer(gl.ARRAY_BUFFER, attributeConfig.buffer);\n      gl.vertexAttribPointer(\n          location,\n          attributeConfig.size,\n          typeof attributeConfig.type !== 'undefined' ? attributeConfig.type : gl.FLOAT,\n          typeof attributeConfig.normalized !== 'undefined' ? attributeConfig.normalized : false,\n          typeof attributeConfig.stride !== 'undefined' ? attributeConfig.stride : 0,\n          typeof attributeConfig.offset !== 'undefined' ? attributeConfig.offset : 0);\n    };\n  }\n}\n\nexport {ProgramWrapper};\n\n/**\n * @typedef {Object} ProgramWrapperConfig\n * @property {string} id\n * @property {Function} [initialize] A method for one-time initialization of the GL state for this\n * program.\n * @property {Function} [webGLStateSetter] A method for setting up the GL state for this program\n * wrapper in preparation for the current draw call.\n * @property {number} [renderPriority] Programs with lower priority will render first. This does not\n * need to be present for ProgramWrappers that are children of a GroupProgramWrapper.\n * @property {string} [vertexShaderPath] This will be present on configs for non-group\n * ProgramWrappers.\n * @property {string} [fragmentShaderPath] This will be present on configs for non-group\n * ProgramWrappers.\n * @property {boolean} [isAPostProcessor=false] A post-processing program is used for manipulating\n * the entire frame after all the models have rendered.\n * @property {boolean} [childrenProgramConfigs] A grouping program consists of multiple child\n * programs that are all rendered in sequence for a related purpose.\n * @property {Array.<ChildProgramAndFramebufferIds>} [childrenProgramsToDraw] The IDs for the\n * sequence of children ProgramWrappers to draw, as well as the IDs for the input and output\n * framebuffers/textures to use. This will be present on configs for GroupProgramWrappers.\n * @property {Array.<string>} [childrenFramebufferIds] The IDs of all the framebuffers/textures that\n * will need to be created for this program. This will be present on configs for\n * GroupProgramWrappers.\n * @property {Function} [getProgramVariablesConfig] A method for getting the variables needed for\n * drawing this program. This will be present on configs of programs that are children of a\n * GroupProgramWrapper.\n */\n\n/**\n * @typedef {Object} ChildProgramAndFramebufferIds\n * @property {string} programId The ID of the program to draw with.\n * @property {Array.<string>} inputFramebufferIds The IDs of framebuffers whose textures will be\n * used as inputs for this program's shaders.\n * @property {string} outputFramebufferId Provide null in order to render to the canvas.\n */\n\n/**\n * @typedef {Object} ProgramVariablesConfig\n * @property {Object.<String, AttributeConfig>} attributes A mapping from attribute names to\n * attribute info.\n * @property {Object.<String, UniformData>} uniforms A mapping from uniform names to uniform info.\n * @property {number} mode Specifies the type of primitives to render; one of:\n *   - gl.POINTS,\n *   - gl.LINES,\n *   - gl.LINE_STRIP,\n *   - gl.LINE_LOOP,\n *   - gl.TRIANGLES,\n *   - gl.TRIANGLE_STRIP,\n *   - gl.TRIANGLE_FAN.\n * @property {WebGLBuffer} [vertexIndices] The indices to use for retrieving the vertex info from\n * each of the other attribute variable buffers. If this property is present, then the rendering\n * pipeline will be set up to use gl.drawElements (with gl.ELEMENT_ARRAY_BUFFER) instead of\n * gl.drawArrays.\n * @property {number} elementCount The number of elements/vertices to render for this variables\n * configuration.\n */\n\n/**\n * @typedef {Object} AttributeConfig\n * @property {WebGLBuffer} buffer The buffer containing this attribute's data.\n * @property {number} index Index of target attribute in the buffer bound to gl.ARRAY_BUFFER.\n * @property {number} size The number of components per attribute. Must be 1,2,3,or 4.\n * @property {number} type Specifies the data type of each component in the array. Use either\n * gl.FLOAT or gl.FIXED.\n * @property {boolean} normalized If true, then values will be normalized to a range of -1 or 0 to\n * 1.\n * @property {number} stride Specifies the offset in bytes between the beginning of consecutive\n * vertex attributes. Default value is 0, maximum is 255. Must be a multiple of type.\n * @property {number} offset Specifies an offset in bytes of the first component of the first\n * vertex attribute in the array. Default is 0 which means that vertex attributes are tightly\n * packed. Must be a multiple of type.\n */\n\n/** @typedef {*} UniformData */\n","import {loadImageSrc} from '../../util';\n\n/**\n * This class loads, sets up, and stores WebGL texture objects.\n *\n * NOTE: Only textures whose side lengths are powers of two are supported.\n */\nclass TextureStore {\n  constructor() {\n    this.textureCache = {};\n  }\n\n  /**\n   * @param {string} texturePath\n   * @returns {WebGLTexture}\n   */\n  getTexture(texturePath) {\n    return this.textureCache[texturePath].texture;\n  }\n\n  /**\n   * Loads the texture image at the given path, creates a texture object from it, caches the\n   * texture, and returns a promise for the texture.\n   *\n   * This method is idempotent; a given texture will only be loaded once.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @param {string} texturePath\n   * @returns {Promise.<WebGLTexture, Error>}\n   */\n  loadTexture(gl, texturePath) {\n    let textureCacheInfo = this.textureCache[texturePath];\n\n    // Load, create, and cache the texture if it has not been previously registered.\n    if (!textureCacheInfo) {\n      textureCacheInfo = {\n        texturePromise: null,\n        texture: null,\n        image: new Image()\n      };\n      this.textureCache[texturePath] = textureCacheInfo;\n      textureCacheInfo.texturePromise = loadImageSrc(textureCacheInfo.image, texturePath)\n          .then(_ => this._createTexture(gl, textureCacheInfo));\n    }\n\n    return textureCacheInfo.texturePromise;\n  }\n\n  // TODO: Make this more general/configurable by creating a new TextureConfig typedef with most of\n  // the gl.xxx params included below (like the AttributeConfig typedef}, passing a textureConfig in\n  // the register method, and saving it on the textureCacheInfo object.\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {TextureCacheInfo} textureCacheInfo\n   * @returns {WebGLTexture}\n   * @private\n   */\n  _createTexture(gl, textureCacheInfo) {\n    console.info(`Texture loaded: ${textureCacheInfo.image.src}`);\n\n    textureCacheInfo.texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, textureCacheInfo.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureCacheInfo.image);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);\n    gl.generateMipmap(gl.TEXTURE_2D);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n\n    return textureCacheInfo.texture;\n  }\n\n  /**\n   * WARNING: This will remove the texture from the store even if there are still other components\n   * depending on this texture.\n   *\n   * @param {string} texturePath\n   */\n  deleteTexture(texturePath) {\n    delete this.textureCache[texturePath];\n  }\n}\n\nexport const textureStore = new TextureStore();\n\n/**\n * @typedef {Object} TextureCacheInfo\n * @property {Promise.<WebGLTexture, Error>} texturePromise\n * @property {WebGLTexture} [texture]\n * @property {HTMLImageElement} [image]\n */\n","/**\n * This class stores a function for setting a value to a WebGL uniform variable.\n *\n * This is intended for use as a helper for the ProgramWrapper class.\n */\n// TODO: Write tests for this class.\nclass UniformSetter {\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {WebGLProgram} program\n   * @param {WebGLActiveInfo} uniformInfo\n   * @param {ProgramWrapper} programWrapper\n   * @throws If the given uniformInfo specifies an unexpected uniform-value type.\n   */\n  constructor(gl, program, uniformInfo, programWrapper) {\n    this._location = gl.getUniformLocation(program, uniformInfo.name);\n    this._setter = this._getSetter(gl, uniformInfo, programWrapper);\n\n    // TODO: Freeze this object after initializing\n  }\n\n  /**\n   * @param {UniformData} uniformValue\n   */\n  setUniform(uniformValue) {\n    uniformValue = uniformValue instanceof Array ? new Float32Array(uniformValue) : uniformValue;\n    this._setter(uniformValue);\n  }\n\n  /** @returns {WebGLUniformLocation} */\n  get location() {\n    return this._location;\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {WebGLActiveInfo} uniformInfo\n   * @param {ProgramWrapper} programWrapper\n   * @returns {Function.<*>}\n   * @throws If the given uniformInfo specifies an unexpected uniform-value type.\n   * @private\n   */\n  _getSetter(gl, uniformInfo, programWrapper) {\n    const isArray = uniformInfo.size > 1 && uniformInfo.name.substr(-3) === '[0]';\n    const setterMap = isArray ? {\n      [gl.FLOAT]: value => gl.uniform1fv(this._location, value),\n      [gl.INT]: value => gl.uniform1iv(this._location, value),\n      [gl.SAMPLER_2D]: this._getUniformTextureArraySetter(gl, gl.TEXTURE_2D, uniformInfo.size,\n          programWrapper),\n      [gl.SAMPLER_CUBE]: this._getUniformTextureArraySetter(gl, gl.TEXTURE_CUBE_MAP,\n          uniformInfo.size, programWrapper),\n    } : {\n      [gl.FLOAT]: value => gl.uniform1f(this._location, value),\n      [gl.FLOAT_VEC2]: value => gl.uniform2fv(this._location, value),\n      [gl.FLOAT_VEC3]: value => gl.uniform3fv(this._location, value),\n      [gl.FLOAT_VEC4]: value => gl.uniform4fv(this._location, value),\n      [gl.INT]: value => gl.uniform1i(this._location, value),\n      [gl.INT_VEC2]: value => gl.uniform2iv(this._location, value),\n      [gl.INT_VEC3]: value => gl.uniform3iv(this._location, value),\n      [gl.INT_VEC4]: value => gl.uniform4iv(this._location, value),\n      [gl.BOOL]: value => gl.uniform1i(this._location, value),\n      [gl.BOOL_VEC2]: value => gl.uniform2iv(this._location, value),\n      [gl.BOOL_VEC3]: value => gl.uniform3iv(this._location, value),\n      [gl.BOOL_VEC4]: value => gl.uniform4iv(this._location, value),\n      [gl.FLOAT_MAT2]: value => gl.uniformMatrix2fv(this._location, false, value),\n      [gl.FLOAT_MAT3]: value => gl.uniformMatrix3fv(this._location, false, value),\n      [gl.FLOAT_MAT4]: value => gl.uniformMatrix4fv(this._location, false, value),\n      [gl.SAMPLER_2D]: this._getUniformTextureSetter(gl, gl.TEXTURE_2D,\n          programWrapper.baseTextureUnitIndex++),\n      [gl.SAMPLER_CUBE]: this._getUniformTextureSetter(gl, gl.TEXTURE_CUBE_MAP,\n          programWrapper.baseTextureUnitIndex++),\n    };\n    return setterMap[uniformInfo.type];\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {number} target An enum describing the type of this buffer; one of:\n   *   - gl.TEXTURE_2D,\n   *   - gl.TEXTURE_CUBE_MAP.\n   * @param {number} uniformSize\n   * @param {ProgramWrapper} programWrapper\n   * @returns {Function.<*>}\n   * @private\n   */\n  _getUniformTextureArraySetter(gl, target, uniformSize, programWrapper) {\n    const textureUnitIndices =\n        Array.from({length: uniformSize}, _ => programWrapper.baseTextureUnitIndex++);\n\n    return textures => {\n      textures.forEach((texture, index) => {\n        gl.activeTexture(gl.TEXTURE0 + textureUnitIndices[index]);\n        gl.bindTexture(target, texture);\n      });\n      gl.uniform1iv(this._location, textureUnitIndices);\n    };\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {number} target An enum describing the type of this buffer; one of:\n   *   - gl.TEXTURE_2D,\n   *   - gl.TEXTURE_CUBE_MAP.\n   * @param {number} textureUnitIndex\n   * @returns {Function.<*>}\n   * @private\n   */\n  _getUniformTextureSetter(gl, target, textureUnitIndex) {\n    return texture => {\n      gl.activeTexture(gl.TEXTURE0 + textureUnitIndex);\n      gl.bindTexture(target, texture);\n      gl.uniform1i(this._location, textureUnitIndex);\n    };\n  }\n}\n\nexport {UniformSetter};\n","import {renderableShapeFactory} from './src/renderable-shape-factory';\n\nimport {capsuleRenderableShapeFactory} from './src/shape-configs/capsule-renderable-shape';\nimport {cubeRenderableShapeFactory} from './src/shape-configs/cube-renderable-shape';\nimport {icosahedronRenderableShapeFactory} from './src/shape-configs/icosahedron-renderable-shape';\nimport {icosphereRenderableShapeFactory} from './src/shape-configs/icosphere-renderable-shape';\nimport {latLongSphereRenderableShapeFactory} from './src/shape-configs/lat-long-sphere-renderable-shape';\nimport {tetrahedronRenderableShapeFactory} from './src/shape-configs/tetrahedron-renderable-shape';\n\n[\n  capsuleRenderableShapeFactory,\n  cubeRenderableShapeFactory,\n  icosahedronRenderableShapeFactory,\n  icosphereRenderableShapeFactory,\n  latLongSphereRenderableShapeFactory,\n  tetrahedronRenderableShapeFactory\n].forEach(renderableShapeFactory.registerRenderableShapeFactory);\n\nexport * from './src/shape-configs/capsule-renderable-shape';\nexport * from './src/shape-configs/cube-renderable-shape';\nexport * from './src/shape-configs/icosahedron-renderable-shape';\nexport * from './src/shape-configs/icosphere-renderable-shape';\nexport * from './src/shape-configs/lat-long-sphere-renderable-shape';\nexport * from './src/shape-configs/tetrahedron-renderable-shape';\n\nexport * from './src/renderable-shape-factory';\nexport * from './src/renderable-shape-store';\n","import {DefaultModel} from '../../models';\nimport {renderableShapeStore} from './renderable-shape-store';\n\n/**\n * This module defines a factory for DefaultRigidModal instances that are based on the various\n * pre-defined renderable shapes in this directory.\n */\n\nconst renderableShapeFactory = {\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {RenderableShapeConfig} params\n   * @returns {DefaultModel}\n   */\n  createModel: (gl, params) => {\n    const shapeConfig = renderableShapeFactory.getRenderableShape(params);\n    return new DefaultModel(gl, shapeConfig);\n  },\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {RenderableShape}\n   */\n  getRenderableShape: params => {\n    params.isUsingSphericalNormals = params.isUsingSphericalNormals || false;\n    params.divisionsCount = typeof params.divisionsCount === 'number' ? params.divisionsCount : 0;\n\n    let shapeConfig = renderableShapeStore.getShape(params);\n    if (!shapeConfig) {\n      shapeConfig = _shapeIdsToRenderableShapeFactories[params.shapeId].getRenderableShape(params);\n      _updateTextureCoordinatesSpan(shapeConfig, params.textureSpan);\n      renderableShapeStore.registerShape(shapeConfig, params);\n    }\n    return shapeConfig;\n  },\n\n  /**\n   * @param {RenderableShapeFactory} shapeConfigFactory\n   */\n  registerRenderableShapeFactory: shapeConfigFactory => {\n    _shapeIdsToRenderableShapeFactories[shapeConfigFactory.shapeId] = shapeConfigFactory;\n    renderableShapeStore.registerRenderableShapeFactory(shapeConfigFactory);\n  }\n};\n\nconst _shapeIdsToRenderableShapeFactories = {};\n\n/**\n * @param {RenderableShape} shapeConfig\n * @param {TextureSpan} textureSpan\n * @private\n */\nfunction _updateTextureCoordinatesSpan(shapeConfig, textureSpan) {\n  if (!textureSpan) return;\n\n  const minX = textureSpan.minX;\n  const minY = textureSpan.minY;\n  const rangeX = textureSpan.maxX - textureSpan.minX;\n  const rangeY = textureSpan.maxY - textureSpan.minY;\n\n  const textureCoordinates = shapeConfig.textureCoordinates.slice();\n  shapeConfig.textureCoordinates = textureCoordinates;\n\n  for (let i = 0, count = textureCoordinates.length; i < count; i += 2) {\n    textureCoordinates[i] = minX + rangeX * textureCoordinates[i];\n    textureCoordinates[i + 1] = minY + rangeY * textureCoordinates[i + 1];\n  }\n}\n\nexport {renderableShapeFactory};\n\n/**\n * @typedef {Object} RenderableShapeFactory\n * @property {string} shapeId\n * @property {Function.<RenderableShape>} getRenderableShape\n * @property {Function.<String>} getCacheId\n */\n\n/**\n * @typedef {Object} RenderableShape\n * @property {Array.<Number>} vertexPositions\n * @property {Array.<Number>} vertexNormals\n * @property {Array.<Number>} textureCoordinates\n * @property {Array.<Number>} [vertexIndices]\n * @property {number} elementCount\n */\n\n/**\n * @typedef {Object} TextureSpan\n * @property {number} minX\n * @property {number} minY\n * @property {number} maxX\n * @property {number} maxY\n */\n\n/**\n * @typedef {Object} RenderableShapeConfig\n * @property {string} shapeId The ID of the type of renderable shape.\n * @property {boolean} [isUsingSphericalNormals=false] Whether light reflections should show sharp\n * edges.\n * @property {TextureSpan} [textureSpan] For indicating how much a texture should repeat in both axes.\n * A range of 0-0.5 should show half the texture. A range of 0-2 would show the texture twice. The\n * default is 0-1 in both directions.\n * @property {vec3} [scale]\n */\n\n/**\n * @typedef {RenderableShapeConfig} SphericalRenderableShapeParams\n * @property {number} divisionsCount How many times to sub-divide the sphere.\n */\n","/**\n * This class caches renderable shape data.\n */\nclass RenderableShapeStore {\n  constructor() {\n    this._shapeCache = new Map();\n  }\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {RenderableShape}\n   */\n  getShape(params) {\n    const key = _shapeIdsToCacheKeyCalculators[params.shapeId](params);\n    return this._shapeCache.get(key);\n  }\n\n  /**\n   * Caches the given shape info.\n   *\n   * @param {RenderableShape} shapeConfig\n   * @param {RenderableShapeConfig} params\n   */\n  registerShape(shapeConfig, params) {\n    const key = _shapeIdsToCacheKeyCalculators[params.shapeId](params);\n    this._shapeCache.set(key, shapeConfig);\n  }\n\n  /**\n   * @param {RenderableShapeFactory} shapeConfigFactory\n   */\n  registerRenderableShapeFactory(shapeConfigFactory) {\n    _shapeIdsToCacheKeyCalculators[shapeConfigFactory.shapeId] = shapeConfigFactory.getCacheId;\n  }\n\n  // TODO: Add support for un-registering shapes.\n}\n\n/**\n * @param {RenderableShapeConfig} params\n * @returns {string}\n */\nfunction getCacheKey(params) {\n  const textureSpanStr = params.textureSpan\n      ? `:${params.textureSpan.minX},${params.textureSpan.minY},${params.textureSpan.maxX},` +\n  `${params.textureSpan.maxY}`\n      : '';\n\n  return `${params.shapeId}:${params.isUsingSphericalNormals}${textureSpanStr}`;\n}\n\nconst _shapeIdsToCacheKeyCalculators = {};\n\nconst renderableShapeStore = new RenderableShapeStore();\nexport {renderableShapeStore, getCacheKey};\n","/**\n * This module defines a configuration factory for a capsule shape.\n *\n * The shape is centered around the origin with the poles aligned with the z-axis.\n */\n\nimport {\n  calculateSphericalSection,\n  calculateOrthogonalVertexNormals,\n  dedupVertexArrayWithPositionsAndIndicesArrays,\n  calculateLatLongTextureCoordinates,\n  calculateCylindricalSection,\n  calculateCylindricalTextureCoordinates,\n  TWO_PI,\n} from '../../../util';\nimport {getCacheKey} from '../renderable-shape-store';\n\n// TODO: Once I have a better camera in place, test that these texture coordinate calculations are\n// correct.\n\n/**\n * @param {CapsuleRenderableShapeParams} params\n * @returns {RenderableShape}\n */\nfunction _calculateCapsuleTopShape(params) {\n  // Calculate the positions.\n  // TODO: This uses lat-long spheres for the ends of the capsule. Use icospheres instead.\n  const individualVertexPositions = calculateSphericalSection(\n      0, params.divisionsCount / 2, Math.PI / params.divisionsCount,\n      0, params.divisionsCount, TWO_PI / params.divisionsCount);\n\n  // Calculate the indices and normals.\n  let vertexPositions;\n  let vertexIndices;\n  let vertexNormals;\n  if (!params.isUsingSphericalNormals) {\n    // If we use orthogonal normals, then we cannot use vertexIndices.\n    vertexPositions = individualVertexPositions;\n    vertexIndices = null;\n    vertexNormals = calculateOrthogonalVertexNormals(vertexPositions);\n  } else {\n    ({vertexPositions, vertexIndices} = dedupVertexArrayWithPositionsAndIndicesArrays(\n        individualVertexPositions));\n    vertexNormals = vertexPositions;\n  }\n\n  const textureCoordinates = calculateLatLongTextureCoordinates(vertexPositions);\n\n  let scale;\n  let translation;\n\n  // Scale and translate the positions.\n  scale = params.radius;\n  translation = params.capsuleEndPointsDistance / 2;\n  for (let i = 0, count = vertexPositions.length; i < count; i += 3) {\n    vertexPositions[i] *= scale;\n    vertexPositions[i + 1] *= scale;\n    vertexPositions[i + 2] = vertexPositions[i + 2] * scale + translation;\n  }\n\n  // Scale and translate the texture coordinates.\n  scale = params.radius / (params.radius + params.capsuleEndPointsDistance);\n  translation = 1 - scale;\n  for (let i = 1, count = textureCoordinates.length; i < count; i += 2) {\n    textureCoordinates[i] = textureCoordinates[i] * scale + translation;\n  }\n\n  const elementCount = vertexIndices ? vertexIndices.length : vertexPositions.length / 3;\n\n  return {\n    vertexPositions: vertexPositions,\n    vertexNormals: vertexNormals,\n    textureCoordinates: textureCoordinates,\n    vertexIndices: vertexIndices,\n    elementCount: elementCount\n  };\n}\n\n/**\n * @param {CapsuleRenderableShapeParams} params\n * @returns {RenderableShape}\n */\nfunction _calculateCapsuleBottomShape(params) {\n  // Calculate the positions.\n  // TODO: This uses lat-long spheres for the ends of the capsule. Use icospheres instead.\n  const individualVertexPositions = calculateSphericalSection(\n      params.divisionsCount / 2, params.divisionsCount, Math.PI / params.divisionsCount,\n      0, params.divisionsCount, TWO_PI / params.divisionsCount);\n\n  // Calculate the indices and normals.\n  let vertexPositions;\n  let vertexIndices;\n  let vertexNormals;\n  if (!params.isUsingSphericalNormals) {\n    // If we use orthogonal normals, then we cannot use vertexIndices.\n    vertexPositions = individualVertexPositions;\n    vertexIndices = null;\n    vertexNormals = calculateOrthogonalVertexNormals(vertexPositions);\n  } else {\n    const positionsAndIndices = dedupVertexArrayWithPositionsAndIndicesArrays(\n        individualVertexPositions);\n    vertexPositions = positionsAndIndices.vertexPositions;\n    vertexIndices = positionsAndIndices.vertexIndices;\n    vertexNormals = vertexPositions;\n  }\n\n  const textureCoordinates = calculateLatLongTextureCoordinates(vertexPositions);\n\n  let scale;\n  let translation;\n\n  // Scale and translate the positions.\n  scale = params.radius;\n  translation = -params.capsuleEndPointsDistance / 2;\n  for (let i = 0, count = vertexPositions.length; i < count; i += 3) {\n    vertexPositions[i] *= scale;\n    vertexPositions[i + 1] *= scale;\n    vertexPositions[i + 2] = vertexPositions[i + 2] * scale + translation;\n  }\n\n  // Scale and translate the texture coordinates.\n  scale = params.radius / (params.radius + params.capsuleEndPointsDistance);\n  translation = 0;\n  for (let i = 1, count = textureCoordinates.length; i < count; i += 2) {\n    textureCoordinates[i] = textureCoordinates[i] * scale + translation;\n  }\n\n  const elementCount = vertexIndices ? vertexIndices.length : vertexPositions.length / 3;\n\n  return {\n    vertexPositions: vertexPositions,\n    vertexNormals: vertexNormals,\n    textureCoordinates: textureCoordinates,\n    vertexIndices: vertexIndices,\n    elementCount: elementCount\n  };\n}\n\n/**\n * @param {CapsuleRenderableShapeParams} params\n * @returns {RenderableShape}\n */\nfunction _calculateCapsuleMiddleShape(params) {\n  let scale;\n  let translation;\n\n  // Calculate the positions.\n  translation = params.capsuleEndPointsDistance / 2;\n  const individualVertexPositions = calculateCylindricalSection(\n      -translation, translation, 0, params.divisionsCount, TWO_PI / params.divisionsCount);\n\n  let vertexPositions;\n  let vertexIndices;\n  let vertexNormals;\n\n  // Calculate the vertex indices and normals.\n  if (!params.isUsingSphericalNormals) {\n    // If we use orthogonal normals, then we cannot use vertexIndices.\n    vertexPositions = individualVertexPositions;\n    vertexIndices = null;\n    vertexNormals = calculateOrthogonalVertexNormals(vertexPositions);\n  } else {\n    const positionsAndIndices = dedupVertexArrayWithPositionsAndIndicesArrays(\n        individualVertexPositions);\n    vertexPositions = positionsAndIndices.vertexPositions;\n    vertexIndices = positionsAndIndices.vertexIndices;\n\n    // Calculate the vertex normals.\n    vertexNormals = vertexPositions.map((coord, index) => index % 3 === 2 ? 0 : coord);\n  }\n\n  // Calculate the texture coordinates.\n  const textureCoordinates = calculateCylindricalTextureCoordinates(vertexPositions);\n\n  // Scale the x and y position coordinates.\n  scale = params.radius;\n  for (let i = 0, count = vertexPositions.length; i < count; i += 3) {\n    vertexPositions[i] *= scale;\n    vertexPositions[i + 1] *= scale;\n  }\n\n  // Scale and translate the texture coordinates.\n  scale = params.capsuleEndPointsDistance / (params.radius + params.capsuleEndPointsDistance);\n  translation = (1 - scale) / 2;\n  for (let i = 1, count = textureCoordinates.length; i < count; i += 2) {\n    textureCoordinates[i] = textureCoordinates[i] * scale + translation;\n  }\n\n  const elementCount = vertexIndices ? vertexIndices.length : vertexPositions.length / 3;\n\n  return {\n    vertexPositions: vertexPositions,\n    vertexNormals: vertexNormals,\n    textureCoordinates: textureCoordinates,\n    vertexIndices: vertexIndices,\n    elementCount: elementCount\n  };\n}\n\nconst capsuleRenderableShapeFactory = {\n  shapeId: 'CAPSULE',\n\n  /**\n   * @param {CapsuleRenderableShapeParams} params\n   * @returns {RenderableShape}\n   */\n  getRenderableShape: (params) => {\n    // Ensure the divisions count is even.\n    if (params.divisionsCount % 2 === 1) {\n      params.divisionsCount++;\n    }\n\n    // The capsule's sub-shapes.\n    const topShape = _calculateCapsuleTopShape(params);\n    const bottomShape = _calculateCapsuleBottomShape(params);\n    const middleShape = _calculateCapsuleMiddleShape(params);\n\n    // Concatenate positions, normals, texture coordinates, and indices.\n    const vertexPositions = topShape.vertexPositions.concat(middleShape.vertexPositions, \n        bottomShape.vertexPositions);\n    const vertexNormals = topShape.vertexNormals.concat(middleShape.vertexNormals,\n        bottomShape.vertexNormals);\n    const textureCoordinates = topShape.textureCoordinates.concat(middleShape.textureCoordinates,\n        bottomShape.textureCoordinates);\n    const vertexIndices = topShape.vertexIndices\n        ? topShape.vertexIndices.concat(middleShape.vertexIndices, bottomShape.vertexIndices)\n        : null;\n    const elementCount = topShape.elementCount + middleShape.elementCount + bottomShape.elementCount;\n\n    return {\n      vertexPositions: vertexPositions,\n      vertexNormals: vertexNormals,\n      textureCoordinates: textureCoordinates,\n      vertexIndices: vertexIndices,\n      elementCount: elementCount\n    };\n  },\n\n  /**\n   * @param {CapsuleRenderableShapeParams} params\n   * @returns {string}\n   */\n  getCacheId(params) {\n    return `${getCacheKey(params)}:${params.divisionsCount}`;\n  }\n};\n\nexport {capsuleRenderableShapeFactory};\n\n/**\n * @typedef {SphericalRenderableShapeParams} CapsuleRenderableShapeParams\n * @property {number} radius\n * @property {number} capsuleEndPointsDistance The distance between the centers of the spheres on\n * either end of the capsule.\n */\n","/**\n * This model defines a shape configuration factory for a cube.\n *\n * This cube is one unit long on each side.\n */\n\nimport {getCacheKey} from '../renderable-shape-store';\n\nconst VERTEX_COORDINATE = 0.5;\n\nconst vertexPositions = [\n  // Front face\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  // Back face\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  -VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  -VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  // Top face\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  -VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  -VERTEX_COORDINATE,\n  // Bottom face\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  // Right face\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  -VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  // Left face\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  -VERTEX_COORDINATE\n];\n\nconst orthogonalVertexNormals = [\n  // Front face\n  0, 0, 1,\n  0, 0, 1,\n  0, 0, 1,\n  0, 0, 1,\n  // Back face\n  0, 0, -1,\n  0, 0, -1,\n  0, 0, -1,\n  0, 0, -1,\n  // Top face\n  0, 1, 0,\n  0, 1, 0,\n  0, 1, 0,\n  0, 1, 0,\n  // Bottom face\n  0, -1, 0,\n  0, -1, 0,\n  0, -1, 0,\n  0, -1, 0,\n  // Right face\n  1, 0, 0,\n  1, 0, 0,\n  1, 0, 0,\n  1, 0, 0,\n  // Left face\n  -1, 0, 0,\n  -1, 0, 0,\n  -1, 0, 0,\n  -1, 0, 0\n];\n\nconst textureCoordinates = [\n  // Front face\n  1, 0,\n  0, 0,\n  0, 1,\n  1, 1,\n  // Back face\n  1, 0,\n  0, 0,\n  0, 1,\n  1, 1,\n  // Top face\n  1, 0,\n  0, 0,\n  0, 1,\n  1, 1,\n  // Bottom face\n  1, 0,\n  0, 0,\n  0, 1,\n  1, 1,\n  // Right face\n  1, 0,\n  0, 0,\n  0, 1,\n  1, 1,\n  // Left face\n  1, 0,\n  0, 0,\n  0, 1,\n  1, 1\n];\n\n// This array defines each face as two triangles, using the indices into the vertex array\n// to specify each triangle's position.\nconst vertexIndices = [\n  // Front face\n  0,  1,  2,\n  0,  2,  3,\n  // Back face\n  4,  5,  6,\n  4,  6,  7,\n  // Top face\n  8,  9,  10,\n  8,  10, 11,\n  // Bottom face\n  12, 13, 14,\n  12, 14, 15,\n  // Right face\n  16, 17, 18,\n  16, 18, 19,\n  // Left face\n  20, 21, 22,\n  20, 22, 23\n];\n\nconst cubeRenderableShapeFactory = {\n  shapeId: 'CUBE',\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {RenderableShape}\n   */\n  getRenderableShape: params => {\n    const vertexNormals = params.isUsingSphericalNormals ? vertexPositions : orthogonalVertexNormals;\n\n    return {\n      vertexPositions: vertexPositions,\n      vertexNormals: vertexNormals,\n      textureCoordinates: textureCoordinates,\n      vertexIndices: vertexIndices,\n      elementCount: vertexIndices.length\n    };\n  },\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {string}\n   */\n  getCacheId(params) {\n    return getCacheKey(params);\n  }\n};\n\nexport {cubeRenderableShapeFactory};\n","/**\n * This model defines a shape configuration factory for a regular icosahedron.\n *\n * The shape is centered around the origin.\n */\n\nimport {\n  calculateLatLongTextureCoordinates,\n  calculateOrthogonalVertexNormals,\n  expandVertexIndicesAroundLongitudeSeam,\n  expandVertexIndicesToDuplicatePositions,\n} from '../../../util';\nimport {getCacheKey} from '../renderable-shape-store';\n\n// The corners of a unit icosahedron with vertices aligned with the y-axis.\nconst individualVertexPositions = [\n  -0.525731086730957, -0.7236068248748779, 0.4472135901451111,\n  0.525731086730957, -0.7236068248748779, 0.4472135901451111,\n  -0.525731086730957, 0.7236068248748779, -0.4472135901451111,\n  0.525731086730957, 0.7236068248748779, -0.4472135901451111,\n  0, 0, 1,\n  0, 0.8944271802902222, 0.44721361994743347,\n  0, -0.8944271802902222, -0.44721361994743347,\n  0, 0, -1,\n  0.8506508469581604, 0.27639320492744446, 0.4472135901451111,\n  -0.8506508469581604, 0.27639320492744446, 0.4472135901451111,\n  0.8506508469581604, -0.27639320492744446, -0.4472135901451111,\n  -0.8506508469581604, -0.27639320492744446, -0.4472135901451111\n];\n\nconst individualVertexIndices = [\n  1,  4,  0,\n  4,  9,  0,\n  4,  5,  9,\n  8,  5,  4,\n  1,  8,  4,\n  1,  10, 8,\n  10, 3,  8,\n  8,  3,  5,\n  3,  2,  5,\n  3,  7,  2,\n  3,  10, 7,\n  10, 6,  7,\n  6,  11, 7,\n  6,  0,  11,\n  6,  1,  0,\n  10, 1,  6,\n  11, 0,  9,\n  2,  11, 9,\n  5,  2,  9,\n  11, 2,  7\n];\n\nlet vertexPositionsExpandedAroundSeam = null;\nlet vertexIndicesExpandedAroundSeam = null;\nlet textureCoordinates = null;\n\nconst icosahedronRenderableShapeFactory = {\n  shapeId: 'ICOSAHEDRON',\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {RenderableShape}\n   */\n  getRenderableShape: params => {\n    let vertexPositions;\n    let vertexIndices;\n\n    if (!vertexPositionsExpandedAroundSeam) {\n      // Calculate the modified positions and indices.\n      const positionsAndIndices = expandVertexIndicesAroundLongitudeSeam(\n          individualVertexPositions, individualVertexIndices);\n      vertexPositionsExpandedAroundSeam = positionsAndIndices.vertexPositions;\n      vertexIndicesExpandedAroundSeam = positionsAndIndices.vertexIndices;\n    }\n\n    vertexPositions = vertexPositionsExpandedAroundSeam;\n    vertexIndices = vertexIndicesExpandedAroundSeam;\n\n    let vertexNormals;\n    // If we use orthogonal normals, then we cannot use vertexIndices.\n    if (!params.isUsingSphericalNormals) {\n      vertexPositions = expandVertexIndicesToDuplicatePositions(vertexPositions,\n          vertexIndices);\n      vertexIndices = null;\n      vertexNormals = calculateOrthogonalVertexNormals(vertexPositions);\n    } else {\n      vertexNormals = vertexPositions;\n    }\n\n    textureCoordinates = textureCoordinates\n        ? textureCoordinates\n        : calculateLatLongTextureCoordinates(vertexPositions);\n\n    const elementCount = vertexIndices ? vertexIndices.length : vertexPositions.length / 3;\n\n    return {\n      vertexPositions: vertexPositions,\n      vertexNormals: vertexNormals,\n      textureCoordinates: textureCoordinates,\n      vertexIndices: vertexIndices,\n      elementCount: elementCount\n    };\n  },\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {string}\n   */\n  getCacheId(params) {\n    return getCacheKey(params);\n  }\n};\n\nexport {icosahedronRenderableShapeFactory};\n","/**\n * This module defines logic that creates a spherical shape configuration by taking a shape,\n * sub-dividing each of its triangles, and projecting each new vertex onto the edge of a sphere.\n *\n * This is technically only an \"icosphere\" if the starting shape is an icosahedron.\n *\n * This shape also is known as a \"geosphere\".\n *\n * The shape is centered around the origin.\n */\n\nimport {\n  deepCopy,\n  calculateLatLongTextureCoordinates,\n  calculateOrthogonalVertexNormals,\n  expandVertexIndicesAroundLongitudeSeam,\n  expandVertexIndicesToDuplicatePositions,\n  tesselateSphere,\n} from '../../../util';\nimport {getCacheKey} from '../renderable-shape-store';\nimport {renderableShapeFactory} from '../renderable-shape-factory';\n\nconst icosphereRenderableShapeFactory = {\n  shapeId: 'ICOSPHERE',\n\n  /**\n   * @param {IcosphereRenderableShapeParams} params\n   * @returns {RenderableShape}\n   */\n  getRenderableShape: params => {\n    params.divisionsCount = Math.max(params.divisionsCount, 1);\n\n    const copyParams = deepCopy(params);\n    copyParams.shapeId = params.baseShapeId || 'ICOSAHEDRON';\n    const baseRenderableShape = renderableShapeFactory.getRenderableShape(copyParams);\n\n    // Calculate the positions and indices.\n    let {vertexPositions, vertexIndices} = tesselateSphere(params.divisionsCount,\n        baseRenderableShape.vertexPositions, baseRenderableShape.vertexIndices);\n    ({vertexPositions, vertexIndices} = expandVertexIndicesAroundLongitudeSeam(\n        vertexPositions, vertexIndices));\n\n    let vertexNormals;\n    // If we use orthogonal normals, then we cannot use vertexIndices.\n    if (!params.isUsingSphericalNormals) {\n      vertexPositions = expandVertexIndicesToDuplicatePositions(vertexPositions,\n          vertexIndices);\n      vertexIndices = null;\n      vertexNormals = calculateOrthogonalVertexNormals(vertexPositions);\n    } else {\n      vertexNormals = vertexPositions;\n    }\n\n    const textureCoordinates = calculateLatLongTextureCoordinates(vertexPositions);\n\n    const elementCount = vertexIndices ? vertexIndices.length : vertexPositions.length / 3;\n\n    return {\n      vertexPositions: vertexPositions,\n      vertexNormals: vertexNormals,\n      textureCoordinates: textureCoordinates,\n      vertexIndices: vertexIndices,\n      elementCount: elementCount\n    };\n  },\n\n  /**\n   * @param {IcosphereRenderableShapeParams} params\n   * @returns {string}\n   */\n  getCacheId(params) {\n    return `${getCacheKey(params)}:${params.divisionsCount}`;\n  }\n};\n\nexport {icosphereRenderableShapeFactory};\n\n/**\n * @typedef {SphericalRenderableShapeParams} IcosphereRenderableShapeParams\n * @property {string} baseShapeId The ID of the base renderable shape that will be sub-divided to\n * create this icosphere shape.\n */\n","import {\n  calculateLatLongTextureCoordinates,\n  calculateOrthogonalVertexNormals,\n  calculateSphericalSection,\n  dedupVertexArrayWithPositionsAndIndicesArrays,\n  TWO_PI,\n} from '../../../util';\nimport {getCacheKey} from '../renderable-shape-store';\n\n/**\n * This module defines a configuration factory for a spherical shape whose vertices lie along\n * latitude and longitude lines.\n *\n * This shape also is known as a \"UV sphere\".\n *\n * The shape is centered around the origin with the poles aligned with the z-axis.\n */\n\n/**\n * @param {number} divisionsCount\n * @returns {Array.<Number>}\n * @private\n */\nfunction _calculateLatLongSpherePositions(divisionsCount) {\n  const deltaPitch = Math.PI / divisionsCount;\n  const deltaAzimuth = TWO_PI / divisionsCount;\n\n  return calculateSphericalSection(\n      0, divisionsCount, deltaPitch,\n      0, divisionsCount, deltaAzimuth);\n}\n\nconst latLongSphereRenderableShapeFactory = {\n  shapeId: 'LAT_LONG_SPHERE',\n\n  /**\n   * @param {SphericalRenderableShapeParams} params\n   * @returns {RenderableShape}\n   */\n  getRenderableShape: params => {\n    // Calculate the positions.\n    const individualVertexPositions = _calculateLatLongSpherePositions(params.divisionsCount);\n\n    // Calculate the indices and normals.\n    let vertexPositions;\n    let vertexIndices;\n    let vertexNormals;\n    if (!params.isUsingSphericalNormals) {\n      // If we use orthogonal normals, then we cannot use vertexIndices.\n      vertexPositions = individualVertexPositions;\n      vertexIndices = null;\n      vertexNormals = calculateOrthogonalVertexNormals(vertexPositions);\n    } else {\n      ({vertexPositions, vertexIndices} = dedupVertexArrayWithPositionsAndIndicesArrays(\n          individualVertexPositions));\n      vertexNormals = vertexPositions;\n    }\n\n    const textureCoordinates = calculateLatLongTextureCoordinates(vertexPositions);\n\n    const elementCount = vertexIndices ? vertexIndices.length : vertexPositions.length / 3;\n\n    return {\n      vertexPositions: vertexPositions,\n      vertexNormals: vertexNormals,\n      textureCoordinates: textureCoordinates,\n      vertexIndices: vertexIndices,\n      elementCount: elementCount\n    };\n  },\n\n  /**\n   * @param {SphericalRenderableShapeParams} params\n   * @returns {string}\n   */\n  getCacheId(params) {\n    return `${getCacheKey(params)}:${params.divisionsCount}`;\n  }\n};\n\nexport {latLongSphereRenderableShapeFactory};\n","import {calculateOrthogonalVertexNormals} from '../../../util';\nimport {getCacheKey} from '../renderable-shape-store';\n\n/**\n * This model defines a shape configuration factory for a regular tetrahedron.\n *\n * The shape is centered around the origin.\n */\n\n// ||(VERTEX_COORDINATE, VERTEX_COORDINATE, VERTEX_COORDINATE)|| = 1\nconst VERTEX_COORDINATE = 0.5773502588272095;\n\nconst vertexPositions = [\n  // Left-top-near face\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  -VERTEX_COORDINATE,\n\n  // Right-top-far face\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  -VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n\n  // Right-bottom-near face\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, VERTEX_COORDINATE,\n\n  // Left-bottom-far face\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  VERTEX_COORDINATE, -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE, -VERTEX_COORDINATE\n];\n\n// 1 - Math.sqrt(3) / 2\nconst TEXTURE_BASE_COORDINATE = 0.13397459621;\n\nconst textureCoordinates = [\n  // Left-top-near face\n  0, TEXTURE_BASE_COORDINATE,\n  0.5, 1,\n  1, TEXTURE_BASE_COORDINATE,\n\n  // Right-top-far face\n  0, TEXTURE_BASE_COORDINATE,\n  0.5, 1,\n  1, TEXTURE_BASE_COORDINATE,\n\n  // Right-bottom-near face\n  0, TEXTURE_BASE_COORDINATE,\n  0.5, 1,\n  1, TEXTURE_BASE_COORDINATE,\n\n  // Left-bottom-far face\n  0, TEXTURE_BASE_COORDINATE,\n  0.5, 1,\n  1, TEXTURE_BASE_COORDINATE\n];\n\nconst tetrahedronRenderableShapeFactory = {\n  shapeId: 'TETRAHEDRON',\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {RenderableShape}\n   */\n  getRenderableShape: params => {\n    const vertexNormals = params.isUsingSphericalNormals\n        ? vertexPositions\n        : calculateOrthogonalVertexNormals(vertexPositions);\n\n    return {\n      vertexPositions: vertexPositions,\n      vertexNormals: vertexNormals,\n      textureCoordinates: textureCoordinates,\n      vertexIndices: null,\n      elementCount: vertexPositions.length / 3\n    };\n  },\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {string}\n   */\n  getCacheId(params) {\n    return getCacheKey(params);\n  }\n};\n\nexport {tetrahedronRenderableShapeFactory};\n","import {\n  animator,\n  PersistentAnimationJob\n}\nfrom '../../../animatex';\nimport { PhysicsEngine } from 'lsl-physx';\nimport {\n  ProgramWrapper,\n  programWrapperStore,\n  textureStore\n}\nfrom '../program-wrapper';\nimport {\n  bindFramebuffer,\n  bindGLContextToViewportDimensions,\n  getWebGLContext,\n  getViewportHeight,\n  getViewportWidth,\n}\nfrom '../util';\n\n/**\n * This top-level Controller class initializes and runs the rest of the app.\n */\nclass GrafxController extends PersistentAnimationJob {\n  constructor() {\n    super();\n\n    this._canvas = null;\n    this._gl = null;\n    this._scene = null;\n    this._currentProgramWrapper = null;\n  }\n\n  /**\n   * Initializes the app. After this completes successfully, call run to actually start the app.\n   *\n   * @param {HTMLCanvasElement} canvas\n   * @param {Array.<ProgramWrapperConfig>} programConfigs Configurations for program wrappers that\n   * should be pre-cached before starting the rest of the app.\n   * @param {Array.<String>} texturePaths Texture images that should be pre-cached before\n   * starting the rest of the app.\n   * @param {Function.<Scene>} sceneFactory\n   * @returns {Promise}\n   */\n  initialize(canvas, programConfigs, texturePaths, sceneFactory) {\n    this._canvas = canvas;\n\n    return Promise.resolve()\n      .then(() => this._setUpWebGLContext())\n      .then(() => Promise.all([\n        this._preCachePrograms(programConfigs),\n        this._preCacheTextures(texturePaths)\n      ]))\n      .then(() => this._setUpScene(sceneFactory));\n  }\n\n  destroy() {}\n\n  reset() {\n    // FIXME: Will it be easier to replace this with initialize?\n    this._scene.reset();\n  }\n\n  /**\n   * Runs the app. This should be called after initialize.\n   *\n   * A few things happen if this is run in dev mode:\n   * - The draw and update steps of each frame are wrapped in a try/catch block.\n   * - This method returns a Promise that rejects if an error is throw during any update or draw\n   *   step and resolves when this controller has finished (currently never)\n   */\n  run() {\n    this._startAnimator();\n  }\n\n  _startAnimator() { // FIXME: Decouple physx\n    animator.startJob(PhysicsEngine.instance);\n    animator.startJob(this);\n  }\n\n  /**\n   * Updates the scene.\n   *\n   * This updates all of the current parameters for each component in the scene for the current\n   * frame. However, this does not render anything. Rendering is done by a following call to the\n   * draw function.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  update(currentTime, deltaTime) {\n    this._scene.updateSelfAndChildren(currentTime, deltaTime);\n  }\n\n  /**\n   * Draws the scene.\n   *\n   * This renders the current frame for all components in the scene. This assumes that all relevant\n   * parameter updates for this frame have already been computed by a previous call to _updateScene.\n   */\n  draw() {\n    // Clear the canvas before we start drawing on it.\n    this._gl.clear(this._gl.COLOR_BUFFER_BIT | this._gl.DEPTH_BUFFER_BIT);\n\n    // If we are using a post-processing program, then we need to render models to a framebuffer\n    // rather than directly to the canvas.\n    if (programWrapperStore.isUsingPostProcessingPrograms) {\n      bindFramebuffer(this._gl, programWrapperStore.modelsFramebuffer);\n      this._gl.clear(this._gl.COLOR_BUFFER_BIT | this._gl.DEPTH_BUFFER_BIT);\n    }\n\n    // Draw each program separately. This minimizes how many times we need to switch programs by\n    // grouping all of the draw calls for models that use the same program/shaders.\n    programWrapperStore.forEachModelProgram((programWrapper, drawFrameHandlers) =>\n      this._drawModelProgram(programWrapper, drawFrameHandlers));\n    programWrapperStore.forEachPostProcessingProgram(\n      (programWrapper) => this._drawPostProcessingProgram(programWrapper));\n  }\n\n  /**\n   * For the given program key, this binds the registered shader program to the GL rendering context\n   * and calls each of the registered draw-frame handlers.\n   *\n   * @param {ProgramWrapper|GroupProgramWrapper} programWrapper\n   * @param {Set.<Function>} [drawFrameHandlers]\n   * @private\n   */\n  _drawModelProgram(programWrapper, drawFrameHandlers) {\n    // Check whether we need to switch programs (always true if there is more than one program\n    // registered).\n    if (this._currentProgramWrapper !== programWrapper) {\n      programWrapper.setProgram(this._gl);\n      this._currentProgramWrapper = programWrapper;\n    }\n\n    // Call each of the draw-frame handlers that use the current rendering program.\n    drawFrameHandlers.forEach(drawFrameHandler => drawFrameHandler());\n  }\n\n  /**\n   * For the given program key, this binds the registered shader program to the GL rendering context\n   * and calls each of the registered draw-frame handlers.\n   *\n   * @param {ProgramWrapper|GroupProgramWrapper} programWrapper\n   * @private\n   */\n  _drawPostProcessingProgram(programWrapper) {\n    this._currentProgramWrapper = programWrapper;\n    programWrapper.draw(this._gl);\n  }\n\n  /**\n   * Initializes the WebGL rendering context.\n   *\n   * @private\n   */\n  _setUpWebGLContext() {\n    // Get the WebGL rendering context.\n    try {\n      this._gl = getWebGLContext(this._canvas);\n    }\n    catch (e) {\n      alert('WebGL is not supported by your browser! :(');\n      throw e;\n    }\n\n    // Have the canvas context match the resolution of the window's viewport.\n    bindGLContextToViewportDimensions(this._canvas, this._gl, () => this._updateAspectRatio());\n\n    // Clear everything to black.\n    this._gl.clearColor(0, 0, 0, 1);\n    this._gl.clearDepth(1);\n\n    // Enable depth testing.\n    this._gl.enable(this._gl.DEPTH_TEST);\n    this._gl.depthFunc(this._gl.LEQUAL);\n  }\n\n  /**\n   * Loads, compiles, caches, and initializes some rendering programs.\n   *\n   * @param {Array.<ProgramWrapperConfig>} programConfigs\n   * @returns {Promise}\n   * @private\n   */\n  _preCachePrograms(programConfigs) {\n    const promises =\n      programConfigs.map(config => programWrapperStore.loadProgramWrapper(this._gl, config));\n    return Promise.all(promises);\n  }\n\n  /**\n   * Loads, compiles, and caches some textures.\n   *\n   * @param {Array.<String>} texturePaths\n   * @returns {Promise}\n   * @private\n   */\n  _preCacheTextures(texturePaths) {\n    return Promise.all(texturePaths\n      .map(texturePath => textureStore.loadTexture(this._gl, texturePath)));\n  }\n\n  /**\n   * Initializes the scene.\n   *\n   * @param {Function.<Scene>} sceneFactory\n   * @returns {Promise}\n   * @abstract\n   * @protected\n   */\n  _setUpScene(sceneFactory) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * @protected\n   */\n  _updateAspectRatio() {\n    this._scene.camera.aspectRatio = getViewportWidth() / getViewportHeight();\n    _resizeFramebuffersToMatchViewportSize(this._gl);\n  }\n\n  /**\n   * @returns {mat4}\n   * @protected\n   */\n  _getViewMatrix() {\n    return this._scene.camera.viewMatrix;\n  }\n\n  /**\n   * @returns {mat4}\n   * @protected\n   */\n  _getProjectionMatrix() {\n    return this._scene.camera.projectionMatrix;\n  }\n}\n\n/**\n * @param {WebGLRenderingContext} gl\n * @private\n */\nfunction _resizeFramebuffersToMatchViewportSize(gl) {\n  if (programWrapperStore.isUsingPostProcessingPrograms) {\n    const width = getViewportWidth();\n    const height = getViewportHeight();\n\n    // Update the per-model framebuffer texture.\n    const texture = programWrapperStore.modelsTexture;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n    // Update the per-model framebuffer depth render buffer.\n    const renderBuffer = programWrapperStore.modelsRenderBuffer;\n    gl.bindRenderbuffer(gl.RENDERBUFFER, renderBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);\n\n    // Update the post-processing framebuffer textures.\n    programWrapperStore.forEachPostProcessingProgram(programWrapper => {\n      programWrapper.config.childrenFramebufferIds.forEach(id => {\n        const texture = programWrapperStore.getTexture(id);\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n      });\n    });\n  }\n}\n\nexport { GrafxController };\n","/**\n * This class defines a light source.\n */\nclass Light {\n  constructor() {\n    // TODO\n  }\n\n  // TODO: Implement this.\n}\n\nexport {Light};\n","import { ModelGroupController } from '../models';\n\n/**\n * This class handles the overall scene.\n */\nclass Scene extends ModelGroupController {\n  /**\n   * @param {ModelGroupControllerConfig} modelControllerParams\n   */\n  constructor(modelControllerParams) {\n    super(modelControllerParams);\n\n    // Scene is an abstract class. It should not be instantiated directly.\n    if (new.target === Scene) {\n      throw new TypeError('Cannot construct Scene instances directly');\n    }\n\n    this._getWorldTransform = () => this.worldTransform;\n    this._lights = [];\n    this._camera = null;\n  }\n\n  reset() {\n    super.reset();\n    this._lights.forEach(light => light.reset());\n    this._camera.reset();\n  }\n\n  /**\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  updateChildren(currentTime, deltaTime) {\n    super.updateChildren(currentTime, deltaTime);\n    this._camera.update(currentTime, deltaTime);\n  }\n\n  /** @returns {Camera} */\n  get camera() {\n    return this._camera;\n  }\n}\n\nexport { Scene };\n","export * from './src/geometry';\nexport * from './src/gl-util';\nexport * from './src/hash-map';\nexport * from './src/util';\n","/**\n * This module defines a collection of static geometry utility functions.\n */\n\nimport {randomFloatInRange} from './util';\n\nconst EPSILON = 0.0000001;\nconst DEG_TO_RAD_RATIO = Math.PI / 180;\nconst RAD_TO_DEG_RATIO = 180 / Math.PI;\nconst HALF_PI = Math.PI / 2;\nconst TWO_PI = Math.PI * 2;\n\n/**\n * @param {number} deg\n * @returns {number}\n */\nfunction degToRad(deg) {\n  return deg * DEG_TO_RAD_RATIO;\n}\n\n/**\n * @param {number} rad\n * @returns {number}\n */\nfunction radToDeg(rad) {\n  return rad * RAD_TO_DEG_RATIO;\n}\n\n/**\n * This checks whether two floating-point numbers are close enough that they could be equal if not\n * for round-off errors.\n *\n * @param {number} a\n * @param {number} b\n * @returns {boolean}\n */\nfunction areClose(a, b) {\n  const diff = a - b;\n  return (diff > 0 ? diff : -diff) < EPSILON;\n}\n\n/**\n * @param {vec3} a\n * @param {vec3} b\n * @returns {boolean}\n */\nfunction areVec3sEqual(a, b) {\n  return a[0] === b[0] &&\n      a[1] === b[1] &&\n      a[2] === b[2];\n}\n\n/**\n * @param {vec3} v\n * @returns {string}\n */\nfunction vec3ToString(v) {\n  return `(${v[0]},${v[1]},${v[2]})`;\n}\n\n/**\n * TODO: This finds a random point with uniform probability within a cubic area, which biases the resulting vector toward the corners of this cubic area. Re-write this to produce an unbiased vector.\n *\n * @param {number} [scale=1]\n * @returns {vec3}\n */\nfunction createRandomVec3(scale = 1) {\n  const v = vec3.create();\n  return setRandomVec3(v, scale);\n}\n\n/**\n * TODO: This finds a random point with uniform probability within a cubic area, which biases the resulting vector toward the corners of this cubic area. Re-write this to produce an unbiased vector.\n *\n * @param {vec3} v\n * @param {number} [scale=1]\n * @returns {vec3}\n */\nfunction setRandomVec3(v, scale = 1) {\n  vec3.set(v, Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5);\n  vec3.normalize(v, v);\n  vec3.scale(v, v, scale);\n  return v;\n}\n\n/**\n * Calculates a vector that is orthogonal to the given vector.\n *\n * TODO: This finds a random point with uniform probability within a cubic area, which biases the resulting vector toward the corners of this cubic area. Re-write this to produce an unbiased vector.\n *\n * @param {vec3} basis\n * @param {number} [scale=1]\n * @returns {vec3}\n */\nfunction createRandomOrthogonalVec3(basis, scale = 1) {\n  const result = vec3.create();\n  return setRandomOrthogonalVec3(result, basis, scale);\n}\n\n/**\n * Calculates a vector that is orthogonal to the given vector.\n *\n * TODO: This finds a random point with uniform probability within a cubic area, which biases the resulting vector toward the corners of this cubic area. Re-write this to produce an unbiased vector.\n *\n * @param {vec3} result\n * @param {vec3} basis\n * @param {number} [scale=1]\n * @returns {vec3}\n */\nfunction setRandomOrthogonalVec3(result, basis, scale = 1) {\n  setRandomVec3(result);\n  // This is based on the dot and cross products and the fact that the dot product for two\n  // orthogonal vectors is zero.\n  result[2] = -(basis[0] * result[0] + basis[1] * result[1]) / basis[2];\n  vec3.normalize(result, result);\n  vec3.scale(result, result, scale);\n  return result;\n}\n\n/**\n * @param {vec3} avg\n * @param {vec3} range\n * @returns {vec3}\n * @private\n */\nfunction randomVec3InRange(avg, range) {\n  const position = vec3.create();\n  for (let i = 0; i < 3; i++) {\n    const min = avg[i] - range[i] / 2;\n    const max = avg[i] + range[i] / 2;\n    position[i] = randomFloatInRange(min, max);\n  }\n  return position;\n}\n\n/**\n * Rotates the given vector around a random orthogonal axis by a random angle within the given angle\n * bounds.\n *\n * @param {vec3} v\n * @param {number} minRotationAngle\n * @param {number} maxRotationAngle\n */\nfunction addRandomRotationToVector(v, minRotationAngle, maxRotationAngle) {\n  // Create a random orthogonal axis.\n  const rotationAxis = createRandomVec3();\n  vec3.cross(rotationAxis, rotationAxis, v);\n  vec3.normalize(rotationAxis, rotationAxis);\n\n  // Create a random angle.\n  const rotationAngle = randomFloatInRange(minRotationAngle, maxRotationAngle);\n\n  // Create a rotation quaternion.\n  const rotation = quat.create();\n  quat.setAxisAngle(rotation, rotationAxis, rotationAngle);\n\n  // Apply the rotation to the vector.\n  vec3.transformQuat(v, v, rotation);\n}\n\n/**\n * @param {quat} out\n * @param {quat} a\n * @param {quat} b\n * @param {number} scale\n * @returns {quat}\n */\nfunction scaleAndAddQuat(out, a, b, scale) {\n  return quat.set(out,\n      a[0] + b[0] * scale,\n      a[1] + b[1] * scale,\n      a[2] + b[2] * scale,\n      a[3] + b[3] * scale);\n}\n\n/**\n * @param {vec3} v\n * @returns {number}\n */\nfunction getMaxVec3Dimension(v) {\n  let max = v[0] > v[1] ? v[0] : v[1];\n  max = max > v[2] ? max : v[2];\n  return max;\n}\n\nexport {\n  EPSILON,\n  HALF_PI,\n  TWO_PI,\n  degToRad,\n  radToDeg,\n  areClose,\n  areVec3sEqual,\n  vec3ToString,\n  createRandomVec3,\n  setRandomVec3,\n  createRandomOrthogonalVec3,\n  setRandomOrthogonalVec3,\n  randomVec3InRange,\n  addRandomRotationToVector,\n  scaleAndAddQuat,\n  getMaxVec3Dimension,\n};\n","/**\n * This module defines a collection of static general utility functions for WebGL.\n */\n\nimport {HashMap} from './hash-map';\nimport {HALF_PI, TWO_PI} from './geometry';\nimport {debounce, isInDevMode, loadText} from './util';\nimport {programWrapperStore} from '../../program-wrapper/src/program-wrapper-store';\n\nlet viewportWidth = 10;\nlet viewportHeight = 10;\n\n/**\n * @param {HTMLCanvasElement} canvas\n * @returns {?WebGLRenderingContext}\n * @throws If unable to get a WebGL context.\n */\nfunction getWebGLContext(canvas) {\n  const params = {alpha: false};\n  // Try to grab the standard context. If it fails, fallback to the experimental context.\n  return canvas.getContext('webgl', params) || canvas.getContext('experimental-webgl', params);\n}\n\n/**\n * @param {WebGLRenderingContext} gl\n * @returns {?WebGLBuffer}\n * @throws If unable to create a buffer object.\n */\nfunction createBuffer(gl) {\n  const buffer = gl.createBuffer();\n  if (!buffer) {\n    throw new Error('An error occurred creating the buffer object');\n  }\n  return buffer;\n}\n// TODO: use all this helper stuff in the programWrapper logic?\n/**\n * @param {WebGLRenderingContext} gl\n * @param {WebGLProgram} program\n * @param {string} locationName\n * @returns {number}\n * @throws If unable to get an attribute location for the given name.\n */\nfunction getAttribLocation(gl, program, locationName) {\n  const attribLocation = gl.getAttribLocation(program, locationName);\n  if (attribLocation < 0) {\n    throw new Error(`An error occurred getting the attribute location: ${locationName}`);\n  }\n  return attribLocation;\n}\n\n/**\n * @param {WebGLRenderingContext} gl\n * @param {WebGLShader} vertexShader\n * @param {WebGLShader} fragmentShader\n * @returns {WebGLProgram}\n * @throws If unable to link the program.\n */\nfunction buildProgram(gl, vertexShader, fragmentShader) {\n  const program = gl.createProgram();\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, fragmentShader);\n  gl.linkProgram(program);\n\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    const infoLog = gl.getProgramInfoLog(program);\n    console.error('An error occurred linking the shader program', infoLog);\n    throw new Error('An error occurred linking the shader program');\n  }\n\n  return program;\n}\n\n/**\n * @param {WebGLRenderingContext} gl\n * @param {string} shaderSource\n * @param {boolean} isFragmentShader\n * @returns {WebGLShader}\n * @throws If unable to compile the shader.\n */\nfunction buildShader(gl, shaderSource, isFragmentShader) {\n  const shaderType = isFragmentShader ? gl.FRAGMENT_SHADER : gl.VERTEX_SHADER;\n  const shader = gl.createShader(shaderType);\n  gl.shaderSource(shader, shaderSource);\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    const infoLog = gl.getShaderInfoLog(shader);\n    console.error('An error occurred compiling the shader', infoLog);\n    throw new Error('An error occurred compiling the shader');\n  }\n\n  return shader;\n}\n\n/**\n * Loads a shader program by scouring the current document, looking for a script with the specified\n * ID.\n *\n * @param {WebGLRenderingContext} gl\n * @param {string} url\n * @returns {Promise.<WebGLShader, Error>}\n */\nfunction loadShader(gl, url) {\n  return loadText(url)\n      .then(shaderSource => buildShader(gl, shaderSource, url.endsWith('.frag')));\n}\n\n/**\n * Loads the shader source code from the given URLs, compiles the shader source code, and creates\n * a program from the resulting shaders.\n *\n * @param {WebGLRenderingContext} gl\n * @param {string} vertexShaderUrl\n * @param {string} fragmentShaderUrl\n * @returns {Promise.<WebGLProgram, Error>}\n * @throws If any error occurs while loading and building the shaders and program.\n */\nfunction loadProgram(gl, vertexShaderUrl, fragmentShaderUrl) {\n  return Promise.all([\n        vertexShaderUrl,\n        fragmentShaderUrl\n      ].map(url => loadShader(gl, url)))\n      .then(shaders => {\n        const vertexShader = shaders[0];\n        const fragmentShader = shaders[1];\n\n        return buildProgram(gl, vertexShader, fragmentShader);\n      });\n}\n\n/**\n * Create, bind, and move the given raw data into a WebGL buffer.\n *\n * @param {WebGLRenderingContext} gl\n * @param {Array.<Number>} rawData A plain, flat array containing the data to bind to a buffer.\n * @param {number} [target=gl.ARRAY_BUFFER] An enum describing the type of this buffer; one of:\n *   - gl.ARRAY_BUFFER,\n *   - gl.ELEMENT_ARRAY_BUFFER.\n * @param {number} [usage=gl.STATIC_DRAW] An enum describing how this buffer is going to be used;\n * one of:\n *   - gl.STATIC_DRAW,\n *   - gl.DYNAMIC_DRAW,\n *   - gl.STREAM_DRAW.\n * @returns {WebGLBuffer}\n */\nfunction createBufferFromData(gl, rawData, target, usage) {\n  target = target || gl.ARRAY_BUFFER;\n  usage = usage || gl.STATIC_DRAW;\n  const typedArray = target === gl.ARRAY_BUFFER ? new Float32Array(rawData) : new Uint16Array(rawData);\n\n  const buffer = gl.createBuffer();\n  gl.bindBuffer(target, buffer);\n  gl.bufferData(target, typedArray, usage);\n\n  // Making the original data visible on the buffer object is helpful for debugging.\n  if (isInDevMode) {\n    buffer.rawData = typedArray;\n  }\n\n  return buffer;\n}\n\n/**\n * Adjusts the dimensions of the given element to match those of the viewport. Also, when the\n * viewport is resized, the given element will also be resized to match.\n *\n * @param {HTMLCanvasElement} canvas\n * @param {WebGLRenderingContext} gl\n * @param {Function} onGLResized\n * @param {?Number} [updateInterval=150]\n */\nfunction bindGLContextToViewportDimensions(canvas, gl, onGLResized, updateInterval = 150) {\n  _resizeGLContextToMatchViewportDimensions(canvas, gl);\n  const debouncedResize =\n      debounce(_ => {\n        _resizeGLContextToMatchViewportDimensions(canvas, gl);\n        onGLResized();\n      }, updateInterval);\n  window.addEventListener('resize', debouncedResize);\n}\n\n/**\n * Resizes the given element to match the dimensions of the viewport components.\n *\n * @param {HTMLCanvasElement} canvas\n * @param {WebGLRenderingContext} gl\n * @private\n */\nfunction _resizeGLContextToMatchViewportDimensions(canvas, gl) {\n  // Account for high-definition DPI displays.\n  const devicePixelToCssPixelRatio = window.devicePixelRatio || 1;\n  viewportWidth = Math.floor(canvas.clientWidth * devicePixelToCssPixelRatio);\n  viewportHeight = Math.floor(canvas.clientHeight * devicePixelToCssPixelRatio);\n  canvas.width = viewportWidth;\n  canvas.height = viewportHeight;\n  gl.viewport(0, 0, viewportWidth, viewportHeight);\n}\n\n/**\n * @returns {number}\n */\nfunction getViewportWidth() {\n  return viewportWidth;\n}\n\n/**\n * @returns {number}\n */\nfunction getViewportHeight() {\n  return viewportHeight;\n}\n\n/**\n * Binds a framebuffer to the GL context.\n *\n * @param {WebGLRenderingContext} gl\n * @param {WebGLFramebuffer} framebuffer\n */\nfunction bindFramebuffer(gl, framebuffer, width, height) {\n  // FIXME: Remove or add back in?\n  // width = width || getViewportWidth();\n  // height = height || getViewportHeight();\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n  // FIXME: Remove or add back in?\n  // gl.viewport(0, 0, width, height);\n}\n\n/**\n * Creates a framebuffer and attaches a texture to the framebuffer.\n *\n * This means that when we bind to the framebuffer, draw calls will render to the given texture.\n *\n * @param {WebGLRenderingContext} gl\n * @param {WebGLTexture} texture\n * @param {WebGLRenderBuffer} [renderBuffer]\n * @returns {WebGLFramebuffer}\n */\nfunction createFramebuffer(gl, texture, renderBuffer) {\n  const framebuffer = gl.createFramebuffer();\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  if (renderBuffer) {\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderBuffer);\n  }\n\n  return framebuffer;\n}\n\n/**\n * Creates a texture for rendering to.\n *\n * @param {WebGLRenderingContext} gl\n * @param {number} [width] Defaults to the viewport width stored in gl-util.\n * @param {number} [height] Defaults to the viewport height stored in gl-util.\n * @returns {WebGLTexture}\n */\nfunction createTextureForRendering(gl, width, height) {\n  width = width || getViewportWidth();\n  height = height || getViewportHeight();\n\n  // TODO: Double-check these params\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n  return texture;\n}\n\n/**\n * Creates a render buffer.\n *\n * @param {WebGLRenderingContext} gl\n * @param {number} [width] Defaults to the viewport width stored in gl-util.\n * @param {number} [height] Defaults to the viewport height stored in gl-util.\n * @returns {WebGLRenderBuffer}\n */\nfunction createRenderBuffer(gl, width, height) {\n  width = width || getViewportWidth();\n  height = height || getViewportHeight();\n\n  const renderBuffer = gl.createRenderbuffer();\n  gl.bindRenderbuffer(gl.RENDERBUFFER, renderBuffer);\n  gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);\n\n  return renderBuffer;\n}\n\nconst _SQUARE_COORDINATES_2D = [\n  0, 0,\n  1, 0,\n  0, 1,\n\n  1, 0,\n  1, 1,\n  0, 1,\n];\n\n/**\n * @param {WebGLRenderingContext} gl\n * @returns {AttributeConfig}\n */\nfunction create2DSquarePositionsConfig(gl) {\n  const positionsBuffer = createBufferFromData(gl, _SQUARE_COORDINATES_2D);\n  return {\n    buffer: positionsBuffer,\n    size: 2,\n    type: gl.FLOAT,\n    normalized: false,\n    stride: 0,\n    offset: 0\n  };\n}\n\n//\n// Geometrical calculations.\n//\n\n/**\n * Given an array of individual vertex positions and an array of vertex indices, creates an expanded\n * array of the positions grouped by the triangles they form.\n *\n * @param {Array.<Number>} individualVertexPositions\n * @param {Array.<Number>} vertexIndices\n * @returns {Array.<Number>}\n */\nfunction expandVertexIndicesToDuplicatePositions(individualVertexPositions, vertexIndices) {\n  const expandedVertexPositions = [];\n\n  for (let i = 0, j = 0, k = 0, count = vertexIndices.length; i < count; i++, k += 3) {\n    j = vertexIndices[i] * 3;\n\n    expandedVertexPositions[k] = individualVertexPositions[j];\n    expandedVertexPositions[k + 1] = individualVertexPositions[j + 1];\n    expandedVertexPositions[k + 2] = individualVertexPositions[j + 2];\n  }\n\n  return expandedVertexPositions;\n}\n\n/**\n * Computes normal vectors that are each orthogonal to the triangles they are a part of.\n *\n * The given vertices should represent individual triangles whose vertices are defined in clockwise\n * order (as seen when looking at the exterior side).\n *\n * @param {Array.<Number>} vertices\n * @returns {Array.<Number>}\n */\nfunction calculateOrthogonalVertexNormals(vertices) {\n  const vertex1 = vec3.create();\n  const vertex2 = vec3.create();\n  const vertex3 = vec3.create();\n  const vectorA = vec3.create();\n  const vectorB = vec3.create();\n  const normal1 = vec3.create();\n  const normal2 = vec3.create();\n  const normal3 = vec3.create();\n\n  const normals = [];\n\n  // Loop over each triangle in the flattened vertex array.\n  for (let i = 0, count = vertices.length; i < count; i += 9) {\n    // Get the vertices of the current triangle from the flattened array.\n    vec3.set(vertex1, vertices[i + 0], vertices[i + 1], vertices[i + 2]);\n    vec3.set(vertex2, vertices[i + 3], vertices[i + 4], vertices[i + 5]);\n    vec3.set(vertex3, vertices[i + 6], vertices[i + 7], vertices[i + 8]);\n\n    // Compute the normals.\n    vec3.subtract(vectorA, vertex3, vertex1);\n    vec3.subtract(vectorB, vertex2, vertex1);\n    vec3.cross(normal1, vectorA, vectorB);\n    vec3.normalize(normal1, normal1);\n\n    vec3.subtract(vectorA, vertex1, vertex2);\n    vec3.subtract(vectorB, vertex3, vertex2);\n    vec3.cross(normal2, vectorA, vectorB);\n    vec3.normalize(normal2, normal2);\n\n    vec3.subtract(vectorA, vertex2, vertex3);\n    vec3.subtract(vectorB, vertex1, vertex3);\n    vec3.cross(normal3, vectorA, vectorB);\n    vec3.normalize(normal3, normal3);\n\n    // Save the normal vectors in a flattened array.\n    normals[i + 0] = normal1[0];\n    normals[i + 1] = normal1[1];\n    normals[i + 2] = normal1[2];\n    normals[i + 3] = normal2[0];\n    normals[i + 4] = normal2[1];\n    normals[i + 5] = normal2[2];\n    normals[i + 6] = normal3[0];\n    normals[i + 7] = normal3[1];\n    normals[i + 8] = normal3[2];\n  }\n\n  return normals;\n}\n\nconst MAX_TEXTURE_V_COORDINATE_DELTA = 0.5;\n\n/**\n * Calculates lat-long texture coordinates for the given vertex positions.\n *\n * @param {Array.<Number>} vertexPositions\n * @returns {Array.<Number>}\n * @private\n */\nfunction calculateLatLongTextureCoordinates(vertexPositions) {\n  const currentVertexPosition = vec3.create();\n  const currentTextureCoordinates = vec2.create();\n  const textureCoordinates = [];\n\n  // Calculate the texture coordinates of each vertex.\n  for (let i = 0, j = 0, count = vertexPositions.length; i < count; i += 3, j += 2) {\n    vec3.set(currentVertexPosition,\n        vertexPositions[i], vertexPositions[i + 1], vertexPositions[i + 2]);\n    _getTextureCoordinatesOfLatLongPosition(currentTextureCoordinates, currentVertexPosition);\n    textureCoordinates[j] = currentTextureCoordinates[0];\n    textureCoordinates[j + 1] = currentTextureCoordinates[1];\n  }\n\n  _correctTextureForTrianglesAroundSeam(textureCoordinates);\n\n  return textureCoordinates;\n}\n\n/**\n * Calculates cylindrical texture coordinates for the given vertex positions.\n *\n * This assumes the cylinder is aligned with the z-axis and centered at the origin.\n *\n * @param {Array.<Number>} vertexPositions\n * @returns {Array.<Number>}\n * @private\n */\nfunction calculateCylindricalTextureCoordinates(vertexPositions) {\n  const currentVertexPosition = vec3.create();\n  const currentTextureCoordinates = vec2.create();\n  const textureCoordinates = [];\n\n  // Calculate the texture coordinates of each vertex.\n  for (let i = 0, j = 0, count = vertexPositions.length; i < count; i += 3, j += 2) {\n    vec3.set(currentVertexPosition,\n        vertexPositions[i], vertexPositions[i + 1], vertexPositions[i + 2]);\n    _getTextureCoordinatesOfCylindricalPosition(currentTextureCoordinates, currentVertexPosition);\n    textureCoordinates[j] = currentTextureCoordinates[0];\n    textureCoordinates[j + 1] = currentTextureCoordinates[1];\n  }\n\n  _correctTextureForTrianglesAroundSeam(textureCoordinates);\n\n  return textureCoordinates;\n}\n\n/**\n * @param {Array.<Number>} textureCoordinates\n */\nfunction _correctTextureForTrianglesAroundSeam(textureCoordinates) {\n  let v1;\n  let v2;\n  let v3;\n\n  // Determine which triangles span the seam across 0/2PI, and correct their textures.\n  for (let i = 0, count = textureCoordinates.length; i < count; i += 6) {\n    v1 = textureCoordinates[i];\n    v2 = textureCoordinates[i + 2];\n    v3 = textureCoordinates[i + 4];\n\n    if (v3 - v1 > MAX_TEXTURE_V_COORDINATE_DELTA || v2 - v1 > MAX_TEXTURE_V_COORDINATE_DELTA) {\n      textureCoordinates[i]++;\n    }\n    if (v3 - v2 > MAX_TEXTURE_V_COORDINATE_DELTA || v1 - v2 > MAX_TEXTURE_V_COORDINATE_DELTA) {\n      textureCoordinates[i + 2]++;\n    }\n    if (v2 - v3 > MAX_TEXTURE_V_COORDINATE_DELTA || v1 - v3 > MAX_TEXTURE_V_COORDINATE_DELTA) {\n      textureCoordinates[i + 4]++;\n    }\n  }\n}\n\n/**\n * Calculate the texture coordinates for a normalized point on a globe.\n *\n * @param {vec2} textureCoordinates Output parameter.\n * @param {vec3} vertexPosition Input parameter.\n * @private\n */\nfunction _getTextureCoordinatesOfLatLongPosition(textureCoordinates, vertexPosition) {\n  const x = vertexPosition[0];\n  const y = vertexPosition[1];\n  const z = vertexPosition[2];\n\n  let longitude;\n  if (y !== 0) {\n    longitude = Math.atan2(x, y);\n  } else if (x > 0) {\n    longitude = HALF_PI;\n  } else {\n    longitude = -HALF_PI;\n  }\n\n  const u = (longitude + Math.PI) / TWO_PI;\n\n  // TODO: Should I instead be calculating the v value from wrapping the texture around the globe\n  // curvature rather than simply projecting it directly?\n\n  // This assumes that the texture has been vertically distorted so that it can be directly\n  // projected onto the curvature of the globe.\n  const v = (z + 1) * 0.5;\n\n  textureCoordinates[0] = u;\n  textureCoordinates[1] = v;\n}\n\n/**\n * Calculate the texture coordinates for a normalized point on a cylinder.\n *\n * This assumes the cylinder is aligned with the z-axis and centered at the origin.\n *\n * @param {vec2} textureCoordinates Output parameter.\n * @param {vec3} vertexPosition Input parameter.\n * @private\n */\nfunction _getTextureCoordinatesOfCylindricalPosition(textureCoordinates, vertexPosition) {\n  const x = vertexPosition[0];\n  const y = vertexPosition[1];\n  const z = vertexPosition[2];\n\n  let longitude;\n  if (y !== 0) {\n    longitude = Math.atan2(x, y);\n  } else if (x > 0) {\n    longitude = HALF_PI;\n  } else {\n    longitude = -HALF_PI;\n  }\n\n  const u = (longitude + Math.PI) / TWO_PI;\n\n  const v = z > 0 ? 1 : 0;\n\n  textureCoordinates[0] = u;\n  textureCoordinates[1] = v;\n}\n\n/**\n * Expands the given vertices around the seam where longitude switches from 0 to 2PI.\n *\n * This is useful because, when applying a spherical texture using lat-long coordinates, any\n * triangle that spans the seam (from longitude 2PI to 0) would otherwise show the wrong result.\n *\n * @param {Array.<Number>} oldVertexPositions\n * @param {Array.<Number>} oldVertexIndices\n * @returns {{vertexPositions: Array.<Number>, vertexIndices: Array.<Number>}}\n */\nfunction expandVertexIndicesAroundLongitudeSeam(oldVertexPositions, oldVertexIndices) {\n  // const newVertexPositions = [];\n  // const newVertexIndices = [];\n  //\n  // ****\n  // // TODO: loop over triangles, use _getTextureCoordinatesOfLatLongPosition on each vertex,\n  // // check if two vertices in a triangle span the seam; to check the span, just check if both are\n  // // within a distance from the seam, but on opposite ends;\n  //\n  // return {\n  //   vertexPositions: newVertexPositions,\n  //   vertexIndices: newVertexIndices\n  // };\n\n  return {\n    vertexPositions: oldVertexPositions,\n    vertexIndices: oldVertexIndices\n  };\n}\n\n/**\n * Subdivides the triangles of a shape and projects all resulting vertices to a radius of one.\n *\n * @param {number} divisionFactor\n * @param {Array.<Number>} oldPositions\n * @param {Array.<Number>} [oldIndices]\n * @returns {{vertexPositions: Array.<Number>, vertexIndices: Array.<Number>}}\n */\nfunction tesselateSphere(divisionFactor, oldPositions, oldIndices) {\n  const newPositions = _expandAndTesselateTriangles(divisionFactor, oldPositions, oldIndices);\n\n  // Convert the expanded positions array into a unique positions array with a corresponding indices\n  // array.\n  const positionsAndIndices = dedupVertexArrayWithPositionsAndIndicesArrays(newPositions);\n\n  // Project the given positions to a distance of one.\n  _normalizePositions(positionsAndIndices.vertexPositions, positionsAndIndices.vertexPositions);\n\n  return positionsAndIndices;\n}\n\n/**\n * Subdivides triangles.\n *\n * This has the side-effect of flattening the given vertices into an expanded list that can contain\n * duplicate positions.\n *\n * @param {number} divisionFactor\n * @param {Array.<Number>} oldPositions\n * @param {Array.<Number>} [oldIndices]\n * @returns {Array.<Number>}\n * @private\n */\nfunction _expandAndTesselateTriangles(divisionFactor, oldPositions, oldIndices) {\n  const expandedOldPositions = oldIndices\n      ? expandVertexIndicesToDuplicatePositions(oldPositions, oldIndices)\n      : oldPositions;\n\n  const newPositions = [];\n  const a = vec3.create();\n  const b = vec3.create();\n  const c = vec3.create();\n  const aToB = vec3.create();\n  const aToC = vec3.create();\n  const bToC = vec3.create();\n  const rowDelta = vec3.create();\n  const columnDelta = vec3.create();\n  const backwardsDelta = vec3.create();\n  const rowStartPoint = vec3.create();\n  const rowColumnStartPoint = vec3.create();\n  const tempVec = vec3.create();\n\n  let oldIndex;\n  let count;\n  let newIndex;\n  let rowIndex;\n  let columnIndex;\n\n  //\n  // The basic tesselation algorithm:\n  // - Iterate across the original triangles that we are sub-dividing.\n  // - A, B, and C are the vertices of the current, original triangle.\n  // - Consider \"rows\" to iterate across the a-to-b direction and \"columns\" to iterate across the\n  //   a-to-c direction.\n  // - First calculate the distance between one row and one column.\n  // - Then loop over the rows and columns and create a the new triangle for each \"cell\".\n  //\n  //                   /\\\n  //                 B   \\--- A \"column\"\n  //                 o    \\\n  //                / \\   /\n  //               /   \\             rowDelta:      columnDelta:     backwardsDelta:\n  //              o-----o                 o             o\n  //             / \\   / \\               /               \\              o-----o\n  //            /   \\ /   \\             /                 \\\n  //           o-----o-----o           o                   o\n  //          / \\   / \\   / \\\n  //         /   \\ /   \\ /   \\\n  //        o-----o-----o-----o\n  //       / \\   / \\   / \\   / \\\n  //      /   \\ /   \\ /   \\ /   \\\n  //  A  o-----o-----o-----o-----o  C\n  //\n  //       \\_____\\\n  //           \\\n  //         A \"row\"\n  //\n\n  // Loop over the old triangles.\n  for (oldIndex = 0, newIndex = 0, count = expandedOldPositions.length;\n       oldIndex < count;\n       oldIndex += 9) {\n    // Pull out the three vertices of the current triangle.\n    vec3.set(a,\n        expandedOldPositions[oldIndex],\n        expandedOldPositions[oldIndex + 1],\n        expandedOldPositions[oldIndex + 2]);\n    vec3.set(b,\n        expandedOldPositions[oldIndex + 3],\n        expandedOldPositions[oldIndex + 4],\n        expandedOldPositions[oldIndex + 5]);\n    vec3.set(c,\n        expandedOldPositions[oldIndex + 6],\n        expandedOldPositions[oldIndex + 7],\n        expandedOldPositions[oldIndex + 8]);\n\n    vec3.subtract(aToB, b, a);\n    vec3.subtract(bToC, c, b);\n    vec3.subtract(aToC, c, a);\n\n    vec3.scale(rowDelta, aToB, 1 / divisionFactor);\n    vec3.scale(columnDelta, bToC, 1 / divisionFactor);\n    vec3.scale(backwardsDelta, aToC, 1 / divisionFactor);\n\n    // Loop over each new division (row) for the current triangle.\n    for (rowIndex = 0; rowIndex < divisionFactor; rowIndex++) {\n      vec3.scaleAndAdd(rowStartPoint, a, rowDelta, rowIndex);\n\n      // Create the first triangle in the row (address the fence-post problem).\n      newPositions[newIndex++] = rowStartPoint[0];\n      newPositions[newIndex++] = rowStartPoint[1];\n      newPositions[newIndex++] = rowStartPoint[2];\n      vec3.add(tempVec, rowStartPoint, rowDelta);\n      newPositions[newIndex++] = tempVec[0];\n      newPositions[newIndex++] = tempVec[1];\n      newPositions[newIndex++] = tempVec[2];\n      vec3.add(tempVec, rowStartPoint, backwardsDelta);\n      newPositions[newIndex++] = tempVec[0];\n      newPositions[newIndex++] = tempVec[1];\n      newPositions[newIndex++] = tempVec[2];\n\n      // Loop over the new triangles in the current division.\n      for (columnIndex = 1; columnIndex <= rowIndex; columnIndex++) {\n        vec3.scaleAndAdd(rowColumnStartPoint, rowStartPoint, columnDelta, columnIndex);\n\n        newPositions[newIndex++] = rowColumnStartPoint[0];\n        newPositions[newIndex++] = rowColumnStartPoint[1];\n        newPositions[newIndex++] = rowColumnStartPoint[2];\n        vec3.subtract(tempVec, rowColumnStartPoint, columnDelta);\n        newPositions[newIndex++] = tempVec[0];\n        newPositions[newIndex++] = tempVec[1];\n        newPositions[newIndex++] = tempVec[2];\n        vec3.add(tempVec, rowColumnStartPoint, rowDelta);\n        newPositions[newIndex++] = tempVec[0];\n        newPositions[newIndex++] = tempVec[1];\n        newPositions[newIndex++] = tempVec[2];\n\n        newPositions[newIndex++] = rowColumnStartPoint[0];\n        newPositions[newIndex++] = rowColumnStartPoint[1];\n        newPositions[newIndex++] = rowColumnStartPoint[2];\n        vec3.add(tempVec, rowColumnStartPoint, rowDelta);\n        newPositions[newIndex++] = tempVec[0];\n        newPositions[newIndex++] = tempVec[1];\n        newPositions[newIndex++] = tempVec[2];\n        vec3.add(tempVec, rowColumnStartPoint, backwardsDelta);\n        newPositions[newIndex++] = tempVec[0];\n        newPositions[newIndex++] = tempVec[1];\n        newPositions[newIndex++] = tempVec[2];\n      }\n    }\n  }\n\n  return newPositions;\n}\n\n/**\n * Projects the given positions to a distance of one.\n *\n * @param {Array.<Number>} out\n * @param {Array.<Number>} positions\n * @private\n */\nfunction _normalizePositions(out, positions) {\n  const tempVec = vec3.create();\n\n  for (let i = 0, count = positions.length; i < count; i += 3) {\n    vec3.set(tempVec, positions[i], positions[i + 1], positions[i + 2]);\n\n    vec3.normalize(tempVec, tempVec);\n\n    out[i] = tempVec[0];\n    out[i + 1] = tempVec[1];\n    out[i + 2] = tempVec[2];\n  }\n}\n\n/**\n * Given a collection of vertices that possibly contains duplicates, creates an array of the unique\n * vertex positions and an array of the indices of the original, duplicated vertices in the unique\n * array.\n *\n * This is useful for rendering using gl.drawElements (with gl.ELEMENT_ARRAY_BUFFER) instead of\n * gl.drawArrays.\n *\n * NOTE: Although this function does partially address floating-point round-off errors within the\n * given positions, it does not guarantee correctness.\n *\n * @param {Array.<Number>} oldVertexPositions\n * @returns {{vertexPositions: Array.<Number>, vertexIndices: Array.<Number>}}\n */\nfunction dedupVertexArrayWithPositionsAndIndicesArrays(oldVertexPositions) {\n  const vertexPositions = [];\n  const vertexIndices = [];\n\n  const vertexToIndexMap = new HashMap(_vertexHashFunction);\n  const vertex = vec3.create();\n  let oldCoordinateIndex;\n  let oldCoordinateCount;\n  let newVertexIndex;\n\n  // Loop over the original, duplicated vertex positions.\n  for (oldCoordinateIndex = 0, oldCoordinateCount = oldVertexPositions.length;\n       oldCoordinateIndex < oldCoordinateCount;\n       oldCoordinateIndex += 3) {\n    vec3.set(vertex,\n        oldVertexPositions[oldCoordinateIndex],\n        oldVertexPositions[oldCoordinateIndex + 1],\n        oldVertexPositions[oldCoordinateIndex + 2]);\n\n    // Has this position already been recorded?\n    if (!vertexToIndexMap.has(vertex)) {\n      // Record the index of the unique vertex position.\n      newVertexIndex = vertexPositions.length / 3;\n      vertexToIndexMap.set(vertex, newVertexIndex);\n\n      // Record the unique vertex position.\n      vertexPositions.push(vertex[0]);\n      vertexPositions.push(vertex[1]);\n      vertexPositions.push(vertex[2]);\n    }\n\n    newVertexIndex = vertexToIndexMap.get(vertex);\n\n    // Record the index of the unique position.\n    vertexIndices.push(newVertexIndex);\n  }\n\n  return {\n    vertexPositions: vertexPositions,\n    vertexIndices: vertexIndices\n  };\n}\n\nconst _VERTEX_COORDINATE_BUCKET_SIZE_DIGITS = 4;\n\n// This offset is important for preventing bucket-aligned numbers from being placed in inconsistent\n// buckets. For example, whole integer values could easily be placed in lower or higher buckets\n// depending on round-off error.\nconst _OFFSET = Math.random();\n\n/**\n * Calculates a hash code for the given vertex.\n *\n * NOTE: This does not guarantee correct results. Due to round-off error, \"equal\" coordinates could\n * be calculated is being in different buckets. Larger bucket sizes might reduce the rate of false\n * negatives, but with the trade-off of potentially introducing false positives.\n *\n * @param {vec3} vertex\n * @returns {string}\n * @private\n */\nfunction _vertexHashFunction(vertex) {\n  return `${(vertex[0] + _OFFSET).toFixed(_VERTEX_COORDINATE_BUCKET_SIZE_DIGITS)},` +\n      `${(vertex[1] + _OFFSET).toFixed(_VERTEX_COORDINATE_BUCKET_SIZE_DIGITS)},` +\n      `${(vertex[2] + _OFFSET).toFixed(_VERTEX_COORDINATE_BUCKET_SIZE_DIGITS)}`;\n}\n\n/**\n * Calculate the vertex positions for a section of a sphere.\n *\n * - These points will lie along latitude-longitude lines.\n * - The shape is centered around the origin with the poles aligned with the z-axis.\n * - The radius of the circle will be one.\n *\n * @param {number} startPitchIndex\n * @param {number} endPitchIndex\n * @param {number} deltaPitch\n * @param {number} startAzimuthIndex\n * @param {number} endAzimuthIndex\n * @param {number} deltaAzimuth\n * @return {Array.<Number>}\n * @private\n */\nfunction calculateSphericalSection(startPitchIndex, endPitchIndex, deltaPitch,\n                                   startAzimuthIndex, endAzimuthIndex, deltaAzimuth) {\n  const vertexPositions = [];\n  let vertexPositionsIndex = 0;\n\n  let pitchIndex;\n  let azimuthIndex;\n  let lowerPitch;\n  let upperPitch;\n  let lowerAzimuth;\n  let upperAzimuth;\n  let x1;\n  let y1;\n  let z1;\n  let x2;\n  let y2;\n  let z2;\n  let x3;\n  let y3;\n  let z3;\n  let x4;\n  let y4;\n  let z4;\n\n  // TODO: This implementation calculates all coordinates multiple times. Refactor it to be more\n  // efficient.\n\n  // Loop over each latitudinal strip.\n  for (pitchIndex = startPitchIndex; pitchIndex < endPitchIndex; pitchIndex++) {\n    lowerPitch = deltaPitch * pitchIndex;\n    upperPitch = deltaPitch + lowerPitch;\n\n    // Create the triangles for the strip at the current pitch.\n    for (azimuthIndex = startAzimuthIndex; azimuthIndex < endAzimuthIndex; azimuthIndex++) {\n      lowerAzimuth = deltaAzimuth * azimuthIndex;\n      upperAzimuth = deltaAzimuth + lowerAzimuth;\n\n      // The corners of the current square.\n\n      x1 = Math.sin(lowerPitch) * Math.cos(lowerAzimuth);\n      y1 = Math.sin(lowerPitch) * Math.sin(lowerAzimuth);\n      z1 = Math.cos(lowerPitch);\n\n      x2 = Math.sin(upperPitch) * Math.cos(lowerAzimuth);\n      y2 = Math.sin(upperPitch) * Math.sin(lowerAzimuth);\n      z2 = Math.cos(upperPitch);\n\n      x3 = Math.sin(lowerPitch) * Math.cos(upperAzimuth);\n      y3 = Math.sin(lowerPitch) * Math.sin(upperAzimuth);\n      z3 = Math.cos(lowerPitch);\n\n      x4 = Math.sin(upperPitch) * Math.cos(upperAzimuth);\n      y4 = Math.sin(upperPitch) * Math.sin(upperAzimuth);\n      z4 = Math.cos(upperPitch);\n\n      // The first triangle.\n\n      vertexPositions[vertexPositionsIndex] = x1;\n      vertexPositions[vertexPositionsIndex + 1] = y1;\n      vertexPositions[vertexPositionsIndex + 2] = z1;\n      vertexPositions[vertexPositionsIndex + 3] = x2;\n      vertexPositions[vertexPositionsIndex + 4] = y2;\n      vertexPositions[vertexPositionsIndex + 5] = z2;\n      vertexPositions[vertexPositionsIndex + 6] = x3;\n      vertexPositions[vertexPositionsIndex + 7] = y3;\n      vertexPositions[vertexPositionsIndex + 8] = z3;\n\n      // The second triangle.\n\n      vertexPositions[vertexPositionsIndex + 9] = x4;\n      vertexPositions[vertexPositionsIndex + 10] = y4;\n      vertexPositions[vertexPositionsIndex + 11] = z4;\n      vertexPositions[vertexPositionsIndex + 12] = x3;\n      vertexPositions[vertexPositionsIndex + 13] = y3;\n      vertexPositions[vertexPositionsIndex + 14] = z3;\n      vertexPositions[vertexPositionsIndex + 15] = x2;\n      vertexPositions[vertexPositionsIndex + 16] = y2;\n      vertexPositions[vertexPositionsIndex + 17] = z2;\n\n      vertexPositionsIndex += 18;\n    }\n  }\n\n  return vertexPositions;\n}\n\n/**\n * Calculate the vertex positions for a section of a cylinder.\n *\n * The shape is centered around the origin with the poles aligned with the z-axis.\n *\n * @param {number} cylinderBottom\n * @param {number} cylinderTop\n * @param {number} startIndex\n * @param {number} endIndex\n * @param {number} delta\n * @returns {Array.<Number>}\n * @private\n */\nfunction calculateCylindricalSection(cylinderBottom, cylinderTop, startIndex, endIndex, delta) {\n  const vertexPositions = [];\n  let vertexPositionsIndex = 0;\n\n  let index;\n  let lowerAzimuth;\n  let upperAzimuth;\n  let x1;\n  let y1;\n  let z1;\n  let x2;\n  let y2;\n  let z2;\n  let x3;\n  let y3;\n  let z3;\n  let x4;\n  let y4;\n  let z4;\n\n  // Create the triangles for the cylindrical strip.\n  for (index = startIndex; index < endIndex; index++) {\n    lowerAzimuth = delta * index;\n    upperAzimuth = delta + lowerAzimuth;\n\n    // The corners of the current square.\n\n    x1 = Math.cos(lowerAzimuth);\n    y1 = Math.sin(lowerAzimuth);\n    z1 = cylinderBottom;\n\n    x2 = Math.cos(lowerAzimuth);\n    y2 = Math.sin(lowerAzimuth);\n    z2 = cylinderTop;\n\n    x3 = Math.cos(upperAzimuth);\n    y3 = Math.sin(upperAzimuth);\n    z3 = cylinderBottom;\n\n    x4 = Math.cos(upperAzimuth);\n    y4 = Math.sin(upperAzimuth);\n    z4 = cylinderTop;\n\n    // The first triangle.\n\n    vertexPositions[vertexPositionsIndex] = x1;\n    vertexPositions[vertexPositionsIndex + 1] = y1;\n    vertexPositions[vertexPositionsIndex + 2] = z1;\n    vertexPositions[vertexPositionsIndex + 3] = x2;\n    vertexPositions[vertexPositionsIndex + 4] = y2;\n    vertexPositions[vertexPositionsIndex + 5] = z2;\n    vertexPositions[vertexPositionsIndex + 6] = x3;\n    vertexPositions[vertexPositionsIndex + 7] = y3;\n    vertexPositions[vertexPositionsIndex + 8] = z3;\n\n    // The second triangle.\n\n    vertexPositions[vertexPositionsIndex + 9] = x4;\n    vertexPositions[vertexPositionsIndex + 10] = y4;\n    vertexPositions[vertexPositionsIndex + 11] = z4;\n    vertexPositions[vertexPositionsIndex + 12] = x3;\n    vertexPositions[vertexPositionsIndex + 13] = y3;\n    vertexPositions[vertexPositionsIndex + 14] = z3;\n    vertexPositions[vertexPositionsIndex + 15] = x2;\n    vertexPositions[vertexPositionsIndex + 16] = y2;\n    vertexPositions[vertexPositionsIndex + 17] = z2;\n\n    vertexPositionsIndex += 18;\n  }\n\n  return vertexPositions;\n}\n\n/**\n * Scale and then translate the 3-dimensional positions in the given flattened array.\n *\n * The shape is centered around the origin with the poles aligned with the z-axis.\n *\n * @param {Array.<Number>} vertexPositions Output.\n * @param {number} startIndex\n * @param {number} endIndex\n * @param {vec3} scale\n * @param {vec3} translate\n * @private\n */\nfunction scaleThenTranslatePositions(vertexPositions, startIndex, endIndex, scale, translate) {\n  const scaleX = scale[0];\n  const scaleY = scale[1];\n  const scaleZ = scale[2];\n  const translateX = translate[0];\n  const translateY = translate[1];\n  const translateZ = translate[2];\n\n  for (let i = startIndex; i < endIndex; i += 3) {\n    vertexPositions[i] = vertexPositions[i] * scaleX + translateX;\n    vertexPositions[i + 1] = vertexPositions[i + 1] * scaleY + translateY;\n    vertexPositions[i + 2] = vertexPositions[i + 2] * scaleZ + translateZ;\n  }\n}\n\n// Export this module's logic\n\nexport {\n  getViewportWidth,\n  getViewportHeight,\n  getWebGLContext,\n  createBuffer,\n  getAttribLocation,\n  buildProgram,\n  buildShader,\n  loadShader,\n  loadProgram,\n  createBufferFromData,\n  bindGLContextToViewportDimensions,\n  bindFramebuffer,\n  createFramebuffer,\n  createTextureForRendering,\n  createRenderBuffer,\n  create2DSquarePositionsConfig,\n\n  expandVertexIndicesToDuplicatePositions,\n  calculateOrthogonalVertexNormals,\n  calculateLatLongTextureCoordinates,\n  calculateCylindricalTextureCoordinates,\n  expandVertexIndicesAroundLongitudeSeam,\n  tesselateSphere,\n  dedupVertexArrayWithPositionsAndIndicesArrays,\n  calculateSphericalSection,\n  calculateCylindricalSection,\n  scaleThenTranslatePositions,\n};\n\n// Some type defs to make my editor's auto-complete happy.\n\n/** @typedef {Object} WebGLProgram */\n/** @typedef {Object} WebGLShader */\n/** @typedef {Object} WebGLBuffer */\n/** @typedef {Object} WebGLTexture */\n/** @typedef {Float32Array|Array.<Number>} mat3 */\n/** @typedef {Float32Array|Array.<Number>} mat4 */\n/** @typedef {Float32Array|Array.<Number>} quat */\n/** @typedef {Float32Array|Array.<Number>} vec2 */\n/** @typedef {Float32Array|Array.<Number>} vec3 */\n/** @typedef {Float32Array|Array.<Number>} vec4 */\n","/**\n * A hash map that uses a custom hash function.\n */\nclass HashMap {\n  /**\n   * @param {Function} hashFunction\n   */\n  constructor(hashFunction) {\n    this._hashFunction = hashFunction;\n    this._map = new Map();\n  }\n\n  /**\n   * @param {Object} key\n   * @param {Object} value\n   */\n  set(key, value) {\n    const hashCode = this._hashFunction(key);\n    this._map.set(hashCode, value);\n  }\n\n  /**\n   * @param {Object} key\n   * @returns {Object}\n   */\n  get(key) {\n    const hashCode = this._hashFunction(key);\n    return this._map.get(hashCode);\n  }\n\n  /**\n   * @param {Object} key\n   * @returns {boolean}\n   */\n  has(key) {\n    const hashCode = this._hashFunction(key);\n    return this._map.has(hashCode);\n  }\n\n  /**\n   * @param {Object} item\n   * @returns {boolean}\n   */\n  remove(item) {\n    return this._map.delete(item);\n  }\n\n  /**\n   * @param {Function} callback\n   */\n  forEach(callback) {\n    this._map.forEach(callback);\n  }\n\n  clear() {\n    this._map.clear();\n  }\n\n  /**\n   * @returns {number}\n   */\n  get size() {\n    return this._map.size;\n  }\n}\n\nexport {HashMap};\n","/**\n * This module defines a collection of static general utility functions.\n */\n\n// TODO: This should be set from somewhere else (probably as a param to controller like before; but then I need to make this updatable)\nconst isInDevMode = true;\n\n/**\n * Adds an event listener for each of the given events to each of the given elements.\n *\n * @param {Array.<HTMLElement>} elements The elements to add event listeners to.\n * @param {Array.<String>} events The event listeners to add to the elements.\n * @param {Function} callback The single callback for handling the events.\n */\nfunction listenToMultipleForMultiple(elements, events, callback) {\n  elements.forEach(element => {\n    events.forEach(event => {\n      element.addEventListener(event, callback, false);\n    });\n  });\n}\n\n/**\n * Creates a DOM element with the given tag name, appends it to the given parent element, and\n * gives it the given id and classes.\n *\n * @param {string} tagName The tag name to give the new element.\n * @param {HTMLElement} [parent] The parent element to append the new element to.\n * @param {string} [id] The id to give the new element.\n * @param {Array.<String>} [classes] The classes to give the new element.\n * @returns {HTMLElement} The new element.\n */\nfunction createElement(tagName, parent, id, classes) {\n  const element = document.createElement(tagName);\n  if (parent) {\n    parent.appendChild(element);\n  }\n  if (id) {\n    element.id = id;\n  }\n  if (classes) {\n    classes.forEach(className => addClass(element, className));\n  }\n  return element;\n}\n\n/**\n * Determines whether the given element contains the given class.\n *\n * @param {HTMLElement} element The element to check.\n * @param {string} className The class to check for.\n * @returns {boolean} True if the element does contain the class.\n */\nfunction containsClass(element, className) {\n  let startIndex;\n  let indexAfterEnd;\n  startIndex = element.className.indexOf(className);\n  if (startIndex >= 0) {\n    if (startIndex === 0 || element.className[startIndex - 1] === ' ') {\n      indexAfterEnd = startIndex + className.length;\n      if (indexAfterEnd === element.className.length ||\n        element.className[indexAfterEnd] === ' ') {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/**\n * Toggles whether the given element has the given class. If the enabled argument is given, then\n * the inclusion of the class will be forced. That is, if enabled=true, then this will ensure the\n * element has the class; if enabled=false, then this will ensure the element does NOT have the\n * class; if enabled=undefined, then this will simply toggle whether the element has the class.\n *\n * @param {HTMLElement} element The element to add the class to or remove the class from.\n * @param {string} className The class to add or remove.\n * @param {boolean} [enabled] If given, then the inclusion of the class will be forced.\n */\nfunction toggleClass(element, className, enabled) {\n  if (typeof enabled === 'undefined') {\n    if (containsClass(element, className)) {\n      removeClass(element, className);\n    }\n    else {\n      addClass(element, className);\n    }\n  }\n  else if (enabled) {\n    addClass(element, className);\n  }\n  else {\n    removeClass(element, className);\n  }\n}\n\n/**\n * Gets the coordinates of the element relative to the top-left corner of the page.\n *\n * @param {HTMLElement} element The element to get the coordinates of.\n * @returns {{x: Number, y: Number}} The coordinates of the element relative to the top-left\n * corner of the page.\n */\nfunction getPageOffset(element) {\n  let x = 0;\n  let y = 0;\n  while (element) {\n    x += element.offsetLeft;\n    y += element.offsetTop;\n    element = element.offsetParent;\n  }\n  x -= document.documentElement.scrollLeft;\n  y -= document.documentElement.scrollTop;\n  return { x: x, y: y };\n}\n\n/**\n * Gets the dimensions of the viewport.\n *\n * @returns {{w: Number, h: Number}} The dimensions of the viewport.\n */\nfunction getViewportSize() {\n  let w;\n  let h;\n  if (typeof window.innerWidth !== 'undefined') {\n    // Good browsers\n    w = window.innerWidth;\n    h = window.innerHeight;\n  }\n  else if (typeof document.documentElement !== 'undefined' &&\n    typeof document.documentElement.clientWidth !== 'undefined' &&\n    document.documentElement.clientWidth !== 0) {\n    // IE6 in standards compliant mode\n    w = document.documentElement.clientWidth;\n    h = document.documentElement.clientHeight;\n  }\n  else {\n    // Older versions of IE\n    w = document.getElementsByTagName('body')[0].clientWidth;\n    h = document.getElementsByTagName('body')[0].clientHeight;\n  }\n  return { w: w, h: h };\n}\n\n/**\n * Removes the given child element from the given parent element if the child does indeed belong\n * to the parent.\n *\n * @param {HTMLElement} parent The parent to remove the child from.\n * @param {HTMLElement} child The child to remove.\n * @returns {boolean} True if the child did indeed belong to the parent.\n */\nfunction removeChildIfPresent(parent, child) {\n  if (child && child.parentNode === parent) {\n    parent.removeChild(child);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Adds the given class to the given element.\n *\n * @param {HTMLElement} element The element to add the class to.\n * @param {string} className The class to add.\n */\nfunction addClass(element, className) {\n  element.setAttribute('class', element.className + ' ' + className);\n}\n\n/**\n * Removes the given class from the given element.\n *\n * @param {HTMLElement} element The element to remove the class from.\n * @param {string} className The class to remove.\n */\nfunction removeClass(element, className) {\n  element.setAttribute('class',\n    element.className\n    .split(' ')\n    .filter(value => value !== className)\n    .join(' '));\n}\n\n/**\n * Removes all classes from the given element.\n *\n * @param {HTMLElement} element The element to remove all classes from.\n */\nfunction clearClasses(element) {\n  element.className = '';\n}\n\n/**\n * Calculates the width that the DOM would give to a div with the given text. The given tag\n * name, parent, id, and classes allow the width to be affected by various CSS rules.\n *\n * @param {string} text The text to determine the width of.\n * @param {string} tagName The tag name this text would supposedly have.\n * @param {HTMLElement} [parent] The parent this text would supposedly be a child of; defaults\n * to the document body.\n * @param {string} [id] The id this text would supposedly have.\n * @param {Array.<String>} [classes] The classes this text would supposedly have.\n * @returns {number} The width of the text under these conditions.\n */\nfunction getTextWidth(text, tagName, parent, id, classes) {\n  let tmpElement;\n  let width;\n  parent = parent || document.getElementsByTagName('body')[0];\n  tmpElement = createElement(tagName, null, id, classes);\n  tmpElement.style.position = 'absolute';\n  tmpElement.style.visibility = 'hidden';\n  tmpElement.style.whiteSpace = 'nowrap';\n  parent.appendChild(tmpElement);\n  tmpElement.innerHTML = text;\n  width = tmpElement.clientWidth;\n  parent.removeChild(tmpElement);\n  return width;\n}\n\n/**\n * Encodes and concatenates the given URL parameters into a single query string.\n *\n * @param {Object} rawParams An object whose properties represent the URL query string\n * parameters.\n * @returns {string} The query string.\n */\nfunction encodeQueryString(rawParams) {\n  let parameter;\n  let encodedParams;\n  encodedParams = [];\n  for (parameter in rawParams) {\n    if (rawParams.hasOwnProperty(parameter)) {\n      encodedParams.push(encodeURIComponent(parameter) + '=' +\n        encodeURIComponent(rawParams[parameter]));\n    }\n  }\n  return '?' + encodedParams.join('&');\n}\n\n/**\n * Retrieves the value corresponding to the given name from the given query string.\n *\n * (borrowed from http://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript)\n *\n * @param {string} queryString The query string containing the parameter.\n * @param {string} name The (non-encoded) name of the parameter value to retrieve.\n * @returns {string} The query string parameter value, or null if the parameter was not found.\n */\nfunction getQueryStringParameterValue(queryString, name) {\n  let regex;\n  let results;\n  name = encodeURIComponent(name);\n  name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n  regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)', 'i');\n  results = regex.exec(queryString);\n  return results === null ? null : decodeURIComponent(results[1].replace(/\\+/g, ' '));\n}\n\n/**\n * Sets the CSS transition style of the given element.\n *\n * @param {HTMLElement} element The element.\n * @param {number} value The transition string.\n */\nfunction setTransition(element, value) {\n  element.style.transition = value;\n  element.style.WebkitTransition = value;\n  element.style.MozTransition = value;\n  element.style.msTransition = value;\n  element.style.OTransition = value;\n}\n\n/**\n * Sets the CSS transition duration style of the given element.\n *\n * @param {HTMLElement} element The element.\n * @param {number} value The duration.\n */\nfunction setTransitionDurationSeconds(element, value) {\n  element.style.transitionDuration = value + 's';\n  element.style.WebkitTransitionDuration = value + 's';\n  element.style.MozTransitionDuration = value + 's';\n  element.style.msTransitionDuration = value + 's';\n  element.style.OTransitionDuration = value + 's';\n}\n\n/**\n * Sets the CSS transition delay style of the given element.\n *\n * @param {HTMLElement} element The element.\n * @param {number} value The delay.\n */\nfunction setTransitionDelaySeconds(element, value) {\n  element.style.transitionDelay = value + 's';\n  element.style.WebkitTransitionDelay = value + 's';\n  element.style.MozTransitionDelay = value + 's';\n  element.style.msTransitionDelay = value + 's';\n  element.style.OTransitionDelay = value + 's';\n}\n\n/**\n * Sets the userSelect style of the given element to 'none'.\n *\n * @param {HTMLElement} element\n */\nfunction setUserSelectNone(element) {\n  element.style.userSelect = 'none';\n  element.style.webkitUserSelect = 'none';\n  element.style.MozUserSelect = 'none';\n  element.style.msUserSelect = 'none';\n}\n\n/**\n * Removes any children elements from the given parent that have the given class.\n *\n * @param {HTMLElement} parent The parent to remove children from.\n * @param {string} className The class to match.\n */\nfunction removeChildrenWithClass(parent, className) {\n  let matchingChildren = parent.querySelectorAll('.' + className);\n\n  for (let i = 0, count = matchingChildren.length; i < count; i++) {\n    parent.removeChild(matchingChildren[i]);\n  }\n}\n\n/**\n * Sets the CSS transition-timing-function style of the given element with the given cubic-\n * bezier points.\n *\n * @param {HTMLElement} element The element.\n * @param {{p1x: Number, p1y: Number, p2x: Number, p2y: Number}} bezierPts The cubic-bezier\n * points to use for this timing function.\n */\nfunction setTransitionCubicBezierTimingFunction(element, bezierPts) {\n  const value = 'cubic-bezier(' + bezierPts.p1x + ',' + bezierPts.p1y + ',' + bezierPts.p2x + ',' +\n    bezierPts.p2y + ')';\n  element.style.transitionTimingFunction = value;\n  element.style.WebkitTransitionTimingFunction = value;\n  element.style.MozTransitionTimingFunction = value;\n  element.style.msTransitionTimingFunction = value;\n  element.style.OTransitionTimingFunction = value;\n}\n\n// A collection of different types of easing functions.\nconst easingFunctions = {\n  linear: t => t,\n  easeInQuad: t => t * t,\n  easeOutQuad: t => t * (2 - t),\n  easeInOutQuad: t => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t,\n  easeInCubic: t => t * t * t,\n  easeOutCubic: t => 1 + --t * t * t,\n  easeInOutCubic: t => t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,\n  easeInQuart: t => t * t * t * t,\n  easeOutQuart: t => 1 - --t * t * t * t,\n  easeInOutQuart: t => t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t,\n  easeInQuint: t => t * t * t * t * t,\n  easeOutQuint: t => 1 + --t * t * t * t * t,\n  easeInOutQuint: t => t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t\n};\n\n// A collection of the inverses of different types of easing functions.\nconst inverseEasingFunctions = {\n  linear: t => t,\n  easeInQuad: t => Math.sqrt(t),\n  easeOutQuad: t => 1 - Math.sqrt(1 - t),\n  easeInOutQuad: t => t < 0.5 ? Math.sqrt(t * 0.5) : 1 - 0.70710678 * Math.sqrt(1 - t)\n};\n\n/**\n * Calculates the x and y coordinates represented by the given Bezier curve at the given\n * percentage.\n *\n * @param {number} percent Expressed as a number between 0 and 1.\n * @param {Array.<{x:Number,y:Number}>} controlPoints\n * @returns {{x:Number,y:Number}}\n */\nfunction getXYFromPercentWithBezier(percent, controlPoints) {\n  let x;\n  let y;\n  let oneMinusPercent;\n  let tmp1;\n  let tmp2;\n  let tmp3;\n  let tmp4;\n\n  oneMinusPercent = 1 - percent;\n  tmp1 = oneMinusPercent * oneMinusPercent * oneMinusPercent;\n  tmp2 = 3 * percent * oneMinusPercent * oneMinusPercent;\n  tmp3 = 3 * percent * percent * oneMinusPercent;\n  tmp4 = percent * percent * percent;\n\n  x = controlPoints[0].x * tmp1 +\n    controlPoints[1].x * tmp2 +\n    controlPoints[2].x * tmp3 +\n    controlPoints[3].x * tmp4;\n  y = controlPoints[0].y * tmp1 +\n    controlPoints[1].y * tmp2 +\n    controlPoints[2].y * tmp3 +\n    controlPoints[3].y * tmp4;\n\n  return { x: x, y: y };\n}\n\n/**\n * Applies the given transform to the given element as a CSS style in a cross-browser compatible\n * manner.\n *\n * @param {HTMLElement} element\n * @param {string} transform\n */\nfunction setTransform(element, transform) {\n  element.style.webkitTransform = transform;\n  element.style.MozTransform = transform;\n  element.style.msTransform = transform;\n  element.style.OTransform = transform;\n  element.style.transform = transform;\n}\n\n/**\n * Returns a copy of the given array with its contents re-arranged in a random order.\n *\n * The original array is left in its original order.\n *\n * @param {Array} array\n * @returns {Array}\n */\nfunction shuffle(array) {\n  let i;\n  let j;\n  let count;\n  let temp;\n\n  for (i = 0, count = array.length; i < count; i++) {\n    j = parseInt(Math.random() * count);\n    temp = array[j];\n    array[j] = array[i];\n    array[i] = temp;\n  }\n\n  return array;\n}\n\n/**\n * Performs a shallow copy of the given object.\n *\n * This only copies enumerable properties.\n *\n * @param {Object} object\n * @returns {Object}\n */\nfunction shallowCopy(object) {\n  if (typeof object === 'object') {\n    const cloneObject = {};\n\n    Object.keys(object)\n      .forEach(key => cloneObject[key] = object[key]);\n\n    return cloneObject;\n  }\n  else {\n    return object;\n  }\n}\n\n/**\n * Performs a deep copy of the given object.\n *\n * This only copies enumerable properties.\n *\n * @param {Object} object\n * @returns {Object}\n */\nfunction deepCopy(object) {\n  if (typeof object === 'object') {\n    // Hack: Not a robust copy policy\n    let cloneObject;\n    if (object instanceof Array) {\n      cloneObject = [];\n    }\n    else {\n      cloneObject = {};\n    }\n\n    Object.keys(object)\n      .forEach(key => cloneObject[key] = deepCopy(object[key]));\n\n    return cloneObject;\n  }\n  else {\n    return object;\n  }\n}\n\n/**\n * Converts the given HSL color values to HSV color values.\n *\n * Given and returned values will be in the range of [0, 1].\n *\n * @param {HslColor} hsl\n * @returns {{h:Number,s:Number,v:Number}}\n */\nfunction hslToHsv(hsl) {\n  const temp = hsl.s * (hsl.l < 0.5 ? hsl.l : 1 - hsl.l);\n  return {\n    h: hsl.h,\n    s: 2 * temp / (hsl.l + temp),\n    v: hsl.l + temp\n  };\n}\n\n/**\n * Converts the given HSV color values to HSL color values.\n *\n * Given and returned values will be in the range of [0, 1].\n *\n * @param {{h:Number,s:Number,v:Number}} hsv\n * @returns {HslColor}\n */\nfunction hsvToHsl(hsv) {\n  const temp = (2 - hsv.s) * hsv.v;\n  return {\n    h: hsv.h,\n    s: hsv.s * hsv.v / (temp < 1 ? temp : 2.00000001 - temp),\n    l: temp * 0.5\n  };\n}\n\n/**\n * Converts the given HSL color values to RGB color values.\n *\n * Given and returned values will be in the range of [0, 1].\n *\n * Originally adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n *\n * @param {HslColor} hsl\n * @returns {RgbColor} rgb\n */\nfunction hslToRgb(hsl) {\n  let r;\n  let g;\n  let b;\n\n  if (hsl.s === 0) {\n    // Achromatic.\n    r = hsl.l;\n    g = hsl.l;\n    b = hsl.l;\n  }\n  else {\n    const q = hsl.l < 0.5 ?\n      hsl.l * (1 + hsl.s) :\n      hsl.l + hsl.s - hsl.l * hsl.s;\n    const p = 2 * hsl.l - q;\n\n    r = _hue2Rgb(p, q, hsl.h + 1 / 3);\n    g = _hue2Rgb(p, q, hsl.h);\n    b = _hue2Rgb(p, q, hsl.h - 1 / 3);\n  }\n\n  return {\n    r: r,\n    g: g,\n    b: b\n  };\n}\n\nfunction _hue2Rgb(p, q, t) {\n  if (t < 0) {\n    t++;\n  }\n  else if (t > 1) {\n    t--;\n  }\n\n  if (t < 1 / 6) {\n    return p + (q - p) * 6 * t;\n  }\n  else if (t < 1 / 2) {\n    return q;\n  }\n  else if (t < 2 / 3) {\n    return p + (q - p) * (2 / 3 - t) * 6;\n  }\n  else {\n    return p;\n  }\n}\n\n/**\n * Converts the given RGB color values to HSL color values.\n *\n * Given and returned values will be in the range of [0, 1].\n *\n * Originally adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n *\n * @param {{r:Number,g:Number,b:Number}} rgb\n * @returns {HslColor} hsl\n */\nfunction rgbToHsl(rgb) {\n  const max = Math.max(rgb.r, rgb.g, rgb.b);\n  const min = Math.min(rgb.r, rgb.g, rgb.b);\n  let h;\n  let s;\n  const l = (max + min) / 2;\n\n  if (max === min) {\n    // Achromatic.\n    h = 0;\n    s = 0;\n  }\n  else {\n    const d = max - min;\n    s = l > 0.5 ?\n      d / (2 - max - min) :\n      d / (max + min);\n\n    switch (max) {\n      case rgb.r:\n        h = (rgb.g - rgb.b) / d + (rgb.g < rgb.b ? 6 : 0);\n        break;\n      case rgb.g:\n        h = (rgb.b - rgb.r) / d + 2;\n        break;\n      case rgb.b:\n        h = (rgb.r - rgb.g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return {\n    h: h,\n    s: s,\n    l: l\n  };\n}\n\n/**\n * Creates a valid color string to assign to a CSS property from the given h/s/l color values.\n *\n * Given values should be in the range of [0,1].\n *\n * @param {HslColor} hsl\n * @returns {string}\n */\nfunction createHslColorString(hsl) {\n  return typeof hsl.a !== 'undefined' ?\n    `hsla(${hsl.h * 360},${hsl.s * 100}%,${hsl.l * 100}%,${hsl.a})` :\n    `hsl(${hsl.h * 360},${hsl.s * 100}%,${hsl.l * 100}%)`;\n}\n\n/**\n * Checks the given element and all of its ancestors, and returns the first that contains the\n * given class.\n *\n * @param {?HTMLElement} element\n * @param {string} className\n * @returns {?HTMLElement}\n */\nfunction findClassInSelfOrAncestors(element, className) {\n  while (element) {\n    if (containsClass(element, className)) {\n      return element;\n    }\n  }\n\n  return null;\n}\n\nlet utilStyleSheet;\n\n/**\n * Adds the given style rule to a style sheet for the current document.\n *\n * @param {string} styleRule\n */\nfunction addRuleToStyleSheet(styleRule) {\n  // Create the custom style sheet if it doesn't already exist\n  if (!utilStyleSheet) {\n    utilStyleSheet = document.createElement('style');\n    document.getElementsByTagName('head')[0].appendChild(utilStyleSheet);\n  }\n\n  // Add the given rule to the custom style sheet\n  if (utilStyleSheet.styleSheet) {\n    utilStyleSheet.styleSheet.cssText = styleRule;\n  }\n  else {\n    utilStyleSheet.appendChild(document.createTextNode(styleRule));\n  }\n}\n\nfunction checkForSafari() {\n  return /Safari/i.test(window.navigator.userAgent) && !/Chrome/i.test(window.navigator.userAgent);\n}\n\nfunction checkForIos() {\n  return /iPhone|iPod|iPad/i.test(window.navigator.userAgent);\n}\n\n/**\n * Returns a debounced version of the given function.\n *\n * Even if the debounced function is invoked many times, the wrapped function will only be invoked\n * after the given delay has ellapsed since the last invocation.\n *\n * If isInvokedImmediately is true, then the wrapped function will be triggered at the start of the\n * invocation group rather than at the end.\n *\n * @param {Function} wrappedFunction\n * @param {number} delay In milliseconds.\n * @param {boolean} [isInvokedImmediately=false]\n * @returns {Function}\n */\nfunction debounce(wrappedFunction, delay, isInvokedImmediately = false) {\n  let timeoutId;\n\n  return () => {\n    // Save the context and arguments passed from the client (this will use the values from the\n    // first invocation of the invocation group.\n    const context = this;\n    const args = arguments;\n\n    // Invoke immediately only if this is the first invocation of a group.\n    if (isInvokedImmediately && !timeoutId) {\n      wrappedFunction.apply(context, args);\n    }\n\n    // Reset the delay.\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => {\n      // The invocation group has ended.\n      timeoutId = null;\n      if (!isInvokedImmediately) {\n        wrappedFunction.apply(context, args);\n      }\n    }, delay);\n  };\n}\n\n/**\n * Returns a throttled version of the given function.\n *\n * Even if the throttled function is invoked many times, the wrapped function will only be invoked\n * at each interval of the given delay. After the throttled function stops being invoked, then\n * wrapped function will also stop being invoked.\n *\n * If isInvokedImmediately is true, then the wrapped function will be triggered at the start of the\n * invocation delay rather than at the end.\n *\n * @param {Function} wrappedFunction\n * @param {number} delay In milliseconds.\n * @param {boolean} [isInvokedImmediately=false]\n * @returns {Function}\n */\nfunction throttle(wrappedFunction, delay, isInvokedImmediately = false) {\n  let timeoutId;\n\n  return () => {\n    // Save the context and arguments passed from the client (this will use the values from the\n    // first invocation of the invocation group.\n    const context = this;\n    const args = arguments;\n\n    // Only trigger a new invocation group if we are not already/still waiting on the delay from a\n    // previous invocation.\n    if (!timeoutId) {\n      if (isInvokedImmediately) {\n        wrappedFunction.apply(context, args);\n      }\n\n      // Start the delay.\n      timeoutId = setTimeout(() => {\n        // The invocation group has ended.\n        timeoutId = null;\n        if (!isInvokedImmediately) {\n          wrappedFunction.apply(context, args);\n        }\n      }, delay);\n    }\n  };\n}\n\n/**\n * @param {Array.<*>|String} array\n * @param {*} delimiter\n * @returns {Array.<*>}\n * @private\n */\nfunction _interleave(array, delimiter) {\n  const result = new Array(array.length * 2 - 1);\n  if (array.length) {\n    result.push(array[0]);\n  }\n  for (let i = 1, count = array.length; i < count; i++) {\n    result.push(delimiter);\n    result.push(array[i]);\n  }\n  return result;\n}\n\n/**\n * Loads the given src for the given image.\n *\n * @param {HTMLImageElement} image\n * @param {string} src\n * @returns {Promise.<HTMLImageElement, Error>}\n */\nfunction loadImageSrc(image, src) {\n  return new Promise((resolve, reject) => {\n    console.debug(`Loading image: ${src}`);\n\n    image.addEventListener('load', _ => resolve(image));\n    image.addEventListener('error', reject);\n    image.addEventListener('abort', reject);\n\n    image.src = src;\n  });\n}\n\n/**\n * Loads text from the given URL.\n *\n * @param {string} url\n * @returns {Promise.<String, Error>}\n */\nfunction loadText(url) {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n\n    xhr.addEventListener('load', _ => resolve(xhr.response));\n    xhr.addEventListener('error', reject);\n    xhr.addEventListener('abort', reject);\n\n    console.debug(`Loading text: ${url}`);\n\n    xhr.open('GET', url);\n    xhr.send();\n  });\n}\n\n/**\n * Loads a JSON object from the given URL.\n *\n * @param {string} url\n * @returns {Promise.<Object, Error>}\n */\nfunction loadJson(url) {\n  return loadText(url).then(jsonText => JSON.parse(jsonText));\n}\n\n/**\n * Gets the current stack trace.\n *\n * @returns {string}\n */\nfunction getStackTrace() {\n  return new Error().stack;\n}\n\n/**\n * Freezes the given object and recursively freezes all of its properties.\n *\n * @param {Object} object\n */\nfunction deepFreeze(object) {\n  if (typeof object === 'object') {\n    Object.freeze(object);\n    Object.keys(object).forEach(key => deepFreeze(object[key]));\n  }\n}\n\n/**\n * Creates a GUID.\n *\n * GUID specification: http://www.ietf.org/rfc/rfc4122.txt\n *\n * Logic adopted from http://stackoverflow.com/a/2117523/489568.\n *\n * @returns {string}\n */\nfunction createGuid() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\n/**\n * -11 % 3 === -2\n * mod(-11, 3) === 1\n *\n * @param {number} n\n * @param {number} m\n * @returns {number}\n */\nfunction mod(n, m) {\n  return ((n % m) + m) % m;\n}\n\n/**\n * @param {number} min\n * @param {number} max\n * @returns {number}\n */\nfunction randomFloatInRange(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\n/**\n * @param {number} min Inclusive\n * @param {number} max Exclusive\n * @returns {number}\n */\nfunction randomIntInRange(min, max) {\n  return parseInt(Math.random() * (max - min) + min);\n}\n\n/**\n * @param {Array} list\n * @returns {*}\n */\nfunction pickRandom(list) {\n  return list[randomIntInRange(0, list.length)];\n}\n\n/**\n * Triggers the given callback when either the current tab or the browser window loses/gains focus.\n *\n * @param {Function} focusChangeHandler\n */\nfunction handlePageFocusChange(focusChangeHandler) {\n  // Pause/unpause the app when the tab loses/gains focus.\n  document.addEventListener('visibilitychange', () => focusChangeHandler(!document.hidden));\n  // Pause/unpause the app when the browser window loses/gains focus.\n  window.addEventListener('blur', () => focusChangeHandler(false));\n  window.addEventListener('focus', () => focusChangeHandler(true));\n}\n\n/**\n * Creates an array with all the consecutive numbers from start (inclusive) to end (exclusive).\n *\n * @param {number} start\n * @param {number} end\n * @returns {Array.<Number>}\n */\nfunction range(start, end) {\n  const r = [];\n  for (let i = 0, j = start; j < end; i++, j++) {\n    r[i] = j;\n  }\n  return r;\n}\n\n/**\n * @param {*} value\n * @returns {boolean}\n */\nfunction isInt(value) {\n  return typeof value === 'number' &&\n    isFinite(value) &&\n    parseInt(value) === value;\n}\n\n/**\n * Find the first value in a list that satisfies a predicate.\n *\n * @param {Array} list\n * @param {Function} predicate\n * @returns {*}\n */\nfunction find(list, predicate) {\n  for (var i = 0, count = list.length; i < count; i++) {\n    const value = list[i];\n    if (predicate.call(null, value, i, list)) {\n      return value;\n    }\n  }\n  return null;\n}\n\nconst keyCodes = {\n  'a': 65,\n  'b': 66,\n  'c': 67,\n  'd': 68,\n  'e': 69,\n  'f': 70,\n  'g': 71,\n  'h': 72,\n  'i': 73,\n  'j': 74,\n  'k': 75,\n  'l': 76,\n  'm': 77,\n  'n': 78,\n  'o': 79,\n  'p': 80,\n  'q': 81,\n  'r': 82,\n  's': 83,\n  't': 84,\n  'u': 85,\n  'v': 86,\n  'w': 87,\n  'x': 88,\n  'y': 89,\n  'z': 90,\n  '0': 48,\n  '1': 49,\n  '2': 50,\n  '3': 51,\n  '4': 52,\n  '5': 53,\n  '6': 54,\n  '7': 55,\n  '8': 56,\n  '9': 57,\n  'SPACE': 32,\n  'ENTER': 13,\n  'ESCAPE': 27,\n  'LEFT': 37,\n  'UP': 38,\n  'RIGHT': 39,\n  'DOWN': 40\n};\n\nconst svgNamespace = 'http://www.w3.org/2000/svg';\nconst xlinkNamespace = 'http://www.w3.org/1999/xlink';\n\nexport {\n  isInDevMode,\n  listenToMultipleForMultiple,\n  createElement,\n  containsClass,\n  toggleClass,\n  getPageOffset,\n  getViewportSize,\n  removeChildIfPresent,\n  addClass,\n  removeClass,\n  clearClasses,\n  getTextWidth,\n  encodeQueryString,\n  getQueryStringParameterValue,\n  setTransition,\n  setTransitionDurationSeconds,\n  setTransitionDelaySeconds,\n  setUserSelectNone,\n  removeChildrenWithClass,\n  setTransitionCubicBezierTimingFunction,\n  easingFunctions,\n  inverseEasingFunctions,\n  getXYFromPercentWithBezier,\n  setTransform,\n  shuffle,\n  shallowCopy,\n  deepCopy,\n  hsvToHsl,\n  hslToHsv,\n  hslToRgb,\n  rgbToHsl,\n  createHslColorString,\n  findClassInSelfOrAncestors,\n  addRuleToStyleSheet,\n  checkForSafari,\n  checkForIos,\n  debounce,\n  throttle,\n  loadImageSrc,\n  loadText,\n  loadJson,\n  getStackTrace,\n  deepFreeze,\n  createGuid,\n  mod,\n  randomFloatInRange,\n  randomIntInRange,\n  pickRandom,\n  handlePageFocusChange,\n  range,\n  isInt,\n  find,\n  keyCodes,\n  svgNamespace,\n  xlinkNamespace,\n};\n\n/**\n * @typedef {Object} HslColor\n * @property {Number} h In the range of [0, 1].\n * @property {Number} s In the range of [0, 1].\n * @property {Number} l In the range of [0, 1].\n * @property {Number} [a] In the range of [0, 1].\n */\n\n/**\n * @typedef {Object} RgbColor\n * @property {Number} r In the range of [0, 1].\n * @property {Number} g In the range of [0, 1].\n * @property {Number} b In the range of [0, 1].\n * @property {Number} [a] In the range of [0, 1].\n */\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}