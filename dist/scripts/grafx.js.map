{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/lsl-animatex/index.js","node_modules/lsl-animatex/src/animation-job.js","node_modules/lsl-animatex/src/animator.js","node_modules/lsl-animatex/src/frame-latency-profiler.js","node_modules/lsl-animatex/src/index.js","node_modules/lsl-animatex/src/persistent-animation-job.js","node_modules/lsl-animatex/src/transient-animation-job.js","node_modules/lsl-animatex/src/util.js","node_modules/lsl-physx/src/collisions/collidables/index.js","node_modules/lsl-physx/src/collisions/collidables/src/aabb-collidable.js","node_modules/lsl-physx/src/collisions/collidables/src/capsule-collidable.js","node_modules/lsl-physx/src/collisions/collidables/src/collidable.js","node_modules/lsl-physx/src/collisions/collidables/src/line-segment.js","node_modules/lsl-physx/src/collisions/collidables/src/obb-collidable.js","node_modules/lsl-physx/src/collisions/collidables/src/sphere-collidable.js","node_modules/lsl-physx/src/collisions/collision-detection/index.js","node_modules/lsl-physx/src/collisions/collision-detection/src/aabb-collision-detection.js","node_modules/lsl-physx/src/collisions/collision-detection/src/capsule-collision-detection.js","node_modules/lsl-physx/src/collisions/collision-detection/src/obb-collision-detection.js","node_modules/lsl-physx/src/collisions/collision-detection/src/sphere-collision-detection.js","node_modules/lsl-physx/src/collisions/contact-calculation/index.js","node_modules/lsl-physx/src/collisions/contact-calculation/src/aabb-contact-calculation.js","node_modules/lsl-physx/src/collisions/contact-calculation/src/capsule-contact-calculation.js","node_modules/lsl-physx/src/collisions/contact-calculation/src/obb-contact-calculation.js","node_modules/lsl-physx/src/collisions/contact-calculation/src/sphere-contact-calculation.js","node_modules/lsl-physx/src/collisions/index.js","node_modules/lsl-physx/src/collisions/src/collidable-factories.js","node_modules/lsl-physx/src/collisions/src/collidable-physics-job.js","node_modules/lsl-physx/src/collisions/src/collidable-store.js","node_modules/lsl-physx/src/collisions/src/collision-handler.js","node_modules/lsl-physx/src/collisions/src/collision-utils.js","node_modules/lsl-physx/src/index.js","node_modules/lsl-physx/src/integrator/index.js","node_modules/lsl-physx/src/integrator/src/integrator.js","node_modules/lsl-physx/src/integrator/src/rk4-integrator.js","node_modules/lsl-physx/src/src/physics-engine.js","node_modules/lsl-physx/src/src/physics-job.js","node_modules/lsl-physx/src/src/physics-state.js","node_modules/lsl-physx/src/util/index.js","node_modules/lsl-physx/src/util/src/force-utils.js","node_modules/lsl-physx/src/util/src/geometry.js","node_modules/lsl-physx/src/util/src/inertia-tensor-utils.js","node_modules/lsl-physx/src/util/src/util.js","src/cameras/index.js","src/cameras/src/camera.js","src/cameras/src/first-person-camera.js","src/cameras/src/fixed-camera.js","src/cameras/src/fixed-follow-camera.js","src/cameras/src/follow-camera.js","src/cameras/src/overhead-camera.js","src/cameras/src/third-person-camera.js","src/index.js","src/models/index.js","src/models/src/default-model.js","src/models/src/invisible-model-controller.js","src/models/src/model-controller.js","src/models/src/model-group-controller.js","src/models/src/model.js","src/models/src/standard-model-controller.js","src/program-wrapper/index.js","src/program-wrapper/src/group-program-wrapper.js","src/program-wrapper/src/program-wrapper-store.js","src/program-wrapper/src/program-wrapper.js","src/program-wrapper/src/texture-store.js","src/program-wrapper/src/uniform-setter.js","src/renderable-shapes/index.js","src/renderable-shapes/src/renderable-shape-factory.js","src/renderable-shapes/src/renderable-shape-store.js","src/renderable-shapes/src/shape-configs/capsule-renderable-shape.js","src/renderable-shapes/src/shape-configs/cube-renderable-shape.js","src/renderable-shapes/src/shape-configs/icosahedron-renderable-shape.js","src/renderable-shapes/src/shape-configs/icosphere-renderable-shape.js","src/renderable-shapes/src/shape-configs/lat-long-sphere-renderable-shape.js","src/renderable-shapes/src/shape-configs/tetrahedron-renderable-shape.js","src/src/grafx-controller.js","src/src/light.js","src/src/scene.js","src/util/index.js","src/util/src/geometry.js","src/util/src/gl-util.js","src/util/src/hash-map.js","src/util/src/util.js"],"names":[],"mappings":"AAAA;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;;;;;IAKM,Y;AACJ;;;AAGA,wBAAY,UAAZ,EAAwB;AAAA;;AACtB;AACA,QAAI,IAAI,MAAJ,KAAe,YAAnB,EAAiC;AAC/B,YAAM,IAAI,SAAJ,CAAc,kDAAd,CAAN;AACD;;AAED,SAAK,UAAL,GAAkB,CAAlB;AACA,SAAK,WAAL,GAAmB,IAAnB;AACA,SAAK,WAAL,GAAmB,UAAnB;AACD;;AAED;;;;;;;;;;;AASA;;;;;0BAKM,S,EAAW;AACf,WAAK,UAAL,GAAkB,SAAlB;AACA,WAAK,WAAL,GAAmB,KAAnB;AACD;;AAED;;;;;;;;;;;;2BASO,W,EAAa,S,EAAW;AAC7B;AACA,YAAM,IAAI,SAAJ,CAAc,wBAAd,CAAN;AACD;;AAED;;;;;;;;;;2BAOO;AACL;AACA,YAAM,IAAI,SAAJ,CAAc,wBAAd,CAAN;AACD;;AAED;;;;;;;;2BAKO,W,EAAa;AAClB,cAAQ,GAAR,CAAe,KAAK,WAAL,CAAiB,IAAhC,UAAwC,cAAc,WAAd,GAA4B,WAApE;;AAEA,WAAK,WAAL,GAAmB,IAAnB;;AAEA,UAAI,KAAK,WAAT,EAAsB;AACpB,aAAK,WAAL;AACD;AACF;;;wBArDgB;AACf,aAAO,KAAK,WAAZ;AACD;;;;;;QAsDK,Y,GAAA,Y;;;;;;;;;;;;ACjFR;;AACA;;AACA;;;;AAEA,IAAM,8BAA8B,GAApC;AACA,IAAM,oCAAoC,OAAO,EAAjD;AACA,IAAM,4BAA4B,IAAlC;AACA,IAAM,qBAAqB,wBAA3B;;AAEA;;;;;;;;;;IASM,Q;AACJ,sBAAc;AAAA;;AACZ,SAAK,KAAL,GAAa,EAAb;AACA,SAAK,aAAL,GAAqB,IAArB;AACA,SAAK,SAAL,GAAiB,IAAjB;AACA,SAAK,wBAAL,GAAgC,IAAhC;AACA,SAAK,qBAAL,GAA6B,CAA7B;AACA,SAAK,gBAAL,GAAwB,IAAxB;AACA,SAAK,gBAAL,GAAwB,IAAI,0CAAJ,CAAyB,yBAAzB,EACpB,iCADoB,EACe,kBADf,CAAxB;AAED;;AAED;;;;;;;;;6BAKS,G,EAAK;AACZ;AACA,UAAI,CAAC,IAAI,UAAT,EAAqB;AACnB,gBAAQ,KAAR,+BAA0C,IAAI,WAAJ,CAAgB,IAA1D;;AAEA,YAAI,eAAe,8CAAnB,EAA2C;AACzC,cAAI,KAAJ;AACD,SAFD,MAEO;AACL,cAAI,MAAJ,CAAW,IAAX;AACA,cAAI,KAAJ,CAAU,OAAO,WAAP,CAAmB,GAAnB,EAAV;AACD;AACF,OATD,MASO;AACL,gBAAQ,KAAR,6BAAwC,IAAI,WAAJ,CAAgB,IAAxD;;AAEA,YAAI,KAAJ,CAAU,KAAK,aAAf;AACA,aAAK,KAAL,CAAW,IAAX,CAAgB,GAAhB;AACD;;AAED,WAAK,mBAAL;AACD;;AAED;;;;;;;;8BAKU,G,EAAK;AACb,cAAQ,KAAR,+BAA0C,IAAI,WAAJ,CAAgB,IAA1D;AACA,UAAI,MAAJ,CAAW,IAAX;AACD;;AAED;;;;;;gCAGY;AACV,aAAO,KAAK,KAAL,CAAW,MAAlB,EAA0B;AACxB,aAAK,SAAL,CAAe,KAAK,KAAL,CAAW,CAAX,CAAf;AACD;AACF;;AAED;;;;4BAUQ;AACN,WAAK,kBAAL;AACA,cAAQ,KAAR,CAAc,iBAAd;AACD;;;8BAES;AACR,WAAK,mBAAL;AACA,cAAQ,KAAR,CAAc,mBAAd;AACD;;AAED;;;;;;;;;mCAMe,W,EAAa;AAAA;;AAC1B;AACA;AACA,UAAI,cAAc,KAAK,aAAvB,EAAsC;AACpC,aAAK,aAAL,GAAqB,cAAc,CAAnC;AACD;;AAED,UAAI,YAAY,cAAc,KAAK,aAAnC;AACA,WAAK,aAAL,GAAqB,WAArB;;AAEA,WAAK,gBAAL,CAAsB,kBAAtB,CAAyC,SAAzC;;AAEA;AACA;AACA,kBAAY,YAAY,2BAAZ,GACR,2BADQ,GACsB,SADlC;;AAGA,UAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,aAAK,wBAAL,GACI,OAAO,qBAAP,CAA6B;AAAA,iBAAe,MAAK,cAAL,CAAoB,WAApB,CAAf;AAAA,SAA7B,CADJ;AAEA,aAAK,WAAL,CAAiB,WAAjB,EAA8B,SAA9B;AACA,aAAK,SAAL;AACD;AACF;;AAED;;;;;;;;;;gCAOY,W,EAAa,S,EAAW;AAClC,WAAK,IAAI,IAAI,CAAR,EAAW,QAAQ,KAAK,KAAL,CAAW,MAAnC,EAA2C,IAAI,KAA/C,EAAsD,GAAtD,EAA2D;AACzD,YAAI,MAAM,KAAK,KAAL,CAAW,CAAX,CAAV;;AAEA;AACA,YAAI,IAAI,UAAR,EAAoB;AAClB,eAAK,UAAL,CAAgB,GAAhB,EAAqB,CAArB;AACA;AACA;AACA;AACD;;AAED;AACA,YAAI,eAAe,4CAAf,IAAwC,IAAI,OAAJ,GAAc,WAA1D,EAAuE;AACrE,cAAI,MAAJ,CAAW,KAAX;AACD,SAFD,MAEO;AACL,cAAI,MAAJ,CAAW,WAAX,EAAwB,SAAxB;AACD;AACF;AACF;;AAED;;;;;;;;;;+BAOW,G,EAAiB;AAAA,UAAZ,KAAY,uEAAJ,CAAC,CAAG;;AAC1B,cAAQ,KAAR,6BAAwC,IAAI,WAAJ,CAAgB,IAAxD;;AAEA,UAAI,SAAS,CAAb,EAAgB;AACd,aAAK,KAAL,CAAW,MAAX,CAAkB,KAAlB,EAAyB,CAAzB;AACD,OAFD,MAEO;AACL,YAAM,QAAQ,KAAK,KAAL,CAAW,MAAzB;AACA,aAAK,QAAQ,CAAb,EAAgB,QAAQ,KAAxB,EAA+B,OAA/B,EAAwC;AACtC,cAAI,KAAK,KAAL,CAAW,KAAX,MAAsB,GAA1B,EAA+B;AAC7B,iBAAK,KAAL,CAAW,MAAX,CAAkB,KAAlB,EAAyB,CAAzB;AACA;AACD;AACF;AACF;;AAED;AACA,UAAI,KAAK,KAAL,CAAW,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,aAAK,kBAAL;AACD;AACF;;AAED;;;;;;;;gCAKY;AACV,WAAK,IAAI,IAAI,CAAR,EAAW,QAAQ,KAAK,KAAL,CAAW,MAAnC,EAA2C,IAAI,KAA/C,EAAsD,GAAtD,EAA2D;AACzD,aAAK,KAAL,CAAW,CAAX,EAAc,IAAd;AACD;AACF;;AAED;;;;;;;;;;0CAOsB;AAAA;;AACpB,UAAI,KAAK,SAAT,EAAoB;AAClB,aAAK,gBAAL,GAAwB,OAAO,WAAP,CAAmB,GAAnB,EAAxB;AACD;AACD,WAAK,SAAL,GAAiB,KAAjB;;AAEA;AACA,UAAI,CAAC,KAAK,wBAAN,IAAkC,CAAC,SAAS,MAAhD,EAAwD;AACtD,aAAK,gBAAL,CAAsB,KAAtB;AACA,aAAK,aAAL,GAAqB,OAAO,WAAP,CAAmB,GAAnB,EAArB;AACA,aAAK,wBAAL,GACI,OAAO,qBAAP,CAA6B;AAAA,iBAAQ,OAAK,cAAL,CAAoB,IAApB,CAAR;AAAA,SAA7B,CADJ;AAED;AACF;;AAED;;;;;;;;yCAKqB;AACnB,UAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,aAAK,qBAAL,IAA8B,KAAK,oBAAnC;AACD;AACD,WAAK,SAAL,GAAiB,IAAjB;AACA,aAAO,oBAAP,CAA4B,KAAK,wBAAjC;AACA,WAAK,wBAAL,GAAgC,IAAhC;AACA,WAAK,gBAAL,CAAsB,IAAtB;AACD;;AAED;;;;;;;;yCAKqB;AACnB,aAAO,IAAI,OAAJ,CAAY,OAAO,qBAAnB,CAAP;AACD;;AAED;;;;;;;;wBAnKkB;AAChB,aAAO,KAAK,aAAZ;AACD;;AAED;;;;wBACe;AACb,aAAO,KAAK,SAAZ;AACD;;;wBAiKkB;AACjB,aAAO,KAAK,SAAL,GACD,KAAK,qBADJ,GAED,KAAK,qBAAL,GAA6B,KAAK,oBAFxC;AAGD;;AAED;;;;;;wBAG2B;AACzB,aAAO,OAAO,WAAP,CAAmB,GAAnB,KAA2B,KAAK,gBAAvC;AACD;;;;;;AAGH,IAAM,WAAW,IAAI,QAAJ,EAAjB;;QAEQ,Q,GAAA,Q;;AAER;;;;;;;;;;;;;;;;ACtQA;;;;IAIM,oB;AACJ;;;;;;AAMA,gCAAY,SAAZ,EAAuB,uBAAvB,EAAgD,QAAhD,EAA0D;AAAA;;AACxD,SAAK,UAAL,GAAkB,SAAlB;AACA,SAAK,wBAAL,GAAgC,uBAAhC;AACA,SAAK,SAAL,GAAiB,QAAjB;;AAEA,SAAK,WAAL,GAAmB,IAAnB;AACA,SAAK,gBAAL,GAAwB,IAAxB;AACA,SAAK,gBAAL,GAAwB,IAAxB;AACA,SAAK,gBAAL,GAAwB,IAAxB;;AAEA,SAAK,WAAL,GAAmB,IAAnB;AACD;;;;4BAEO;AAAA;;AACN,WAAK,IAAL;AACA,WAAK,KAAL;;AAEA,WAAK,WAAL,GAAmB,YAAY,YAAM;AACnC,cAAK,eAAL;AACA,cAAK,KAAL;AACD,OAHkB,EAGhB,KAAK,UAHW,CAAnB;AAID;;;2BAEM;AACL,oBAAc,KAAK,WAAnB;AACD;;;4BAEO;AACN,WAAK,WAAL,GAAmB,CAAnB;AACA,WAAK,gBAAL,GAAwB,OAAO,SAA/B;AACA,WAAK,gBAAL,GAAwB,OAAO,SAA/B;AACA,WAAK,gBAAL,GAAwB,CAAxB;AACD;;AAED;;;;;;;;uCAKmB,Y,EAAc;AAC/B,WAAK,WAAL;AACA,WAAK,gBAAL,GACI,KAAK,gBAAL,GAAwB,YAAxB,GAAuC,YAAvC,GAAsD,KAAK,gBAD/D;AAEA,WAAK,gBAAL,GACI,KAAK,gBAAL,GAAwB,YAAxB,GAAuC,YAAvC,GAAsD,KAAK,gBAD/D;AAEA,WAAK,gBAAL,GACI,KAAK,gBAAL,GAAwB,CAAC,eAAe,KAAK,gBAArB,IAAyC,KAAK,WAD1E;AAED;;;sCAEiB;AAChB,UAAI,KAAK,WAAL,GAAmB,CAAvB,EAA0B;AACxB,YAAM,UAAa,KAAK,SAAR,eAA2B,KAAK,gBAAL,CAAsB,OAAtB,CAA8B,CAA9B,CAA3B,qBACJ,KAAK,gBAAL,CAAsB,OAAtB,CAA8B,CAA9B,CADI,cACqC,KAAK,gBAAL,CAAsB,OAAtB,CAA8B,CAA9B,CADrC,OAAhB;AAEA,YAAI,KAAK,gBAAL,IAAyB,KAAK,wBAAlC,EAA4D;AAC1D,kBAAQ,IAAR,CAAa,OAAb;AACD,SAFD,MAEO;AACL,kBAAQ,KAAR,CAAc,OAAd;AACD;AACF;AACF;;;;;;QAGK,oB,GAAA,oB;;;;;;;;;;;ACzER;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACJA;;;;;;;;AAEA;;;;;IAKM,sB;;;AACJ;;;AAGA,kCAAY,UAAZ,EAAwB;AAAA;;AAGtB;AAHsB,gJAChB,UADgB;;AAItB,QAAI,IAAI,MAAJ,KAAe,sBAAnB,EAA2C;AACzC,YAAM,IAAI,SAAJ,CAAc,4DAAd,CAAN;AACD;AANqB;AAOvB;;AAED;;;;;;;4BAGQ;AACN;AACA,YAAM,IAAI,SAAJ,CAAc,wBAAd,CAAN;AACD;;;;EAnBkC,0B;;QAsB7B,sB,GAAA,sB;;;;;;;;;;;;AC7BR;;AAEA;;;;;;;;AAEA;;;;;IAKM,qB;;;AACJ;;;;;;AAMA,iCAAY,QAAZ,EAAsB,KAAtB,EAA6B,cAA7B,EAA6C,UAA7C,EAAyD;AAAA;;AAGvD;AAHuD,8IACjD,UADiD;;AAIvD,QAAI,IAAI,MAAJ,KAAe,qBAAnB,EAA0C;AACxC,YAAM,IAAI,SAAJ,CAAc,2DAAd,CAAN;AACD;;AAED,UAAK,SAAL,GAAiB,QAAjB;AACA,UAAK,MAAL,GAAc,KAAd;AACA,UAAK,eAAL,GAAuB,OAAO,cAAP,KAA0B,UAA1B,GACjB,cADiB,GAEjB,aAAM,eAAN,CAAsB,cAAtB,CAFN;AAVuD;AAaxD;;AAED;;;;;;;wBAGc;AACZ,aAAO,KAAK,UAAL,GAAkB,KAAK,SAAvB,GAAmC,KAAK,MAA/C;AACD;;;;EA3BiC,0B;;QA8B5B,qB,GAAA,qB;;;;;;;;ACvCR;;;;AAIA;AACA,IAAM,kBAAkB;AACtB,UAAQ;AAAA,WAAK,CAAL;AAAA,GADc;AAEtB,cAAY;AAAA,WAAK,IAAI,CAAT;AAAA,GAFU;AAGtB,eAAa;AAAA,WAAK,KAAK,IAAI,CAAT,CAAL;AAAA,GAHS;AAItB,iBAAe;AAAA,WAAK,IAAI,GAAJ,GAAU,IAAI,CAAJ,GAAQ,CAAlB,GAAsB,CAAC,CAAD,GAAK,CAAC,IAAI,IAAI,CAAT,IAAc,CAA9C;AAAA,GAJO;AAKtB,eAAa;AAAA,WAAK,IAAI,CAAJ,GAAQ,CAAb;AAAA,GALS;AAMtB,gBAAc;AAAA,WAAK,IAAI,EAAE,CAAF,GAAM,CAAN,GAAU,CAAnB;AAAA,GANQ;AAOtB,kBAAgB;AAAA,WAAK,IAAI,GAAJ,GAAU,IAAI,CAAJ,GAAQ,CAAR,GAAY,CAAtB,GAA0B,CAAC,IAAI,CAAL,KAAW,IAAI,CAAJ,GAAQ,CAAnB,KAAyB,IAAI,CAAJ,GAAQ,CAAjC,IAAsC,CAArE;AAAA,GAPM;AAQtB,eAAa;AAAA,WAAK,IAAI,CAAJ,GAAQ,CAAR,GAAY,CAAjB;AAAA,GARS;AAStB,gBAAc;AAAA,WAAK,IAAI,EAAE,CAAF,GAAM,CAAN,GAAU,CAAV,GAAc,CAAvB;AAAA,GATQ;AAUtB,kBAAgB;AAAA,WAAK,IAAI,GAAJ,GAAU,IAAI,CAAJ,GAAQ,CAAR,GAAY,CAAZ,GAAgB,CAA1B,GAA8B,IAAI,IAAI,EAAE,CAAN,GAAU,CAAV,GAAc,CAAd,GAAkB,CAAzD;AAAA,GAVM;AAWtB,eAAa;AAAA,WAAK,IAAI,CAAJ,GAAQ,CAAR,GAAY,CAAZ,GAAgB,CAArB;AAAA,GAXS;AAYtB,gBAAc;AAAA,WAAK,IAAI,EAAE,CAAF,GAAM,CAAN,GAAU,CAAV,GAAc,CAAd,GAAkB,CAA3B;AAAA,GAZQ;AAatB,kBAAgB;AAAA,WAAK,IAAI,GAAJ,GAAU,KAAK,CAAL,GAAS,CAAT,GAAa,CAAb,GAAiB,CAAjB,GAAqB,CAA/B,GAAmC,IAAI,KAAK,EAAE,CAAP,GAAW,CAAX,GAAe,CAAf,GAAmB,CAAnB,GAAuB,CAAnE;AAAA;AAbM,CAAxB;;AAgBA,IAAM,QAAQ;AACZ;AADY,CAAd;;QAKE,K,GAAA,K;;;;;;;;;;;;;AC1BF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACLA;;AACA;;AACA;;;;;;;;AAEA;;;;;;;IAOM,I;;;AACJ;;;;;;;;;;AAUA,gBAAY,IAAZ,EAAkB,IAAlB,EAAwB,IAAxB,EAA8B,IAA9B,EAAoC,IAApC,EAA0C,IAA1C,EAAkF;AAAA,QAAlC,YAAkC,uEAAnB,KAAmB;AAAA,QAAZ,UAAY;;AAAA;;AAAA,4GAC1E,YAD0E,EAC5D,UAD4D;;AAEhF,UAAK,IAAL,GAAY,IAAZ;AACA,UAAK,IAAL,GAAY,IAAZ;AACA,UAAK,IAAL,GAAY,IAAZ;AACA,UAAK,IAAL,GAAY,IAAZ;AACA,UAAK,IAAL,GAAY,IAAZ;AACA,UAAK,IAAL,GAAY,IAAZ;AAPgF;AAQjF;;AAED;;;;;;;;;;;;;AAaA;;;;;;;6CAOyB,M,EAAQ,c,EAAgB;AAC/C,WAAK,IAAL,GAAY,OAAO,CAAP,IAAY,cAAxB;AACA,WAAK,IAAL,GAAY,OAAO,CAAP,IAAY,cAAxB;AACA,WAAK,IAAL,GAAY,OAAO,CAAP,IAAY,cAAxB;AACA,WAAK,IAAL,GAAY,OAAO,CAAP,IAAY,cAAxB;AACA,WAAK,IAAL,GAAY,OAAO,CAAP,IAAY,cAAxB;AACA,WAAK,IAAL,GAAY,OAAO,CAAP,IAAY,cAAxB;AACD;;AAED;;;;;;AA6EA;;;;;;;;;+BASW,Q,EAAU,M,EAAQ;AAC3B,eAAS,UAAU,aAAnB;;AAEA,WAAK,GAAL,CAAS,MAAT,EAAiB,KAAK,IAAtB,EAA4B,KAAK,IAAjC,EAAuC,KAAK,IAA5C;AACA,UAAI,SAAS,MAAT,CAAJ,EAAsB,OAAO,IAAP;;AAEtB,WAAK,GAAL,CAAS,MAAT,EAAiB,KAAK,IAAtB,EAA4B,KAAK,IAAjC,EAAuC,KAAK,IAA5C;AACA,UAAI,SAAS,MAAT,CAAJ,EAAsB,OAAO,IAAP;;AAEtB,WAAK,GAAL,CAAS,MAAT,EAAiB,KAAK,IAAtB,EAA4B,KAAK,IAAjC,EAAuC,KAAK,IAA5C;AACA,UAAI,SAAS,MAAT,CAAJ,EAAsB,OAAO,IAAP;;AAEtB,WAAK,GAAL,CAAS,MAAT,EAAiB,KAAK,IAAtB,EAA4B,KAAK,IAAjC,EAAuC,KAAK,IAA5C;AACA,UAAI,SAAS,MAAT,CAAJ,EAAsB,OAAO,IAAP;;AAEtB,WAAK,GAAL,CAAS,MAAT,EAAiB,KAAK,IAAtB,EAA4B,KAAK,IAAjC,EAAuC,KAAK,IAA5C;AACA,UAAI,SAAS,MAAT,CAAJ,EAAsB,OAAO,IAAP;;AAEtB,WAAK,GAAL,CAAS,MAAT,EAAiB,KAAK,IAAtB,EAA4B,KAAK,IAAjC,EAAuC,KAAK,IAA5C;AACA,UAAI,SAAS,MAAT,CAAJ,EAAsB,OAAO,IAAP;;AAEtB,WAAK,GAAL,CAAS,MAAT,EAAiB,KAAK,IAAtB,EAA4B,KAAK,IAAjC,EAAuC,KAAK,IAA5C;AACA,UAAI,SAAS,MAAT,CAAJ,EAAsB,OAAO,IAAP;;AAEtB,WAAK,GAAL,CAAS,MAAT,EAAiB,KAAK,IAAtB,EAA4B,KAAK,IAAjC,EAAuC,KAAK,IAA5C;AACA,UAAI,SAAS,MAAT,CAAJ,EAAsB,OAAO,IAAP;;AAEtB,aAAO,KAAP;AACD;;AAED;;;;;;;;;;6BAOS,Q,EAAU,I,EAAM;AACvB,aAAO,QAAQ,QAAf;;AAEA;AACA;AACA;;AAEA,WAAK,GAAL,CAAS,aAAT,EAAkB,KAAK,IAAvB,EAA6B,KAAK,IAAlC,EAAwC,KAAK,IAA7C;AACA,WAAK,GAAL,CAAS,aAAT,EAAkB,KAAK,IAAvB,EAA6B,KAAK,IAAlC,EAAwC,KAAK,IAA7C;AACA,WAAK,KAAL,CAAW,aAAX,EAAoB,aAApB;AACA,UAAI,SAAS,IAAT,CAAJ,EAAoB,OAAO,IAAP;;AAEpB,WAAK,GAAL,CAAS,aAAT,EAAkB,KAAK,IAAvB,EAA6B,KAAK,IAAlC,EAAwC,KAAK,IAA7C;AACA,WAAK,GAAL,CAAS,aAAT,EAAkB,KAAK,IAAvB,EAA6B,KAAK,IAAlC,EAAwC,KAAK,IAA7C;AACA,WAAK,KAAL,CAAW,aAAX,EAAoB,aAApB;AACA,UAAI,SAAS,IAAT,CAAJ,EAAoB,OAAO,IAAP;;AAEpB,WAAK,GAAL,CAAS,aAAT,EAAkB,KAAK,IAAvB,EAA6B,KAAK,IAAlC,EAAwC,KAAK,IAA7C;AACA,WAAK,GAAL,CAAS,aAAT,EAAkB,KAAK,IAAvB,EAA6B,KAAK,IAAlC,EAAwC,KAAK,IAA7C;AACA,WAAK,KAAL,CAAW,aAAX,EAAoB,aAApB;AACA,UAAI,SAAS,IAAT,CAAJ,EAAoB,OAAO,IAAP;;AAEpB,WAAK,GAAL,CAAS,aAAT,EAAkB,KAAK,IAAvB,EAA6B,KAAK,IAAlC,EAAwC,KAAK,IAA7C;AACA,WAAK,GAAL,CAAS,aAAT,EAAkB,KAAK,IAAvB,EAA6B,KAAK,IAAlC,EAAwC,KAAK,IAA7C;AACA,WAAK,KAAL,CAAW,aAAX,EAAoB,aAApB;AACA,UAAI,SAAS,IAAT,CAAJ,EAAoB,OAAO,IAAP;;AAEpB;AACA;AACA;;AAEA,WAAK,GAAL,CAAS,aAAT,EAAkB,KAAK,IAAvB,EAA6B,KAAK,IAAlC,EAAwC,KAAK,IAA7C;AACA,WAAK,GAAL,CAAS,aAAT,EAAkB,KAAK,IAAvB,EAA6B,KAAK,IAAlC,EAAwC,KAAK,IAA7C;AACA,WAAK,KAAL,CAAW,aAAX,EAAoB,aAApB;AACA,UAAI,SAAS,IAAT,CAAJ,EAAoB,OAAO,IAAP;;AAEpB,WAAK,GAAL,CAAS,aAAT,EAAkB,KAAK,IAAvB,EAA6B,KAAK,IAAlC,EAAwC,KAAK,IAA7C;AACA,WAAK,GAAL,CAAS,aAAT,EAAkB,KAAK,IAAvB,EAA6B,KAAK,IAAlC,EAAwC,KAAK,IAA7C;AACA,WAAK,KAAL,CAAW,aAAX,EAAoB,aAApB;AACA,UAAI,SAAS,IAAT,CAAJ,EAAoB,OAAO,IAAP;;AAEpB,WAAK,GAAL,CAAS,aAAT,EAAkB,KAAK,IAAvB,EAA6B,KAAK,IAAlC,EAAwC,KAAK,IAA7C;AACA,WAAK,GAAL,CAAS,aAAT,EAAkB,KAAK,IAAvB,EAA6B,KAAK,IAAlC,EAAwC,KAAK,IAA7C;AACA,WAAK,KAAL,CAAW,aAAX,EAAoB,aAApB;AACA,UAAI,SAAS,IAAT,CAAJ,EAAoB,OAAO,IAAP;;AAEpB,WAAK,GAAL,CAAS,aAAT,EAAkB,KAAK,IAAvB,EAA6B,KAAK,IAAlC,EAAwC,KAAK,IAA7C;AACA,WAAK,GAAL,CAAS,aAAT,EAAkB,KAAK,IAAvB,EAA6B,KAAK,IAAlC,EAAwC,KAAK,IAA7C;AACA,WAAK,KAAL,CAAW,aAAX,EAAoB,aAApB;AACA,UAAI,SAAS,IAAT,CAAJ,EAAoB,OAAO,IAAP;;AAEpB;AACA;AACA;;AAEA,WAAK,GAAL,CAAS,aAAT,EAAkB,KAAK,IAAvB,EAA6B,KAAK,IAAlC,EAAwC,KAAK,IAA7C;AACA,WAAK,GAAL,CAAS,aAAT,EAAkB,KAAK,IAAvB,EAA6B,KAAK,IAAlC,EAAwC,KAAK,IAA7C;AACA,WAAK,KAAL,CAAW,aAAX,EAAoB,aAApB;AACA,UAAI,SAAS,IAAT,CAAJ,EAAoB,OAAO,IAAP;;AAEpB,WAAK,GAAL,CAAS,aAAT,EAAkB,KAAK,IAAvB,EAA6B,KAAK,IAAlC,EAAwC,KAAK,IAA7C;AACA,WAAK,GAAL,CAAS,aAAT,EAAkB,KAAK,IAAvB,EAA6B,KAAK,IAAlC,EAAwC,KAAK,IAA7C;AACA,WAAK,KAAL,CAAW,aAAX,EAAoB,aAApB;AACA,UAAI,SAAS,IAAT,CAAJ,EAAoB,OAAO,IAAP;;AAEpB,WAAK,GAAL,CAAS,aAAT,EAAkB,KAAK,IAAvB,EAA6B,KAAK,IAAlC,EAAwC,KAAK,IAA7C;AACA,WAAK,GAAL,CAAS,aAAT,EAAkB,KAAK,IAAvB,EAA6B,KAAK,IAAlC,EAAwC,KAAK,IAA7C;AACA,WAAK,KAAL,CAAW,aAAX,EAAoB,aAApB;AACA,UAAI,SAAS,IAAT,CAAJ,EAAoB,OAAO,IAAP;;AAEpB,WAAK,GAAL,CAAS,aAAT,EAAkB,KAAK,IAAvB,EAA6B,KAAK,IAAlC,EAAwC,KAAK,IAA7C;AACA,WAAK,GAAL,CAAS,aAAT,EAAkB,KAAK,IAAvB,EAA6B,KAAK,IAAlC,EAAwC,KAAK,IAA7C;AACA,WAAK,KAAL,CAAW,aAAX,EAAoB,aAApB;AACA,UAAI,SAAS,IAAT,CAAJ,EAAoB,OAAO,IAAP;;AAEpB,aAAO,KAAP;AACD;;;wBAtMY;AACX,aAAO,KAAK,IAAL,GAAY,KAAK,IAAxB;AACD;AACD;;;;wBACa;AACX,aAAO,KAAK,IAAL,GAAY,KAAK,IAAxB;AACD;AACD;;;;wBACa;AACX,aAAO,KAAK,IAAL,GAAY,KAAK,IAAxB;AACD;;AAED;;;;wBACc;AACZ,aAAO,KAAK,IAAL,GAAY,KAAK,MAAL,GAAc,CAAjC;AACD;AACD;;;;wBACc;AACZ,aAAO,KAAK,IAAL,GAAY,KAAK,MAAL,GAAc,CAAjC;AACD;AACD;;;;wBACc;AACZ,aAAO,KAAK,IAAL,GAAY,KAAK,MAAL,GAAc,CAAjC;AACD;;AAED;;;;wBACkB;AAChB,UAAM,SAAS,KAAK,MAApB;AACA,UAAM,SAAS,KAAK,MAApB;AACA,UAAM,SAAS,KAAK,MAApB;AACA,aAAO,KAAK,SAAS,MAAT,GAAkB,SAAS,MAA3B,GAAoC,SAAS,MAAlD,CAAP;AACD;;AAED;;;;;;;wBAIqB;AACnB;AACA,WAAK,eAAL,GAAuB,KAAK,eAAL,IAAwB,KAAK,MAAL,EAA/C;AACA,WAAK,GAAL,CAAS,KAAK,eAAd,EAA+B,KAAK,OAApC,EAA6C,KAAK,OAAlD,EAA2D,KAAK,OAAhE;AACA,aAAO,KAAK,eAAZ;AACD;;AAED;;;;;;;wBAIqB;AACnB,aAAO,IAAP;AACD;;AAED;;;;;;;sBAIa,K,EAAO;AAClB,UAAM,SAAS,KAAK,MAApB;AACA,UAAM,SAAS,KAAK,MAApB;AACA,UAAM,SAAS,KAAK,MAApB;AACA,WAAK,IAAL,GAAY,MAAM,CAAN,IAAW,SAAS,CAAhC;AACA,WAAK,IAAL,GAAY,MAAM,CAAN,IAAW,SAAS,CAAhC;AACA,WAAK,IAAL,GAAY,MAAM,CAAN,IAAW,SAAS,CAAhC;AACA,WAAK,IAAL,GAAY,MAAM,CAAN,IAAW,SAAS,CAAhC;AACA,WAAK,IAAL,GAAY,MAAM,CAAN,IAAW,SAAS,CAAhC;AACA,WAAK,IAAL,GAAY,MAAM,CAAN,IAAW,SAAS,CAAhC;AACD;;AAED;;;;;;;sBAIgB,K,EAAO,CAEtB;AADC;;;;gDAhGiC,M,EAAQ,c,EAAgB;AACzD,UAAM,SAAS,IAAI,IAAJ,CAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,CAAf;AACA,aAAO,wBAAP,CAAgC,MAAhC,EAAwC,cAAxC;AACA,aAAO,MAAP;AACD;;;;EAhCgB,sB;;AA4PnB,IAAM,WAAW,IAAI,wBAAJ,CAAgB,KAAK,MAAL,EAAhB,EAA+B,KAAK,MAAL,EAA/B,CAAjB;;QAEQ,I,GAAA,I;;;;;;;;;;;;ACzQR;;AACA;;;;;;;;AAEA;;;;;;;IAOM,O;;;AACJ;;;;;;;;AAQA,mBAAY,YAAZ,EAA0B,MAA1B,EAAoE;AAAA,QAAlC,YAAkC,uEAAnB,KAAmB;AAAA,QAAZ,UAAY;;AAAA;;AAAA,kHAC5D,YAD4D,EAC9C,UAD8C;;AAElE,UAAK,YAAL,GAAoB,YAApB;AACA,UAAK,OAAL,GAAe,IAAI,wBAAJ,CAAgB,KAAK,UAAL,CAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAC,YAAvB,CAAhB,EACX,KAAK,UAAL,CAAgB,CAAhB,EAAmB,CAAnB,EAAsB,YAAtB,CADW,CAAf;AAEA,UAAK,MAAL,GAAc,MAAd;AALkE;AAMnE;;AAED;;;;;;;;wBAIqB;AACnB,aAAO,KAAK,OAAL,CAAa,MAApB;AACD;;AAED;;;;;;;wBAIqB;AACnB,aAAO,IAAP;AACD;;AAED;;;;;;;sBAIa,K,EAAO;AAClB,WAAK,OAAL,CAAa,MAAb,GAAsB,KAAtB;AACD;;AAED;;;;;;;sBAIgB,K,EAAO;AACrB,WAAK,OAAL,CAAa,WAAb,GAA2B,KAA3B;AACD;;;;EA/CmB,sB;;QAkDd,O,GAAA,O;;;;;;;;;;;;;AC5DR;;;;;;;IAOM,U;AACJ;;;;AAIA,sBAAY,YAAZ,EAA0B,UAA1B,EAAsC;AAAA;;AACpC;AACA,QAAI,IAAI,MAAJ,KAAe,UAAnB,EAA+B;AAC7B,YAAM,IAAI,SAAJ,CAAc,gDAAd,CAAN;AACD;;AAED,SAAK,YAAL,GAAoB,YAApB;AACA,SAAK,UAAL,GAAkB,UAAlB;AACA,SAAK,UAAL,GAAkB,EAAlB;AACA,SAAK,kBAAL,GAA0B,EAA1B;AACD;;AAED;;;;;;;;;;wBAMmB;AACjB,aAAO,KAAK,cAAZ;AACD;;AAED;;;;;;;wBAIqB;AACnB;AACA,YAAM,IAAI,SAAJ,CAAc,wBAAd,CAAN;AACD;;AAED;;;;;;;wBAIqB;AACnB;AACA,YAAM,IAAI,SAAJ,CAAc,wBAAd,CAAN;AACD;;AAED;;;;;;;sBAIa,K,EAAO;AAClB;AACA,YAAM,IAAI,SAAJ,CAAc,wBAAd,CAAN;AACD;;AAED;;;;;;;sBAIgB,K,EAAO;AACrB;AACA,YAAM,IAAI,SAAJ,CAAc,wBAAd,CAAN;AACD;;;;;;QAGK,U,GAAA,U;;;;;;;;;;;;ACvER;;;;AAEA;;;IAGM,W;AACJ;;;;AAIA,uBAAY,KAAZ,EAAmB,GAAnB,EAAwB;AAAA;;AACtB,SAAK,KAAL,GAAa,KAAK,MAAL,EAAb;AACA,SAAK,GAAL,GAAW,KAAK,MAAL,EAAX;AACA,SAAK,OAAL,GAAe,KAAK,MAAL,EAAf;AACA,SAAK,yBAAL,GAAiC,KAAK,MAAL,EAAjC;AACA,SAAK,uBAAL,GAA+B,KAAK,MAAL,EAA/B;AACA,SAAK,KAAL,CAAW,KAAX,EAAkB,GAAlB;AACD;;AAED;;;;;;;;0BAIM,K,EAAO,G,EAAK;AAChB,WAAK,IAAL,CAAU,KAAK,KAAf,EAAsB,KAAtB;AACA,WAAK,IAAL,CAAU,KAAK,GAAf,EAAoB,GAApB;AACA,WAAK,QAAL,CAAc,KAAK,yBAAnB,EAA8C,KAAK,KAAnD,EAA0D,KAAK,MAA/D;AACA,WAAK,QAAL,CAAc,KAAK,uBAAnB,EAA4C,KAAK,GAAjD,EAAsD,KAAK,MAA3D;AACD;;AAED;;;;4BACQ;AACN,UAAM,UAAU,IAAI,WAAJ,CAAgB,KAAK,KAArB,EAA4B,KAAK,GAAjC,CAAhB;AACA,cAAQ,yBAAR,GAAoC,KAAK,yBAAzC;AACA,cAAQ,uBAAR,GAAkC,KAAK,uBAAvC;AACA,aAAO,OAAP;AACD;;AAED;;;;;;;;wBAKU;AACR;AACA,WAAK,IAAL,GAAY,KAAK,IAAL,IAAa,KAAK,MAAL,EAAzB;AACA,aAAO,KAAK,QAAL,CAAc,KAAK,IAAnB,EAAyB,KAAK,GAA9B,EAAmC,KAAK,KAAxC,CAAP;AACD;;AAED;;;;wBACa;AACX,WAAK,IAAL,CAAU,KAAK,OAAf,EAAwB,KAAK,KAA7B,EAAoC,KAAK,GAAzC,EAA8C,GAA9C;AACA,aAAO,KAAK,OAAZ;AACD;;AAED;;sBACW,K,EAAO;AAChB;AACA,WAAK,aAAL,GAAqB,KAAK,aAAL,IAAsB,KAAK,MAAL,EAA3C;AACA,WAAK,QAAL,CAAc,KAAK,aAAnB,EAAkC,KAAlC,EAAyC,KAAK,MAA9C;;AAEA,WAAK,GAAL,CAAS,KAAK,KAAd,EAAqB,KAAK,KAA1B,EAAiC,KAAK,aAAtC;AACA,WAAK,GAAL,CAAS,KAAK,GAAd,EAAmB,KAAK,GAAxB,EAA6B,KAAK,aAAlC;AACD;;AAED;;;;sBACgB,K,EAAO;AACrB,WAAK,aAAL,CAAmB,aAAnB,EAA4B,KAAK,yBAAjC,EAA4D,KAA5D;AACA,WAAK,aAAL,CAAmB,aAAnB,EAA4B,KAAK,uBAAjC,EAA0D,KAA1D;;AAEA;AACA,UAAM,SAAS,KAAK,MAApB;;AAEA,WAAK,GAAL,CAAS,KAAK,KAAd,EAAqB,MAArB,EAA6B,aAA7B;AACA,WAAK,GAAL,CAAS,KAAK,GAAd,EAAmB,MAAnB,EAA2B,aAA3B;AACD;;;;;;QAGK,W,GAAA,W;;;;;;;;;;;;AC9ER;;AACA;;AACA;;;;;;;;AAEA;;;;;;;IAOM,G;;;AACJ;;;;;;;;;AASA,eAAY,eAAZ,EAA6B,eAA7B,EAA8C,eAA9C,EAAiG;AAAA,QAAlC,YAAkC,uEAAnB,KAAmB;AAAA,QAAZ,UAAY;;AAAA;;AAAA,0GACzF,YADyF,EAC3E,UAD2E;;AAE/F,UAAK,OAAL,GAAe,CACb,KAAK,UAAL,CAAgB,eAAhB,EAAiC,CAAjC,EAAoC,CAApC,CADa,EAEb,KAAK,UAAL,CAAgB,CAAhB,EAAmB,eAAnB,EAAoC,CAApC,CAFa,EAGb,KAAK,UAAL,CAAgB,CAAhB,EAAmB,CAAnB,EAAsB,eAAtB,CAHa,CAAf;AAKA,UAAK,IAAL,GAAY,CACV,KAAK,UAAL,CAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CADU,EAEV,KAAK,UAAL,CAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CAFU,EAGV,KAAK,UAAL,CAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CAHU,CAAZ;AAKA,UAAK,eAAL,GAAuB,CACrB,eADqB,EAErB,eAFqB,EAGrB,eAHqB,CAAvB;AAKA,UAAK,OAAL,GAAe,KAAK,MAAL,EAAf;AACA,UAAK,YAAL,GAAoB,KAAK,MAAL,EAApB;AAlB+F;AAmBhG;;AAED;;;;;;;;;;AA2EA;;;;;;;;;+BASW,Q,EAAU,M,EAAQ;AAC3B,eAAS,UAAU,QAAnB;;AAEA,WAAK,IAAI,SAAS,CAAC,CAAnB,EAAsB,UAAU,CAAhC,EAAmC,UAAU,CAA7C,EAAgD;AAC9C,aAAK,IAAI,SAAS,CAAC,CAAnB,EAAsB,UAAU,CAAhC,EAAmC,UAAU,CAA7C,EAAgD;AAC9C,eAAK,IAAI,SAAS,CAAC,CAAnB,EAAsB,UAAU,CAAhC,EAAmC,UAAU,CAA7C,EAAgD;AAC9C,iBAAK,IAAL,CAAU,MAAV,EAAkB,KAAK,OAAvB;AACA,iBAAK,WAAL,CAAiB,MAAjB,EAAyB,MAAzB,EAAiC,KAAK,OAAL,CAAa,CAAb,CAAjC,EAAkD,MAAlD;AACA,iBAAK,WAAL,CAAiB,MAAjB,EAAyB,MAAzB,EAAiC,KAAK,OAAL,CAAa,CAAb,CAAjC,EAAkD,MAAlD;AACA,iBAAK,WAAL,CAAiB,MAAjB,EAAyB,MAAzB,EAAiC,KAAK,OAAL,CAAa,CAAb,CAAjC,EAAkD,MAAlD;AACA,gBAAI,SAAS,MAAT,CAAJ,EAAsB;AACpB,qBAAO,IAAP;AACD;AACF;AACF;AACF;AACD,aAAO,KAAP;AACD;;AAED;;;;;;;;;;6BAOS,Q,EAAU,I,EAAM;AAAA;;AACvB,aAAO,QAAQ,QAAf;;AAEA,aAAO,kBAAkB,IAAlB,CAAuB,+BAAuB;AACnD,YAAM,sBAAsB,oBAAoB,CAApB,CAA5B;AACA,YAAM,sBAAsB,oBAAoB,CAApB,CAA5B;;AAEA;AACA,aAAK,IAAL,CAAU,QAAV,EAAoB,OAAK,OAAzB;AACA,aAAK,IAAL,CAAU,QAAV,EAAoB,OAAK,OAAzB;AACA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,CAApB,EAAuB,GAAvB,EAA4B;AAC1B,eAAK,WAAL,CAAiB,QAAjB,EAA2B,QAA3B,EAAqC,OAAK,OAAL,CAAa,CAAb,CAArC,EAAsD,oBAAoB,CAApB,CAAtD;AACA,eAAK,WAAL,CAAiB,QAAjB,EAA2B,QAA3B,EAAqC,OAAK,OAAL,CAAa,CAAb,CAArC,EAAsD,oBAAoB,CAApB,CAAtD;AACD;;AAED;AACA,aAAK,KAAL,CAAW,QAAX,EAAqB,QAArB;AACA,eAAO,SAAS,IAAT,CAAP;AACD,OAfM,CAAP;AAgBD;;AAED;;;;;;;;;;6BAOS,Q,EAAU,I,EAAM;AAAA;;AACvB,aAAO,QAAQ,EAAf;;AAEA,aAAO,kBAAkB,IAAlB,CAAuB,4BAAoB;AAChD,YAAM,sBAAsB,iBAAiB,CAAjB,CAA5B;AACA,YAAM,sBAAsB,iBAAiB,CAAjB,CAA5B;AACA,YAAM,sBAAsB,iBAAiB,CAAjB,CAA5B;AACA,YAAM,sBAAsB,iBAAiB,CAAjB,CAA5B;;AAEA;AACA,aAAK,IAAL,CAAU,QAAV,EAAoB,OAAK,OAAzB;AACA,aAAK,IAAL,CAAU,QAAV,EAAoB,OAAK,OAAzB;AACA,aAAK,IAAL,CAAU,QAAV,EAAoB,OAAK,OAAzB;AACA,aAAK,IAAL,CAAU,QAAV,EAAoB,OAAK,OAAzB;AACA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,CAApB,EAAuB,GAAvB,EAA4B;AAC1B,eAAK,WAAL,CAAiB,QAAjB,EAA2B,QAA3B,EAAqC,OAAK,OAAL,CAAa,CAAb,CAArC,EAAsD,oBAAoB,CAApB,CAAtD;AACA,eAAK,WAAL,CAAiB,QAAjB,EAA2B,QAA3B,EAAqC,OAAK,OAAL,CAAa,CAAb,CAArC,EAAsD,oBAAoB,CAApB,CAAtD;AACA,eAAK,WAAL,CAAiB,QAAjB,EAA2B,QAA3B,EAAqC,OAAK,OAAL,CAAa,CAAb,CAArC,EAAsD,oBAAoB,CAApB,CAAtD;AACA,eAAK,WAAL,CAAiB,QAAjB,EAA2B,QAA3B,EAAqC,OAAK,OAAL,CAAa,CAAb,CAArC,EAAsD,oBAAoB,CAApB,CAAtD;AACD;;AAED;AACA,aAAK,MAAL,CAAY,CAAZ,EAAe,CAAf,EAAkB,QAAlB,EAA4B,QAA5B,EAAsC,QAAtC,EAAgD,QAAhD;AACA,eAAO,SAAS,IAAT,CAAP;AACD,OArBM,CAAP;AAsBD;;AAED;;;;;;;;;;;;sCASkB,Q,EAAU,Y,EAAc,I,EAAM;AAAA;;AAC9C,aAAO,QAAQ,EAAf;;AAEA,aAAO,kBAAkB,IAAlB,CAAuB,UAAC,gBAAD,EAAmB,KAAnB,EAA6B;AACzD,YAAM,sBAAsB,iBAAiB,CAAjB,CAA5B;AACA,YAAM,sBAAsB,iBAAiB,CAAjB,CAA5B;AACA,YAAM,sBAAsB,iBAAiB,CAAjB,CAA5B;AACA,YAAM,sBAAsB,iBAAiB,CAAjB,CAA5B;AACA,YAAM,mBAAmB,+BAA+B,KAA/B,CAAzB;;AAEA;AACA,aAAK,IAAL,CAAU,QAAV,EAAoB,OAAK,OAAzB;AACA,aAAK,IAAL,CAAU,QAAV,EAAoB,OAAK,OAAzB;AACA,aAAK,IAAL,CAAU,QAAV,EAAoB,OAAK,OAAzB;AACA,aAAK,IAAL,CAAU,QAAV,EAAoB,OAAK,OAAzB;AACA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,CAApB,EAAuB,GAAvB,EAA4B;AAC1B;AACA,eAAK,WAAL,CAAiB,QAAjB,EAA2B,QAA3B,EAAqC,OAAK,OAAL,CAAa,CAAb,CAArC,EAAsD,oBAAoB,CAApB,CAAtD;AACA,eAAK,WAAL,CAAiB,QAAjB,EAA2B,QAA3B,EAAqC,OAAK,OAAL,CAAa,CAAb,CAArC,EAAsD,oBAAoB,CAApB,CAAtD;AACA,eAAK,WAAL,CAAiB,QAAjB,EAA2B,QAA3B,EAAqC,OAAK,OAAL,CAAa,CAAb,CAArC,EAAsD,oBAAoB,CAApB,CAAtD;AACA,eAAK,WAAL,CAAiB,QAAjB,EAA2B,QAA3B,EAAqC,OAAK,OAAL,CAAa,CAAb,CAArC,EAAsD,oBAAoB,CAApB,CAAtD;AACA;AACA,eAAK,WAAL,CAAiB,QAAjB,EAA2B,QAA3B,EAAqC,OAAK,OAAL,CAAa,CAAb,CAArC,EACI,eAAe,OAAK,eAAL,CAAqB,CAArB,CAAf,GAAyC,iBAAiB,CAAjB,CAD7C;AAEA,eAAK,WAAL,CAAiB,QAAjB,EAA2B,QAA3B,EAAqC,OAAK,OAAL,CAAa,CAAb,CAArC,EACI,eAAe,OAAK,eAAL,CAAqB,CAArB,CAAf,GAAyC,iBAAiB,CAAjB,CAD7C;AAEA,eAAK,WAAL,CAAiB,QAAjB,EAA2B,QAA3B,EAAqC,OAAK,OAAL,CAAa,CAAb,CAArC,EACI,eAAe,OAAK,eAAL,CAAqB,CAArB,CAAf,GAAyC,iBAAiB,CAAjB,CAD7C;AAEA,eAAK,WAAL,CAAiB,QAAjB,EAA2B,QAA3B,EAAqC,OAAK,OAAL,CAAa,CAAb,CAArC,EACI,eAAe,OAAK,eAAL,CAAqB,CAArB,CAAf,GAAyC,iBAAiB,CAAjB,CAD7C;AAED;;AAED;AACA,aAAK,MAAL,CAAY,CAAZ,EAAe,CAAf,EAAkB,QAAlB,EAA4B,QAA5B,EAAsC,QAAtC,EAAgD,QAAhD;AACA,eAAO,SAAS,IAAT,CAAP;AACD,OAhCM,CAAP;AAiCD;;;qCAEgB;AACf,WAAK,GAAL,CAAS,QAAT,EAAmB,KAAK,eAAL,CAAqB,CAArB,CAAnB,EAA4C,CAA5C,EAA+C,CAA/C;AACA,WAAK,aAAL,CAAmB,KAAK,OAAL,CAAa,CAAb,CAAnB,EAAoC,QAApC,EAA8C,KAAK,YAAnD;AACA,WAAK,GAAL,CAAS,QAAT,EAAmB,CAAnB,EAAsB,KAAK,eAAL,CAAqB,CAArB,CAAtB,EAA+C,CAA/C;AACA,WAAK,aAAL,CAAmB,KAAK,OAAL,CAAa,CAAb,CAAnB,EAAoC,QAApC,EAA8C,KAAK,YAAnD;AACA,WAAK,GAAL,CAAS,QAAT,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,KAAK,eAAL,CAAqB,CAArB,CAAzB;AACA,WAAK,aAAL,CAAmB,KAAK,OAAL,CAAa,CAAb,CAAnB,EAAoC,QAApC,EAA8C,KAAK,YAAnD;;AAEA,WAAK,GAAL,CAAS,QAAT,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB;AACA,WAAK,aAAL,CAAmB,KAAK,IAAL,CAAU,CAAV,CAAnB,EAAiC,QAAjC,EAA2C,KAAK,YAAhD;AACA,WAAK,GAAL,CAAS,QAAT,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB;AACA,WAAK,aAAL,CAAmB,KAAK,IAAL,CAAU,CAAV,CAAnB,EAAiC,QAAjC,EAA2C,KAAK,YAAhD;AACA,WAAK,GAAL,CAAS,QAAT,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB;AACA,WAAK,aAAL,CAAmB,KAAK,IAAL,CAAU,CAAV,CAAnB,EAAiC,QAAjC,EAA2C,KAAK,YAAhD;AACD;;;wBA9NoB;AACnB,aAAO,KAAK,OAAZ;AACD;;AAED;;;;;;;wBAIqB;AACnB;AACA,UAAI,CAAC,KAAK,eAAV,EAA2B;AACzB,YAAM,SAAS,KAAK,IAAL,CAAU,KAAK,eAAL,GAAuB,KAAK,eAA5B,GACrB,KAAK,eAAL,GAAuB,KAAK,eADP,GAErB,KAAK,eAAL,GAAuB,KAAK,eAFjB,CAAf;AAGA,aAAK,eAAL,GAAuB,IAAI,wBAAJ,CAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,MAApB,EAA4B,KAAK,YAAjC,CAAvB;AACD;AACD,WAAK,eAAL,CAAqB,QAArB,GAAgC,KAAK,OAArC;AACA,aAAO,KAAK,eAAZ;AACD;;AAED;;;;;;;sBAIa,K,EAAO;AAClB,WAAK,IAAL,CAAU,KAAK,OAAf,EAAwB,KAAxB;AACD;;AAED;;;;;;;sBAIgB,K,EAAO;AACrB,WAAK,IAAL,CAAU,KAAK,YAAf,EAA6B,KAA7B;AACA,WAAK,cAAL;AACD;AACD;;wBACkB;AAChB,aAAO,KAAK,YAAZ;AACD;;AAED;;;;wBACsB;AACpB,aAAO,KAAK,eAAL,CAAqB,CAArB,CAAP;AACD;AACD;;sBACoB,K,EAAO;AACzB,WAAK,eAAL,CAAqB,CAArB,IAA0B,KAA1B;AACA,WAAK,cAAL;AACD;;AAED;;;;wBACsB;AACpB,aAAO,KAAK,eAAL,CAAqB,CAArB,CAAP;AACD;AACD;;sBACoB,K,EAAO;AACzB,WAAK,eAAL,CAAqB,CAArB,IAA0B,KAA1B;AACA,WAAK,cAAL;AACD;;AAED;;;;wBACsB;AACpB,aAAO,KAAK,eAAL,CAAqB,CAArB,CAAP;AACD;AACD;;sBACoB,K,EAAO;AACzB,WAAK,eAAL,CAAqB,CAArB,IAA0B,KAA1B;AACA,WAAK,cAAL;AACD;;;;EAxGe,sB;;AAoQlB,IAAM,WAAW,KAAK,MAAL,EAAjB;AACA,IAAM,WAAW,KAAK,MAAL,EAAjB;AACA,IAAM,WAAW,KAAK,MAAL,EAAjB;AACA,IAAM,WAAW,KAAK,MAAL,EAAjB;AACA,IAAM,WAAW,IAAI,wBAAJ,CAAgB,KAAK,MAAL,EAAhB,EAA+B,KAAK,MAAL,EAA/B,CAAjB;;AAEA,IAAM,oBAAoB;AACxB;AACA,CAAC,CAAC,CAAD,EAAI,CAAC,CAAL,EAAQ,CAAC,CAAT,CAAD,EAAc,CAAC,CAAD,EAAI,CAAC,CAAL,EAAQ,CAAR,CAAd,CAFwB,EAGxB,CAAC,CAAC,CAAD,EAAI,CAAC,CAAL,EAAQ,CAAC,CAAT,CAAD,EAAc,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAC,CAAR,CAAd,CAHwB,EAIxB,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAD,EAAY,CAAC,CAAD,EAAI,CAAC,CAAL,EAAQ,CAAR,CAAZ,CAJwB,EAKxB,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAD,EAAY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAC,CAAR,CAAZ,CALwB;AAMxB;AACA,CAAC,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,EAAS,CAAC,CAAV,CAAD,EAAe,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,EAAS,CAAT,CAAf,CAPwB,EAQxB,CAAC,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,EAAS,CAAC,CAAV,CAAD,EAAe,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAC,CAAT,CAAf,CARwB,EASxB,CAAC,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,CAAD,EAAa,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,EAAS,CAAT,CAAb,CATwB,EAUxB,CAAC,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,CAAD,EAAa,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAC,CAAT,CAAb,CAVwB;AAWxB;AACA,CAAC,CAAC,CAAD,EAAI,CAAC,CAAL,EAAQ,CAAR,CAAD,EAAa,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,EAAS,CAAT,CAAb,CAZwB,EAaxB,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAC,CAAR,CAAD,EAAa,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAC,CAAT,CAAb,CAbwB,EAcxB,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAD,EAAY,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,CAAZ,CAdwB,EAexB,CAAC,CAAC,CAAD,EAAI,CAAC,CAAL,EAAQ,CAAC,CAAT,CAAD,EAAc,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,EAAS,CAAC,CAAV,CAAd,CAfwB,CAA1B;;AAkBA,IAAM,oBAAoB,CACxB,CAAC,CAAC,CAAD,EAAI,CAAC,CAAL,EAAQ,CAAC,CAAT,CAAD,EAAc,CAAC,CAAD,EAAI,CAAC,CAAL,EAAQ,CAAR,CAAd,EAA0B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA1B,EAAqC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAC,CAAR,CAArC,CADwB,EAExB,CAAC,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,EAAS,CAAC,CAAV,CAAD,EAAe,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,EAAS,CAAT,CAAf,EAA4B,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,CAA5B,EAAwC,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAC,CAAT,CAAxC,CAFwB,EAGxB,CAAC,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAC,CAAT,CAAD,EAAc,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAC,CAAR,CAAd,EAA0B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA1B,EAAqC,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,CAArC,CAHwB,EAIxB,CAAC,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,EAAS,CAAC,CAAV,CAAD,EAAe,CAAC,CAAD,EAAI,CAAC,CAAL,EAAQ,CAAC,CAAT,CAAf,EAA4B,CAAC,CAAD,EAAI,CAAC,CAAL,EAAQ,CAAR,CAA5B,EAAwC,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,EAAS,CAAT,CAAxC,CAJwB,EAKxB,CAAC,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,EAAS,CAAT,CAAD,EAAc,CAAC,CAAD,EAAI,CAAC,CAAL,EAAQ,CAAR,CAAd,EAA0B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA1B,EAAqC,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,CAArC,CALwB,EAMxB,CAAC,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,EAAS,CAAC,CAAV,CAAD,EAAe,CAAC,CAAD,EAAI,CAAC,CAAL,EAAQ,CAAC,CAAT,CAAf,EAA4B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAC,CAAR,CAA5B,EAAwC,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAC,CAAT,CAAxC,CANwB,CAA1B;;AASA,IAAM,iCAAiC,CACrC,KAAK,UAAL,CAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CADqC,EAErC,KAAK,UAAL,CAAgB,CAAC,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,CAFqC,EAGrC,KAAK,UAAL,CAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CAHqC,EAIrC,KAAK,UAAL,CAAgB,CAAhB,EAAmB,CAAC,CAApB,EAAuB,CAAvB,CAJqC,EAKrC,KAAK,UAAL,CAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CALqC,EAMrC,KAAK,UAAL,CAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAC,CAAvB,CANqC,CAAvC;;QASQ,G,GAAA,G;;AAER;;;;;;AAMA;;;;;;AAMA;;;;;;;;;;;;;;;;ACvUA;;;;;;;;AAEA;;;;;;;;IAQM,M;;;AACJ;;;;;;;;AAQA,kBAAY,OAAZ,EAAqB,OAArB,EAA8B,OAA9B,EAAuC,MAAvC,EAAiF;AAAA,QAAlC,YAAkC,uEAAnB,KAAmB;AAAA,QAAZ,UAAY;;AAAA;;AAAA,gHACzE,YADyE,EAC3D,UAD2D;;AAE/E,UAAK,OAAL,GAAe,OAAf;AACA,UAAK,OAAL,GAAe,OAAf;AACA,UAAK,OAAL,GAAe,OAAf;AACA,UAAK,MAAL,GAAc,MAAd;AAL+E;AAMhF;;AAED;;;;;;;;wBAIqB;AACnB;AACA,WAAK,OAAL,GAAe,KAAK,OAAL,IAAgB,KAAK,MAAL,EAA/B;AACA,WAAK,GAAL,CAAS,KAAK,OAAd,EAAuB,KAAK,OAA5B,EAAqC,KAAK,OAA1C,EAAmD,KAAK,OAAxD;AACA,aAAO,KAAK,OAAZ;AACD;;AAED;;;;;;;wBAIqB;AACnB,aAAO,IAAP;AACD;;AAED;;;;;;;sBAIa,K,EAAO;AAClB,WAAK,OAAL,GAAe,MAAM,CAAN,CAAf;AACA,WAAK,OAAL,GAAe,MAAM,CAAN,CAAf;AACA,WAAK,OAAL,GAAe,MAAM,CAAN,CAAf;AACD;;AAED;;;;;;;sBAIgB,K,EAAO;AACrB;AACD;;;;EApDkB,sB;;QAuDb,M,GAAA,M;;;;;;;;;;ACjER;;IAAY,sB;;AACZ;;IAAY,yB;;AACZ;;IAAY,qB;;AACZ;;IAAY,wB;;;;QAGV,sB,GAAA,sB;QACA,yB,GAAA,yB;QACA,qB,GAAA,qB;QACA,wB,GAAA,wB;;;;;;;;;;ACTF;;IAAY,wB;;AACZ;;IAAY,qB;;AACZ;;IAAY,yB;;AACZ;;;;AAEA;;;;;AAKA;;;;;AAKA,SAAS,WAAT,CAAqB,IAArB,EAA2B,KAA3B,EAAkC;AAChC,SAAO,uBAAoB,IAApB,EAA0B,KAA1B,CAAP;AACD;;AAED;;;;;AAKA,SAAS,YAAT,CAAsB,IAAtB,EAA4B,MAA5B,EAAoC;AAClC,SAAO,yBAAyB,YAAzB,CAAsC,MAAtC,EAA8C,IAA9C,CAAP;AACD;;AAED;;;;;AAKA,SAAS,UAAT,CAAoB,KAApB,EAA2B,KAA3B,EAAkC;AAChC,SAAO,MAAM,IAAN,IAAc,MAAM,IAApB,IAA4B,MAAM,IAAN,IAAc,MAAM,IAAhD,IACH,MAAM,IAAN,IAAc,MAAM,IADjB,IACyB,MAAM,IAAN,IAAc,MAAM,IAD7C,IAEH,MAAM,IAAN,IAAc,MAAM,IAFjB,IAEyB,MAAM,IAAN,IAAc,MAAM,IAFpD;AAGD;;AAED;;;;;AAKA,SAAS,SAAT,CAAmB,IAAnB,EAAyB,GAAzB,EAA8B;AAC5B,SAAO,sBAAsB,SAAtB,CAAgC,GAAhC,EAAqC,IAArC,CAAP;AACD;;AAED;;;;;AAKA,SAAS,aAAT,CAAuB,IAAvB,EAA6B,OAA7B,EAAsC;AACpC,SAAO,0BAA0B,aAA1B,CAAwC,OAAxC,EAAiD,IAAjD,CAAP;AACD;;QAGC,W,GAAA,W;QACA,Y,GAAA,Y;QACA,U,GAAA,U;QACA,S,GAAA,S;QACA,a,GAAA,a;;;;;;;;;;ACzDF;;AAMA;;IAAY,qB;;;;AAEZ;;;;;AAbA;;;;;AAkBA,SAAS,cAAT,CAAwB,OAAxB,EAAiC,KAAjC,EAAwC;AACtC,SAAO,iDAAsC,QAAQ,OAA9C,EAAuD,KAAvD,KACH,QAAQ,MAAR,GAAiB,QAAQ,MAD7B;AAED;;AAED;;;;;AAKA,SAAS,eAAT,CAAyB,OAAzB,EAAkC,MAAlC,EAA0C;AACxC,MAAM,aAAa,QAAQ,MAAR,GAAiB,OAAO,MAA3C;AACA,SAAO,iDAAsC,QAAQ,OAA9C,EAAuD,OAAO,cAA9D,KACH,aAAa,UADjB;AAED;;AAED;;;;;;;;;;AAUA,SAAS,aAAT,CAAuB,OAAvB,EAAgC,IAAhC,EAAsC;AACpC,MAAM,gBAAgB,QAAQ,MAAR,GAAiB,QAAQ,MAA/C;;AAEA;AACA;AACA,6CAAgC,aAAhC,EAAyC,IAAzC,EAA+C,QAAQ,OAAR,CAAgB,KAA/D;AACA,MAAI,KAAK,eAAL,CAAqB,aAArB,EAA8B,QAAQ,OAAR,CAAgB,KAA9C,KAAwD,aAA5D,EAA2E;AACzE,WAAO,IAAP;AACD;AACD,6CAAgC,aAAhC,EAAyC,IAAzC,EAA+C,QAAQ,OAAR,CAAgB,GAA/D;AACA,MAAI,KAAK,eAAL,CAAqB,aAArB,EAA8B,QAAQ,OAAR,CAAgB,GAA9C,KAAsD,aAA1D,EAAyE;AACvE,WAAO,IAAP;AACD;;AAED;AACA;AACA,SAAO,KAAK,QAAL,CAAc;AAAA,WACjB,8CAAmC,QAAQ,OAA3C,EAAoD,IAApD,KAA6D,aAD5C;AAAA,GAAd,CAAP;;AAGA;AACD;;AAED;;;;;AAKA,SAAS,YAAT,CAAsB,OAAtB,EAA+B,GAA/B,EAAoC;AAClC,SAAO,sBAAsB,YAAtB,CAAmC,GAAnC,EAAwC,OAAxC,CAAP;AACD;;AAED;;;;;AAKA,SAAS,gBAAT,CAA0B,QAA1B,EAAoC,QAApC,EAA8C;AAC5C,MAAM,aAAa,SAAS,MAAT,GAAkB,SAAS,MAA9C;AACA,SAAO,8CAAmC,SAAS,OAA5C,EAAqD,SAAS,OAA9D,KACH,aAAa,UADjB;AAED;;QAGC,c,GAAA,c;QACA,e,GAAA,e;QACA,a,GAAA,a;QACA,Y,GAAA,Y;QACA,gB,GAAA,gB;;;;;;;;;;ACtFF;;AASA;;IAAY,sB;;AACZ;;IAAY,yB;;;;oMAfZ;;;;;AAiBA;AACA;;AAEA;;;;;AAKA,SAAS,UAAT,CAAoB,GAApB,EAAyB,KAAzB,EAAgC;AAC9B,OAAK,QAAL,CAAc,aAAd,EAAuB,KAAvB,EAA8B,IAAI,cAAlC;;AAEA,OAAK,GAAL,CAAS,aAAT,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB;AACA,OAAK,aAAL,CAAmB,aAAnB,EAA4B,aAA5B,EAAqC,IAAI,WAAzC;AACA,MAAM,gBAAgB,KAAK,GAAL,CAAS,aAAT,EAAkB,aAAlB,CAAtB;;AAEA,MAAI,iBAAiB,CAAC,IAAI,eAAtB,IAAyC,iBAAiB,IAAI,eAAlE,EAAmF;AACjF,SAAK,GAAL,CAAS,aAAT,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB;AACA,SAAK,aAAL,CAAmB,aAAnB,EAA4B,aAA5B,EAAqC,IAAI,WAAzC;AACA,QAAM,gBAAgB,KAAK,GAAL,CAAS,aAAT,EAAkB,aAAlB,CAAtB;;AAEA,QAAI,iBAAiB,CAAC,IAAI,eAAtB,IAAyC,iBAAiB,IAAI,eAAlE,EAAmF;AACjF,WAAK,GAAL,CAAS,aAAT,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB;AACA,WAAK,aAAL,CAAmB,aAAnB,EAA4B,aAA5B,EAAqC,IAAI,WAAzC;AACA,UAAM,gBAAgB,KAAK,GAAL,CAAS,aAAT,EAAkB,aAAlB,CAAtB;;AAEA,aAAO,iBAAiB,CAAC,IAAI,eAAtB,IAAyC,iBAAiB,IAAI,eAArE;AACD;AACF;;AAED,SAAO,KAAP;AACD;;AAED;;;;;AAKA,SAAS,WAAT,CAAqB,GAArB,EAA0B,MAA1B,EAAkC;AAChC,4CAA+B,aAA/B,EAAwC,GAAxC,EAA6C,OAAO,cAApD;AACA,SAAO,KAAK,eAAL,CAAqB,aAArB,EAA8B,OAAO,cAArC,KACH,OAAO,MAAP,GAAgB,OAAO,MAD3B;AAED;;AAED;;;;;;;;;;AAUA,SAAS,SAAT,CAAmB,GAAnB,EAAwB,IAAxB,EAA8B;AAC5B,SAAO,gBAAgB,GAAhB,EAAqB,IAArB,EAA2B,uBAAuB,WAAlD,CAAP;AACD;;AAED;;;;;;;;;;AAUA,SAAS,QAAT,CAAkB,IAAlB,EAAwB,IAAxB,EAA8B;AAC5B,SAAO,gBAAgB,IAAhB,EAAsB,IAAtB,EAA4B,UAA5B,CAAP;AACD;;AAED;;;;;;;AAOA,SAAS,eAAT,CAAyB,GAAzB,EAA8B,KAA9B,EAAqC,oBAArC,EAA2D;AACzD;AACA,MAAI,IAAI,UAAJ,CAAe;AAAA,WAAU,qBAAqB,KAArB,EAA4B,MAA5B,CAAV;AAAA,GAAf,CAAJ,EAAmE,OAAO,IAAP;;AAEnE;AACA,MAAI,MAAM,UAAN,CAAiB;AAAA,WAAU,WAAW,GAAX,EAAgB,MAAhB,CAAV;AAAA,GAAjB,CAAJ,EAAyD,OAAO,IAAP;;AAEzD;AACA;AACA;AACA,MAAI,MAAM,QAAN,CAAe;AAAA,WACX,IAAI,QAAJ,CAAa;AAAA,aACT,4DAAoC,aAApC,EAA6C,IAA7C,4BAAsD,IAAtD,GADS;AAAA,KAAb,CADW;AAAA,GAAf,CAAJ,EAGE,OAAO,IAAP;;AAEF,SAAO,KAAP;AACD;;AAED;;;;;AAKA,SAAS,YAAT,CAAsB,GAAtB,EAA2B,OAA3B,EAAoC;AAClC;AACA,MAAM,gBAAgB,QAAQ,MAAR,GAAiB,QAAQ,MAA/C;AACA,MAAI,kBAAkB,IAAI,QAAJ,CAAa;AAAA,WAC/B,8CAAmC,QAAQ,OAA3C,EAAoD,IAApD,IAA4D,aAD7B;AAAA,GAAb,CAAtB;;AAGA,MAAI,eAAJ,EAAqB,OAAO,IAAP;;AAErB;AACA,oBAAkB,IAAI,iBAAJ,CAAsB;AAAA,WAChC,4DAAoC,aAApC,EAA6C,QAAQ,OAArD,4BAAiE,IAAjE,GADgC;AAAA,GAAtB,EAC8D,QAAQ,MADtE,CAAlB;;AAGA;AACA,oBAAkB,mBAAmB,WAAW,GAAX,EAAgB,QAAQ,cAAxB,CAArC;AACA,oBAAkB,mBAAmB,0BAA0B,cAA1B,CAAyC,OAAzC,EACjC,IAAI,cAD6B,CAArC;;AAGA,SAAO,eAAP;AACD;;QAGC,U,GAAA,U;QACA,W,GAAA,W;QACA,S,GAAA,S;QACA,Q,GAAA,Q;QACA,Y,GAAA,Y;;;;;;;;;;AC/IF;;AACA;;IAAY,qB;;AACZ;;IAAY,yB;;;;AAEZ;;;;;AAKA;;;;;AAKA,SAAS,aAAT,CAAuB,MAAvB,EAA+B,KAA/B,EAAsC;AACpC,SAAO,KAAK,eAAL,CAAqB,KAArB,EAA4B,OAAO,cAAnC,KAAsD,OAAO,MAAP,GAAgB,OAAO,MAApF;AACD;;AAED;;;;;AAKA,SAAS,cAAT,CAAwB,OAAxB,EAAiC,OAAjC,EAA0C;AACxC,MAAM,aAAa,QAAQ,MAAR,GAAiB,QAAQ,MAA5C;AACA,SAAO,KAAK,eAAL,CAAqB,QAAQ,cAA7B,EAA6C,QAAQ,cAArD,KACH,aAAa,UADjB;AAED;;AAED;;;;;AAKA,SAAS,YAAT,CAAsB,MAAtB,EAA8B,IAA9B,EAAoC;AAClC,6CAAgC,aAAhC,EAAyC,IAAzC,EAA+C,OAAO,cAAtD;AACA,SAAO,KAAK,eAAL,CAAqB,aAArB,EAA8B,OAAO,cAArC,KAAwD,OAAO,MAAP,GAAgB,OAAO,MAAtF;AACD;;AAED;;;;;AAKA,SAAS,WAAT,CAAqB,MAArB,EAA6B,GAA7B,EAAkC;AAChC,SAAO,sBAAsB,WAAtB,CAAkC,GAAlC,EAAuC,MAAvC,CAAP;AACD;;AAED;;;;;AAKA,SAAS,eAAT,CAAyB,MAAzB,EAAiC,OAAjC,EAA0C;AACxC,SAAO,0BAA0B,eAA1B,CAA0C,OAA1C,EAAmD,MAAnD,CAAP;AACD;;QAGC,a,GAAA,a;QACA,c,GAAA,c;QACA,Y,GAAA,Y;QACA,W,GAAA,W;QACA,e,GAAA,e;;;;;;;;;;AC9DF;;IAAY,sB;;AACZ;;IAAY,yB;;AACZ;;IAAY,qB;;AACZ;;IAAY,wB;;;;QAGV,sB,GAAA,sB;QACA,yB,GAAA,yB;QACA,qB,GAAA,qB;QACA,wB,GAAA,wB;;;;;;;;;;ACDF;;IAAY,wB;;AACZ;;IAAY,qB;;AACZ;;IAAY,yB;;AACZ;;AACA;;;;AAEA;;;;;;AAMA,SAAS,WAAT,CAAqB,YAArB,EAAmC,aAAnC,EAAkD,IAAlD,EAAwD,KAAxD,EAA+D;AAC7D,OAAK,IAAL,CAAU,YAAV,EAAwB,KAAxB;AACA,iCAA+B,aAA/B,EAA8C,YAA9C,EAA4D,IAA5D;AACD;;AAED;;;;;;AAzBA;;;;;;;;AA+BA,SAAS,YAAT,CAAsB,YAAtB,EAAoC,aAApC,EAAmD,IAAnD,EAAyD,MAAzD,EAAiE;AAC/D,2BAAyB,YAAzB,CAAsC,YAAtC,EAAoD,aAApD,EAAmE,MAAnE,EAA2E,IAA3E;AACA,OAAK,MAAL,CAAY,aAAZ,EAA2B,aAA3B;AACD;;AAED;;;;;;AAMA,SAAS,UAAT,CAAoB,YAApB,EAAkC,aAAlC,EAAiD,KAAjD,EAAwD,KAAxD,EAA+D;AAC7D;AACA,OAAK,GAAL,CAAS,aAAT,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B;AACA,MAAM,qBAAqB,KAAK,GAAL,CAAS,MAAM,IAAN,GAAa,MAAM,IAA5B,EAAkC,MAAM,IAAN,GAAa,MAAM,IAArD,CAA3B;AACA,MAAM,qBAAqB,KAAK,GAAL,CAAS,MAAM,IAAN,GAAa,MAAM,IAA5B,EAAkC,MAAM,IAAN,GAAa,MAAM,IAArD,CAA3B;AACA,MAAM,qBAAqB,KAAK,GAAL,CAAS,MAAM,IAAN,GAAa,MAAM,IAA5B,EAAkC,MAAM,IAAN,GAAa,MAAM,IAArD,CAA3B;AACA;AACA;AACA,MAAI,sBAAsB,kBAA1B,EAA8C;AAC5C,QAAI,sBAAsB,kBAA1B,EAA8C;AAC5C,oBAAc,CAAd,IAAmB,MAAM,IAAN,GAAa,MAAM,IAAnB,IAA2B,MAAM,IAAN,GAAa,MAAM,IAA9C,GAAqD,CAArD,GAAyD,CAAC,CAA7E;AACD,KAFD,MAEO;AACL,oBAAc,CAAd,IAAmB,MAAM,IAAN,GAAa,MAAM,IAAnB,IAA2B,MAAM,IAAN,GAAa,MAAM,IAA9C,GAAqD,CAArD,GAAyD,CAAC,CAA7E;AACD;AACF,GAND,MAMO;AACL,QAAI,sBAAsB,kBAA1B,EAA8C;AAC5C,oBAAc,CAAd,IAAmB,MAAM,IAAN,GAAa,MAAM,IAAnB,IAA2B,MAAM,IAAN,GAAa,MAAM,IAA9C,GAAqD,CAArD,GAAyD,CAAC,CAA7E;AACD,KAFD,MAEO;AACL,oBAAc,CAAd,IAAmB,MAAM,IAAN,GAAa,MAAM,IAAnB,IAA2B,MAAM,IAAN,GAAa,MAAM,IAA9C,GAAqD,CAArD,GAAyD,CAAC,CAA7E;AACD;AACF;;AAED;AACA;AACA,MAAI,CAAC,MAAM,UAAN,CAAiB;AAAA,WAAU,2CAAuB,WAAvB,CAAmC,KAAnC,EAA0C,MAA1C,CAAV;AAAA,GAAjB,EACG,YADH,CAAL,EACuB;AACrB,UAAM,UAAN,CAAiB;AAAA,aAAU,2CAAuB,WAAvB,CAAmC,KAAnC,EAA0C,MAA1C,CAAV;AAAA,KAAjB,EAA8E,YAA9E;AACD;AACF;;AAED;;;;;;AAMA,SAAS,SAAT,CAAmB,YAAnB,EAAiC,aAAjC,EAAgD,IAAhD,EAAsD,GAAtD,EAA2D;AACzD,wBAAsB,SAAtB,CAAgC,YAAhC,EAA8C,aAA9C,EAA6D,GAA7D,EAAkE,IAAlE;AACA,OAAK,MAAL,CAAY,aAAZ,EAA2B,aAA3B;AACD;;AAED;;;;;;AAMA,SAAS,aAAT,CAAuB,YAAvB,EAAqC,aAArC,EAAoD,IAApD,EAA0D,OAA1D,EAAmE;AACjE,4BAA0B,aAA1B,CAAwC,YAAxC,EAAsD,aAAtD,EAAqE,OAArE,EAA8E,IAA9E;AACA,OAAK,MAAL,CAAY,aAAZ,EAA2B,aAA3B;AACD;;AAED;;;;;;AAMA,SAAS,8BAAT,CAAwC,aAAxC,EAAuD,YAAvD,EAAqE,IAArE,EAA2E;AACzE,OAAK,GAAL,CAAS,aAAT,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B;AACA,OAAK,QAAL,CAAc,aAAd,EAAuB,YAAvB,EAAqC,KAAK,cAA1C;AACA,MAAM,oBAAoB,KAAK,MAAL,GAAc,CAAd,GAAkB,KAAK,GAAL,CAAS,cAAQ,CAAR,CAAT,CAA5C;AACA,MAAM,oBAAoB,KAAK,MAAL,GAAc,CAAd,GAAkB,KAAK,GAAL,CAAS,cAAQ,CAAR,CAAT,CAA5C;AACA,MAAM,oBAAoB,KAAK,MAAL,GAAc,CAAd,GAAkB,KAAK,GAAL,CAAS,cAAQ,CAAR,CAAT,CAA5C;AACA;AACA,MAAI,qBAAqB,iBAAzB,EAA4C;AAC1C,QAAI,qBAAqB,iBAAzB,EAA4C;AAC1C,oBAAc,CAAd,IAAmB,cAAQ,CAAR,IAAa,CAAb,GAAiB,CAAjB,GAAqB,CAAC,CAAzC;AACD,KAFD,MAEO;AACL,oBAAc,CAAd,IAAmB,cAAQ,CAAR,IAAa,CAAb,GAAiB,CAAjB,GAAqB,CAAC,CAAzC;AACD;AACF,GAND,MAMO;AACL,QAAI,qBAAqB,iBAAzB,EAA4C;AAC1C,oBAAc,CAAd,IAAmB,cAAQ,CAAR,IAAa,CAAb,GAAiB,CAAjB,GAAqB,CAAC,CAAzC;AACD,KAFD,MAEO;AACL,oBAAc,CAAd,IAAmB,cAAQ,CAAR,IAAa,CAAb,GAAiB,CAAjB,GAAqB,CAAC,CAAzC;AACD;AACF;AACF;;QAGC,W,GAAA,W;QACA,Y,GAAA,Y;QACA,U,GAAA,U;QACA,S,GAAA,S;QACA,a,GAAA,a;QACA,8B,GAAA,8B;;;;;;;;;;ACxHF;;AAOA;;IAAY,qB;;;;AAEZ;;;;;;AAjBA;;;;;;;;AAuBA,SAAS,cAAT,CAAwB,YAAxB,EAAsC,aAAtC,EAAqD,OAArD,EAA8D,KAA9D,EAAqE;AACnE,OAAK,IAAL,CAAU,YAAV,EAAwB,KAAxB;AACA,8CAAiC,aAAjC,EAAgD,QAAQ,OAAxD,EAAiE,KAAjE;AACA,OAAK,QAAL,CAAc,aAAd,EAA6B,YAA7B,EAA2C,aAA3C;AACA,OAAK,SAAL,CAAe,aAAf,EAA8B,aAA9B;AACD;;AAED;;;;;;;;AAQA,SAAS,eAAT,CAAyB,YAAzB,EAAuC,aAAvC,EAAsD,OAAtD,EAA+D,MAA/D,EAAuE;AACrE,MAAM,eAAe,OAAO,cAA5B;AACA,8CAAiC,YAAjC,EAA+C,QAAQ,OAAvD,EAAgE,YAAhE;AACA,OAAK,QAAL,CAAc,aAAd,EAA6B,YAA7B,EAA2C,YAA3C;AACA,OAAK,SAAL,CAAe,aAAf,EAA8B,aAA9B;AACA,OAAK,WAAL,CAAiB,YAAjB,EAA+B,YAA/B,EAA6C,aAA7C,EAA4D,QAAQ,MAApE;AACD;;AAED;;;;;;;;;;;;;AAaA,SAAS,aAAT,CAAuB,YAAvB,EAAqC,aAArC,EAAoD,OAApD,EAA6D,IAA7D,EAAmE;AACjE;AACA;;AAEA;AACA;AACA;AACA;;AAEA,MAAM,gBAAgB,QAAQ,MAAR,GAAiB,QAAQ,MAA/C;AACA,MAAI,8BAA8B,KAAlC;;AAEA,MAAI,WAAW,QAAQ,OAAR,CAAgB,KAA/B;AACA,6CAAgC,aAAhC,EAAyC,IAAzC,EAA+C,QAA/C;AACA,MAAI,KAAK,eAAL,CAAqB,aAArB,EAA8B,QAA9B,KAA2C,aAA/C,EAA8D;AAC5D,kCAA8B,IAA9B;AACD,GAFD,MAEO;AACL,eAAW,QAAQ,OAAR,CAAgB,GAA3B;AACA,+CAAgC,aAAhC,EAAyC,IAAzC,EAA+C,QAA/C;AACA,QAAI,KAAK,eAAL,CAAqB,aAArB,EAA8B,QAA9B,KAA2C,aAA/C,EAA8D;AAC5D,oCAA8B,IAA9B;AACD;AACF;;AAED,MAAI,CAAC,2BAAL,EAAkC;AAChC;AACA;AACA;AACA;AACA,SAAK,QAAL,CAAc,gBAAQ;AACpB,uDAAsC,aAAtC,EAA+C,aAA/C,EACI,QAAQ,OADZ,EACqB,IADrB;AAEA,UAAM,WAAW,KAAK,eAAL,CAAqB,aAArB,EAA8B,aAA9B,CAAjB;AACA,aAAO,YAAY,aAAnB;AACD,KALD;AAMD;;AAED;;AAEA,8CAAiC,aAAjC,EAA0C,QAAQ,OAAlD,EAA2D,aAA3D;AACA,OAAK,QAAL,CAAc,aAAd,EAA6B,aAA7B,EAAsC,aAAtC;AACA,OAAK,SAAL,CAAe,aAAf,EAA8B,aAA9B;AACA,OAAK,WAAL,CAAiB,YAAjB,EAA+B,aAA/B,EAAwC,aAAxC,EAAuD,QAAQ,MAA/D;AACD;;AAED;;;;;;AAMA,SAAS,YAAT,CAAsB,YAAtB,EAAoC,aAApC,EAAmD,OAAnD,EAA4D,GAA5D,EAAiE;AAC/D,wBAAsB,YAAtB,CAAmC,YAAnC,EAAiD,aAAjD,EAAgE,GAAhE,EAAqE,OAArE;AACA,OAAK,MAAL,CAAY,aAAZ,EAA2B,aAA3B;AACD;;AAED;;;;;;;;AAQA,SAAS,gBAAT,CAA0B,YAA1B,EAAwC,aAAxC,EAAuD,QAAvD,EAAiE,QAAjE,EAA2E;AACzE,mDAAsC,aAAtC,EAA+C,aAA/C,EACI,SAAS,OADb,EACsB,SAAS,OAD/B;AAEA,OAAK,QAAL,CAAc,aAAd,EAA6B,aAA7B,EAAsC,aAAtC;AACA,OAAK,SAAL,CAAe,aAAf,EAA8B,aAA9B;AACA,OAAK,WAAL,CAAiB,YAAjB,EAA+B,aAA/B,EAAwC,aAAxC,EAAuD,SAAS,MAAhE;AACD;;QAGC,c,GAAA,c;QACA,e,GAAA,e;QACA,a,GAAA,a;QACA,Y,GAAA,Y;QACA,gB,GAAA,gB;;;;;;;;;;AChIF;;AAOA;;AACA;;AACA;;IAAY,sB;;;;oMAjBZ;;;;;;;;AAmBA;AACA;;AAEA;;;;;;AAMA,SAAS,UAAT,CAAoB,YAApB,EAAkC,aAAlC,EAAiD,GAAjD,EAAsD,KAAtD,EAA6D;AAC3D,OAAK,IAAL,CAAU,YAAV,EAAwB,KAAxB;AACA,gCAA8B,aAA9B,EAA6C,YAA7C,EAA2D,GAA3D;AACD;;AAED;;;;;;;;AAQA,SAAS,WAAT,CAAqB,YAArB,EAAmC,aAAnC,EAAkD,GAAlD,EAAuD,MAAvD,EAA+D;AAC7D,4CAA+B,YAA/B,EAA6C,GAA7C,EAAkD,OAAO,cAAzD;AACA,OAAK,QAAL,CAAc,aAAd,EAA6B,OAAO,cAApC,EAAoD,YAApD;AACA,OAAK,SAAL,CAAe,aAAf,EAA8B,aAA9B;AACD;;AAED;;;;;;;;;;;AAWA,SAAS,SAAT,CAAmB,YAAnB,EAAiC,aAAjC,EAAgD,GAAhD,EAAqD,IAArD,EAA2D;AACzD,SAAO,gBAAgB,YAAhB,EAA8B,aAA9B,EAA6C,GAA7C,EAAkD,IAAlD,EAAwD,2CAAuB,WAA/E,EACH,uBAAuB,8BADpB,CAAP;AAED;;AAED;;;;;;;;;;;AAWA,SAAS,QAAT,CAAkB,YAAlB,EAAgC,aAAhC,EAA+C,IAA/C,EAAqD,IAArD,EAA2D;AACzD,SAAO,gBAAgB,YAAhB,EAA8B,aAA9B,EAA6C,IAA7C,EAAmD,IAAnD,EAAyD,0CAAsB,UAA/E,EACH,6BADG,CAAP;AAED;;AAED;;;;;;;;;AASA,SAAS,eAAT,CAAyB,YAAzB,EAAuC,aAAvC,EAAsD,GAAtD,EAA2D,KAA3D,EACyB,sCADzB,EAEyB,+BAFzB,EAE0D;AACxD;AACA,MAAI,IAAI,UAAJ,CAAe;AAAA,WAAU,uCAAuC,KAAvC,EAA8C,MAA9C,CAAV;AAAA,GAAf,EACI,YADJ,CAAJ,EACuB;AACrB,oCAAgC,aAAhC,EAA+C,YAA/C,EAA6D,KAA7D;AACA,SAAK,MAAL,CAAY,aAAZ,EAA2B,aAA3B;AACA;AACD;;AAED;AACA,MAAI,MAAM,UAAN,CAAiB;AAAA,WAAU,0CAAsB,UAAtB,CAAiC,GAAjC,EAAsC,MAAtC,CAAV;AAAA,GAAjB,EAA0E,YAA1E,CAAJ,EAA6F;AAC3F,kCAA8B,aAA9B,EAA6C,YAA7C,EAA2D,GAA3D;AACA;AACD;;AAED;AACA;AACA;AACA,QAAM,QAAN,CAAe;AAAA,WACX,IAAI,QAAJ,CAAa;AAAA,aAAQ,4DAAoC,YAApC,EAAkD,IAAlD,4BAA2D,IAA3D,GAAR;AAAA,KAAb,CADW;AAAA,GAAf;AAEA,gCAA8B,aAA9B,EAA6C,YAA7C,EAA2D,GAA3D;AACD;;AAED;;;;;;AAMA,SAAS,YAAT,CAAsB,YAAtB,EAAoC,aAApC,EAAmD,GAAnD,EAAwD,OAAxD,EAAiE;AAC/D;;AAEA;AACA;AACA;;AAEA,MAAM,UAAU,IAAI,wBAAJ,CAAgB,KAAK,MAAL,EAAhB,EAA+B,KAAK,MAAL,EAA/B,CAAhB;AACA,MAAM,gBAAgB,QAAQ,MAAR,GAAiB,QAAQ,MAA/C;AACA,MAAM,kBAAkB,IAAI,QAAJ,CAAa;AAAA,WACjC,8CAAmC,QAAQ,OAA3C,EAAoD,IAApD,IAA4D,aAD3B;AAAA,GAAb,EACuD,OADvD,CAAxB;;AAGA,MAAI,eAAJ,EAAqB;AACnB,qDAAsC,aAAtC,EAA+C,YAA/C,EAA6D,QAAQ,OAArE,EAA8E,OAA9E;AACA,SAAK,QAAL,CAAc,aAAd,EAA6B,aAA7B,EAAsC,YAAtC;AACA,SAAK,SAAL,CAAe,aAAf,EAA8B,aAA9B;AACA;AACD;;AAED;AACA;AACA;;AAEA,MAAI,iBAAJ,CAAsB;AAAA,WAClB,4DAAoC,aAApC,EAA6C,QAAQ,OAArD,4BAAiE,IAAjE,GADkB;AAAA,GAAtB,EAC4E,QAAQ,MADpF;;AAGA,gCAA8B,aAA9B,EAA6C,aAA7C,EAAsD,GAAtD;;AAEA;AACA;AACA;AACA,OAAK,WAAL,CAAiB,YAAjB,EAA+B,aAA/B,EAAwC,aAAxC,EAAuD,CAAC,QAAQ,MAAhE;AACD;;AAED;;;;;;AAMA,SAAS,6BAAT,CAAuC,aAAvC,EAAsD,YAAtD,EAAoE,GAApE,EAAyE;AACvE;AACA,MAAM,cAAc,EAApB;AACA,OAAK,QAAL,CAAc,aAAd,EAAuB,YAAvB,EAAqC,IAAI,cAAzC;AACA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,CAApB,EAAuB,GAAvB,EAA4B;AAC1B,gBAAY,CAAZ,IAAiB,KAAK,GAAL,CAAS,IAAI,IAAJ,CAAS,CAAT,CAAT,EAAsB,aAAtB,CAAjB;AACD;;AAED;AACA,OAAK,GAAL,CAAS,aAAT,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B;AACA,MAAM,oBAAoB,IAAI,eAAJ,CAAoB,CAApB,IAAyB,KAAK,GAAL,CAAS,YAAY,CAAZ,CAAT,CAAnD;AACA,MAAM,oBAAoB,IAAI,eAAJ,CAAoB,CAApB,IAAyB,KAAK,GAAL,CAAS,YAAY,CAAZ,CAAT,CAAnD;AACA,MAAM,oBAAoB,IAAI,eAAJ,CAAoB,CAApB,IAAyB,KAAK,GAAL,CAAS,YAAY,CAAZ,CAAT,CAAnD;AACA;AACA,MAAI,qBAAqB,iBAAzB,EAA4C;AAC1C,QAAI,qBAAqB,iBAAzB,EAA4C;AAC1C,oBAAc,CAAd,IAAmB,YAAY,CAAZ,IAAiB,CAAjB,GAAqB,CAArB,GAAyB,CAAC,CAA7C;AACD,KAFD,MAEO;AACL,oBAAc,CAAd,IAAmB,YAAY,CAAZ,IAAiB,CAAjB,GAAqB,CAArB,GAAyB,CAAC,CAA7C;AACD;AACF,GAND,MAMO;AACL,QAAI,qBAAqB,iBAAzB,EAA4C;AAC1C,oBAAc,CAAd,IAAmB,YAAY,CAAZ,IAAiB,CAAjB,GAAqB,CAArB,GAAyB,CAAC,CAA7C;AACD,KAFD,MAEO;AACL,oBAAc,CAAd,IAAmB,YAAY,CAAZ,IAAiB,CAAjB,GAAqB,CAArB,GAAyB,CAAC,CAA7C;AACD;AACF;;AAED;AACA,OAAK,aAAL,CAAmB,aAAnB,EAAkC,aAAlC,EAAiD,IAAI,WAArD;AACD;;QAGC,U,GAAA,U;QACA,W,GAAA,W;QACA,S,GAAA,S;QACA,Q,GAAA,Q;QACA,Y,GAAA,Y;QACA,6B,GAAA,6B;;;;;;;;;;AC7LF;;AACA;;AACA;;IAAY,qB;;AACZ;;IAAY,yB;;;;AAEZ;;;;;;AAbA;;;;;;;;AAmBA,SAAS,aAAT,CAAuB,YAAvB,EAAqC,aAArC,EAAoD,MAApD,EAA4D,KAA5D,EAAmE;AACjE,OAAK,IAAL,CAAU,YAAV,EAAwB,KAAxB;AACA;AACA,OAAK,QAAL,CAAc,aAAd,EAA6B,KAA7B,EAAoC,OAAO,cAA3C;AACA,OAAK,SAAL,CAAe,aAAf,EAA8B,aAA9B;AACD;;AAED;;;;;;AAMA,SAAS,cAAT,CAAwB,YAAxB,EAAsC,aAAtC,EAAqD,OAArD,EAA8D,OAA9D,EAAuE;AACrE,OAAK,QAAL,CAAc,aAAd,EAA6B,QAAQ,cAArC,EAAqD,QAAQ,cAA7D;AACA,OAAK,SAAL,CAAe,aAAf,EAA8B,aAA9B;AACA;AACA,OAAK,WAAL,CAAiB,YAAjB,EAA+B,QAAQ,cAAvC,EAAuD,aAAvD,EAAsE,QAAQ,MAA9E;AACD;;AAED;;;;;;;;AAQA,SAAS,YAAT,CAAsB,YAAtB,EAAoC,aAApC,EAAmD,MAAnD,EAA2D,IAA3D,EAAiE;AAC/D,oDAAuC,YAAvC,EAAqD,IAArD,EAA2D,OAAO,cAAlE;AACA,8DAA+B,aAA/B,EAA8C,YAA9C,EAA4D,IAA5D;AACA,OAAK,MAAL,CAAY,aAAZ,EAA2B,aAA3B;AACD;;AAED;;;;;;AAMA,SAAS,WAAT,CAAqB,YAArB,EAAmC,aAAnC,EAAkD,MAAlD,EAA0D,GAA1D,EAA+D;AAC7D,wBAAsB,WAAtB,CAAkC,YAAlC,EAAgD,aAAhD,EAA+D,GAA/D,EAAoE,MAApE;AACA,OAAK,MAAL,CAAY,aAAZ,EAA2B,aAA3B;AACD;;AAED;;;;;;AAMA,SAAS,eAAT,CAAyB,YAAzB,EAAuC,aAAvC,EAAsD,MAAtD,EAA8D,OAA9D,EAAuE;AACrE,4BAA0B,eAA1B,CAA0C,YAA1C,EAAwD,aAAxD,EAAuE,OAAvE,EAAgF,MAAhF;AACA,OAAK,MAAL,CAAY,aAAZ,EAA2B,aAA3B;AACD;;QAGC,a,GAAA,a;QACA,c,GAAA,c;QACA,Y,GAAA,Y;QACA,W,GAAA,W;QACA,e,GAAA,e;;;;;;;;;;;AChFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;ACJA;;AAKA;;AAEA;;;;;AAXA;;;;AAgBA,SAAS,mCAAT,CAA6C,MAA7C,EAAqD,UAArD,EAAiE;AAC/D,SAAO,oBAAoB,OAAO,iBAA3B,EAA8C,MAA9C,EAAsD,UAAtD,CAAP;AACD;;AAED;;;;;;;AAOA,SAAS,4BAAT,CAAsC,MAAtC,EAA8C,UAA9C,EAA0D;AACxD,MAAM,aAAa,OAAO,KAAP,CAAa,CAAb,IAAkB,CAArC;AACA,MAAM,aAAa,OAAO,KAAP,CAAa,CAAb,IAAkB,CAArC;AACA,MAAM,aAAa,OAAO,KAAP,CAAa,CAAb,IAAkB,CAArC;AACA,SAAO,IAAI,gBAAJ,CAAQ,UAAR,EAAoB,UAApB,EAAgC,UAAhC,EAA4C,OAAO,YAAnD,EAAiE,UAAjE,CAAP;AACD;;AAED;;;;;;;AAOA,SAAS,+BAAT,CAAyC,MAAzC,EAAiD,UAAjD,EAA6D;AAC3D,MAAM,SAAS,OAAO,MAAP,IAAiB,KAAK,MAAL,CAAY,OAAO,KAAnB,IAA4B,KAAK,IAAL,CAAU,CAAV,CAA5D;AACA,SAAO,IAAI,mBAAJ,CAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,MAApB,EAA4B,OAAO,YAAnC,EAAiD,UAAjD,CAAP;AACD;;AAED;;;;;;;;;AASA,SAAS,gCAAT,CAA0C,MAA1C,EAAkD,UAAlD,EAA8D;AAC5D,MAAM,QAAQ,OAAO,KAArB;AACA,MAAM,2BAA2B,OAAO,wBAAxC;AACA,MAAM,eAAe,OAAO,YAA5B;AACA,MAAI,SAAS,OAAO,MAApB;;AAEA,MAAI,qBAAJ;;AAEA;AACA,MAAI,OAAO,MAAP,KAAkB,QAAlB,IAA8B,OAAO,wBAAP,KAAoC,QAAtE,EAAgF;AAC9E,mBAAe,2BAA2B,CAA1C;AACD,GAFD,MAEO;AACL,QAAM,OAAO,KAAK,KAAL,CAAW,KAAX,CAAb;AACA,SAAK,IAAL;;AAEA,QAAM,SAAS,KAAK,CAAL,CAAf;AACA,aAAS,CAAC,KAAK,CAAL,IAAU,KAAK,CAAL,CAAX,IAAsB,CAA/B;AACA,mBAAe,SAAS,CAAT,GAAa,MAA5B;AACD;;AAED,MAAM,cAAc,KAAK,MAAL,EAApB;AACA,MAAI,MAAM,CAAN,IAAW,MAAM,CAAN,CAAf,EAAyB;AACvB,QAAI,MAAM,CAAN,IAAW,MAAM,CAAN,CAAf,EAAyB;AACvB,WAAK,OAAL,CAAa,WAAb,EAA0B,WAA1B,EAAuC,gBAAU,OAAjD;AACD,KAFD,MAEO;AACL;AACD;AACF,GAND,MAMO;AACL,QAAI,MAAM,CAAN,IAAW,MAAM,CAAN,CAAf,EAAyB;AACvB,WAAK,OAAL,CAAa,WAAb,EAA0B,WAA1B,EAAuC,CAAC,gBAAU,OAAlD;AACD,KAFD,MAEO;AACL;AACD;AACF;;AAED,MAAM,UAAU,IAAI,oBAAJ,CAAY,YAAZ,EAA0B,MAA1B,EAAkC,YAAlC,EAAgD,UAAhD,CAAhB;AACA,UAAQ,WAAR,GAAsB,WAAtB;;AAEA,SAAO,OAAP;AACD;;AAED;;;;;AAKA,SAAS,wCAAT,CAAkD,MAAlD,EAA0D,UAA1D,EAAsE;AACpE,MAAM,QAAQ,OAAO,KAArB;AACA,MAAM,SAAS,OAAO,MAAtB;AACA,MAAM,2BAA2B,OAAO,wBAAxC;;AAEA,MAAM,cAAc,MAAM,CAAN,IAAW,MAA/B;AACA,MAAM,cAAc,MAAM,CAAN,IAAW,MAA/B;AACA,MAAM,cAAc,MAAM,CAAN,KAAY,SAAS,wBAArB,IAAiD,CAArE;;AAEA,MAAM,YAAY,KAAK,GAAL,CAAS,KAAK,GAAL,CAAS,WAAT,EAAsB,WAAtB,CAAT,EAA6C,WAA7C,CAAlB;AACA,MAAM,YAAY,KAAK,GAAL,CAAS,KAAK,GAAL,CAAS,WAAT,EAAsB,WAAtB,CAAT,EAA6C,WAA7C,CAAlB;;AAEA,MAAI,YAAY,SAAZ,IAAyB,yCAA7B,EAAwE;AACtE,WAAO,iCAAiC,MAAjC,EAAyC,UAAzC,CAAP;AACD,GAFD,MAEO;AACL,WAAO,gCAAgC,MAAhC,EAAwC,UAAxC,CAAP;AACD;AACF;;AAED,IAAM,4CAA4C,CAAlD;;AAEA,IAAM,sBAAsB;AAC1B,UAAQ,4BADkB;AAE1B,uBAAqB,wCAFK;AAG1B,YAAU,+BAHgB;AAI1B,aAAW;AAJe,CAA5B;;QAQE,gC,GAAA,gC;QACA,mC,GAAA,mC;QACA,4B,GAAA,4B;QACA,+B,GAAA,+B;QACA,wC,GAAA,wC;;AAGF;;;;;;;AAOA;;;;;AAKA;;;;;;;;;;;;;;;;;;ACrJA;;AACA;;AACA;;AACA;;;;;;;;AAEA;;;IAGM,oB;;;AACJ;;;;;;;AAOA,gCAAY,gBAAZ,EAA8B,KAA9B,EAAqC,aAArC,EAAoD,UAApD,EAAgE,gBAAhE,EAAkF;AAAA;;AAAA,4IAC1E,aAD0E,EAC3D,KAD2D;;AAGhF,qBAAiB,KAAjB,GAAyB,iBAAiB,KAAjB,IAA0B,KAAK,UAAL,CAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CAAnD;AACA,UAAK,UAAL,GAAkB,8DAAoC,gBAApC,QAAlB;AACA,UAAK,YAAL,CAAkB,sBAAlB,GACI,+BAAoB,MAAK,UAAzB,EAAqC,MAAK,YAAL,CAAkB,IAAvD,CADJ;AAEA,UAAK,YAAL,CAAkB,qBAAlB;AACA,UAAK,QAAL,GAAgB,KAAhB;AACA,UAAK,UAAL,GAAkB,UAAlB;AACA,UAAK,iBAAL,GAAyB,gBAAzB;AAVgF;AAWjF;;AAED;;;;;;;oCAGgB,Y,EAAc;AAC5B,kJAAsB,YAAtB;AACA,WAAK,QAAL,GAAgB,KAAhB;AACD;;AAED;;;;;;uCAGmB,Y,EAAc;AAC/B,qJAAyB,YAAzB;AACA,WAAK,QAAL,GAAgB,KAAhB;AACD;;AAED;;;;;;;;;oCAMgB,S,EAAW;AACzB,aAAO,KAAK,iBAAL,CAAuB,SAAvB,CAAP;AACD;;AAED;;;;;;;0BAIM,S,EAAW;AACf,wIAAY,SAAZ;AACA,uCAAgB,kBAAhB,CAAmC,KAAK,UAAxC;AACD;;AAED;;;;;;6BAGS;AACP;AACA,uCAAgB,oBAAhB,CAAqC,KAAK,UAA1C;AACD;;AAED;;;;wBACe;AACb,aAAO,KAAK,YAAL,CAAkB,QAAzB;AACD;;AAED;;sBACa,K,EAAO;AAClB,WAAK,YAAL,CAAkB,QAAlB,GAA6B,KAAK,KAAL,CAAW,KAAX,CAA7B;AACA,WAAK,UAAL,CAAgB,QAAhB,GAA2B,KAAK,KAAL,CAAW,KAAX,CAA3B;AACD;;;;EAzEgC,sB;;QA4E3B,oB,GAAA,oB;;AAER;;;;;;;;;;;;;;;;ACtFA;;;;AAEA;AACA;;AAEA;;;IAGM,e;AACJ,6BAAc;AAAA;;AACZ,SAAK,YAAL,GAAoB,EAApB;AACD;;AAED;;;;;;;;;;;uCAOmB,U,EAAY;AAC7B,WAAK,YAAL,CAAkB,IAAlB,CAAuB,UAAvB;AACD;;AAED;;;;;;yCAGqB,U,EAAY;AAC/B,UAAM,QAAQ,KAAK,YAAL,CAAkB,OAAlB,CAA0B,UAA1B,CAAd;AACA,UAAI,SAAS,CAAb,EAAgB;AACd,aAAK,YAAL,CAAkB,MAAlB,CAAyB,KAAzB,EAAgC,CAAhC;AACD;AACF;;AAED;;;;;;;uDAImC,U,EAAY;AAC7C,aAAO,KAAK,YAAL,CAAkB,MAAlB,CAAyB;AAAA,eAC9B,eAAe,KAAf,IACA,sDAAiC,UAAjC,EAA6C,KAA7C,CAF8B;AAAA,OAAzB,CAAP;AAGD;;AAED;;;;;;6DAGyC;AACvC,UAAM,SAAS,EAAf;AACA,WAAK,IAAI,IAAI,CAAR,EAAW,QAAQ,KAAK,YAAL,CAAkB,MAA1C,EAAkD,IAAI,KAAtD,EAA6D,GAA7D,EAAkE;AAChE,YAAM,cAAc,KAAK,YAAL,CAAkB,CAAlB,CAApB;AACA,aAAK,IAAI,IAAI,IAAI,CAAjB,EAAoB,IAAI,KAAxB,EAA+B,GAA/B,EAAoC;AAClC,cAAM,cAAc,KAAK,YAAL,CAAkB,CAAlB,CAApB;AACA,cAAI,sDAAiC,WAAjC,EAA8C,WAA9C,CAAJ,EAAgE;AAC9D,mBAAO,IAAP,CAAY,EAAC,aAAa,WAAd,EAA2B,aAAa,WAAxC,EAAZ;AACD;AACF;AACF;AACD,aAAO,MAAP;AACD;;AAED;;;;;;4BAGQ,Q,EAAU;AAChB,WAAK,YAAL,CAAkB,OAAlB,CAA0B,QAA1B;AACD;;;;;;AAGH,IAAM,kBAAkB,IAAI,eAAJ,EAAxB;QACQ,e,GAAA,e;;AAER;;;;;;;;;;;;;;;;;ACxEA;;AAQA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgFA;;;;;;;AAOA,SAAS,sBAAT,CAAgC,GAAhC,EAAqC,WAArC,EAAkD,aAAlD,EAAiE;AAC/D,MAAM,aAAa,IAAI,UAAvB;;AAEA;AACA,aAAW,kBAAX,GAAgC,WAAW,UAA3C;AACA,aAAW,UAAX,GAAwB,EAAxB;;AAEA;AACA,MAAM,uBAAuB,yCAAyC,UAAzC,CAA7B;;AAEA;AACA,MAAM,aAAa,kBAAkB,UAAlB,EAA8B,oBAA9B,EAAoD,WAApD,CAAnB;;AAEA;AACA,4BAA0B,UAA1B;;AAEA;AACA,qBAAmB,UAAnB,EAA+B,aAA/B;AACD;;AAED;;;;;;AAMA,SAAS,wCAAT,CAAkD,UAAlD,EAA8D;AAC5D;AACA,MAAM,uBAAuB,iCAAgB,kCAAhB,CAAmD,UAAnD,CAA7B;;AAEA;AACA,SAAO,iDAAiD,UAAjD,EAA6D,oBAA7D,CAAP;AACD;;AAED;;;AAGA,SAAS,mBAAT,CAA6B,IAA7B,EAAmC;AACjC,OAAK,OAAL,CAAa;AAAA,WAAO,IAAI,QAAJ,GAAe,aAAa,GAAb,CAAtB;AAAA,GAAb;AACD;;AAED,SAAS,8CAAT,GAA0D;AACxD,mCAAgB,OAAhB,CAAwB,2CAAxB;AACD;;AAED;;;AAGA,SAAS,yBAAT,GAAqC;AACnC;AACA,MAAI,aAAa,iCAAgB,sCAAhB,EAAjB;;AAEA;AACA,eAAa,uCAAuC,UAAvC,CAAb;;AAEA,aAAW,OAAX,CAAmB,qBAAa;AAC9B,YAAQ,IAAR,CAAa,oDAAb,EAAmE,SAAnE;AACD,GAFD;AAGD;;AAED;;;;;;;;;;;AAWA,SAAS,iBAAT,CAA2B,UAA3B,EAAuC,oBAAvC,EAA6D,WAA7D,EAA0E;AACxE,SAAO,qBAAqB,GAArB,CAAyB,iBAAS;AACvC,QAAM,YAAY;AAChB,mBAAa,UADG;AAEhB,mBAAa,KAFG;AAGhB,YAAM;AAHU,KAAlB;;AAMA;AACA,cAAU,WAAV,CAAsB,UAAtB,CAAiC,IAAjC,CAAsC,SAAtC;AACA,cAAU,WAAV,CAAsB,UAAtB,CAAiC,IAAjC,CAAsC,SAAtC;;AAEA,WAAO,SAAP;AACD,GAZM,CAAP;AAaD;;AAED;;;;;;;;;AASA,SAAS,sCAAT,CAAgD,UAAhD,EAA4D;AAC1D,SAAO,WAAW,MAAX,CAAkB,qBAAa;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAO,wCAAmB,UAAU,WAA7B,EAA0C,UAAU,WAApD,CAAP;AACD,GATM,CAAP;AAUD;;AAED;;;;;;;;;;AAUA,SAAS,gDAAT,CAA0D,UAA1D,EAAsE,oBAAtE,EAA4F;AAC1F,SAAO,qBAAqB,MAArB,CAA4B,iBAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAO,wCAAmB,UAAnB,EAA+B,KAA/B,CAAP;AACD,GATM,CAAP;AAUD;;AAED;;;;;;AAMA,SAAS,yBAAT,CAAmC,UAAnC,EAA+C;AAC7C,aAAW,OAAX,CAAmB,gCAAnB;AACD;;AAED;;;;;;;AAOA,SAAS,kBAAT,CAA4B,UAA5B,EAAwC,aAAxC,EAAuD;AACrD,aAAW,OAAX,CAAmB,qBAAa;AAC9B;AACA,QAAI,8BAA8B,SAA9B,CAAJ,EAA8C;AAC5C,UAAI,UAAU,WAAV,CAAsB,UAAtB,IAAoC,UAAU,WAAV,CAAsB,UAA9D,EAA0E;AACxE;AACA,0BAAkB,SAAlB,EAA6B,aAA7B;AACD,OAHD,MAGO;AACL;AACA,8CAAsC,SAAtC,EAAiD,aAAjD;AACD;AACF;AACF,GAXD;AAYD;;AAED;;;;;;AAMA,SAAS,6BAAT,CAAuC,SAAvC,EAAkD;AAChD,SAAO,UAAU,WAAV,CAAsB,UAAtB,CAAiC,eAAjC,CAAiD,SAAjD,KACH,UAAU,WAAV,CAAsB,UAAtB,CAAiC,eAAjC,CAAiD,SAAjD,CADJ;AAED;;AAED;;;;;;;;;;AAUA,SAAS,iBAAT,CAA2B,SAA3B,EAAsC,aAAtC,EAAqD;AACnD,MAAM,cAAc,UAAU,WAA9B;AACA,MAAM,cAAc,UAAU,WAA9B;AACA,MAAM,iBAAiB,YAAY,UAAZ,CAAuB,aAA9C;AACA,MAAM,iBAAiB,YAAY,UAAZ,CAAuB,aAA9C;AACA,MAAM,aAAa,YAAY,UAAZ,CAAuB,YAA1C;AACA,MAAM,aAAa,YAAY,UAAZ,CAAuB,YAA1C;AACA,MAAM,UAAU,YAAY,YAA5B;AACA,MAAM,UAAU,YAAY,YAA5B;AACA,MAAM,eAAe,UAAU,YAA/B;;AAEA,MAAM,sBAAsB,aAA5B;AACA,OAAK,QAAL,CAAc,mBAAd,EAAmC,YAAnC,EAAiD,OAAjD;AACA,MAAM,sBAAsB,aAA5B;AACA,OAAK,QAAL,CAAc,mBAAd,EAAmC,YAAnC,EAAiD,OAAjD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM,YAAY,aAAlB;AACA,OAAK,KAAL,CAAW,aAAX,EAAoB,eAAe,eAAnC,EAAoD,mBAApD;AACA,OAAK,GAAL,CAAS,SAAT,EAAoB,eAAe,QAAnC,EAA6C,aAA7C;;AAEA,MAAM,YAAY,aAAlB;AACA,OAAK,KAAL,CAAW,aAAX,EAAoB,eAAe,eAAnC,EAAoD,mBAApD;AACA,OAAK,GAAL,CAAS,SAAT,EAAoB,eAAe,QAAnC,EAA6C,aAA7C;;AAEA,MAAM,mBAAmB,KAAK,MAAL,EAAzB;AACA,OAAK,QAAL,CAAc,gBAAd,EAAgC,SAAhC,EAA2C,SAA3C;;AAEA,MAAI,KAAK,GAAL,CAAS,gBAAT,EAA2B,UAAU,aAArC,KAAuD,CAA3D,EAA8D;AAC5D;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,SAAK,IAAL,CAAU,UAAU,aAApB,EAAmC,gBAAnC;AACA,SAAK,SAAL,CAAe,UAAU,aAAzB,EAAwC,UAAU,aAAlD;AACA,SAAK,MAAL,CAAY,UAAU,aAAtB,EAAqC,UAAU,aAA/C;AACD;;AAED,6BAA2B,SAA3B,EAAsC,gBAAtC,EAAwD,mBAAxD,EACI,mBADJ,EACyB,aADzB;;AAGA;AACA;;AAEA;AACA,OAAK,IAAL,CAAU,WAAW,QAArB,EAA+B,eAAe,QAA9C;AACA,OAAK,IAAL,CAAU,WAAW,WAArB,EAAkC,eAAe,WAAjD;;AAEA;AACA,cAAY,QAAZ,GAAuB,eAAe,QAAtC;AACA,cAAY,WAAZ,GAA0B,eAAe,WAAzC;;AAEA,aAAW,qBAAX;AACA,aAAW,qBAAX;AACD;;AAED;;;;;;;AAOA,SAAS,qCAAT,CAA+C,SAA/C,EAA0D,aAA1D,EAAyE;AACvE,MAAM,gBAAgB,UAAU,aAAhC;;AAEA,MAAI,0BAAJ;AACA,MAAI,UAAU,WAAV,CAAsB,UAA1B,EAAsC;AACpC,wBAAoB,UAAU,WAA9B;AACD,GAFD,MAEO;AACL,wBAAoB,UAAU,WAA9B;AACA,SAAK,MAAL,CAAY,aAAZ,EAA2B,aAA3B;AACD;;AAED,MAAM,gBAAgB,kBAAkB,UAAlB,CAA6B,aAAnD;AACA,MAAM,YAAY,kBAAkB,UAAlB,CAA6B,YAA/C;AACA,MAAM,SAAS,kBAAkB,YAAjC;AACA,MAAM,eAAe,UAAU,YAA/B;;AAEA,MAAM,qBAAqB,aAA3B;AACA,OAAK,QAAL,CAAc,kBAAd,EAAkC,YAAlC,EAAgD,MAAhD;;AAEA;AACA;AACA,MAAM,WAAW,KAAK,MAAL,EAAjB;AACA,OAAK,KAAL,CAAW,aAAX,EAAoB,cAAc,eAAlC,EAAmD,kBAAnD;AACA,OAAK,GAAL,CAAS,QAAT,EAAmB,cAAc,QAAjC,EAA2C,aAA3C;;AAEA,MAAI,KAAK,GAAL,CAAS,QAAT,EAAmB,aAAnB,KAAqC,CAAzC,EAA4C;AAC1C;AACA;AACA;AACA;;AAEA;;AAEA,YAAQ,IAAR,CAAa,qEAAb;;AAEA,SAAK,IAAL,CAAU,UAAU,aAApB,EAAmC,QAAnC;AACA,SAAK,SAAL,CAAe,UAAU,aAAzB,EAAwC,UAAU,aAAlD;AACA,SAAK,MAAL,CAAY,UAAU,aAAtB,EAAqC,UAAU,aAA/C;AACD;;AAED,iDAA+C,iBAA/C,EAAkE,SAAlE,EAA6E,QAA7E,EACI,kBADJ,EACwB,aADxB;;AAGA;AACA,OAAK,IAAL,CAAU,UAAU,QAApB,EAA8B,cAAc,QAA5C;AACA,OAAK,IAAL,CAAU,UAAU,WAApB,EAAiC,cAAc,WAA/C;;AAEA;AACA,oBAAkB,QAAlB,GAA6B,cAAc,QAA3C;AACA,oBAAkB,WAAlB,GAAgC,cAAc,WAA9C;;AAEA,YAAU,qBAAV;AACD;;AAED;;;;;;;;;;;;AAYA,SAAS,0BAAT,CAAoC,SAApC,EAA+C,gBAA/C,EAAiE,mBAAjE,EACoC,mBADpC,EACyD,aADzD,EACwE;AACtE,MAAM,cAAc,UAAU,WAA9B;AACA,MAAM,cAAc,UAAU,WAA9B;;AAEA,MAAM,SAAS,YAAY,UAAZ,CAAuB,YAAtC;AACA,MAAM,SAAS,YAAY,UAAZ,CAAuB,YAAtC;;AAEA,MAAM,gBAAgB,UAAU,aAAhC;;AAEA;AACA;AACA;;AAEA,OAAK,KAAL,CAAW,aAAX,EAAoB,gBAApB,EAAsC,EAAE,IAAI,cAAc,wBAApB,CAAtC;AACA,MAAM,YAAY,KAAK,GAAL,CAAS,aAAT,EAAkB,aAAlB,CAAlB;;AAEA,OAAK,KAAL,CAAW,aAAX,EAAoB,mBAApB,EAAyC,aAAzC;AACA,OAAK,aAAL,CAAmB,aAAnB,EAA4B,aAA5B,EAAqC,OAAO,oBAA5C;AACA,OAAK,KAAL,CAAW,aAAX,EAAoB,aAApB,EAA6B,mBAA7B;;AAEA,OAAK,KAAL,CAAW,aAAX,EAAoB,mBAApB,EAAyC,aAAzC;AACA,OAAK,aAAL,CAAmB,aAAnB,EAA4B,aAA5B,EAAqC,OAAO,oBAA5C;AACA,OAAK,KAAL,CAAW,aAAX,EAAoB,aAApB,EAA6B,mBAA7B;;AAEA,OAAK,GAAL,CAAS,aAAT,EAAkB,aAAlB,EAA2B,aAA3B;AACA,MAAM,cAAc,KAAK,GAAL,CAAS,aAAT,EAAkB,aAAlB,IAAmC,OAAO,WAA1C,GAAwD,OAAO,WAAnF;;AAEA,MAAM,mBAAmB,YAAY,WAArC;;AAEA,gBAAc,MAAd,EAAsB,CAAC,gBAAvB,EAAyC,aAAzC,EAAwD,mBAAxD;AACA,gBAAc,MAAd,EAAsB,gBAAtB,EAAwC,aAAxC,EAAuD,mBAAvD;;AAEA;AACA;AACA;;AAEA,MAAM,2BAA2B,mBAAmB,cAAc,qBAAlE;;AAEA,MAAM,UAAU,aAAhB;AACA,OAAK,KAAL,CAAW,aAAX,EAAoB,aAApB,EAAmC,KAAK,GAAL,CAAS,gBAAT,EAA2B,aAA3B,CAAnC;AACA,OAAK,QAAL,CAAc,OAAd,EAAuB,gBAAvB,EAAyC,aAAzC;AACA,OAAK,SAAL,CAAe,OAAf,EAAwB,OAAxB;;AAEA,gBAAc,MAAd,EAAsB,wBAAtB,EAAgD,OAAhD,EAAyD,mBAAzD;AACA,gBAAc,MAAd,EAAsB,CAAC,wBAAvB,EAAiD,OAAjD,EAA0D,mBAA1D;AACD;;AAED;;;;;;;;;;;;AAYA,SAAS,8CAAT,CAAwD,iBAAxD,EAA2E,SAA3E,EAAsF,QAAtF,EACwD,kBADxD,EAC4E,aAD5E,EAC2F;AACzF,MAAM,QAAQ,kBAAkB,UAAlB,CAA6B,YAA3C;AACA,MAAM,gBAAgB,UAAU,aAAhC;;AAEA;AACA;AACA;;AAEA,OAAK,KAAL,CAAW,aAAX,EAAoB,QAApB,EAA8B,EAAE,IAAI,cAAc,wBAApB,CAA9B;AACA,MAAM,YAAY,KAAK,GAAL,CAAS,aAAT,EAAkB,aAAlB,CAAlB;;AAEA,OAAK,KAAL,CAAW,aAAX,EAAoB,kBAApB,EAAwC,aAAxC;AACA,OAAK,aAAL,CAAmB,aAAnB,EAA4B,aAA5B,EAAqC,MAAM,oBAA3C;AACA,OAAK,KAAL,CAAW,aAAX,EAAoB,aAApB,EAA6B,kBAA7B;AACA,MAAM,cAAc,KAAK,GAAL,CAAS,aAAT,EAAkB,aAAlB,IAAmC,MAAM,WAA7D;;AAEA,MAAM,mBAAmB,YAAY,WAArC;;AAEA,gBAAc,KAAd,EAAqB,gBAArB,EAAuC,aAAvC,EAAsD,kBAAtD;;AAEA;AACA;AACA;;AAEA,MAAM,2BAA2B,mBAAmB,cAAc,qBAAlE;;AAEA,MAAM,UAAU,aAAhB;AACA,OAAK,KAAL,CAAW,aAAX,EAAoB,aAApB,EAAmC,KAAK,GAAL,CAAS,QAAT,EAAmB,aAAnB,CAAnC;AACA,OAAK,QAAL,CAAc,OAAd,EAAuB,QAAvB,EAAiC,aAAjC;AACA,OAAK,SAAL,CAAe,OAAf,EAAwB,OAAxB;;AAEA,gBAAc,KAAd,EAAqB,wBAArB,EAA+C,OAA/C,EAAwD,kBAAxD;AACD;;AAED;;;;;;;AAOA,SAAS,aAAT,CAAuB,KAAvB,EAA8B,gBAA9B,EAAgD,gBAAhD,EAAkE,kBAAlE,EAAsF;AACpF;AACA,MAAM,sBAAsB,KAAK,MAAL,EAA5B;AACA,OAAK,WAAL,CAAiB,mBAAjB,EAAsC,MAAM,QAA5C,EAAsD,gBAAtD,EAAwE,gBAAxE;;AAEA;AACA,MAAM,uBAAuB,KAAK,MAAL,EAA7B;AACA,OAAK,KAAL,CAAW,aAAX,EAAoB,kBAApB,EAAwC,gBAAxC;AACA,OAAK,WAAL,CAAiB,oBAAjB,EAAuC,MAAM,eAA7C,EAA8D,aAA9D,EAAuE,gBAAvE;;AAEA;AACA,OAAK,IAAL,CAAU,MAAM,QAAhB,EAA0B,mBAA1B;AACA,OAAK,IAAL,CAAU,MAAM,eAAhB,EAAiC,oBAAjC;AACD;;AAED;;;;;AAKA,SAAS,YAAT,CAAsB,GAAtB,EAA2B;AACzB,SAAO,yBAAc,IAAI,YAAJ,CAAiB,QAA/B,EAAyC,IAAI,aAAJ,CAAkB,QAA3D,KACH,yBAAc,IAAI,YAAJ,CAAiB,QAA/B,EAAyC,IAAI,aAAJ,CAAkB,QAA3D,CADG,IAEH,yBAAc,IAAI,YAAJ,CAAiB,WAA/B,EAA4C,IAAI,aAAJ,CAAkB,WAA9D,CAFG,IAGH,mBAAmB,IAAI,UAAJ,CAAe,UAAlC,EAA8C,IAAI,UAAJ,CAAe,kBAA7D,CAHJ;AAID;;AAED;;;;;;AAMA,SAAS,kBAAT,CAA4B,WAA5B,EAAyC,WAAzC,EAAsD;AACpD,MAAM,QAAQ,YAAY,MAA1B;;AAEA,MAAI,UAAU,YAAY,MAA1B,EAAkC,OAAO,KAAP;;AAElC,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAApB,EAA2B,GAA3B,EAAgC;AAC9B,QAAM,aAAa,YAAY,CAAZ,CAAnB;AACA,QAAM,aAAa,YAAY,CAAZ,CAAnB;AACA,QAAI,WAAW,WAAX,KAA2B,WAAW,WAAtC,IACA,WAAW,WAAX,KAA2B,WAAW,WADtC,IAEA,CAAC,yBAAc,WAAW,YAAzB,EAAuC,WAAW,YAAlD,CAFD,IAGA,CAAC,yBAAc,WAAW,aAAzB,EAAwC,WAAW,aAAnD,CAHL,EAGwE;AACtE,aAAO,KAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD;;AAED;;;;AAIA,SAAS,2CAAT,CAAqD,UAArD,EAAiE;AAC/D,MAAI,CAAC,WAAW,uBAAhB,EAAyC;AACvC,eAAW,uBAAX,GAAqC,EAArC;AACD;;AAED,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,CAApB,EAAuB,GAAvB,EAA4B;AAC1B,eAAW,uBAAX,CAAmC,CAAnC,IAAwC,WAAW,uBAAX,CAAmC,IAAI,CAAvC,CAAxC;AACD;AACD,aAAW,uBAAX,CAAmC,CAAnC,IAAwC,WAAW,kBAAnD;AACD;;AAED;;;;;AAKA,SAAS,+BAAT,CAAyC,SAAzC,EAAoD,cAApD,EAAoE;AAClE,MAAM,cAAc,UAAU,WAAV,CAAsB,UAAtB,CAAiC,UAArD;AACA,MAAM,cAAc,UAAU,WAAV,CAAsB,UAAtB,CAAiC,UAArD;AACA,MAAI,gBAAgB,cAApB,EAAoC;AAClC,WAAO,WAAP;AACD,GAFD,MAEO,IAAI,gBAAgB,cAApB,EAAoC;AACzC,WAAO,WAAP;AACD,GAFM,MAEA;AACL,UAAM,IAAI,KAAJ,CAAU,wDAAV,CAAN;AACD;AACF;;QAGC,sB,GAAA,sB;QACA,wC,GAAA,wC;QACA,mB,GAAA,mB;QACA,8C,GAAA,8C;QACA,yB,GAAA,yB;QACA,+B,GAAA,+B;;;;;;;;;;ACvmBF;;AAOA;;AAOA;;AAOA;;;;;AAKA;;;;;AAKA,SAAS,kBAAT,CAA4B,CAA5B,EAA+B,CAA/B,EAAkC;AAChC,MAAI,aAAa,mBAAjB,EAAyB;AACvB,QAAI,aAAa,mBAAjB,EAAyB;AACvB,aAAO,6CAAyB,cAAzB,CAAwC,CAAxC,EAA2C,CAA3C,CAAP;AACD,KAFD,MAEO,IAAI,aAAa,iBAAjB,EAAuB;AAC5B,aAAO,6CAAyB,YAAzB,CAAsC,CAAtC,EAAyC,CAAzC,CAAP;AACD,KAFM,MAEA,IAAI,aAAa,oBAAjB,EAA0B;AAC/B,aAAO,6CAAyB,eAAzB,CAAyC,CAAzC,EAA4C,CAA5C,CAAP;AACD,KAFM,MAEA,IAAI,aAAa,gBAAjB,EAAsB;AAC3B,aAAO,6CAAyB,WAAzB,CAAqC,CAArC,EAAwC,CAAxC,CAAP;AACD,KAFM,MAEA;AACL,aAAO,6CAAyB,aAAzB,CAAuC,CAAvC,EAA0C,CAA1C,CAAP;AACD;AACF,GAZD,MAYO,IAAI,aAAa,iBAAjB,EAAuB;AAC5B,QAAI,aAAa,mBAAjB,EAAyB;AACvB,aAAO,2CAAuB,YAAvB,CAAoC,CAApC,EAAuC,CAAvC,CAAP;AACD,KAFD,MAEO,IAAI,aAAa,iBAAjB,EAAuB;AAC5B,aAAO,2CAAuB,UAAvB,CAAkC,CAAlC,EAAqC,CAArC,CAAP;AACD,KAFM,MAEA,IAAI,aAAa,oBAAjB,EAA0B;AAC/B,aAAO,2CAAuB,aAAvB,CAAqC,CAArC,EAAwC,CAAxC,CAAP;AACD,KAFM,MAEA,IAAI,aAAa,gBAAjB,EAAsB;AAC3B,aAAO,2CAAuB,SAAvB,CAAiC,CAAjC,EAAoC,CAApC,CAAP;AACD,KAFM,MAEA;AACL,aAAO,2CAAuB,WAAvB,CAAmC,CAAnC,EAAsC,CAAtC,CAAP;AACD;AACF,GAZM,MAYA,IAAI,aAAa,oBAAjB,EAA0B;AAC/B,QAAI,aAAa,mBAAjB,EAAyB;AACvB,aAAO,8CAA0B,eAA1B,CAA0C,CAA1C,EAA6C,CAA7C,CAAP;AACD,KAFD,MAEO,IAAI,aAAa,iBAAjB,EAAuB;AAC5B,aAAO,8CAA0B,aAA1B,CAAwC,CAAxC,EAA2C,CAA3C,CAAP;AACD,KAFM,MAEA,IAAI,aAAa,oBAAjB,EAA0B;AAC/B,aAAO,8CAA0B,gBAA1B,CAA2C,CAA3C,EAA8C,CAA9C,CAAP;AACD,KAFM,MAEA,IAAI,aAAa,gBAAjB,EAAsB;AAC3B,aAAO,8CAA0B,YAA1B,CAAuC,CAAvC,EAA0C,CAA1C,CAAP;AACD,KAFM,MAEA;AACL,aAAO,8CAA0B,cAA1B,CAAyC,CAAzC,EAA4C,CAA5C,CAAP;AACD;AACF,GAZM,MAYA,IAAI,aAAa,gBAAjB,EAAsB;AAC3B,QAAI,aAAa,mBAAjB,EAAyB;AACvB,aAAO,0CAAsB,WAAtB,CAAkC,CAAlC,EAAqC,CAArC,CAAP;AACD,KAFD,MAEO,IAAI,aAAa,iBAAjB,EAAuB;AAC5B,aAAO,0CAAsB,SAAtB,CAAgC,CAAhC,EAAmC,CAAnC,CAAP;AACD,KAFM,MAEA,IAAI,aAAa,oBAAjB,EAA0B;AAC/B,aAAO,0CAAsB,YAAtB,CAAmC,CAAnC,EAAsC,CAAtC,CAAP;AACD,KAFM,MAEA,IAAI,aAAa,gBAAjB,EAAsB;AAC3B,aAAO,0CAAsB,QAAtB,CAA+B,CAA/B,EAAkC,CAAlC,CAAP;AACD,KAFM,MAEA;AACL,aAAO,0CAAsB,UAAtB,CAAiC,CAAjC,EAAoC,CAApC,CAAP;AACD;AACF,GAZM,MAYA;AACL,QAAI,aAAa,mBAAjB,EAAyB;AACvB,aAAO,6CAAyB,aAAzB,CAAuC,CAAvC,EAA0C,CAA1C,CAAP;AACD,KAFD,MAEO,IAAI,aAAa,iBAAjB,EAAuB;AAC5B,aAAO,2CAAuB,WAAvB,CAAmC,CAAnC,EAAsC,CAAtC,CAAP;AACD,KAFM,MAEA,IAAI,aAAa,oBAAjB,EAA0B;AAC/B,aAAO,8CAA0B,cAA1B,CAAyC,CAAzC,EAA4C,CAA5C,CAAP;AACD,KAFM,MAEA,IAAI,aAAa,gBAAjB,EAAsB;AAC3B,aAAO,0CAAsB,UAAtB,CAAiC,CAAjC,EAAoC,CAApC,CAAP;AACD,KAFM,MAEA;AACL,aAAO,KAAP;AACD;AACF;AACF;;AAED;;;AAGA,SAAS,gBAAT,CAA0B,SAA1B,EAAqC;AACnC,MAAM,IAAI,UAAU,WAApB;AACA,MAAM,IAAI,UAAU,WAApB;AACA,MAAM,eAAe,KAAK,MAAL,EAArB;AACA,MAAM,gBAAgB,KAAK,MAAL,EAAtB;;AAEA,MAAI,aAAa,mBAAjB,EAAyB;AACvB,QAAI,aAAa,mBAAjB,EAAyB;AACvB,mDAAyB,cAAzB,CAAwC,YAAxC,EAAsD,aAAtD,EAAqE,CAArE,EAAwE,CAAxE;AACD,KAFD,MAEO,IAAI,aAAa,iBAAjB,EAAuB;AAC5B,mDAAyB,YAAzB,CAAsC,YAAtC,EAAoD,aAApD,EAAmE,CAAnE,EAAsE,CAAtE;AACD,KAFM,MAEA,IAAI,aAAa,oBAAjB,EAA0B;AAC/B,mDAAyB,eAAzB,CAAyC,YAAzC,EAAuD,aAAvD,EAAsE,CAAtE,EAAyE,CAAzE;AACD,KAFM,MAEA,IAAI,aAAa,gBAAjB,EAAsB;AAC3B,mDAAyB,WAAzB,CAAqC,YAArC,EAAmD,aAAnD,EAAkE,CAAlE,EAAqE,CAArE;AACD,KAFM,MAEA;AACL,mDAAyB,aAAzB,CAAuC,YAAvC,EAAqD,aAArD,EAAoE,CAApE,EAAuE,CAAvE;AACD;AACF,GAZD,MAYO,IAAI,aAAa,iBAAjB,EAAuB;AAC5B,QAAI,aAAa,mBAAjB,EAAyB;AACvB,iDAAuB,YAAvB,CAAoC,YAApC,EAAkD,aAAlD,EAAiE,CAAjE,EAAoE,CAApE;AACD,KAFD,MAEO,IAAI,aAAa,iBAAjB,EAAuB;AAC5B,iDAAuB,UAAvB,CAAkC,YAAlC,EAAgD,aAAhD,EAA+D,CAA/D,EAAkE,CAAlE;AACD,KAFM,MAEA,IAAI,aAAa,oBAAjB,EAA0B;AAC/B,iDAAuB,aAAvB,CAAqC,YAArC,EAAmD,aAAnD,EAAkE,CAAlE,EAAqE,CAArE;AACD,KAFM,MAEA,IAAI,aAAa,gBAAjB,EAAsB;AAC3B,iDAAuB,SAAvB,CAAiC,YAAjC,EAA+C,aAA/C,EAA8D,CAA9D,EAAiE,CAAjE;AACD,KAFM,MAEA;AACL,iDAAuB,WAAvB,CAAmC,YAAnC,EAAiD,aAAjD,EAAgE,CAAhE,EAAmE,CAAnE;AACD;AACF,GAZM,MAYA,IAAI,aAAa,oBAAjB,EAA0B;AAC/B,QAAI,aAAa,mBAAjB,EAAyB;AACvB,oDAA0B,eAA1B,CAA0C,YAA1C,EAAwD,aAAxD,EAAuE,CAAvE,EAA0E,CAA1E;AACD,KAFD,MAEO,IAAI,aAAa,iBAAjB,EAAuB;AAC5B,oDAA0B,aAA1B,CAAwC,YAAxC,EAAsD,aAAtD,EAAqE,CAArE,EAAwE,CAAxE;AACD,KAFM,MAEA,IAAI,aAAa,oBAAjB,EAA0B;AAC/B,oDAA0B,gBAA1B,CAA2C,YAA3C,EAAyD,aAAzD,EAAwE,CAAxE,EAA2E,CAA3E;AACD,KAFM,MAEA,IAAI,aAAa,gBAAjB,EAAsB;AAC3B,oDAA0B,YAA1B,CAAuC,YAAvC,EAAqD,aAArD,EAAoE,CAApE,EAAuE,CAAvE;AACD,KAFM,MAEA;AACL,oDAA0B,cAA1B,CAAyC,YAAzC,EAAuD,aAAvD,EAAsE,CAAtE,EAAyE,CAAzE;AACD;AACF,GAZM,MAYA,IAAI,aAAa,gBAAjB,EAAsB;AAC3B,QAAI,aAAa,mBAAjB,EAAyB;AACvB,gDAAsB,WAAtB,CAAkC,YAAlC,EAAgD,aAAhD,EAA+D,CAA/D,EAAkE,CAAlE;AACD,KAFD,MAEO,IAAI,aAAa,iBAAjB,EAAuB;AAC5B,gDAAsB,SAAtB,CAAgC,YAAhC,EAA8C,aAA9C,EAA6D,CAA7D,EAAgE,CAAhE;AACD,KAFM,MAEA,IAAI,aAAa,oBAAjB,EAA0B;AAC/B,gDAAsB,YAAtB,CAAmC,YAAnC,EAAiD,aAAjD,EAAgE,CAAhE,EAAmE,CAAnE;AACD,KAFM,MAEA,IAAI,aAAa,gBAAjB,EAAsB;AAC3B,gDAAsB,QAAtB,CAA+B,YAA/B,EAA6C,aAA7C,EAA4D,CAA5D,EAA+D,CAA/D;AACD,KAFM,MAEA;AACL,gDAAsB,UAAtB,CAAiC,YAAjC,EAA+C,aAA/C,EAA8D,CAA9D,EAAiE,CAAjE;AACD;AACF,GAZM,MAYA;AACL,QAAI,aAAa,mBAAjB,EAAyB;AACvB,mDAAyB,aAAzB,CAAuC,YAAvC,EAAqD,aAArD,EAAoE,CAApE,EAAuE,CAAvE;AACD,KAFD,MAEO,IAAI,aAAa,iBAAjB,EAAuB;AAC5B,iDAAuB,WAAvB,CAAmC,YAAnC,EAAiD,aAAjD,EAAgE,CAAhE,EAAmE,CAAnE;AACD,KAFM,MAEA,IAAI,aAAa,oBAAjB,EAA0B;AAC/B,oDAA0B,cAA1B,CAAyC,YAAzC,EAAuD,aAAvD,EAAsE,CAAtE,EAAyE,CAAzE;AACD,KAFM,MAEA,IAAI,aAAa,gBAAjB,EAAsB;AAC3B,gDAAsB,UAAtB,CAAiC,YAAjC,EAA+C,aAA/C,EAA8D,CAA9D,EAAiE,CAAjE;AACD,KAFM,MAEA,CAAE;AACT,SAAK,MAAL,CAAY,aAAZ,EAA2B,aAA3B;AACD;;AAED,YAAU,YAAV,GAAyB,YAAzB;AACA,YAAU,aAAV,GAA0B,aAA1B;AACD;;AAED;;;;;AAKA,SAAS,gCAAT,CAA0C,CAA1C,EAA6C,CAA7C,EAAgD;AAC9C,SAAO,mBAAmB,EAAE,cAArB,EAAqC,EAAE,cAAvC,CAAP;AACD;;QAGC,kB,GAAA,kB;QACA,gB,GAAA,gB;QACA,gC,GAAA,gC;;;;;;;;;;;AChLF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACDA;;;;;;IAMM,U;AACJ,wBAAc;AAAA;;AACZ;AACA,QAAI,IAAI,MAAJ,KAAe,UAAnB,EAA+B;AAC7B,YAAM,IAAI,SAAJ,CAAc,gDAAd,CAAN;AACD;AACF;;AAED;;;;;;;;;;;;8BAQU,G,EAAK,C,EAAG,E,EAAI;AACpB;AACA,YAAM,IAAI,SAAJ,CAAc,wBAAd,CAAN;AACD;;AAED;;;;;;uCAG0B;AACxB,aAAO;AACL,kBAAU,KAAK,MAAL,EADL;AAEL,eAAO,KAAK,MAAL,EAFF;AAGL,cAAM,KAAK,MAAL,EAHD;AAIL,gBAAQ,KAAK,MAAL;AAJH,OAAP;AAMD;;;;;;QAGK,U,GAAA,U;;AAER;;;;;;;;AAQA;;;;;;AAMA;;;;;;;;;;;;;;;;;ACxDA;;AACA;;AACA;;;;;;;;AAEA;AACA;;AAEA;;;;;;;;;;IAUM,a;;;AACJ,2BAAc;AAAA;;AAAA;;AAEZ,QAAI,aAAM,WAAV,EAAuB;AACrB,YAAK,eAAL;AACD;AAJW;AAKb;;AAED;;;;;;;;;;;8BAOU,G,EAAK,C,EAAG,E,EAAI;AACpB,UAAM,QAAQ,IAAI,YAAlB;AACA,iBAAW,IAAX,CAAgB,KAAhB;;AAEA,2BAAqB,EAArB,EAAyB,UAAzB,EAAqC,GAArC,EAA0C,CAA1C,EAA6C,CAA7C,EAAgD,iBAAhD;AACA,2BAAqB,EAArB,EAAyB,UAAzB,EAAqC,GAArC,EAA0C,CAA1C,EAA6C,KAAK,GAAlD,EAAuD,EAAvD;AACA,2BAAqB,EAArB,EAAyB,UAAzB,EAAqC,GAArC,EAA0C,CAA1C,EAA6C,KAAK,GAAlD,EAAuD,EAAvD;AACA,2BAAqB,EAArB,EAAyB,UAAzB,EAAqC,GAArC,EAA0C,CAA1C,EAA6C,EAA7C,EAAiD,EAAjD;;AAEA,0CACI,mBADJ,EACyB,GAAG,QAD5B,EACsC,GAAG,QADzC,EACmD,GAAG,QADtD,EACgE,GAAG,QADnE;AAEA,0CACI,mBADJ,EACyB,GAAG,KAD5B,EACmC,GAAG,KADtC,EAC6C,GAAG,KADhD,EACuD,GAAG,KAD1D;AAEA,0CAAoC,sBAApC,EAA4D,GAAG,IAA/D,EAAqE,GAAG,IAAxE,EAA8E,GAAG,IAAjF,EAAuF,GAAG,IAA1F;AACA,0CACI,0BADJ,EACgC,GAAG,MADnC,EAC2C,GAAG,MAD9C,EACsD,GAAG,MADzD,EACiE,GAAG,MADpE;;AAGA,WAAK,WAAL,CAAiB,MAAM,QAAvB,EAAiC,MAAM,QAAvC,EAAiD,mBAAjD,EAAsE,EAAtE;AACA,WAAK,WAAL,CAAiB,MAAM,QAAvB,EAAiC,MAAM,QAAvC,EAAiD,mBAAjD,EAAsE,EAAtE;AACA,uBAAU,eAAV,CAA0B,MAAM,WAAhC,EAA6C,MAAM,WAAnD,EAAgE,sBAAhE,EAAwF,EAAxF;AACA,WAAK,WAAL,CAAiB,MAAM,eAAvB,EAAwC,MAAM,eAA9C,EAA+D,0BAA/D,EAA2F,EAA3F;;AAEA,YAAM,qBAAN;AACD;;AAED;;;;;;;;sCAKkB;AAChB,UAAM,qBAAqB,KAAK,SAAL,CAAe,IAAf,CAAoB,IAApB,CAA3B;AACA,WAAK,SAAL,GAAiB,UAAC,GAAD,EAAM,CAAN,EAAS,EAAT,EAAgB;AAC/B,2BAAmB,GAAnB,EAAwB,CAAxB,EAA2B,EAA3B;AACA,4BAAoB,IAAI,YAAxB;AACD,OAHD;AAID;;;;EAnDyB,sB;;AAsD5B;;;;;;;;;;;;;AAWA,SAAS,oBAAT,CAA8B,GAA9B,EAAmC,KAAnC,EAA0C,GAA1C,EAA+C,CAA/C,EAAkD,EAAlD,EAAsD,CAAtD,EAAyD;AACvD,OAAK,WAAL,CAAiB,MAAM,QAAvB,EAAiC,MAAM,QAAvC,EAAiD,EAAE,QAAnD,EAA6D,EAA7D;AACA,OAAK,WAAL,CAAiB,MAAM,QAAvB,EAAiC,MAAM,QAAvC,EAAiD,EAAE,KAAnD,EAA0D,EAA1D;AACA,mBAAU,eAAV,CAA0B,MAAM,WAAhC,EAA6C,MAAM,WAAnD,EAAgE,EAAE,IAAlE,EAAwE,EAAxE;AACA,OAAK,WAAL,CAAiB,MAAM,eAAvB,EAAwC,MAAM,eAA9C,EAA+D,EAAE,MAAjE,EAAyE,EAAzE;;AAEA,QAAM,qBAAN;;AAEA,MAAI,QAAJ,GAAe,MAAM,QAArB;AACA,MAAI,IAAJ,GAAW,MAAM,IAAjB;AACA,OAAK,GAAL,CAAS,IAAI,KAAb,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B;AACA,OAAK,GAAL,CAAS,IAAI,MAAb,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B;;AAEA,sBAAoB,KAApB,GAA4B,IAAI,KAAhC;AACA,sBAAoB,MAApB,GAA6B,IAAI,MAAjC;AACA,qBAAmB,KAAnB,GAA2B,KAA3B;AACA,qBAAmB,CAAnB,GAAuB,IAAI,EAA3B;AACA,qBAAmB,EAAnB,GAAwB,EAAxB;;AAEA,MAAI,WAAJ,CAAgB,mBAAhB,EAAqC,kBAArC;AACD;;AAED,IAAM,oBAAoB,uBAAW,gBAAX,EAA1B;;AAEA,IAAM,aAAa,IAAI,0BAAJ,EAAnB;AACA,IAAM,KAAK,uBAAW,gBAAX,EAAX;AACA,IAAM,KAAK,uBAAW,gBAAX,EAAX;AACA,IAAM,KAAK,uBAAW,gBAAX,EAAX;AACA,IAAM,KAAK,uBAAW,gBAAX,EAAX;;AAEA,IAAM,sBAAsB,KAAK,MAAL,EAA5B;AACA,IAAM,sBAAsB,KAAK,MAAL,EAA5B;AACA,IAAM,yBAAyB,KAAK,MAAL,EAA/B;AACA,IAAM,6BAA6B,KAAK,MAAL,EAAnC;;AAEA,IAAM,sBAAsB,EAA5B;AACA,IAAM,qBAAqB,EAA3B;;AAEA;;;;;;;;AAQA,SAAS,mCAAT,CAA6C,GAA7C,EAAkD,CAAlD,EAAqD,CAArD,EAAwD,CAAxD,EAA2D,CAA3D,EAA8D;AAC5D,MAAI,CAAJ,IAAS,IAAI,CAAJ,IAAS,EAAE,CAAF,IAAO,KAAK,EAAE,CAAF,IAAO,EAAE,CAAF,CAAZ,CAAP,GAA2B,EAAE,CAAF,CAApC,CAAT;AACA,MAAI,CAAJ,IAAS,IAAI,CAAJ,IAAS,EAAE,CAAF,IAAO,KAAK,EAAE,CAAF,IAAO,EAAE,CAAF,CAAZ,CAAP,GAA2B,EAAE,CAAF,CAApC,CAAT;AACA,MAAI,CAAJ,IAAS,IAAI,CAAJ,IAAS,EAAE,CAAF,IAAO,KAAK,EAAE,CAAF,IAAO,EAAE,CAAF,CAAZ,CAAP,GAA2B,EAAE,CAAF,CAApC,CAAT;AACD;;AAED;;;;;;;;AAQA,SAAS,mCAAT,CAA6C,GAA7C,EAAkD,CAAlD,EAAqD,CAArD,EAAwD,CAAxD,EAA2D,CAA3D,EAA8D;AAC5D,MAAI,CAAJ,IAAS,IAAI,CAAJ,IAAS,EAAE,CAAF,IAAO,KAAK,EAAE,CAAF,IAAO,EAAE,CAAF,CAAZ,CAAP,GAA2B,EAAE,CAAF,CAApC,CAAT;AACA,MAAI,CAAJ,IAAS,IAAI,CAAJ,IAAS,EAAE,CAAF,IAAO,KAAK,EAAE,CAAF,IAAO,EAAE,CAAF,CAAZ,CAAP,GAA2B,EAAE,CAAF,CAApC,CAAT;AACA,MAAI,CAAJ,IAAS,IAAI,CAAJ,IAAS,EAAE,CAAF,IAAO,KAAK,EAAE,CAAF,IAAO,EAAE,CAAF,CAAZ,CAAP,GAA2B,EAAE,CAAF,CAApC,CAAT;AACA,MAAI,CAAJ,IAAS,IAAI,CAAJ,IAAS,EAAE,CAAF,IAAO,KAAK,EAAE,CAAF,IAAO,EAAE,CAAF,CAAZ,CAAP,GAA2B,EAAE,CAAF,CAApC,CAAT;AACD;;AAED;;;;AAIA,SAAS,mBAAT,CAA6B,KAA7B,EAAoC;AAClC,MAAM,kBAAkB,CACtB,UADsB,EAEtB,UAFsB,EAGtB,aAHsB,EAItB,iBAJsB,EAKtB,MALsB,CAKf;AAAA,WAAY,aAAa,MAAM,QAAN,CAAb,CAAZ;AAAA,GALe,CAAxB;AAMA,MAAM,WAAW,gBAAgB,CAAhB,CAAjB;AACA,MAAI,QAAJ,EAAc;AACZ,UAAM,IAAI,KAAJ,CAAa,QAAb,iDAAiE,MAAM,QAAN,CAAjE,CAAN;AACD;AACF;;AAED;;;;;;AAMA,SAAS,YAAT,CAAsB,CAAtB,EAAyB;AACvB,SAAO,MAAM,EAAE,CAAF,CAAN,KAAe,MAAM,EAAE,CAAF,CAAN,CAAf,IAA8B,MAAM,EAAE,CAAF,CAAN,CAArC;AACD;;AAED,IAAM,gBAAgB,IAAI,aAAJ,EAAtB;;QAEQ,a,GAAA,a;;;;;;;;;;;;AClLR;;AACA;;AAEA;;AAOA;;AACA;;;;;;;;AAEA,IAAM,4BAA4B,IAAlC;AACA,IAAM,qBAAqB,wBAA3B;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAkCM,a;;;AACJ;;;;;AAKA,yBAAY,aAAZ,EAA2B;AAAA;;AAAA;;AAGzB,QAAI,cAAJ,EAAoB;AAClB,YAAM,IAAI,KAAJ,CAAU,yDAAV,CAAN;AACD;;AAED;;AAEA,UAAK,cAAL,GAAsB,aAAtB;AACA,UAAK,UAAL,GAAkB,yBAAlB;AACA,UAAK,YAAL,GAAoB,GAApB;AACA,UAAK,cAAL,GAAsB,GAAtB;AACA,UAAK,kBAAL,GAA0B,EAA1B;AACA,UAAK,eAAL,GAAuB,EAAvB;;AAEA,QAAI,aAAM,WAAV,EAAuB;AACrB,YAAK,kBAAL;AACD;AAlBwB;AAmB1B;;AAED;;;;;;;4BAOQ;AACN,WAAK,YAAL,GAAoB,GAApB;AACA,WAAK,cAAL,GAAsB,GAAtB;AACA,WAAK,kBAAL,GAA0B,EAA1B;AACA,WAAK,eAAL,GAAuB,EAAvB;AACD;;AAED;;;;;;;;2BAKO,G,EAAK;AACV;;AAEA,UAAI,eAAe,gCAAnB,EAAyC;AACvC,aAAK,eAAL,CAAqB,IAArB,CAA0B,GAA1B;AACD,OAFD,MAEO;AACL,aAAK,kBAAL,CAAwB,IAAxB,CAA6B,GAA7B;AACD;AACF;;AAED;;;;;;;;;;8BAOU,G,EAAK;AACb;AACA,WAAK,UAAL,CAAgB,GAAhB;AACD;;AAED;;;;;;;;yCAKqB;AACnB,UAAM,kBAAkB,KAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB,CAAxB;AACA,UAAM,kBAAkB,IAAI,iCAAJ,CAAyB,yBAAzB,EACpB,KAAK,cAAL,CAAoB,gBADA,EACkB,kBADlB,CAAxB;AAEA,sBAAgB,KAAhB;;AAEA,WAAK,MAAL,GAAc,YAAa;AACzB,YAAM,aAAa,YAAY,GAAZ,EAAnB;AACA;AACA,YAAM,YAAY,YAAY,GAAZ,KAAoB,UAAtC;AACA,wBAAgB,kBAAhB,CAAmC,SAAnC;AACD,OALD;AAMD;;AAED;;;;;;;;;2BAMO,W,EAAa,S,EAAW;AAC7B,WAAK,cAAL,IAAuB,SAAvB;;AAEA;AACA;AACA,aAAO,KAAK,cAAL,IAAuB,KAAK,cAAL,CAAoB,gBAAlD,EAAoE;AAClE,aAAK,yBAAL;AACA,aAAK,YAAL,IAAqB,KAAK,cAAL,CAAoB,gBAAzC;AACA,aAAK,cAAL,IAAuB,KAAK,cAAL,CAAoB,gBAA3C;AACD;;AAED;AACA,UAAM,eAAe,KAAK,cAAL,GAAsB,KAAK,cAAL,CAAoB,gBAA/D;AACA,WAAK,2CAAL,CAAiD,YAAjD;AACD;;;gDAE2B;AAAA;;AAC1B,UAAI,aAAM,WAAV,EAAuB;AACrB,aAAK,oCAAL;AACA;AACD;;AAED,WAAK,kBAAL,CAAwB,OAAxB,CAAgC,KAAK,4BAAL,CAAkC,IAAlC,CAAuC,IAAvC,CAAhC;AACA,WAAK,eAAL,CAAqB,OAArB,CAA6B,eAAO;AAClC,YAAI,CAAC,IAAI,QAAT,EAAmB;AACjB,iBAAK,sCAAL,CAA4C,GAA5C;AACA,kDAAuB,GAAvB,EAA4B,OAAK,YAAjC,EAA+C,OAAK,cAApD;AACD;AACF,OALD;;AAOA,UAAI,aAAM,WAAV,EAAuB;AACrB;AACD;;AAED,WAAK,6BAAL;;AAEA,2CAAoB,KAAK,eAAzB;AACD;;AAED;;;;;;;;;;+BAOW,G,EAAiB;AAAA,UAAZ,KAAY,uEAAJ,CAAC,CAAG;;AAC1B,UAAI,eAAe,gCAAnB,EAAyC;AACvC,iCAAyB,GAAzB,EAA8B,KAA9B,EAAqC,KAAK,eAA1C;AACD,OAFD,MAEO;AACL,iCAAyB,GAAzB,EAA8B,KAA9B,EAAqC,KAAK,kBAA1C;AACD;AACF;;AAED;;;;;;;;;;;2DAQuC,G,EAAK;AAC1C,WAAK,4BAAL,CAAkC,GAAlC;;AAEA;AACA,UAAI,UAAJ,CAAe,QAAf,GAA0B,IAAI,YAAJ,CAAiB,QAA3C;AACA,UAAI,UAAJ,CAAe,WAAf,GAA6B,IAAI,YAAJ,CAAiB,WAA9C;AACD;;AAED;;;;;;;;;;;iDAQ6B,G,EAAK;AAChC,UAAI,aAAJ,CAAkB,IAAlB,CAAuB,IAAI,YAA3B;AACA,WAAK,UAAL,CAAgB,SAAhB,CAA0B,GAA1B,EAA+B,KAAK,YAApC,EAAkD,KAAK,cAAL,CAAoB,gBAAtE;AACD;;;oDAE+B;AAAA;;AAC9B,WAAK,eAAL,CAAqB,OAArB,CAA6B;AAAA,eAAO,0BAA0B,GAA1B,EAChC,OAAK,cAAL,CAAoB,+BADY,EAEhC,OAAK,cAAL,CAAoB,sCAFY,CAAP;AAAA,OAA7B;AAGA,WAAK,kBAAL,CAAwB,OAAxB,CAAgC;AAAA,eAAO,0BAA0B,GAA1B,EACnC,OAAK,cAAL,CAAoB,+BADe,EAEnC,OAAK,cAAL,CAAoB,sCAFe,CAAP;AAAA,OAAhC;AAGD;;AAED;;;;;;;;;;;gEAQ4C,Y,EAAc;AACxD,WAAK,eAAL,CAAqB,OAArB,CAA6B,wCAAwC,IAAxC,CAA6C,IAA7C,EAAmD,YAAnD,CAA7B;AACA,WAAK,kBAAL,CAAwB,OAAxB,CAAgC,wCAAwC,IAAxC,CAA6C,IAA7C,EAAmD,YAAnD,CAAhC;AACD;;;2DAEsC;AACrC,WAAK,eAAL,CAAqB,OAArB,CAA6B,sBAA7B;AACA,WAAK,kBAAL,CAAwB,OAAxB,CAAgC,sBAAhC;AACD;;;2BAEM,CAAE;;AAET;;;;;;2BA/Kc,a,EAAe;AAC3B,UAAI,aAAJ,CAAkB,aAAlB;AACD;;;wBAgLqB;AACpB,UAAI,CAAC,cAAL,EAAqB;AACnB,cAAM,IAAI,KAAJ,CAAU,uEAAV,CAAN;AACD;AACD,aAAO,cAAP;AACD;;;;EArNyB,mC;;AAwN5B;;;;;;;;AAMA,SAAS,yBAAT,CAAmC,GAAnC,EAAwC,+BAAxC,EACmC,sCADnC,EAC2E;AACzE,MAAM,eAAe,IAAI,YAAzB;;AAEA,MAAI,KAAK,aAAL,CAAmB,aAAa,QAAhC,IAA4C,+BAAhD,EAAiF;AAC/E,SAAK,GAAL,CAAS,aAAa,QAAtB,EAAgC,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC;AACD;;AAED,MAAI,KAAK,aAAL,CAAmB,aAAa,eAAhC,IAAmD,sCAAvD,EAA+F;AAC7F,SAAK,GAAL,CAAS,aAAa,eAAtB,EAAuC,CAAvC,EAA0C,CAA1C,EAA6C,CAA7C;AACD;AACF;;AAED;;;;;;AAMA,SAAS,wBAAT,CAAkC,GAAlC,EAAuC,KAAvC,EAA8C,IAA9C,EAAoD;AAClD,MAAI,SAAS,CAAb,EAAgB;AACd,SAAK,MAAL,CAAY,KAAZ,EAAmB,CAAnB;AACD,GAFD,MAEO;AACL,QAAM,QAAQ,KAAK,MAAnB;AACA,SAAK,QAAQ,CAAb,EAAgB,QAAQ,KAAxB,EAA+B,OAA/B,EAAwC;AACtC,UAAI,KAAK,KAAL,MAAgB,GAApB,EAAyB;AACvB,aAAK,MAAL,CAAY,KAAZ,EAAmB,CAAnB;AACA;AACD;AACF;AACF;AACF;;AAED;;;;;AAKA,SAAS,uCAAT,CAAiD,YAAjD,EAA+D,GAA/D,EAAoE;AAClE,MAAI,WAAJ,CAAgB,IAAhB,CAAqB,IAAI,aAAzB,EAAwC,IAAI,YAA5C,EAA0D,YAA1D;AACD;;AAED;;;;AAIA,SAAS,sBAAT,CAAgC,GAAhC,EAAqC;AACnC,MAAI,CAAC,IAAI,mBAAT,EAA8B;AAC5B,QAAI,mBAAJ,GAA0B,EAA1B;AACA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,CAApB,EAAuB,GAAvB,EAA4B;AAC1B,UAAI,mBAAJ,CAAwB,CAAxB,IAA6B,IAAI,0BAAJ,EAA7B;AACD;AACF;;AAED,OAAK,IAAI,KAAI,CAAb,EAAgB,KAAI,CAApB,EAAuB,IAAvB,EAA4B;AAC1B,QAAI,mBAAJ,CAAwB,EAAxB,EAA2B,IAA3B,CAAgC,IAAI,mBAAJ,CAAwB,KAAI,CAA5B,CAAhC;AACD;AACD,MAAI,mBAAJ,CAAwB,CAAxB,EAA2B,IAA3B,CAAgC,IAAI,aAApC;AACD;;AAED,IAAI,iBAAiB,IAArB;;QAEQ,a,GAAA,a;;;;;;;;;;;;AC9UR;;AACA;;AACA;;AACA;;;;AAEA;;;;IAIM,U;AACJ;;;;AAIA,sBAAY,aAAZ,EAA2B,KAA3B,EAAkC;AAAA;;AAChC,oBAAgB,iBAAiB,EAAjC;AACA,YAAQ,SAAS,IAAI,0BAAJ,EAAjB;;AAEA,SAAK,SAAL,GAAiB,IAAjB;AACA,SAAK,YAAL,GAAoB,KAApB;AACA,SAAK,aAAL,GAAqB,IAArB;AACA,SAAK,WAAL,GAAmB,IAAnB;AACA,SAAK,cAAL,GAAsB,aAAtB;AACD;;AAED;;;;;;;;gCAIY,Y,EAAc,W,EAAa;AACrC,WAAK,cAAL,CAAoB,OAApB,CAA4B;AAAA,eAAgB,aAAa,YAAb,EAA2B,WAA3B,CAAhB;AAAA,OAA5B;AACD;;AAED;;;;;;;;oCAKgB,Y,EAAyB;AAAA,UAAX,KAAW,uEAAH,CAAG;;AACvC,WAAK,cAAL,CAAoB,MAApB,CAA2B,KAA3B,EAAkC,CAAlC,EAAqC,YAArC;AACD;;AAED;;;;;;uCAGmB,Y,EAAc;AAC/B,WAAK,cAAL,CAAoB,MAApB,CAA2B,KAAK,cAAL,CAAoB,OAApB,CAA4B,YAA5B,CAA3B,EAAsE,CAAtE;AACD;;AAED;;;;;;;;0BAKM,S,EAAW;AACf,WAAK,SAAL,GAAiB,aAAa,sBAAS,WAAvC;;AAEA,UAAM,gBAAgB,IAAI,0BAAJ,EAAtB;AACA,oBAAc,IAAd,CAAmB,KAAK,YAAxB;AACA,UAAM,cAAc,IAAI,0BAAJ,EAApB;AACA,kBAAY,IAAZ,CAAiB,KAAK,YAAtB;;AAEA,WAAK,aAAL,GAAqB,aAArB;AACA,WAAK,WAAL,GAAmB,WAAnB;;AAEA,UAAI,aAAM,WAAV,EAAuB;AACrB;AACA,aAAK,YAAL,CAAkB,GAAlB,GAAwB,IAAxB;AACA,aAAK,aAAL,CAAmB,GAAnB,GAAyB,IAAzB;AACA,aAAK,WAAL,CAAiB,GAAjB,GAAuB,IAAvB;AACD;;AAED,mCAAc,QAAd,CAAuB,MAAvB,CAA8B,IAA9B;AACD;;AAED;;;;;;;;6BAKS;AACP,mCAAc,QAAd,CAAuB,SAAvB,CAAiC,IAAjC;AACD;;AAED;;;;;;4BAGQ,S,EAAW;AACjB,WAAK,MAAL;AACA,WAAK,KAAL,CAAW,SAAX;AACD;;;;;;QAGK,U,GAAA,U;;AAER;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;ACxGA;;;;AAEA;;;;IAIM,Y;AACJ;;;AAGA,0BAAiC;AAAA,QAArB,cAAqB,uEAAJ,EAAI;;AAAA;;AAC/B,QAAM,WAAW,eAAe,QAAf,IAA2B,KAAK,MAAL,EAA5C;AACA,QAAM,WAAW,eAAe,QAAf,IAA2B,KAAK,MAAL,EAA5C;AACA,QAAM,cAAc,eAAe,WAAf,IAA8B,KAAK,MAAL,EAAlD;AACA,QAAM,kBAAkB,eAAe,eAAf,IAAkC,KAAK,MAAL,EAA1D;AACA,QAAM,OAAO,eAAe,IAAf,IAAuB,CAApC;AACA,QAAM,yBAAyB,eAAe,sBAAf,IAAyC,kCAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,EAAgC,IAAhC,CAAxE;;AAEA;;AAEA,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,WAAL,GAAmB,IAAI,IAAvB;AACA,SAAK,sBAAL,GAA8B,sBAA9B;;AAEA;;AAEA,SAAK,QAAL,GAAgB,QAAhB;AACA,SAAK,QAAL,GAAgB,QAAhB;AACA,SAAK,WAAL,GAAmB,WAAnB;AACA,SAAK,eAAL,GAAuB,eAAvB;;AAEA;;AAEA;AACA,SAAK,QAAL,GAAgB,KAAK,MAAL,EAAhB;AACA;AACA,SAAK,IAAL,GAAY,KAAK,MAAL,EAAZ;AACA;AACA,SAAK,eAAL,GAAuB,KAAK,MAAL,EAAvB;AACA;AACA,SAAK,oBAAL,GAA4B,KAAK,MAAL,EAA5B;;AAEA,SAAK,qBAAL;AACD;;;;4CAEuB;AAAC;AACvB;AACA,WAAK,KAAL,CAAW,KAAK,QAAhB,EAA0B,KAAK,QAA/B,EAAyC,KAAK,WAA9C;;AAEA;AACA,WAAK,SAAL,CAAe,KAAK,WAApB,EAAiC,KAAK,WAAtC;AACA,8BAAa,KAAK,oBAAlB,EAAwC,KAAK,sBAA7C,EAAqE,KAAK,WAA1E;AACA,WAAK,MAAL,CAAY,KAAK,oBAAjB,EAAuC,KAAK,sBAA5C;AACA,WAAK,aAAL,CAAmB,KAAK,eAAxB,EAAyC,KAAK,eAA9C,EAA+D,KAAK,oBAApE;AACA,WAAK,GAAL,CAAS,KAAK,IAAd,EAAoB,KAAK,eAAL,CAAqB,CAArB,CAApB,EAA6C,KAAK,eAAL,CAAqB,CAArB,CAA7C,EACI,KAAK,eAAL,CAAqB,CAArB,CADJ,EAC6B,CAD7B;AAEA,WAAK,KAAL,CAAW,KAAK,IAAhB,EAAsB,KAAK,IAA3B,EAAiC,GAAjC;AACA,WAAK,QAAL,CAAc,KAAK,IAAnB,EAAyB,KAAK,IAA9B,EAAoC,KAAK,WAAzC;AACD;;AAED;;;;;;;;yBAKK,K,EAAO;AACV,WAAK,IAAL,GAAY,MAAM,IAAlB;AACA,WAAK,WAAL,GAAmB,MAAM,WAAzB;AACA,WAAK,IAAL,CAAU,KAAK,sBAAf,EAAuC,MAAM,sBAA7C;AACA,WAAK,IAAL,CAAU,KAAK,oBAAf,EAAqC,MAAM,oBAA3C;AACA,WAAK,IAAL,CAAU,KAAK,QAAf,EAAyB,MAAM,QAA/B;AACA,WAAK,IAAL,CAAU,KAAK,QAAf,EAAyB,MAAM,QAA/B;AACA,WAAK,IAAL,CAAU,KAAK,WAAf,EAA4B,MAAM,WAAlC;AACA,WAAK,IAAL,CAAU,KAAK,eAAf,EAAgC,MAAM,eAAtC;AACA,WAAK,IAAL,CAAU,KAAK,QAAf,EAAyB,MAAM,QAA/B;AACA,WAAK,IAAL,CAAU,KAAK,IAAf,EAAqB,MAAM,IAA3B;AACA,WAAK,IAAL,CAAU,KAAK,eAAf,EAAgC,MAAM,eAAtC;AACD;;AAED;;;;;;;;yBAKK,C,EAAG,C,EAAG,Y,EAAc;AACvB,WAAK,IAAL,CAAU,KAAK,QAAf,EAAyB,EAAE,QAA3B,EAAqC,EAAE,QAAvC,EAAiD,YAAjD;AACA,WAAK,IAAL,CAAU,KAAK,QAAf,EAAyB,EAAE,QAA3B,EAAqC,EAAE,QAAvC,EAAiD,YAAjD;AACA,WAAK,KAAL,CAAW,KAAK,WAAhB,EAA6B,EAAE,WAA/B,EAA4C,EAAE,WAA9C,EAA2D,YAA3D;AACA,WAAK,SAAL,CAAe,KAAK,WAApB,EAAiC,KAAK,WAAtC;AACA,WAAK,IAAL,CAAU,KAAK,eAAf,EAAgC,EAAE,eAAlC,EAAmD,EAAE,eAArD,EAAsE,YAAtE;AACA,WAAK,qBAAL;AACD;;;;;;QAGK,Y,GAAA,Y;;AAER;;;;;;;;;;;;;;;;;;;AChGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;ACHA;;;;AAIA;;;;;AAKA,SAAS,YAAT,CAAsB,MAAtB,EAA8B,MAA9B,EAAsC,KAAtC,EAA6C;AAC3C,OAAK,WAAL,CAAiB,OAAO,KAAxB,EAA+B,OAAO,KAAtC,EAA6C,OAAO,WAApD,EAAiE,MAAM,KAAN,CAAY,IAA7E;AACD;;AAED;;;;;AAKA,SAAS,eAAT,CAAyB,MAAzB,EAAiC,MAAjC,EAAyC,KAAzC,EAAgD;AAC9C,MAAM,gBAAgB,CAAC,KAAK,aAAL,CAAmB,MAAM,KAAN,CAAY,QAA/B,CAAD,GAA4C,OAAO,qBAAzE;AACA,OAAK,SAAL,CAAe,KAAf,EAAsB,MAAM,KAAN,CAAY,QAAlC;AACA,OAAK,WAAL,CAAiB,OAAO,KAAxB,EAA+B,OAAO,KAAtC,EAA6C,KAA7C,EAAoD,aAApD;AACD;;AAED;;;;;AAKA,SAAS,gBAAT,CAA0B,MAA1B,EAAkC,MAAlC,EAA0C,KAA1C,EAAiD;AAC/C,OAAK,WAAL,CAAiB,OAAO,MAAxB,EAAgC,OAAO,MAAvC,EAA+C,MAAM,KAAN,CAAY,eAA3D,EACI,OAAO,sBADX;AAED;;AAED;;;;;;;;;AASA,SAAS,sBAAT,CAAgC,MAAhC,EAAwC,MAAxC,EAAgD,KAAhD,EAAuD;AACrD,OAAK,QAAL,CAAc,KAAd,EAAqB,OAAO,mBAAP,EAArB,EAAmD,MAAM,KAAN,CAAY,QAA/D;AACA,OAAK,WAAL,CAAiB,OAAO,KAAxB,EAA+B,OAAO,KAAtC,EAA6C,KAA7C,EAAoD,OAAO,iBAA3D;AACD;;AAED;;;;;AAKA,SAAS,kBAAT,CAA4B,MAA5B,EAAoC,MAApC,EAA4C,KAA5C,EAAmD;AACjD,OAAK,KAAL,CAAW,KAAX,EAAkB,MAAM,KAAN,CAAY,QAA9B,EAAwC,CAAC,OAAO,kBAAhD;AACA,OAAK,GAAL,CAAS,OAAO,KAAhB,EAAuB,OAAO,KAA9B,EAAqC,KAArC;AACD;;AAED,IAAM,QAAQ,KAAK,MAAL,EAAd;;QAGE,gB,GAAA,gB;QACA,Y,GAAA,Y;QACA,e,GAAA,e;QACA,sB,GAAA,sB;QACA,kB,GAAA,kB;;AAGF;;;;;AAKA;;;;;AAKA;;;;;AAKA;;;;;;AAMA;;;;;;;;;;;ACzFA;;;;AAIA,IAAM,UAAU,SAAhB;AACA,IAAM,UAAU,KAAK,EAAL,GAAU,CAA1B;AACA,IAAM,SAAS,KAAK,EAAL,GAAU,CAAzB;;AAEA;;;;;;;AAOA,SAAS,kCAAT,CAA4C,QAA5C,EAAsD,QAAtD,EAAgE;AAC9D,wCAAsC,wBAAtC,EAAgE,wBAAhE,EACI,QADJ,EACc,QADd;AAEA,SAAO,KAAK,eAAL,CAAqB,wBAArB,EAA+C,wBAA/C,CAAP;AACD;;AAED;;;;;;;AAOA,SAAS,qCAAT,CAA+C,OAA/C,EAAwD,KAAxD,EAA+D;AAC7D,mCAAiC,wBAAjC,EAA2D,OAA3D,EAAoE,KAApE;AACA,SAAO,KAAK,eAAL,CAAqB,wBAArB,EAA+C,KAA/C,CAAP;AACD;;AAED,IAAM,2BAA2B,KAAK,MAAL,EAAjC;AACA,IAAM,2BAA2B,KAAK,MAAL,EAAjC;;AAEA;;;;;AAKA,SAAS,+BAAT,CAAyC,WAAzC,EAAsD,IAAtD,EAA4D,WAA5D,EAAyE;AACvE,cAAY,CAAZ,IAAiB,KAAK,IAAL,GAAY,YAAY,CAAZ,CAAZ,GACX,KAAK,IADM,GAEX,KAAK,IAAL,GAAY,YAAY,CAAZ,CAAZ,GACI,KAAK,IADT,GAEI,YAAY,CAAZ,CAJV;AAKA,cAAY,CAAZ,IAAiB,KAAK,IAAL,GAAY,YAAY,CAAZ,CAAZ,GACX,KAAK,IADM,GAEX,KAAK,IAAL,GAAY,YAAY,CAAZ,CAAZ,GACI,KAAK,IADT,GAEI,YAAY,CAAZ,CAJV;AAKA,cAAY,CAAZ,IAAiB,KAAK,IAAL,GAAY,YAAY,CAAZ,CAAZ,GACX,KAAK,IADM,GAEX,KAAK,IAAL,GAAY,YAAY,CAAZ,CAAZ,GACI,KAAK,IADT,GAEI,YAAY,CAAZ,CAJV;AAKD;;AAED;;;;;AAKA,SAAS,sCAAT,CAAgD,WAAhD,EAA6D,IAA7D,EAAmE,WAAnE,EAAgF;AAC9E,kCAAgC,WAAhC,EAA6C,IAA7C,EAAmD,WAAnD;;AAEA;AACA;AACA,MAAI,YAAY,IAAZ,EAAkB,WAAlB,CAAJ,EAAoC;AAClC;AACA,aAAS,CAAT,IAAc,YAAY,CAAZ,IAAiB,KAAK,IAAtB,GAA6B,KAAK,IAAL,GAAY,YAAY,CAAZ,CAAzC,GACR,KAAK,IADG,GAER,KAAK,IAFX;AAGA,aAAS,CAAT,IAAc,YAAY,CAAZ,IAAiB,KAAK,IAAtB,GAA6B,KAAK,IAAL,GAAY,YAAY,CAAZ,CAAzC,GACR,KAAK,IADG,GAER,KAAK,IAFX;AAGA,aAAS,CAAT,IAAc,YAAY,CAAZ,IAAiB,KAAK,IAAtB,GAA6B,KAAK,IAAL,GAAY,YAAY,CAAZ,CAAzC,GACR,KAAK,IADG,GAER,KAAK,IAFX;;AAIA;AACA,aAAS,CAAT,IAAc,SAAS,CAAT,IAAc,YAAY,CAAZ,CAA5B;AACA,aAAS,CAAT,IAAc,SAAS,CAAT,IAAc,CAAd,GAAkB,CAAC,SAAS,CAAT,CAAnB,GAAiC,SAAS,CAAT,CAA/C;AACA,aAAS,CAAT,IAAc,SAAS,CAAT,IAAc,YAAY,CAAZ,CAA5B;AACA,aAAS,CAAT,IAAc,SAAS,CAAT,IAAc,CAAd,GAAkB,CAAC,SAAS,CAAT,CAAnB,GAAiC,SAAS,CAAT,CAA/C;AACA,aAAS,CAAT,IAAc,SAAS,CAAT,IAAc,YAAY,CAAZ,CAA5B;AACA,aAAS,CAAT,IAAc,SAAS,CAAT,IAAc,CAAd,GAAkB,CAAC,SAAS,CAAT,CAAnB,GAAiC,SAAS,CAAT,CAA/C;;AAEA;AACA,QAAM,QAAQ,SAAS,CAAT,IAAc,SAAS,CAAT,CAAd,GACP,SAAS,CAAT,IAAc,SAAS,CAAT,CAAd,GACG,CADH,GAEG,CAHI,GAIP,SAAS,CAAT,IAAc,SAAS,CAAT,CAAd,GACG,CADH,GAEG,CANV;;AAQA,gBAAY,KAAZ,IAAqB,SAAS,KAAT,CAArB;AACD;AACF;;AAED;;;;;;;;;;;;;AAaA,SAAS,mCAAT,CAA6C,GAA7C,EAAkD,OAAlD,EAA2D,YAA3D,EAAyE,YAAzE,EAAuF,YAAvF,EAC6C,YAD7C,EAC2D;AACzD,SAAO,iCAAiC,GAAjC,EAAsC,OAAtC,EAA+C,YAA/C,EAA6D,YAA7D,EAA2E,YAA3E,KACH,iCAAiC,GAAjC,EAAsC,OAAtC,EAA+C,YAA/C,EAA6D,YAA7D,EAA2E,YAA3E,CADJ;AAED;;AAED;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAAS,gCAAT,CAA0C,GAA1C,EAA+C,OAA/C,EAAwD,eAAxD,EAAyE,eAAzE,EAC0C,eAD1C,EAC2D;AACzD;AACA;AACA;;AAEA;AACA,OAAK,QAAL,CAAc,QAAd,EAAwB,eAAxB,EAAyC,eAAzC;AACA;AACA,OAAK,QAAL,CAAc,QAAd,EAAwB,eAAxB,EAAyC,eAAzC;AACA;AACA,OAAK,KAAL,CAAW,QAAX,EAAqB,QAArB,EAA+B,QAA/B;AACA;AACA,OAAK,QAAL,CAAc,QAAd,EAAwB,QAAQ,KAAhC,EAAuC,eAAvC;;AAEA,MAAM,sBAAsB,KAAK,GAAL,CAAS,QAAT,EAAmB,QAAQ,GAA3B,CAA5B;;AAEA,MAAI,sBAAsB,OAAtB,IAAiC,sBAAsB,CAAC,OAA5D,EAAqE;AACnE;AACA,WAAO,KAAP;AACD;;AAED,MAAM,mBAAmB,CAAC,KAAK,GAAL,CAAS,QAAT,EAAmB,QAAnB,CAA1B;AACA,MAAM,4BAA4B,mBAAmB,mBAArD;;AAEA,MAAI,4BAA4B,CAA5B,IAAiC,4BAA4B,CAAjE,EAAoE;AAClE;AACA,WAAO,KAAP;AACD;;AAED,OAAK,WAAL,CAAiB,GAAjB,EAAsB,QAAQ,KAA9B,EAAqC,QAAQ,GAA7C,EAAkD,yBAAlD;;AAEA;AACA;AACA;;AAEA,MAAM,gBAAgB,KAAK,GAAL,CAAS,QAAT,EAAmB,QAAnB,CAAtB;AACA,MAAM,gBAAgB,KAAK,GAAL,CAAS,QAAT,EAAmB,QAAnB,CAAtB;AACA,MAAM,gBAAgB,KAAK,GAAL,CAAS,QAAT,EAAmB,QAAnB,CAAtB;AACA;AACA,OAAK,QAAL,CAAc,QAAd,EAAwB,GAAxB,EAA6B,eAA7B;AACA,MAAM,eAAe,KAAK,GAAL,CAAS,QAAT,EAAmB,QAAnB,CAArB;AACA,MAAM,eAAe,KAAK,GAAL,CAAS,QAAT,EAAmB,QAAnB,CAArB;AACA,MAAM,cAAc,gBAAgB,aAAhB,GAAgC,gBAAgB,aAApE;;AAEA;AACA,MAAM,IAAI,CAAC,gBAAgB,YAAhB,GAA+B,gBAAgB,YAAhD,IAAgE,WAA1E;AACA,MAAI,IAAI,CAAJ,IAAS,IAAI,CAAjB,EAAoB;AAClB,WAAO,KAAP;AACD;AACD,MAAM,IAAI,CAAC,gBAAgB,YAAhB,GAA+B,gBAAgB,YAAhD,IAAgE,WAA1E;AACA,MAAI,IAAI,CAAJ,IAAS,IAAI,CAAJ,GAAQ,CAArB,EAAwB;AACtB,WAAO,KAAP;AACD;;AAED,SAAO,IAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,SAAS,8BAAT,CAAwC,WAAxC,EAAqD,GAArD,EAA0D,WAA1D,EAAuE;AACrE,OAAK,QAAL,CAAc,QAAd,EAAwB,WAAxB,EAAqC,IAAI,cAAzC;AACA,OAAK,IAAL,CAAU,WAAV,EAAuB,IAAI,cAA3B;AACA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,CAApB,EAAuB,GAAvB,EAA4B;AAC1B;AACA,QAAI,aAAa,KAAK,GAAL,CAAS,IAAI,IAAJ,CAAS,CAAT,CAAT,EAAsB,QAAtB,CAAjB;AACA,iBAAa,aAAa,IAAI,eAAJ,CAAoB,CAApB,CAAb,GAAsC,IAAI,eAAJ,CAAoB,CAApB,CAAtC,GACR,aAAa,CAAC,IAAI,eAAJ,CAAoB,CAApB,CAAd,GAAuC,CAAC,IAAI,eAAJ,CAAoB,CAApB,CAAxC,GAAiE,UADtE;AAEA,SAAK,WAAL,CAAiB,WAAjB,EAA8B,WAA9B,EAA2C,IAAI,IAAJ,CAAS,CAAT,CAA3C,EAAwD,UAAxD;AACD;AACF;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,SAAS,qCAAT,CAA+C,QAA/C,EAAyD,QAAzD,EAAmE,QAAnE,EAA6E,QAA7E,EAAuF;AAAA,8BAC9D,gCACnB,SAAS,KADU,EACH,SAAS,GADN,EACW,SAAS,KADpB,EAC2B,SAAS,GADpC,CAD8D;AAAA,MAC9E,KAD8E,yBAC9E,KAD8E;AAAA,MACvE,KADuE,yBACvE,KADuE;;AAIrF,MAAM,kBAAkB,SAAS,CAAT,IAAc,SAAS,CAA/C;AACA,MAAM,kBAAkB,SAAS,CAAT,IAAc,SAAS,CAA/C;;AAEA,MAAI,eAAJ,EAAqB;AACnB,QAAI,eAAJ,EAAqB;AACnB;AACA,WAAK,WAAL,CAAiB,QAAjB,EAA2B,SAAS,KAApC,EAA2C,SAAS,GAApD,EAAyD,KAAzD;AACA,WAAK,WAAL,CAAiB,QAAjB,EAA2B,SAAS,KAApC,EAA2C,SAAS,GAApD,EAAyD,KAAzD;AACD,KAJD,MAIO;AACL;AACA,UAAI,QAAQ,CAAZ,EAAe;AACb,aAAK,IAAL,CAAU,QAAV,EAAoB,SAAS,KAA7B;AACD,OAFD,MAEO;AACL,aAAK,IAAL,CAAU,QAAV,EAAoB,SAAS,GAA7B;AACD;AACD,uCAAiC,QAAjC,EAA2C,QAA3C,EAAqD,QAArD;AACD;AACF,GAdD,MAcO;AACL,QAAI,eAAJ,EAAqB;AACnB;AACA,UAAI,QAAQ,CAAZ,EAAe;AACb,aAAK,IAAL,CAAU,QAAV,EAAoB,SAAS,KAA7B;AACD,OAFD,MAEO;AACL,aAAK,IAAL,CAAU,QAAV,EAAoB,SAAS,GAA7B;AACD;AACD,uCAAiC,QAAjC,EAA2C,QAA3C,EAAqD,QAArD;AACD,KARD,MAQO;AACL;AACA,UAAI,QAAQ,CAAZ,EAAe;AACb,aAAK,IAAL,CAAU,QAAV,EAAoB,SAAS,KAA7B;AACD,OAFD,MAEO;AACL,aAAK,IAAL,CAAU,QAAV,EAAoB,SAAS,GAA7B;AACD;;AAED,UAAI,QAAQ,CAAZ,EAAe;AACb,aAAK,IAAL,CAAU,QAAV,EAAoB,SAAS,KAA7B;AACD,OAFD,MAEO;AACL,aAAK,IAAL,CAAU,QAAV,EAAoB,SAAS,GAA7B;AACD;;AAED,UAAM,cAAc,KAAK,MAAL,EAApB;AACA,UAAM,cAAc,KAAK,MAAL,EAApB;;AAEA,uCAAiC,WAAjC,EAA8C,QAA9C,EAAwD,QAAxD;AACA,uCAAiC,WAAjC,EAA8C,QAA9C,EAAwD,QAAxD;;AAEA,UAAI,KAAK,eAAL,CAAqB,WAArB,EAAkC,QAAlC,IACA,KAAK,eAAL,CAAqB,WAArB,EAAkC,QAAlC,CADJ,EACiD;AAC/C,aAAK,IAAL,CAAU,QAAV,EAAoB,WAApB;AACD,OAHD,MAGO;AACL,aAAK,IAAL,CAAU,QAAV,EAAoB,WAApB;AACD;AACF;AACF;AACF;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,SAAS,gCAAT,CAA0C,YAA1C,EAAwD,OAAxD,EAAiE,KAAjE,EAAwE;AACtE,MAAM,mBAAmB,KAAK,aAAL,CAAmB,QAAQ,GAA3B,CAAzB;;AAEA,MAAI,CAAC,gBAAL,EAAuB;AACrB;AACA,SAAK,IAAL,CAAU,YAAV,EAAwB,QAAQ,KAAhC;AACD,GAHD,MAGO;AACL;AACA,SAAK,QAAL,CAAc,QAAd,EAAwB,KAAxB,EAA+B,QAAQ,KAAvC;AACA,QAAM,IAAI,KAAK,GAAL,CAAS,QAAT,EAAmB,QAAQ,GAA3B,IAAkC,gBAA5C;;AAEA,QAAI,IAAI,CAAR,EAAW;AACT;AACA,WAAK,IAAL,CAAU,YAAV,EAAwB,QAAQ,KAAhC;AACD,KAHD,MAGO,IAAI,IAAI,CAAR,EAAW;AAChB;AACA,WAAK,IAAL,CAAU,YAAV,EAAwB,QAAQ,GAAhC;AACD,KAHM,MAGA;AACL;AACA,WAAK,WAAL,CAAiB,YAAjB,EAA+B,QAAQ,KAAvC,EAA8C,QAAQ,GAAtD,EAA2D,CAA3D;AACD;AACF;AACF;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,SAAS,+BAAT,CAAyC,MAAzC,EAAiD,IAAjD,EAAuD,MAAvD,EAA+D,IAA/D,EAAqE;AACnE,OAAK,QAAL,CAAc,QAAd,EAAwB,MAAxB,EAAgC,MAAhC;AACA,MAAM,iBAAiB,KAAK,GAAL,CAAS,IAAT,EAAe,QAAf,CAAvB;AACA,MAAM,iBAAiB,KAAK,GAAL,CAAS,IAAT,EAAe,QAAf,CAAvB;;AAEA,MAAM,aAAa,KAAK,aAAL,CAAmB,IAAnB,CAAnB;AACA,MAAM,aAAa,KAAK,aAAL,CAAmB,IAAnB,CAAnB;;AAEA,MAAM,cAAc,KAAK,GAAL,CAAS,IAAT,EAAe,IAAf,CAApB;;AAEA,MAAM,cAAc,aAAa,UAAb,GAA0B,cAAc,WAA5D;;AAEA,MAAM,QAAQ,cAAc,OAAd,GACR,CADQ,GAER,CAAC,cAAc,cAAd,GAA+B,aAAa,cAA7C,IAA+D,WAFrE;AAGA,MAAM,QAAQ,CAAC,iBAAiB,cAAc,KAAhC,IAAyC,UAAvD;;AAEA,SAAO;AACL,WAAO,KADF;AAEL,WAAO;AAFF,GAAP;AAID;;AAED;;;;;;;;AAQA,SAAS,YAAT,CAAsB,MAAtB,EAA8B,MAA9B,EAAsC,QAAtC,EAAgD;AAAC;AAC/C,OAAK,QAAL,CAAc,OAAd,EAAuB,QAAvB;AACA,OAAK,QAAL,CAAc,MAAd,EAAsB,OAAtB,EAA+B,MAA/B;AACA,OAAK,MAAL,CAAY,OAAZ,EAAqB,OAArB;AACA,OAAK,QAAL,CAAc,MAAd,EAAsB,MAAtB,EAA8B,OAA9B;AACD;;AAED;;;;;AAKA,SAAS,WAAT,CAAqB,IAArB,EAA2B,KAA3B,EAAkC;AAChC,SAAO,MAAM,CAAN,KAAY,KAAK,IAAjB,IAAyB,MAAM,CAAN,KAAY,KAAK,IAA1C,IACH,MAAM,CAAN,KAAY,KAAK,IADd,IACsB,MAAM,CAAN,KAAY,KAAK,IADvC,IAEH,MAAM,CAAN,KAAY,KAAK,IAFd,IAEsB,MAAM,CAAN,KAAY,KAAK,IAF9C;AAGD;;AAED;;;;;;;AAOA,SAAS,eAAT,CAAyB,GAAzB,EAA8B,CAA9B,EAAiC,CAAjC,EAAoC,KAApC,EAA2C;AACzC,SAAO,KAAK,GAAL,CAAS,GAAT,EACH,EAAE,CAAF,IAAO,EAAE,CAAF,IAAO,KADX,EAEH,EAAE,CAAF,IAAO,EAAE,CAAF,IAAO,KAFX,EAGH,EAAE,CAAF,IAAO,EAAE,CAAF,IAAO,KAHX,EAIH,EAAE,CAAF,IAAO,EAAE,CAAF,IAAO,KAJX,CAAP;AAKD;;AAED;;;;;AAKA,SAAS,aAAT,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B;AAC3B,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,CAApB,EAAuB,GAAvB,EAA4B;AAC1B,QAAI,EAAE,CAAF,IAAO,EAAE,CAAF,CAAP,GAAc,OAAd,IAAyB,EAAE,CAAF,IAAO,EAAE,CAAF,CAAP,GAAc,OAA3C,EAAoD;AAClD,aAAO,KAAP;AACD;AACF;AACD,SAAO,IAAP;AACD;;AAED;AACA,IAAM,WAAW,KAAK,MAAL,EAAjB;AACA,IAAM,WAAW,KAAK,MAAL,EAAjB;AACA,IAAM,WAAW,KAAK,MAAL,EAAjB;AACA,IAAM,WAAW,KAAK,MAAL,EAAjB;AACA,IAAM,UAAU,KAAK,MAAL,EAAhB;;AAEA;AACA,IAAM,UAAU,KAAK,MAAL,EAAhB;AACA,IAAM,UAAU,KAAK,MAAL,EAAhB;AACA,IAAM,UAAU,KAAK,MAAL,EAAhB;AACA,IAAM,UAAU,KAAK,MAAL,EAAhB;;AAEA,IAAM,YAAY;AAChB,kBADgB;AAEhB,kBAFgB;AAGhB,gBAHgB;AAIhB;AAJgB,CAAlB;;QAQE,S,GAAA,S;QACA,O,GAAA,O;QACA,O,GAAA,O;QACA,O,GAAA,O;QACA,O,GAAA,O;QACA,kC,GAAA,kC;QACA,qC,GAAA,qC;QACA,+B,GAAA,+B;QACA,sC,GAAA,sC;QACA,gC,GAAA,gC;QACA,mC,GAAA,mC;QACA,8B,GAAA,8B;QACA,qC,GAAA,qC;QACA,gC,GAAA,gC;QACA,+B,GAAA,+B;QACA,Y,GAAA,Y;QACA,W,GAAA,W;QACA,a,GAAA,a;;;;;;;;;;ACvgBF;;AAEA;;;;;AAKA,SAAS,yBAAT,CAAmC,MAAnC,EAA2C,IAA3C,EAAiD;AAAC;AAChD,MAAM,SAAS,KAAK,MAAL,EAAf;AACA,MAAM,SAAS,IAAI,CAAJ,GAAQ,IAAR,GAAe,MAAf,GAAwB,MAAvC;AACA,SAAO,CAAP,IAAY,MAAZ;AACA,SAAO,CAAP,IAAY,MAAZ;AACA,SAAO,CAAP,IAAY,MAAZ;AACA,SAAO,MAAP;AACD;;AAED;;;;;;;AApBA;;;;AA2BA,SAAS,sBAAT,CAAgC,MAAhC,EAAwC,MAAxC,EAAgD,MAAhD,EAAwD,IAAxD,EAA8D;AAAC;AAC7D,MAAM,SAAS,KAAK,MAAL,EAAf;AACA,MAAM,MAAM,OAAO,EAAnB;AACA,MAAM,gBAAgB,SAAS,MAA/B;AACA,MAAM,gBAAgB,SAAS,MAA/B;AACA,MAAM,gBAAgB,SAAS,MAA/B;AACA,SAAO,CAAP,IAAY,OAAO,gBAAgB,aAAvB,CAAZ;AACA,SAAO,CAAP,IAAY,OAAO,gBAAgB,aAAvB,CAAZ;AACA,SAAO,CAAP,IAAY,OAAO,gBAAgB,aAAvB,CAAZ;AACA,SAAO,MAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6IA,SAAS,0BAAT,CAAoC,YAApC,EAAkD,MAAlD,EAA0D,IAA1D,EAAgE;AAAC;AAC/D,MAAM,SAAS,KAAK,MAAL,EAAf;;AAEA,MAAM,iBAAiB,eAAe,CAAtC;AACA,MAAM,gBAAgB,SAAS,MAA/B;AACA,MAAM,iBAAiB,KAAK,EAAL,GAAU,aAAV,GAA0B,cAAjD;AACA,MAAM,2BAA2B,IAAI,CAAJ,GAAQ,KAAK,EAAb,GAAkB,aAAnD;AACA,MAAM,eAAe,kBAAkB,iBAAiB,wBAAnC,IAA+D,IAApF;AACA,MAAM,iBAAiB,CAAC,OAAO,YAAR,IAAwB,CAA/C;;AAEA;AACA,SAAO,CAAP,IAAY,gBAAgB,YAAhB,GAA+B,CAA3C;AACA,SAAO,CAAP,IAAY,OAAO,CAAP,IAAY,CAAZ,GAAgB,eAAe,cAAf,GAAgC,cAAhC,GAAiD,EAA7E;AACA,SAAO,CAAP,IAAY,OAAO,CAAP,CAAZ;;AAEA;AACA,MAAM,OAAO,iBAAiB,CAAjB,GAAqB,aAArB,GAAqC,CAAlD;AACA,SAAO,CAAP,KAAa,OAAO,CAApB;AACA,MAAM,OACF,CAAC,OAAO,kBAAkB,eAAe,YAAf,GAA8B,IAAI,CAAJ,GAAQ,cAAR,GAAyB,MAAzE,CAAR,IAA4F,CADhG;AAEA,SAAO,CAAP,KAAa,IAAb;AACA,SAAO,CAAP,KAAa,IAAb;;AAEA;AACA;AACA,MAAM,WAAW,KAAK,MAAL,EAAjB;AACA,OAAK,OAAL,CAAa,QAAb,EAAuB,QAAvB,EAAiC,qBAAU,OAA3C;AACA,+BAAa,MAAb,EAAqB,MAArB,EAA6B,QAA7B;;AAEA,SAAO,MAAP;AACD;;AAED;;;;;AAKA,SAAS,mBAAT,CAA6B,UAA7B,EAAyC,IAAzC,EAA+C;AAC7C,UAAQ,WAAW,WAAX,CAAuB,IAA/B;AACE,SAAK,QAAL;AACE,aAAO,0BAA0B,WAAW,MAArC,EAA6C,IAA7C,CAAP;AACF,SAAK,MAAL;AACE,aAAO,uBAAuB,WAAW,MAAlC,EAA0C,WAAW,MAArD,EAA6D,WAAW,MAAxE,EAAgF,IAAhF,CAAP;AACF,SAAK,SAAL;AACE,aAAO,2BAA2B,WAAW,YAAtC,EAAoD,WAAW,MAA/D,EAAuE,IAAvE,CAAP;AACF,SAAK,KAAL;AACE,aAAO,uBAAuB,WAAW,eAAX,CAA2B,CAA3B,IAAgC,CAAvD,EACH,WAAW,eAAX,CAA2B,CAA3B,IAAgC,CAD7B,EACgC,WAAW,eAAX,CAA2B,CAA3B,IAAgC,CADhE,EACmE,IADnE,CAAP;AARJ;AAWD;;QAGC,yB,GAAA,yB;QACA,sB,GAAA,sB;QACA,0B,GAAA,0B;QACA,mB,GAAA,mB;;;;;;;;AC3OF;;;;AAIA;AACA,IAAM,cAAc,IAApB;;AAEA,IAAM,QAAQ;AACZ,eAAa;AADD,CAAd;;QAKE,K,GAAA,K;;;;;;;;;;;ACZF,OAAA,IAAA,CAAA,OAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,QAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;;;AACA,OAAA,IAAA,CAAA,kBAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,mBAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;;;AACA,OAAA,IAAA,CAAA,YAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,aAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;;;AACA,OAAA,IAAA,CAAA,kBAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,mBAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;;;AACA,OAAA,IAAA,CAAA,aAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,cAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;;;AACA,OAAA,IAAA,CAAA,kBAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,mBAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;;;AACA,OAAA,IAAA,CAAA,eAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,gBAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;ACNA,IAAA,eAAA,QAAA,cAAA,CAAA;;;;;;;;;;;;;;;;;;;;AAEA;;AAEA;AACA;;AAEA;;;;;IAKM,S;;;AACJ;;;;;;;AAOA,WAAA,MAAA,CAAA,YAAA,EAAA,SAAA,EAAqC;AAAA,oBAAA,IAAA,EAAA,MAAA;;AAGnC;AAHmC,QAAA,QAAA,2BAAA,IAAA,EAAA,CAAA,OAAA,SAAA,IAAA,OAAA,cAAA,CAAA,MAAA,CAAA,EAAA,IAAA,CAAA,IAAA,CAAA,CAAA;;AAInC,QAAI,IAAA,MAAA,KAAJ,MAAA,EAA2B;AACzB,YAAM,IAAA,SAAA,CAAN,4CAAM,CAAN;AACD;;AAED,UAAA,aAAA,GAAA,YAAA;AACA,UAAA,KAAA,GAAA,IAAA;AACA,UAAA,YAAA,GAAA,IAAA;AACA,UAAA,MAAA,GAAA,IAAA;AACA,UAAA,KAAA,GAAA,IAAA;AACA,UAAA,SAAA,GAAiB,KAAjB,MAAiB,EAAjB;AACA,UAAA,YAAA,GAAoB,KAde,MAcf,EAApB,CAdmC,CAcA;AACnC,UAAA,WAAA,GAAmB,KAAnB,MAAmB,EAAnB;AACA,UAAA,iBAAA,GAAyB,KAAzB,MAAyB,EAAzB;AACA,UAAA,qBAAA,GAA6B,KAA7B,MAA6B,EAA7B;;AAEA,UAAA,eAAA,CAAA,SAAA;AAnBmC,WAAA,KAAA;AAoBpC;;;;4BAEO;AACN,WAAA,eAAA,CAAqB,KAAA,aAAA,CAArB,IAAA,EAA8C,KAAA,aAAA,CAA9C,kBAAA,EACE,KAAA,aAAA,CADF,KAAA,EAC4B,KAAA,aAAA,CAD5B,IAAA;AAED;;AAED;;;;8BACU,CAAE;;AAEZ;;;;;;;;;;;;0CASsB,G,EAAK,M,EAAQ,E,EAAI,a,EAAe;AACpD,WAAA,IAAA,CAAU,KAAV,SAAA,EAAA,GAAA;AACA,WAAA,6BAAA,CAAA,MAAA,EAAA,EAAA,EAAA,aAAA;AACD;;AAED;;;;;;;;;;;kDAQ8B,M,EAAQ,E,EAAI,a,EAAe;AACvD,WAAA,MAAA,CAAY,KAAZ,WAAA,EAA8B,KAA9B,SAAA,EAAA,MAAA,EAAA,EAAA;AACA,WAAA,UAAA,CAAgB,KAAhB,YAAA,EAAmC,KAAA,aAAA,CAAnC,uBAAA,EAFuD,aAEvD,EAFuD,CAEwC;AAC/F,WAAA,2BAAA;AACD;;AAED;;;;;;;;;+BAMW,W,EAAa;AACtB,WAAA,GAAA,CAAS,KAAT,SAAA,EAAyB,KAAzB,SAAA,EAAA,WAAA;AACD;;AAED;;;;;;;;;4BAMQ,Q,EAAU,CAEjB;AADC;;;AAGF;;;;;;;;;;oCAOgB,I,EAAM,W,EAAa,K,EAAO,I,EAAM;AAC9C,WAAA,KAAA,GAAA,IAAA;AACA,WAAA,YAAA,GAAA,WAAA;AACA,WAAA,MAAA,GAAA,KAAA;AACA,WAAA,KAAA,GAAA,IAAA;AACA,WAAA,uBAAA;AACD;;AAED;;;;;;;;;8CAM0B;AACxB,WAAA,WAAA,CACE,KADF,iBAAA,EAC0B,KAD1B,KAAA,EACsC,KADtC,YAAA,EACyD,KADzD,MAAA,EACsE,KADtE,KAAA;AAEA,WAAA,2BAAA;AACD;;AAED;;;;;;;;;kDAM8B;AAC5B,WAAA,QAAA,CAAc,KAAd,qBAAA,EAA0C,KAA1C,iBAAA,EAAkE,KAAlE,WAAA;AACD;;AAED;;;;;;;;2BAKO,W,EAAa,S,EAAW;AAC7B;AACA,YAAM,IAAA,SAAA,CAAN,wBAAM,CAAN;AACD;;;2BAEM,CAAE;;AAET;;;;;;;;AAsCA;;;;;;oCAMgB,S,EAAW;AACzB,UAAI,CAAJ,SAAA,EAAgB;AACd;AACD;AACD,WAAA,KAAA,GAAa,UAAb,KAAA;AACA,WAAA,YAAA,GAAoB,UAApB,YAAA;AACA,WAAA,MAAA,GAAc,UAAd,MAAA;AACA,WAAA,KAAA,GAAa,UAAb,KAAA;AACA,WAAA,IAAA,CAAU,KAAV,SAAA,EAA0B,UAA1B,SAAA;AACA,WAAA,IAAA,CAAU,KAAV,YAAA,EAA6B,UAA7B,YAAA;AACA,WAAA,IAAA,CAAU,KAAV,WAAA,EAA4B,UAA5B,WAAA;AACA,WAAA,IAAA,CAAU,KAAV,iBAAA,EAAkC,UAAlC,iBAAA;AACA,WAAA,IAAA,CAAU,KAAV,qBAAA,EAAsC,UAAtC,qBAAA;AACD;;;sBArDO,I,EAAM;AACZ,WAAA,KAAA,GAAA,IAAA;AACA,WAAA,uBAAA;AACD;;AAED;;;;;;sBAGgB,W,EAAa;AAC3B,WAAA,eAAA,CAAqB,KAAA,aAAA,CAArB,IAAA,EAAA,WAAA,EAA2D,KAAA,aAAA,CAA3D,KAAA,EACE,KAAA,aAAA,CADF,IAAA;AAED;;AAED;;;;wBACe;AACb,aAAO,KAAP,SAAA;AACD;AACD;;;;wBACkB;AAChB,aAAO,KAAP,YAAA;AACD;AACD;;;;wBACiB;AACf,aAAO,KAAP,WAAA;AACD;AACD;;;;wBACuB;AACrB,aAAO,KAAP,iBAAA;AACD;AACD;;;;wBAC2B;AAAE;AAC3B,aAAO,KAAP,qBAAA;AACD;;;;EA3KkB,aAAA,sB;;QAmMZ,M,GAAA,M;;AAET;;;;;;;;;AASA;;;;;;;;;;AAUA;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3OA,IAAA,UAAA,QAAA,UAAA,CAAA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;IAKM,oB;;;AACJ;;;;;;AAMA,WAAA,iBAAA,CAAA,YAAA,EAAA,uBAAA,EAAA,YAAA,EAAA,SAAA,EAA4E;AAAA,oBAAA,IAAA,EAAA,iBAAA;;AAAA,QAAA,QAAA,2BAAA,IAAA,EAAA,CAAA,kBAAA,SAAA,IAAA,OAAA,cAAA,CAAA,iBAAA,CAAA,EAAA,IAAA,CAAA,IAAA,EAAA,YAAA,EAAA,SAAA,CAAA,CAAA;;AAE1E,UAAA,aAAA,GAAA,YAAA;AACA,UAAA,wBAAA,GAAA,uBAAA;AACA,UAAA,aAAA,GAAA,YAAA;AAJ0E,WAAA,KAAA;AAK3E;;AAED;;;;;;;2BAIO,W,EAAa,S,EAAW;AAC7B,WAAA,eAAA;AACA,WAAA,kBAAA;AACD;;AAED;;;;;;sCAGkB;AAChB,UAAM,mBAAmB,KAAzB,oBAAyB,EAAzB;AACA,WAAA,IAAA,CAAU,KAAV,SAAA,EAAA,gBAAA;AACD;;AAED;;;;;;;;;yCAMqB;AACnB;AACA,UAAM,gBAAgB,KAAtB,MAAsB,EAAtB;AACA,WAAA,IAAA,CAAA,aAAA,EAAyB,KAAA,wBAAA,CAAzB,aAAA;AACA,WAAA,aAAA,CAAA,aAAA,EAAA,aAAA,EAAiD,KAAA,aAAA,CAAjD,WAAA;;AAEA,UAAM,SAAS,KAAf,MAAe,EAAf;AACA,WAAA,WAAA,CAAA,MAAA,EAAyB,KAAzB,SAAA,EAAA,aAAA,EACE,KAAA,wBAAA,CADF,cAAA;;AAGA;AACA,UAAM,KAAK,KAAA,UAAA,CAAA,CAAA,EAAA,CAAA,EAAX,CAAW,CAAX;;AAEA;AACA,WAAA,aAAA,CAAA,EAAA,EAAA,EAAA,EAA2B,KAAA,aAAA,CAA3B,WAAA;;AAEA,UAAM,QAAQ,KAAd,MAAc,EAAd;AACA,WAAA,KAAA,CAAA,KAAA,EAAA,aAAA,EAAA,EAAA;;AAEA;AACA,WAAA,KAAA,CAAA,EAAA,EAAA,KAAA,EAAA,aAAA;;AAEA,WAAA,qBAAA,CAA2B,KAA3B,SAAA,EAAA,MAAA,EAAA,EAAA,EAAA,aAAA;AACD;;AAED;;;;;;;;;;;2CAQuB;AACrB,UAAM,mBAAmB,KAAzB,MAAyB,EAAzB;AACA,WAAA,aAAA,CAAA,gBAAA,EAEE,KAAA,wBAAA,CAFF,8BAAA,EAGE,KAAA,aAAA,CAHF,cAAA;AAIA,aAAA,gBAAA;AACD;;;;EA7E6B,QAAA,M;;QAgFvB,iB,GAAA,iB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvFT,IAAA,UAAA,QAAA,UAAA,CAAA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;IAMM,c;;;AACJ;;;;;;;;AAQA,WAAA,WAAA,CAAA,iBAAA,EAAA,YAAA,EAAA,SAAA,EAAwD;AAAA,oBAAA,IAAA,EAAA,WAAA;;AAAA,QAAA,QAAA,2BAAA,IAAA,EAAA,CAAA,YAAA,SAAA,IAAA,OAAA,cAAA,CAAA,WAAA,CAAA,EAAA,IAAA,CAAA,IAAA,EAAA,YAAA,EAAA,SAAA,CAAA,CAAA;;AAGtD,UAAA,SAAA,GAAiB,kBAAjB,QAAA;AACA,UAAA,cAAA,GAAsB,kBAAtB,aAAA;AACA,UAAA,GAAA,GAAW,kBAAX,GAAA;AACA,UAAA,QAAA,GAAgB,KAAhB,MAAgB,EAAhB;AANsD,WAAA,KAAA;AAOvD;;;;4BAEO;AACN,WAAA,YAAA,SAAA,CAAA,SAAA,IAAA,OAAA,cAAA,CAAA,YAAA,SAAA,CAAA,EAAA,OAAA,EAAA,IAAA,EAAA,IAAA,CAAA,IAAA;AACA,WAAA,OAAA;AACD;;AAED;;;;;;;2BAIO,W,EAAa,S,EAAW,CAAE;;;8BAEvB;AACR,WAAA,SAAA,CAAe,KAAf,cAAA,EAAoC,KAApC,cAAA;AACA,WAAA,SAAA,CAAe,KAAf,GAAA,EAAyB,KAAzB,GAAA;;AAEA;AACA,UAAM,QAAQ,KAAd,MAAc,EAAd;AACA,WAAA,KAAA,CAAA,KAAA,EAAkB,KAAlB,cAAA,EAAuC,KAAvC,GAAA;AACA,WAAA,KAAA,CAAW,KAAX,GAAA,EAAA,KAAA,EAA4B,KAA5B,cAAA;;AAEA,WAAA,qBAAA,CAA2B,KAA3B,SAAA,EAA2C,KAA3C,OAAA,EAAyD,KAAzD,GAAA,EAAmE,KAAnE,cAAA;AACD;;AAED;;;;;AAwCA;;;;oCAIgB,S,EAAW;AACzB,WAAA,YAAA,SAAA,CAAA,SAAA,IAAA,OAAA,cAAA,CAAA,YAAA,SAAA,CAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,IAAA,CAAA,IAAA,EAAA,SAAA;AACA,UAAI,qBAAJ,WAAA,EAAsC;AACpC,aAAA,IAAA,CAAU,KAAV,cAAA,EAA+B,UAA/B,cAAA;AACA,aAAA,IAAA,CAAU,KAAV,GAAA,EAAoB,UAApB,GAAA;AACD;AACF;;;sBAjDiB,Y,EAAc;AAC9B,WAAA,IAAA,CAAU,KAAV,cAAA,EAAA,YAAA;AACA,WAAA,OAAA;AACD;;AAED;;MAkBA;wBACoB;AAClB,aAAO,KAAP,cAAA;AACD;AACD;;;;sBArBO,K,EAAO;AACZ,WAAA,IAAA,CAAU,KAAV,GAAA,EAAA,KAAA;AACA,WAAA,OAAA;AACD;;AAED;;0BAiBS;AACP,aAAO,KAAP,GAAA;AACD;AACD;;;;;;;sBAnBa,W,EAAa;AACxB,WAAA,IAAA,CAAU,KAAV,SAAA,EAAA,WAAA;AACA,WAAA,OAAA;AACD;;AAED;AACA;;0BACe;AACb,aAAO,KAAP,SAAA;AACD;;;wBAca;AACZ,aAAO,KAAA,GAAA,CAAS,KAAT,QAAA,EAAwB,KAAxB,SAAA,EAAwC,KAA/C,cAAO,CAAP;AACD;;;;EA/EuB,QAAA,M;;QA8FlB,W,GAAA,W;;;;;;;;;;;;;;;;;;;;;;ACtGR,IAAA,gBAAA,QAAA,iBAAA,CAAA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;IAQM,oB;;;;;;;;;;;;AACJ;;;;2BAIO,W,EAAa,S,EAAW;AAC7B,WAAA,eAAA;AACA,WAAA,kBAAA;AACD;;AAED;;;;;;sCAGkB;AAChB,UAAM,mBAAmB,KAAzB,oBAAyB,EAAzB;AACA,WAAA,IAAA,CAAU,KAAV,SAAA,EAAA,gBAAA;AACD;;;;EAhB6B,cAAA,Y;;QAmBxB,iB,GAAA,iB;;;;;;;;;;;;;;;;;;;;;;AC7BR,IAAA,qBAAA,QAAA,uBAAA,CAAA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;IAKM,e;;;;;;;;;;;;AACJ;;;;;;yCAMqB;AACnB,UAAM,SAAS,KAAA,aAAA,CAAf,QAAA;;AAEA,UAAM,gBAAgB,KAAtB,MAAsB,EAAtB;AACA,WAAA,QAAA,CAAA,aAAA,EAAA,MAAA,EAAqC,KAArC,SAAA;AACA,WAAA,SAAA,CAAA,aAAA,EAAA,aAAA;;AAEA;AACA,UAAM,KAAK,KAAA,UAAA,CAAA,CAAA,EAAA,CAAA,EAAX,CAAW,CAAX;;AAEA;AACA,WAAA,aAAA,CAAA,EAAA,EAAA,EAAA,EAA2B,KAAA,aAAA,CAA3B,WAAA;;AAEA,UAAM,QAAQ,KAAd,MAAc,EAAd;AACA,WAAA,KAAA,CAAA,KAAA,EAAA,aAAA,EAAA,EAAA;;AAEA;AACA,WAAA,KAAA,CAAA,EAAA,EAAA,KAAA,EAAA,aAAA;;AAEA,WAAA,qBAAA,CAA2B,KAA3B,SAAA,EAAA,MAAA,EAAA,EAAA,EAAA,aAAA;AACD;;;;EA3BwB,mBAAA,iB;;QA8BnB,Y,GAAA,Y;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrCR,IAAA,qBAAA,QAAA,uBAAA,CAAA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;IASM,iB;;;AACJ;;;;;;;;;AASA,WAAA,cAAA,CAAA,YAAA,EAAA,kBAAA,EAAA,YAAA,EAAA,SAAA,EAAuE;AAAA,oBAAA,IAAA,EAAA,cAAA;;AAAA,QAAA,QAAA,2BAAA,IAAA,EAAA,CAAA,eAAA,SAAA,IAAA,OAAA,cAAA,CAAA,cAAA,CAAA,EAAA,IAAA,CAAA,IAAA,EAAA,YAAA,EAAA,kBAAA,EAAA,YAAA,EAAA,SAAA,CAAA,CAAA;;AAGrE,UAAA,KAAA;AAHqE,WAAA,KAAA;AAItE;;;;4BAEO;AACN,WAAA,eAAA,SAAA,CAAA,SAAA,IAAA,OAAA,cAAA,CAAA,eAAA,SAAA,CAAA,EAAA,OAAA,EAAA,IAAA,EAAA,IAAA,CAAA,IAAA;AACD;;AAED;;;;;EApB2B,mBAAA,iB;;QAuBrB,c,GAAA,c;;;;;;;;;;;;;;;;;;;;;;AClCR,IAAA,UAAA,QAAA,UAAA,CAAA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;IAOM,oB;;;AACJ;;;;;;;;;AASA,WAAA,iBAAA,CAAA,YAAA,EAAA,kBAAA,EAAA,YAAA,EAAA,SAAA,EAAuE;AAAA,oBAAA,IAAA,EAAA,iBAAA;;AAGrE;AAHqE,QAAA,QAAA,2BAAA,IAAA,EAAA,CAAA,kBAAA,SAAA,IAAA,OAAA,cAAA,CAAA,iBAAA,CAAA,EAAA,IAAA,CAAA,IAAA,EAAA,YAAA,EAAA,SAAA,CAAA,CAAA;;AAIrE,QAAI,IAAA,MAAA,KAAJ,iBAAA,EAAsC;AACpC,YAAM,IAAA,SAAA,CAAN,uDAAM,CAAN;AACD;;AAED,UAAA,mBAAA,GAAA,kBAAA;AACA,UAAA,aAAA,GAAA,YAAA;AATqE,WAAA,KAAA;AAUtE;;AAED;;;;;;;;;;;2CAQuB;AACrB,UAAM,mBAAmB,KAAzB,MAAyB,EAAzB;AACA,WAAA,aAAA,CAAA,gBAAA,EAEI,KAAA,mBAAA,CAFJ,8BAAA,EAGI,KAAA,aAAA,CAHJ,cAAA;AAIA,aAAA,gBAAA;AACD;;AAED;;;;sBACiB,Y,EAAc;AAC7B,WAAA,aAAA,GAAA,YAAA;AACD;;;;EA1C6B,QAAA,M;;QA6CxB,iB,GAAA,iB;;AAER;;;;;;;;;;;;;;;;ACnDA,OAAA,IAAA,CAAA,QAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,SAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;;;AACA,OAAA,IAAA,CAAA,OAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,QAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;;;AACA,OAAA,IAAA,CAAA,eAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,gBAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;;;AACA,OAAA,IAAA,CAAA,iBAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,kBAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;;;AACA,OAAA,IAAA,CAAA,KAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,MAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;;;AAEA,OAAA,IAAA,CAAA,gBAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,iBAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;;;AACA,OAAA,IAAA,CAAA,MAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,OAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;;;AACA,OAAA,IAAA,CAAA,MAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,OAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;;;;;;;;;;ACbA,OAAA,IAAA,CAAA,aAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,cAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;;;AACA,OAAA,IAAA,CAAA,yBAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,0BAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;;;AACA,OAAA,IAAA,CAAA,MAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,OAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;;;AACA,OAAA,IAAA,CAAA,gBAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,iBAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;;;AACA,OAAA,IAAA,CAAA,qBAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,sBAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;;;AACA,OAAA,IAAA,CAAA,wBAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,yBAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;ACLA,IAAA,QAAA,QAAA,YAAA,CAAA;;AACA,IAAA,SAAA,QAAA,SAAA,CAAA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;IAMM,e;;;AACJ;;;;AAIA,WAAA,YAAA,CAAA,EAAA,EAAA,WAAA,EAA6B;AAAA,oBAAA,IAAA,EAAA,YAAA;;AAAA,QAAA,QAAA,2BAAA,IAAA,EAAA,CAAA,aAAA,SAAA,IAAA,OAAA,cAAA,CAAA,YAAA,CAAA,EAAA,IAAA,CAAA,IAAA,EAAA,EAAA,CAAA,CAAA;;AAE3B,UAAA,YAAA,GAAA,WAAA;AACA,UAAA,kBAAA;AACA,UAAA,kBAAA;AAJ2B,WAAA,KAAA;AAK5B;;;;yCAEoB;AACnB;AACA;AACA,WAAA,sBAAA,GAA8B,CAAA,GAAA,MAAA,oBAAA,EAAqB,KAArB,GAAA,EAA+B,KAAA,YAAA,CAA7D,eAA8B,CAA9B;AACA,WAAA,oBAAA,GAA4B,CAAA,GAAA,MAAA,oBAAA,EAAqB,KAArB,GAAA,EAA+B,KAAA,YAAA,CAA3D,aAA4B,CAA5B;AACA,WAAA,yBAAA,GACI,CAAA,GAAA,MAAA,oBAAA,EAAqB,KAArB,GAAA,EAA+B,KAAA,YAAA,CADnC,kBACI,CADJ;AAEA,UAAI,KAAA,YAAA,CAAJ,aAAA,EAAqC;AACnC,aAAA,oBAAA,GAA4B,CAAA,GAAA,MAAA,oBAAA,EAAqB,KAArB,GAAA,EAA+B,KAAA,YAAA,CAA/B,aAAA,EACxB,KAAA,GAAA,CADJ,oBAA4B,CAA5B;AAED;AACF;;;yCAEoB;AACnB,WAAA,sBAAA,GAA8B;AAC5B,gBAAQ,KADoB,sBAAA;AAE5B,cAF4B,CAAA;AAG5B,cAAM,KAAA,GAAA,CAHsB,KAAA;AAI5B,oBAJ4B,KAAA;AAK5B,gBAL4B,CAAA;AAM5B,gBAAQ;AANoB,OAA9B;AAQA,WAAA,yBAAA,GAAiC;AAC/B,gBAAQ,KADuB,yBAAA;AAE/B,cAF+B,CAAA;AAG/B,cAAM,KAAA,GAAA,CAHyB,KAAA;AAI/B,oBAJ+B,KAAA;AAK/B,gBAL+B,CAAA;AAM/B,gBAAQ;AANuB,OAAjC;AAQA,WAAA,oBAAA,GAA4B;AAC1B,gBAAQ,KADkB,oBAAA;AAE1B,cAF0B,CAAA;AAG1B,cAAM,KAAA,GAAA,CAHoB,KAAA;AAI1B,oBAJ0B,KAAA;AAK1B,gBAL0B,CAAA;AAM1B,gBAAQ;AANkB,OAA5B;AAQD;;AAED;;;;wBACmB;AACjB,aAAO,KAAA,YAAA,CAAP,YAAA;AACD;;AAED;;;;wBACW;AACT,aAAO,KAAA,GAAA,CAAP,SAAA;AACA;AACD;;;;EA7DwB,OAAA,K;;QAgEnB,Y,GAAA,Y;;;;;;;;;;;;;;;;;;;;;;ACzER,IAAA,mBAAA,QAAA,oBAAA,CAAA;;;;;;;;;;;;;;;;;;;;AAEA;;;;IAIM,2B;;;AACJ;;;AAGA,WAAA,wBAAA,CAAA,MAAA,EAAoB;AAAA,oBAAA,IAAA,EAAA,wBAAA;;AAAA,WAAA,2BAAA,IAAA,EAAA,CAAA,yBAAA,SAAA,IAAA,OAAA,cAAA,CAAA,wBAAA,CAAA,EAAA,IAAA,CAAA,IAAA,EAAA,MAAA,CAAA,CAAA;AAEnB;;;;8BAES,CAAE;;;2BAEL,W,EAAa,S,EAAW,CAAE;;;2BAE1B,CAAE;;AAET;;;;;;;;mDAK+B;AAC7B,WAAA,uBAAA,GAAA,EAAA;AACD;;AAED;;;;;;;;;yCAMqB,E,EAAI;AACvB,WAAA,iBAAA,GAAA,EAAA;AACA,WAAA,sBAAA,GAA8B,QAAA,OAAA,CAA9B,IAA8B,CAA9B;AACA,aAAO,KAAP,sBAAA;AACD;;;;EAjCoC,iBAAA,e;;QAoC/B,wB,GAAA,wB;;;;;;;;;;;;;;;;;;;;;;AC1CR,IAAA,eAAA,QAAA,cAAA,CAAA;;AACA,IAAA,kBAAA,QAAA,uBAAA,CAAA;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;;;IASM,kB;;;AACJ;;;;;;AAMA,WAAA,eAAA,CAAA,MAAA,EAAoB;AAAA,oBAAA,IAAA,EAAA,eAAA;;AAGlB;AAHkB,QAAA,QAAA,2BAAA,IAAA,EAAA,CAAA,gBAAA,SAAA,IAAA,OAAA,cAAA,CAAA,eAAA,CAAA,EAAA,IAAA,CAAA,IAAA,CAAA,CAAA;;AAIlB,QAAI,IAAA,MAAA,KAAJ,eAAA,EAAoC;AAClC,YAAM,IAAA,SAAA,CAAN,qDAAM,CAAN;AACD;;AAED,UAAA,GAAA,GAAW,OAAX,EAAA;AACA,UAAA,cAAA,GAAsB,OAAtB,aAAA;AACA,UAAA,oBAAA,GAA4B,OAA5B,mBAAA;AACA,UAAA,wBAAA,GAAgC,OAAhC,uBAAA;AACA,UAAA,eAAA,GAAuB,KAAvB,MAAuB,EAAvB;AACA,UAAA,eAAA,GAAuB,KAAvB,MAAuB,EAAvB;AACA,UAAA,QAAA,GAAA,IAAA;AACA,UAAA,eAAA,GAAA,IAAA;AACA,UAAA,iBAAA,GAAA,IAAA;AACA,UAAA,iBAAA,GAAyB,YAAA;AAAA,aAAM,MAAN,IAAM,EAAN;AAAzB,KAAA;AACA,UAAA,uBAAA,GAAA,IAAA;;AAEA,UAAA,QAAA,GAAgB,KAAhB,MAAgB,EAAhB;AACA,UAAA,KAAA,GAAa,KAAA,UAAA,CAAA,CAAA,EAAA,CAAA,EAAb,CAAa,CAAb;;AAEA,UAAA,aAAA,CAAmB,OAAnB,WAAA;AACA,UAAA,oBAAA,CAA0B,OAA1B,gBAAA;;AAEA,UAAA,eAAA,GAAuB,QAAA,GAAA,CAAY,CACjC,MADiC,eAAA,EAEjC,MAFF,sBAAmC,CAAZ,CAAvB;AA1BkB,WAAA,KAAA;AA8BnB;;;;4BAEO,CAAE;;AAEV;;;;;;8BAGU;AACR,sBAAA,mBAAA,CAAA,0BAAA,CAA+C,KAA/C,iBAAA,EAAuE,KAAvE,iBAAA;AACD;;AAED;;;;;;;;;0CAMsB,W,EAAa,S,EAAW;AAC5C,WAAA,MAAA,CAAA,WAAA,EAAA,SAAA;AACA,WAAA,gBAAA;AACA,WAAA,cAAA,CAAA,WAAA,EAAA,SAAA;AACD;;AAED;;;;;;;;;;;;;;;2BAYO,W,EAAa,S,EAAW;AAC7B;AACA,YAAM,IAAA,SAAA,CAAN,wBAAM,CAAN;AACD;;AAED;;;;;;;;;;uCAOmB;AACjB,WAAA,QAAA,CAAc,KAAd,eAAA,EAAoC,KAApC,wBAAoC,EAApC,EAAqE,KAArE,eAAA;AACD;;AAED;;;;;;;;;;;mCAQe,W,EAAa,S,EAAW,CAAE;;AAEzC;;;;;;2BAGO;AACL;AACA,YAAM,IAAA,SAAA,CAAN,wBAAM,CAAN;AACD;;AAED;;;;;;;;;AAkBA;;;;;iCAKa;AACX,aAAO,KAAP,eAAA;AACD;;AAED;;;;;AAWA;;;;;;mDAM+B;AAC7B;AACA,YAAM,IAAA,SAAA,CAAN,wBAAM,CAAN;AACD;;AAED;;;;;;;;kCAKc,W,EAAa;AAAA,UAAA,SAAA,IAAA;;AACzB,WAAA,eAAA,GAAuB,cACjB,gBAAA,YAAA,CAAA,WAAA,CAAyB,KAAzB,GAAA,EADiB,WACjB,CADiB,GAEjB,QAAA,OAAA,CAFN,IAEM,CAFN;;AAIA;AACA,WAAA,eAAA,GAAuB,KAAA,eAAA,CAAA,IAAA,CACb,UAAA,OAAA,EAAA;AAAA,eAAW,OAAA,QAAA,GAAX,OAAA;AADa,OAAA,EAAA,IAAA,CAEb,YAAA;AAAA,eAAM,OAAN,4BAAM,EAAN;AAFV,OAAuB,CAAvB;;AAIA,aAAO,KAAP,eAAA;AACD;;AAED;;;;;;;;yCAKqB,E,EAAI;AAAA,UAAA,SAAA,IAAA;;AACvB,WAAA,iBAAA,GAAA,EAAA;AACA,WAAA,sBAAA,GAA8B,gBAAA,mBAAA,CAAA,wBAAA,CAAA,EAAA,EAAA,IAAA,CACpB,UAAA,cAAA,EAAA;AAAA,eAAkB,OAAA,eAAA,GAAlB,cAAA;AADV,OAA8B,CAA9B;AAEA,cAAA,GAAA,CAAY,CAAC,KAAD,sBAAA,EAA8B,KAA1C,eAAY,CAAZ,EAAA,IAAA,CACU,YAAA;AAAA,eAAM,gBAAA,mBAAA,CAAA,wBAAA,CAAA,EAAA,EAAiD,OAAvD,iBAAM,CAAN;AADV,OAAA;AAEA,aAAO,KAAP,sBAAA;AACD;;;wBA1EoB;AACnB,aAAO,KAAP,eAAA;AACD;;AAED;;;;;;;;wBAKqB;AACnB,aAAO,KAAP,eAAA;AACD;;;sBAYoB,E,EAAI;AACvB,sBAAA,mBAAA,CAAA,0BAAA,CAA+C,KAA/C,iBAAA,EAAuE,KAAvE,iBAAA;AACA,WAAA,oBAAA,CAAA,EAAA;AACD;;AAED;;;;sBACgB,K,EAAO;AACrB,WAAA,aAAA,CAAA,KAAA;AACD;;;;EA9I2B,aAAA,sB;;QA4LtB,e,GAAA,e;;AAER;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjOA,IAAA,eAAA,QAAA,cAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;IAQM,uB;;;AACJ;;;;;;AAMA,WAAA,oBAAA,CAAA,MAAA,EAAoB;AAAA,oBAAA,IAAA,EAAA,oBAAA;;AAGlB;AAHkB,QAAA,QAAA,2BAAA,IAAA,EAAA,CAAA,qBAAA,SAAA,IAAA,OAAA,cAAA,CAAA,oBAAA,CAAA,EAAA,IAAA,CAAA,IAAA,CAAA,CAAA;;AAIlB,QAAI,IAAA,MAAA,KAAJ,oBAAA,EAAyC;AACvC,YAAM,IAAA,SAAA,CAAN,0DAAM,CAAN;AACD;;AAED,UAAA,GAAA,GAAW,OAAX,EAAA;AACA,UAAA,cAAA,GAAsB,OAAtB,aAAA;AACA,UAAA,oBAAA,GAA4B,OAA5B,mBAAA;AACA,UAAA,wBAAA,GAAgC,OAAA,uBAAA,IAAmC,YAAA;AAAA,aAAM,KAAN,MAAM,EAAN;AAAnE,KAAA;AACA,UAAA,eAAA,GAAuB,KAAvB,MAAuB,EAAvB;AACA,UAAA,eAAA,GAAuB,KAAvB,MAAuB,EAAvB;AACA,UAAA,WAAA,GAAA,EAAA;AAdkB,WAAA,KAAA;AAenB;;;;8BAES;AACR,WAAA,qBAAA;AACD;;;4BAEO;AACN,WAAA,6BAAA,CAAA,OAAA;AACD;;;4CAEuB;AACtB,WAAA,6BAAA,CAAA,SAAA;AACA,WAAA,WAAA,GAAA,EAAA;AACD;;AAED;;;;;;;;;0CAMsB,W,EAAa,S,EAAW;AAC5C,WAAA,MAAA,CAAA,WAAA,EAAA,SAAA;AACA,WAAA,gBAAA;AACA,WAAA,cAAA,CAAA,WAAA,EAAA,SAAA;AACD;;AAED;;;;;;;;;;;;;;;2BAYO,W,EAAa,S,EAAW,CAAE;;AAEjC;;;;;;;;;;uCAOmB;AACjB,WAAA,QAAA,CAAc,KAAd,eAAA,EAAoC,KAApC,wBAAoC,EAApC,EAAqE,KAArE,eAAA;AACD;;AAED;;;;;;;;;;;mCAQe,W,EAAa,S,EAAW;AACrC,WAAA,6BAAA,CAAA,uBAAA,EAA4D,CAAA,WAAA,EAA5D,SAA4D,CAA5D;AACD;;;2BAEM,CAGN;AAFC;AACA;;;AAGF;;;;;;;;0CAKsB,S,EAAW;AAAA,UAAA,SAAA,IAAA;;AAC/B,aAAO,UAAA,UAAA,GAAA,IAAA,CAA4B,YAAM;AACvC,kBAAA,KAAA;AACA,eAAA,WAAA,CAAA,IAAA,CAAA,SAAA;AACA,eAAA,SAAA;AAHF,OAAO,CAAP;AAKD;;AAED;;;;;;;gDAI4B,S,EAAW;AACrC,UAAM,QAAQ,KAAA,WAAA,CAAA,OAAA,CAAd,SAAc,CAAd;AACA,WAAA,WAAA,CAAA,MAAA,CAAA,KAAA,EAAA,CAAA;AACA,gBAAA,OAAA;AACD;;AAED;;;;;;;;mDAK+B,c,EAAgB,kB,EAAoB;AAAA,UAAA,SAAA,IAAA;;AACjE,WAAK;AACH;AADF,OAAA,MAAA,CAEU,UAAA,SAAA,EAAA;AAAA,eACN,KAAA,eAAA,CAAqB,UAArB,QAAA,EAAA,cAAA,IADM,kBAAA;AAFV,OAAA;AAIE;AAJF,OAAA,OAAA,CAKW,UAAA,SAAA,EAAA;AAAA,eAAa,OAAA,2BAAA,CAAb,SAAa,CAAb;AALX,OAAA;AAMD;;AAED;;;;;;;;;AAkBA;;;;;iCAKa;AACX,aAAO,QAAA,GAAA,CAAY,KAAA,WAAA,CAAA,GAAA,CAAqB,UAAA,UAAA,EAAA;AAAA,eAAc,WAAd,UAAc,EAAd;AAAxC,OAAmB,CAAZ,CAAP;AACD;;AAED;;;;;;;;kDAK8B,U,EAAuB;AAAA,UAAX,OAAW,UAAA,MAAA,GAAA,CAAA,IAAA,UAAA,CAAA,MAAA,SAAA,GAAA,UAAA,CAAA,CAAA,GAAJ,EAAI;;AACnD;AACA,WAAA,WAAA,CAAA,OAAA,CAAyB,UAAA,MAAA,EAAA;AAAA,eAAU,OAAA,UAAA,EAAA,KAAA,CAAA,MAAA,EAAA,mBAAV,IAAU,CAAA,CAAV;AAAzB,OAAA;AACD;;;wBA9BoB;AACnB,aAAO,KAAP,eAAA;AACD;;AAED;;;;;;;;wBAKqB;AACnB,aAAO,KAAP,eAAA;AACD;;;;EAhJgC,aAAA,sB;;QAsK1B,oB,GAAA,oB;;;;;;;;;;;;;;;;;;;;;;;;;AChLT;;;;;IAKM,Q;AACJ;;;AAGA,WAAA,KAAA,CAAA,EAAA,EAAgB;AAAA,oBAAA,IAAA,EAAA,KAAA;;AACd;AACA,QAAI,IAAA,MAAA,KAAJ,KAAA,EAA0B;AACxB,YAAM,IAAA,SAAA,CAAN,2CAAM,CAAN;AACD;;AAED,SAAA,GAAA,GAAA,EAAA;AACA,SAAA,MAAA,GAAA,IAAA;;AAEA,SAAA,sBAAA,GAAA,IAAA;AACA,SAAA,oBAAA,GAAA,IAAA;AACA,SAAA,yBAAA,GAAA,IAAA;;AAEA,SAAA,sBAAA,GAAA,IAAA;AACA,SAAA,yBAAA,GAAA,IAAA;AACA,SAAA,oBAAA,GAAA,IAAA;;AAEA;AACA;AACA,SAAA,oBAAA,GAAA,IAAA;AACD;;AAED;;;;;;;;;;;gCAQY,uB,EAAyB;AACnC;AACA,YAAM,IAAA,SAAA,CAAN,wBAAM,CAAN;AACD;;AAED;;;;wBAC4B;AAC1B,aAAO,KAAP,sBAAA;AACD;;AAED;;;;wBAC+B;AAC7B,aAAO,KAAP,yBAAA;AACD;;AAED;;;;wBAC0B;AACxB,aAAO,KAAP,oBAAA;AACD;;AAED;;;;wBAC0B;AACxB,aAAO,KAAP,oBAAA;AACD;;AAED;;;;;;;wBAImB;AACjB;AACA,YAAM,IAAA,SAAA,CAAN,wBAAM,CAAN;AACD;;AAED;;;;;;;wBAIW;AACT;AACA,YAAM,IAAA,SAAA,CAAN,wBAAM,CAAN;AACD;;;;;;QAGK,K,GAAA,K;;;;;;;;;;;;;;;;;;;;;;ACnFR,IAAA,oBAAA,QAAA,yBAAA,CAAA;;AAEA,IAAA,mBAAA,QAAA,oBAAA,CAAA;;;;;;;;;;;;;;;;;;;;AAEA;;;;IAIM,0B;;;AACJ;;;;AAIA,WAAA,uBAAA,CAAA,MAAA,EAAA,WAAA,EAAiC;AAAA,oBAAA,IAAA,EAAA,uBAAA;;AAAA,QAAA,QAAA,2BAAA,IAAA,EAAA,CAAA,wBAAA,SAAA,IAAA,OAAA,cAAA,CAAA,uBAAA,CAAA,EAAA,IAAA,CAAA,IAAA,EAAA,MAAA,CAAA,CAAA;;AAG/B,UAAA,KAAA,GAAa,YAAA,KAAA,IAAqB,KAAA,UAAA,CAAA,CAAA,EAAA,CAAA,EAAlC,CAAkC,CAAlC;AACA,UAAA,SAAA,GAAiB,KAAjB,MAAiB,EAAjB;AACA,UAAA,aAAA,GAAqB,KAArB,MAAqB,EAArB;AACA,UAAA,MAAA,GAAc,kBAAA,sBAAA,CAAA,WAAA,CAAmC,MAAnC,GAAA,EAAd,WAAc,CAAd;AAN+B,WAAA,KAAA;AAOhC;;;;2BAEM,W,EAAa,S,EAAW,CAAE;;;2BAE1B;AACL;AACA,WAAA,QAAA,CAAc,KAAd,SAAA,EAA8B,KAA9B,cAA8B,EAA9B,EAAqD,KAArD,eAAA;;AAEA;AACA,WAAA,MAAA,CAAY,KAAZ,aAAA,EAAgC,KAAhC,SAAA;AACA,WAAA,SAAA,CAAe,KAAf,aAAA,EAAmC,KAAnC,aAAA;;AAEA;AACA,WAAA,uBAAA,CAAA,QAAA,CAAA,UAAA,IAAoD,KAApD,oBAAoD,EAApD;AACA,WAAA,uBAAA,CAAA,QAAA,CAAA,WAAA,IAAqD,KAArD,SAAA;AACA,WAAA,uBAAA,CAAA,QAAA,CAAA,eAAA,IAAyD,KAAzD,aAAA;;AAEA;AACA,WAAA,eAAA,CAAA,IAAA,CAA0B,KAA1B,GAAA,EAAoC,KAApC,uBAAA,EAAA,CAAA,EAAqE,KAAA,MAAA,CAArE,YAAA;AACD;;AAED;;;;;;;;mDAK+B;AAC7B,WAAA,uBAAA,GAA+B;AAC7B,oBAAY;AACV,2BAAiB,KAAA,MAAA,CADP,qBAAA;AAEV,yBAAe,KAAA,MAAA,CAFL,wBAAA;AAGV,yBAAe,KAAA,MAAA,CAAY;AAHjB,SADiB;AAM7B,kBAAU;AACR,oBAAU,KADF,oBACE,EADF;AAER,qBAAW,KAFH,SAAA;AAGR,yBAAe,KAHP,aAAA;AAIR,oBAAU,KAAK;AAJP,SANmB;AAY7B,cAAM,KAAA,MAAA,CAZuB,IAAA;AAa7B,uBAAe,KAAA,MAAA,CAbc,mBAAA;AAc7B,sBAAc,KAAA,MAAA,CAAY;AAdG,OAA/B;AAgBD;;;;EAvDmC,iBAAA,e;;QA0D9B,uB,GAAA,uB;;;;;;;;;;;AClER,OAAA,IAAA,CAAA,eAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,gBAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;;;AACA,OAAA,IAAA,CAAA,oBAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,qBAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;;;AACA,OAAA,IAAA,CAAA,aAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,cAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;;;AACA,OAAA,IAAA,CAAA,cAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,eAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;;;;;;;;;;;;;;;;;;;ACHA,IAAA,QAAA,QAAA,YAAA,CAAA;;AAEA,IAAA,uBAAA,QAAA,yBAAA,CAAA;;;;;;;;AAEA;;;IAGM,sB;AACJ;;;;AAIA,WAAA,mBAAA,CAAA,EAAA,EAAA,MAAA,EAAwB;AAAA,oBAAA,IAAA,EAAA,mBAAA;;AACtB,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,wBAAA,GAAA,EAAA;AACA,SAAA,QAAA,GAAA,IAAA;;AAEA,SAAA,aAAA,CAAA,EAAA,EAAA,MAAA,EAAA,IAAA,CAAoC,YAAM;AACxC,UAAI,OAAJ,UAAA,EAAuB,OAAA,UAAA,CAAA,EAAA;AACvB,UAAI,OAAJ,gBAAA,EAA6B;AAC3B,+CAAA,EAAA,EAAA,MAAA;AACD;AAJH,KAAA;AAMD;;AAED;;;;;AAKA;iCACa;AACX,aAAO,KAAP,QAAA;AACD;;AAED;;;;;;;;yBAKK,E,EAAI;AACP,UAAI,KAAA,MAAA,CAAJ,gBAAA,EAAkC,KAAA,MAAA,CAAA,gBAAA,CAAA,EAAA;AAClC,WAAA,MAAA,CAAA,sBAAA,CAAA,OAAA,CAA2C,kBAAA,IAAA,CAAA,IAAA,EAA3C,EAA2C,CAA3C;AACA,WAAA,MAAA,CAAA,sBAAA,CAAA,OAAA,CAA2C,yBAAA,IAAA,CAAA,IAAA,EAA3C,EAA2C,CAA3C;AACD;;AAED;;;;;;;;kCAKc,E,EAAI,M,EAAQ;AAAA,UAAA,QAAA,IAAA;;AACxB,WAAA,QAAA,GAAgB,QAAA,GAAA,CACZ,OAAA,sBAAA,CAAA,GAAA,CAAkC,UAAA,MAAA,EAAA;AAAA,eAC9B,qBAAA,mBAAA,CAAA,kBAAA,CAAA,EAAA,EAAA,MAAA,EAAA,IAAA,CACU,UAAA,cAAA,EAAA;AAAA,iBAAkB,MAAA,wBAAA,CAAA,IAAA,CAAlB,cAAkB,CAAlB;AAFoB,SAC9B,CAD8B;AADtC,OACI,CADY,CAAhB;AAIA,aAAO,KAAP,QAAA;AACD;;;wBA/Be;AACd,aAAO,KAAA,MAAA,CAAP,EAAA;AACD;;;;;;AAgCH;;;;;;AAKA,SAAA,iBAAA,CAAA,EAAA,EAAA,EAAA,EAAmC;AACjC,MAAM,cAAc,qBAAA,mBAAA,CAAA,cAAA,CAApB,EAAoB,CAApB;AACA,GAAA,GAAA,MAAA,eAAA,EAAA,EAAA,EAAA,WAAA;AACA,KAAA,KAAA,CAAS,GAAA,gBAAA,GAAsB,GAA/B,gBAAA;AACD;;AAED;;;;;AAKA,SAAA,sCAAA,CAAA,EAAA,EAAA,MAAA,EAA4D;AAC1D,SAAA,sBAAA,CAAA,OAAA,CAAsC,UAAA,EAAA,EAAA;AAAA,WAClC,qBAAA,mBAAA,CAAA,8BAAA,CAAA,EAAA,EAAA,EAAA,EADkC,KAClC,CADkC;AAAtC,GAAA;AAED;;AAED;;;;;AAKA,SAAA,wBAAA,CAAA,EAAA,EAAA,6BAAA,EAAqE;AAAA,MAAA,YAAA,8BAAA,SAAA;AAAA,MAAA,sBAAA,8BAAA,mBAAA;AAAA,MAAA,sBAAA,8BAAA,mBAAA;;AAGnE,MAAM,cAAc,sBAChB,qBAAA,mBAAA,CAAA,cAAA,CADgB,mBAChB,CADgB,GAApB,IAAA;AAEA,MAAM,iBAAiB,qBAAA,mBAAA,CAAA,iBAAA,CAAvB,SAAuB,CAAvB;AACA,MAAM,yBACF,eAAA,MAAA,CAAA,yBAAA,CAAA,EAAA,EADJ,mBACI,CADJ;;AAGA,GAAA,GAAA,MAAA,eAAA,EAAA,EAAA,EAAA,WAAA;AACA,iBAAA,UAAA,CAAA,EAAA;AACA,iBAAA,IAAA,CAAA,EAAA,EAAA,sBAAA;AACD;;QAEO,mB,GAAA,mB;;;;;;;;;;;;;;;;;;;;ACpGR,IAAA,QAAA,QAAA,YAAA,CAAA;;AAEA,IAAA,uBAAA,QAAA,yBAAA,CAAA;;AACA,IAAA,kBAAA,QAAA,mBAAA,CAAA;;;;;;;;AAEA;;;;;;;;;;;;;;IAcM,sB;AACJ,WAAA,mBAAA,GAAc;AAAA,oBAAA,IAAA,EAAA,mBAAA;;AACZ,SAAA,kBAAA,GAAA,EAAA;AACA,SAAA,oBAAA,GAAA,EAAA;AACA,SAAA,2BAAA,GAAA,EAAA;AACA,SAAA,6BAAA,GAAA,EAAA;AACA,SAAA,YAAA,GAAA,EAAA;AACA,SAAA,SAAA,GAAA,EAAA;AACA,SAAA,cAAA,GAAA,EAAA;AACD;;AAED;;;;;;;;;;;;;uCAUmB,E,EAAI,M,EAAQ;AAC7B,UAAI,QAAA,KAAJ,CAAA;AACA,UAAI,aAAA,KAAJ,CAAA;AACA,UAAI,OAAJ,gBAAA,EAA6B;AAC3B,gBAAQ,KAAR,2BAAA;AACA,qBAAa,KAAb,6BAAA;AAFF,OAAA,MAGO;AACL,gBAAQ,KAAR,kBAAA;AACA,qBAAa,KAAb,oBAAA;AACD;AACD,UAAI,YAAY,MAAM,OAAtB,EAAgB,CAAhB;;AAEA;AACA,UAAI,CAAJ,SAAA,EAAgB;AACd,oBAAA,EAAA;;AAEA,kBAAA,MAAA,GAAA,MAAA;AACA,kBAAA,cAAA,GAA2B,OAA3B,cAAA;;AAEA,YAAI,iBAAiB,OAAA,sBAAA,GACjB,IAAI,qBAAJ,mBAAA,CAAA,EAAA,EADiB,MACjB,CADiB,GACqB,IAAI,gBAAJ,cAAA,CAAA,EAAA,EAD1C,MAC0C,CAD1C;;AAGA,kBAAA,cAAA,GAAA,cAAA;AACA,kBAAA,OAAA,GAAoB,eAAA,UAAA,GAAA,IAAA,CAAiC,YAAA;AAAA,iBAAM,UAAN,cAAA;AAArD,SAAoB,CAApB;;AAEA,YAAI,OAAJ,gBAAA,EAA6B;AAC3B;AACA;AACA,cAAI,CAAC,KAAL,iBAAA,EAA6B;AAC3B,iBAAA,8BAAA,CAAA,EAAA,EAAA,qBAAA,EAAA,IAAA;AACD;AALH,SAAA,MAMO;AACL;AACA,oBAAA,iBAAA,GAA8B,IAA9B,GAA8B,EAA9B;AACD;;AAED;AACA,cAAM,OAAN,EAAA,IAAA,SAAA;AACA,mBAAA,IAAA,CAAA,SAAA;AACA,mBAAA,IAAA,CAAA,wBAAA;AACD;;AAED,aAAO,UAAP,OAAA;AACD;;AAED;;;;;;;;;;;;6CASyB,E,EAAI,gB,EAAkB;AAC7C,UAAM,mBAAmB,KAAA,kBAAA,CAAzB,EAAyB,CAAzB;;AAEA,UAAI,CAAJ,gBAAA,EAAuB;AACrB,YAAI,KAAA,2BAAA,CAAJ,EAAI,CAAJ,EAA0C;AACxC;AACA,gBAAM,IAAA,KAAA,CAAA,kJAAN,EAAM,CAAN;AAFF,SAAA,MAIO;AACL;AACA,gBAAM,IAAA,KAAA,CAAA,qHAAN,EAAM,CAAN;AAED;AACF;;AAED;AACA,uBAAA,iBAAA,CAAA,GAAA,CAAA,gBAAA;AACD;;AAED;;;;;;;;;yCAMqB,E,EAAI;AACvB;AACA,UAAI,iBAAA,KAAJ,CAAA;AACA,UAAI,eAAA,KAAJ,CAAA;AACA,UAAI,KAAA,kBAAA,CAAJ,EAAI,CAAJ,EAAiC;AAC/B,yBAAiB,KAAjB,oBAAA;AACA,uBAAe,KAAf,kBAAA;AAFF,OAAA,MAGO;AACL,yBAAiB,KAAjB,6BAAA;AACA,uBAAe,KAAf,2BAAA;AACD;AACD,UAAM,mBAAmB,aAAzB,EAAyB,CAAzB;;AAEA;AACA,qBAAA,MAAA,CAAsB,eAAA,OAAA,CAAtB,gBAAsB,CAAtB,EAAA,CAAA;AACA,aAAO,aAAP,EAAO,CAAP;AACD;;AAED;AACA;AACA;;;;;;;+CAI2B,E,EAAI,gB,EAAkB;AAC/C,WAAA,kBAAA,CAAA,EAAA,EAAA,iBAAA,CAAA,MAAA,CAAA,gBAAA;AACD;;AAED;;;;;;;;6CAKyB,E,EAAI;AAC3B,UAAM,YAAY,KAAA,kBAAA,CAAA,EAAA,KAA+B,KAAA,2BAAA,CAAjD,EAAiD,CAAjD;AACA,aAAO,UAAP,OAAA;AACD;;AAED;;;;;;;;sCAKkB,E,EAAI;AACpB,UAAM,YAAY,KAAA,kBAAA,CAAA,EAAA,KAA+B,KAAA,2BAAA,CAAjD,EAAiD,CAAjD;AACA,aAAO,UAAP,cAAA;AACD;;AAED;;;;;;;;;;;wCAQoB,Q,EAAU;AAC5B,WAAA,oBAAA,CAAA,OAAA,CAAkC,UAAA,gBAAA,EAAA;AAAA,eAC9B,SAAS,iBAAT,cAAA,EAA0C,iBADZ,iBAC9B,CAD8B;AAAlC,OAAA;AAED;;AAED;;;;;;;;iDAK6B,Q,EAAU;AACrC,WAAA,6BAAA,CAAA,OAAA,CACI,UAAA,gBAAA,EAAA;AAAA,eAAoB,SAAS,iBAA7B,cAAoB,CAApB;AADJ,OAAA;AAED;;AAED;;;;;AAKA;;;;;;;;;mDAS+B,E,EAAI,E,EAAgC;AAAA,UAA5B,uBAA4B,UAAA,MAAA,GAAA,CAAA,IAAA,UAAA,CAAA,MAAA,SAAA,GAAA,UAAA,CAAA,CAAA,GAAP,KAAO;;AACjE,UAAI,eAAA,KAAJ,CAAA;AACA,UAAA,oBAAA,EAA0B;AACxB,uBAAe,CAAA,GAAA,MAAA,kBAAA,EAAf,EAAe,CAAf;AACA,aAAA,cAAA,CAAA,EAAA,IAAA,YAAA;AACD;;AAED,UAAM,UAAU,CAAA,GAAA,MAAA,yBAAA,EAAhB,EAAgB,CAAhB;AACA,WAAA,SAAA,CAAA,EAAA,IAAA,OAAA;;AAEA,UAAM,cAAc,CAAA,GAAA,MAAA,iBAAA,EAAA,EAAA,EAAA,OAAA,EAApB,YAAoB,CAApB;AACA,WAAA,YAAA,CAAA,EAAA,IAAA,WAAA;AACD;;AAED;;;;;;;mCAIe,E,EAAI;AACjB,aAAO,KAAA,YAAA,CAAP,EAAO,CAAP;AACD;;AAED;;;;;;;+BAIW,E,EAAI;AACb,aAAO,KAAA,SAAA,CAAP,EAAO,CAAP;AACD;;AAED;;;;;;;;;wBA3CoC;AAClC,aAAO,KAAA,6BAAA,CAAA,MAAA,GAAP,CAAA;AACD;;;wBA+CuB;AACtB,aAAO,KAAA,YAAA,CAAP,qBAAO,CAAP;AACD;;AAED;;;;;;;;;wBAMoB;AAClB,aAAO,KAAA,SAAA,CAAP,qBAAO,CAAP;AACD;;AAED;;;;;;;;;wBAMyB;AACvB,aAAO,KAAA,cAAA,CAAP,qBAAO,CAAP;AACD;;;;;;AAGH,SAAA,wBAAA,CAAA,CAAA,EAAA,CAAA,EAAwC;AACtC,SAAO,EAAA,cAAA,GAAmB,EAA1B,cAAA;AACD;;AAEM,IAAM,wBAAA,QAAA,qBAAA,GAAN,QAAA;;AAEA,IAAM,sBAAA,QAAA,mBAAA,GAAsB,IAA5B,mBAA4B,EAA5B;;AAEP;;;;;;;;;;;;;;;;;;;;;;;;;;ACjRA,IAAA,QAAA,QAAA,YAAA,CAAA;;AAOA,IAAA,iBAAA,QAAA,kBAAA,CAAA;;;;;;;;AAEA;;;;;;;IAOM,iB;AACJ;;;;AAIA,WAAA,cAAA,CAAA,EAAA,EAAA,MAAA,EAAwB;AAAA,oBAAA,IAAA,EAAA,cAAA;;AACtB,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,QAAA,GAAA,IAAA;AACA,SAAA,eAAA,GAAA,IAAA;AACA,SAAA,kBAAA,GAAA,IAAA;AACA,SAAA,iBAAA,GAAA,IAAA;;AAEA;AACA,SAAA,oBAAA,GAAA,CAAA;;AAEA,SAAA,yBAAA,GAAiC,KAAA,kBAAA,CAAA,EAAA,EAAjC,MAAiC,CAAjC;;AAEA;AACD;;AAED;;;;;AAKA;iCACa;AACX,aAAO,KAAP,yBAAA;AACD;;AAED;;;;;;;;;;+BAOW,E,EAAI;AACb,SAAA,UAAA,CAAc,KAAd,QAAA;AACA,WAAA,iBAAA;AACA,UAAI,KAAA,MAAA,CAAJ,gBAAA,EAAkC,KAAA,MAAA,CAAA,gBAAA,CAAA,EAAA;AACnC;;AAED;;;;;;;;;;;yBAQK,E,EAAI,sB,EAAwB,M,EAAQ,K,EAAO;AAC9C,+BAAyB,0BAA0B,KAAA,MAAA,CAAA,yBAAA,CAAnD,EAAmD,CAAnD;AACA,WAAA,aAAA,CAAA,EAAA,EAAA,sBAAA;AACA,WAAA,KAAA,CAAA,EAAA,EAAA,sBAAA,EAAA,MAAA,EAAA,KAAA;AACD;;AAED;;;;;;;;;;;kCAQc,E,EAAI,sB,EAAwB;AACxC,WAAA,cAAA,CAAoB,uBAApB,UAAA;AACA,WAAA,YAAA,CAAkB,uBAAlB,QAAA;;AAEA;AACA,UAAI,uBAAJ,aAAA,EAA0C;AACxC,WAAA,UAAA,CAAc,GAAd,oBAAA,EAAuC,uBAAvC,aAAA;AACD;AACF;;AAED;;;;;;;;;;;;0BASM,E,EAAI,sB,EAAwB,M,EAAQ,K,EAAO;AAC/C,eAAS,OAAA,MAAA,KAAA,QAAA,GAAA,MAAA,GAAT,CAAA;AACA,cAAQ,OAAA,KAAA,KAAA,QAAA,GAAA,KAAA,GAAoC,uBAA5C,YAAA;;AAEA,UAAI,MAAJ,WAAA,EAAiB;AACf,aAAA,oCAAA,CAAA,sBAAA;AACD;;AAED;AACA,UAAI,uBAAJ,aAAA,EAA0C;AACxC,WAAA,YAAA,CAAgB,uBAAhB,IAAA,EAAA,KAAA,EAAoD,GAApD,cAAA,EAAA,MAAA;AADF,OAAA,MAEO;AACL,WAAA,UAAA,CAAc,uBAAd,IAAA,EAAA,MAAA,EAAA,KAAA;AACD;AACF;;AAED;;;;;;;;;;yDAOqC,sB,EAAwB;AAC3D,UAAI,OAAA,IAAA,CAAY,uBAAZ,UAAA,EAAA,MAAA,KACI,OAAA,IAAA,CAAY,KAAZ,iBAAA,EADJ,MAAA,IAEA,OAAA,IAAA,CAAY,uBAAZ,QAAA,EAAA,MAAA,KACI,OAAA,IAAA,CAAY,KAAZ,eAAA,EAHR,MAAA,EAGkD;AAChD,gBAAA,IAAA,CAAa,gFAAb,iCAAA,EAAA,sBAAA,EAAA,IAAA;AAED;AACF;;AAED;;;;;;;;;;;;;iCAUa,a,EAAe;AAAA,UAAA,QAAA,IAAA;;AAC1B,aAAA,IAAA,CAAA,aAAA,EAAA,OAAA,CAAmC,UAAA,WAAA,EAAe;AAChD,YAAM,gBAAgB,MAAA,eAAA,CAAtB,WAAsB,CAAtB;AACA,YAAM,eAAe,cAArB,WAAqB,CAArB;AACA,sBAAA,UAAA,CAAA,YAAA;AAHF,OAAA;AAKD;;AAED;;;;;;;;;;;;;mCAUe,gB,EAAkB;AAAA,UAAA,SAAA,IAAA;;AAC/B,aAAA,IAAA,CAAA,gBAAA,EAAA,OAAA,CAAsC,UAAA,aAAA,EAAiB;AACrD,YAAM,kBAAkB,OAAA,iBAAA,CAAxB,aAAwB,CAAxB;AACA,YAAM,kBAAkB,iBAAxB,aAAwB,CAAxB;AACA,wBAAA,eAAA;AAHF,OAAA;AAKD;;AAED;;;;;;wCAGoB;AAClB,WAAA,kBAAA,CAAA,OAAA,CAAgC,UAAA,gBAAA,EAAA;AAAA,eAAA,kBAAA;AAAhC,OAAA;AACD;;AAED;;;;;;;;;0CAMsB,E,EAAI;AACxB,UAAM,eAAe,GAAA,mBAAA,CAAuB,KAAvB,QAAA,EAAsC,GAA3D,eAAqB,CAArB;;AAEA,WAAA,eAAA,GAAA,EAAA;;AAEA,WAAK,IAAI,QAAT,CAAA,EAAoB,QAApB,YAAA,EAAA,OAAA,EAAmD;AACjD,YAAM,cAAc,GAAA,gBAAA,CAAoB,KAApB,QAAA,EAApB,KAAoB,CAApB;AACA,YAAI,cAAc,YAAlB,IAAA;;AAEA;AACA;AACA,YAAI,YAAA,MAAA,CAAmB,CAAnB,CAAA,MAAJ,KAAA,EAAsC;AACpC,wBAAc,YAAA,MAAA,CAAA,CAAA,EAAsB,YAAA,MAAA,GAApC,CAAc,CAAd;AACD;;AAED,aAAA,eAAA,CAAA,WAAA,IAAoC,IAAI,eAAJ,aAAA,CAAA,EAAA,EAAsB,KAAtB,QAAA,EAAA,WAAA,EAApC,IAAoC,CAApC;AACD;AACF;;AAED;;;;;;;;;;uDAOmC,E,EAAI;AACrC,WAAA,kBAAA,GAAA,EAAA;AACA,WAAA,iBAAA,GAAA,EAAA;;AAEA,UAAM,iBAAiB,GAAA,mBAAA,CAAuB,KAAvB,QAAA,EAAsC,GAA7D,iBAAuB,CAAvB;;AAEA,WAAK,IAAI,QAAT,CAAA,EAAoB,QAApB,cAAA,EAAA,OAAA,EAAqD;AACnD,YAAM,gBAAgB,GAAA,eAAA,CAAmB,KAAnB,QAAA,EAAA,KAAA,EAAtB,IAAA;AACA,YAAM,WAAW,GAAA,iBAAA,CAAqB,KAArB,QAAA,EAAjB,aAAiB,CAAjB;;AAEA,aAAA,kBAAA,CAAA,IAAA,CAA6B,eAAA,uBAAA,CAAA,EAAA,EAA7B,QAA6B,CAA7B;AACA,aAAA,iBAAA,CAAA,aAAA,IAAwC,eAAA,sBAAA,CAAA,EAAA,EAAxC,QAAwC,CAAxC;AACD;AACF;;AAED;;;;;;;;;;;;uCASmB,E,EAAI,M,EAAQ;AAAA,UAAA,SAAA,IAAA;;AAC7B,aAAO,CAAA,GAAA,MAAA,WAAA,EAAA,EAAA,EAAgB,OAAhB,gBAAA,EAAyC,OAAzC,kBAAA,EAAA,IAAA,CACG,UAAA,YAAA,EAAgB;AACpB,eAAA,QAAA,GAAA,YAAA;AACA,eAAA,qBAAA,CAAA,EAAA;AACA,eAAA,kCAAA,CAAA,EAAA;AACA,YAAI,OAAJ,UAAA,EAAuB,OAAA,UAAA,CAAA,EAAA;AALtB,OAAA,EAAA,IAAA,CAOG,YAAA;AAAA,eAAM,QAAA,IAAA,CAAA,qBAAgC,OAAtC,EAAM,CAAN;AAPV,OAAO,CAAP;AAQD;;AAED;;;;;;;;;wBA9MgB;AACd,aAAO,KAAA,MAAA,CAAP,EAAA;AACD;;;4CAkN8B,E,EAAI,Q,EAAU;AAC3C,aAAO,YAAA;AAAA,eAAM,GAAA,uBAAA,CAAN,QAAM,CAAN;AAAP,OAAA;AACD;;AAED;;;;;;;;;2CAM8B,E,EAAI,Q,EAAU;AAC1C,aAAO,UAAA,eAAA,EAAmB;AACxB,WAAA,UAAA,CAAc,GAAd,YAAA,EAA+B,gBAA/B,MAAA;AACA,WAAA,mBAAA,CAAA,QAAA,EAEI,gBAFJ,IAAA,EAGI,OAAO,gBAAP,IAAA,KAAA,WAAA,GAA8C,gBAA9C,IAAA,GAAqE,GAHzE,KAAA,EAII,OAAO,gBAAP,UAAA,KAAA,WAAA,GAAoD,gBAApD,UAAA,GAJJ,KAAA,EAKI,OAAO,gBAAP,MAAA,KAAA,WAAA,GAAgD,gBAAhD,MAAA,GALJ,CAAA,EAMI,OAAO,gBAAP,MAAA,KAAA,WAAA,GAAgD,gBAAhD,MAAA,GANJ,CAAA;AAFF,OAAA;AAUD;;;;;;QAGK,c,GAAA,c;;AAER;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;AC5VA,IAAA,QAAA,QAAA,YAAA,CAAA;;;;;;;;AAEA;;;;;IAKM,e;AACJ,WAAA,YAAA,GAAc;AAAA,oBAAA,IAAA,EAAA,YAAA;;AACZ,SAAA,YAAA,GAAA,EAAA;AACD;;AAED;;;;;;;+BAIW,W,EAAa;AACtB,aAAO,KAAA,YAAA,CAAA,WAAA,EAAP,OAAA;AACD;;AAED;;;;;;;;;;;;;gCAUY,E,EAAI,W,EAAa;AAAA,UAAA,QAAA,IAAA;;AAC3B,UAAI,mBAAmB,KAAA,YAAA,CAAvB,WAAuB,CAAvB;;AAEA;AACA,UAAI,CAAJ,gBAAA,EAAuB;AACrB,2BAAmB;AACjB,0BADiB,IAAA;AAEjB,mBAFiB,IAAA;AAGjB,iBAAO,IAAA,KAAA;AAHU,SAAnB;AAKA,aAAA,YAAA,CAAA,WAAA,IAAA,gBAAA;AACA,yBAAA,cAAA,GAAkC,CAAA,GAAA,MAAA,YAAA,EAAa,iBAAb,KAAA,EAAA,WAAA,EAAA,IAAA,CACxB,UAAA,CAAA,EAAA;AAAA,iBAAK,MAAA,cAAA,CAAA,EAAA,EAAL,gBAAK,CAAL;AADV,SAAkC,CAAlC;AAED;;AAED,aAAO,iBAAP,cAAA;AACD;;AAED;AACA;AACA;AACA;;;;;;;;;mCAMe,E,EAAI,gB,EAAkB;AACnC,cAAA,IAAA,CAAA,qBAAgC,iBAAA,KAAA,CAAhC,GAAA;;AAEA,uBAAA,OAAA,GAA2B,GAA3B,aAA2B,EAA3B;AACA,SAAA,WAAA,CAAe,GAAf,UAAA,EAA8B,iBAA9B,OAAA;AACA,SAAA,UAAA,CAAc,GAAd,UAAA,EAAA,CAAA,EAAgC,GAAhC,IAAA,EAAyC,GAAzC,IAAA,EAAkD,GAAlD,aAAA,EAAoE,iBAApE,KAAA;AACA,SAAA,aAAA,CAAiB,GAAjB,UAAA,EAAgC,GAAhC,kBAAA,EAAuD,GAAvD,MAAA;AACA,SAAA,aAAA,CAAiB,GAAjB,UAAA,EAAgC,GAAhC,kBAAA,EAAuD,GAAvD,qBAAA;AACA,SAAA,cAAA,CAAkB,GAAlB,UAAA;AACA,SAAA,WAAA,CAAe,GAAf,UAAA,EAAA,IAAA;;AAEA,aAAO,iBAAP,OAAA;AACD;;AAED;;;;;;;;;kCAMc,W,EAAa;AACzB,aAAO,KAAA,YAAA,CAAP,WAAO,CAAP;AACD;;;;;;AAGI,IAAM,eAAA,QAAA,YAAA,GAAe,IAArB,YAAqB,EAArB;;AAEP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpFA;;;;;AAKA;IACM,gB;AACJ;;;;;;;AAOA,WAAA,aAAA,CAAA,EAAA,EAAA,OAAA,EAAA,WAAA,EAAA,cAAA,EAAsD;AAAA,oBAAA,IAAA,EAAA,aAAA;;AACpD,SAAA,SAAA,GAAiB,GAAA,kBAAA,CAAA,OAAA,EAA+B,YAAhD,IAAiB,CAAjB;AACA,SAAA,OAAA,GAAe,KAAA,UAAA,CAAA,EAAA,EAAA,WAAA,EAAf,cAAe,CAAf;;AAEA;AACD;;AAED;;;;;;+BAGW,Y,EAAc;AACvB,qBAAe,wBAAA,KAAA,GAAgC,IAAA,YAAA,CAAhC,YAAgC,CAAhC,GAAf,YAAA;AACA,WAAA,OAAA,CAAA,YAAA;AACD;;AAED;;;;;AAKA;;;;;;;;+BAQW,E,EAAI,W,EAAa,c,EAAgB;AAAA,UAAA,QAAA,IAAA;AAAA,UAAA,IAAA;AAAA,UAAA,KAAA;;AAC1C,UAAM,UAAU,YAAA,IAAA,GAAA,CAAA,IAAwB,YAAA,IAAA,CAAA,MAAA,CAAwB,CAAxB,CAAA,MAAxC,KAAA;AACA,UAAM,YAAY,WAAA,OAAA,EAAA,EAAA,gBAAA,IAAA,EACf,GADe,KAAA,EACJ,UAAA,KAAA,EAAA;AAAA,eAAS,GAAA,UAAA,CAAc,MAAd,SAAA,EAAT,KAAS,CAAT;AADI,OAAA,CAAA,EAAA,gBAAA,IAAA,EAEf,GAFe,GAAA,EAEN,UAAA,KAAA,EAAA;AAAA,eAAS,GAAA,UAAA,CAAc,MAAd,SAAA,EAAT,KAAS,CAAT;AAFM,OAAA,CAAA,EAAA,gBAAA,IAAA,EAGf,GAHe,UAAA,EAGC,KAAA,6BAAA,CAAA,EAAA,EAAuC,GAAvC,UAAA,EAAsD,YAAtD,IAAA,EAHD,cAGC,CAHD,CAAA,EAAA,gBAAA,IAAA,EAKf,GALe,YAAA,EAKG,KAAA,6BAAA,CAAA,EAAA,EAAuC,GAAvC,gBAAA,EACf,YADe,IAAA,EALH,cAKG,CALH,CAAA,EAAA,IAAA,KAAA,QAAA,EAAA,EAAA,gBAAA,KAAA,EAQf,GARe,KAAA,EAQJ,UAAA,KAAA,EAAA;AAAA,eAAS,GAAA,SAAA,CAAa,MAAb,SAAA,EAAT,KAAS,CAAT;AARI,OAAA,CAAA,EAAA,gBAAA,KAAA,EASf,GATe,UAAA,EASC,UAAA,KAAA,EAAA;AAAA,eAAS,GAAA,UAAA,CAAc,MAAd,SAAA,EAAT,KAAS,CAAT;AATD,OAAA,CAAA,EAAA,gBAAA,KAAA,EAUf,GAVe,UAAA,EAUC,UAAA,KAAA,EAAA;AAAA,eAAS,GAAA,UAAA,CAAc,MAAd,SAAA,EAAT,KAAS,CAAT;AAVD,OAAA,CAAA,EAAA,gBAAA,KAAA,EAWf,GAXe,UAAA,EAWC,UAAA,KAAA,EAAA;AAAA,eAAS,GAAA,UAAA,CAAc,MAAd,SAAA,EAAT,KAAS,CAAT;AAXD,OAAA,CAAA,EAAA,gBAAA,KAAA,EAYf,GAZe,GAAA,EAYN,UAAA,KAAA,EAAA;AAAA,eAAS,GAAA,SAAA,CAAa,MAAb,SAAA,EAAT,KAAS,CAAT;AAZM,OAAA,CAAA,EAAA,gBAAA,KAAA,EAaf,GAbe,QAAA,EAaD,UAAA,KAAA,EAAA;AAAA,eAAS,GAAA,UAAA,CAAc,MAAd,SAAA,EAAT,KAAS,CAAT;AAbC,OAAA,CAAA,EAAA,gBAAA,KAAA,EAcf,GAde,QAAA,EAcD,UAAA,KAAA,EAAA;AAAA,eAAS,GAAA,UAAA,CAAc,MAAd,SAAA,EAAT,KAAS,CAAT;AAdC,OAAA,CAAA,EAAA,gBAAA,KAAA,EAef,GAfe,QAAA,EAeD,UAAA,KAAA,EAAA;AAAA,eAAS,GAAA,UAAA,CAAc,MAAd,SAAA,EAAT,KAAS,CAAT;AAfC,OAAA,CAAA,EAAA,gBAAA,KAAA,EAgBf,GAhBe,IAAA,EAgBL,UAAA,KAAA,EAAA;AAAA,eAAS,GAAA,SAAA,CAAa,MAAb,SAAA,EAAT,KAAS,CAAT;AAhBK,OAAA,CAAA,EAAA,gBAAA,KAAA,EAiBf,GAjBe,SAAA,EAiBA,UAAA,KAAA,EAAA;AAAA,eAAS,GAAA,UAAA,CAAc,MAAd,SAAA,EAAT,KAAS,CAAT;AAjBA,OAAA,CAAA,EAAA,gBAAA,KAAA,EAkBf,GAlBe,SAAA,EAkBA,UAAA,KAAA,EAAA;AAAA,eAAS,GAAA,UAAA,CAAc,MAAd,SAAA,EAAT,KAAS,CAAT;AAlBA,OAAA,CAAA,EAAA,gBAAA,KAAA,EAmBf,GAnBe,SAAA,EAmBA,UAAA,KAAA,EAAA;AAAA,eAAS,GAAA,UAAA,CAAc,MAAd,SAAA,EAAT,KAAS,CAAT;AAnBA,OAAA,CAAA,EAAA,gBAAA,KAAA,EAoBf,GApBe,UAAA,EAoBC,UAAA,KAAA,EAAA;AAAA,eAAS,GAAA,gBAAA,CAAoB,MAApB,SAAA,EAAA,KAAA,EAAT,KAAS,CAAT;AApBD,OAAA,CAAA,EAAA,gBAAA,KAAA,EAqBf,GArBe,UAAA,EAqBC,UAAA,KAAA,EAAA;AAAA,eAAS,GAAA,gBAAA,CAAoB,MAApB,SAAA,EAAA,KAAA,EAAT,KAAS,CAAT;AArBD,OAAA,CAAA,EAAA,gBAAA,KAAA,EAsBf,GAtBe,UAAA,EAsBC,UAAA,KAAA,EAAA;AAAA,eAAS,GAAA,gBAAA,CAAoB,MAApB,SAAA,EAAA,KAAA,EAAT,KAAS,CAAT;AAtBD,OAAA,CAAA,EAAA,gBAAA,KAAA,EAuBf,GAvBe,UAAA,EAuBC,KAAA,wBAAA,CAAA,EAAA,EAAkC,GAAlC,UAAA,EACb,eAxBY,oBAwBZ,EADa,CAvBD,CAAA,EAAA,gBAAA,KAAA,EAyBf,GAzBe,YAAA,EAyBG,KAAA,wBAAA,CAAA,EAAA,EAAkC,GAAlC,gBAAA,EACf,eA1BY,oBA0BZ,EADe,CAzBH,CAAA,EAAlB,KAAkB,CAAlB;AA4BA,aAAO,UAAU,YAAjB,IAAO,CAAP;AACD;;AAED;;;;;;;;;;;;;kDAU8B,E,EAAI,M,EAAQ,W,EAAa,c,EAAgB;AAAA,UAAA,SAAA,IAAA;;AACrE,UAAM,qBACF,MAAA,IAAA,CAAW,EAAC,QAAZ,WAAW,EAAX,EAAkC,UAAA,CAAA,EAAA;AAAA,eAAK,eAAL,oBAAK,EAAL;AADtC,OACI,CADJ;;AAGA,aAAO,UAAA,QAAA,EAAY;AACjB,iBAAA,OAAA,CAAiB,UAAA,OAAA,EAAA,KAAA,EAAoB;AACnC,aAAA,aAAA,CAAiB,GAAA,QAAA,GAAc,mBAA/B,KAA+B,CAA/B;AACA,aAAA,WAAA,CAAA,MAAA,EAAA,OAAA;AAFF,SAAA;AAIA,WAAA,UAAA,CAAc,OAAd,SAAA,EAAA,kBAAA;AALF,OAAA;AAOD;;AAED;;;;;;;;;;;;6CASyB,E,EAAI,M,EAAQ,gB,EAAkB;AAAA,UAAA,SAAA,IAAA;;AACrD,aAAO,UAAA,OAAA,EAAW;AAChB,WAAA,aAAA,CAAiB,GAAA,QAAA,GAAjB,gBAAA;AACA,WAAA,WAAA,CAAA,MAAA,EAAA,OAAA;AACA,WAAA,SAAA,CAAa,OAAb,SAAA,EAAA,gBAAA;AAHF,OAAA;AAKD;;;wBAnFc;AACb,aAAO,KAAP,SAAA;AACD;;;;;;QAoFK,a,GAAA,a;;;;;;;;;AClHR,IAAA,0BAAA,QAAA,8CAAA,CAAA;;AAgBA,OAAA,IAAA,CAAA,uBAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,wBAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;AAfA,IAAA,uBAAA,QAAA,2CAAA,CAAA;;AAgBA,OAAA,IAAA,CAAA,oBAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,qBAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;AAfA,IAAA,8BAAA,QAAA,kDAAA,CAAA;;AAgBA,OAAA,IAAA,CAAA,2BAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,4BAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;AAfA,IAAA,4BAAA,QAAA,gDAAA,CAAA;;AAgBA,OAAA,IAAA,CAAA,yBAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,0BAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;AAfA,IAAA,gCAAA,QAAA,sDAAA,CAAA;;AAgBA,OAAA,IAAA,CAAA,6BAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,8BAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;AAfA,IAAA,8BAAA,QAAA,kDAAA,CAAA;;AAgBA,OAAA,IAAA,CAAA,2BAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,4BAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;AAvBA,IAAA,0BAAA,QAAA,gCAAA,CAAA;;AAyBA,OAAA,IAAA,CAAA,uBAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,wBAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;;;AACA,OAAA,IAAA,CAAA,qBAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,sBAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;AAjBA,CACE,wBADF,6BAAA,EAEE,qBAFF,0BAAA,EAGE,4BAHF,iCAAA,EAIE,0BAJF,+BAAA,EAKE,8BALF,mCAAA,EAME,4BANF,iCAAA,EAAA,OAAA,CAOU,wBAAA,sBAAA,CAPV,8BAAA;;;;;;;;;;ACTA,IAAA,UAAA,QAAA,cAAA,CAAA;;AACA,IAAA,wBAAA,QAAA,0BAAA,CAAA;;AAEA;;;;;AAKA,IAAM,yBAAyB;AAC7B;;;;;AAKA,eAAa,SAAA,WAAA,CAAA,EAAA,EAAA,MAAA,EAAgB;AAC3B,QAAM,cAAc,uBAAA,kBAAA,CAApB,MAAoB,CAApB;AACA,WAAO,IAAI,QAAJ,YAAA,CAAA,EAAA,EAAP,WAAO,CAAP;AAR2B,GAAA;;AAW7B;;;;AAIA,sBAAoB,SAAA,kBAAA,CAAA,MAAA,EAAU;AAC5B,WAAA,uBAAA,GAAiC,OAAA,uBAAA,IAAjC,KAAA;AACA,WAAA,cAAA,GAAwB,OAAO,OAAP,cAAA,KAAA,QAAA,GAA4C,OAA5C,cAAA,GAAxB,CAAA;;AAEA,QAAI,cAAc,sBAAA,oBAAA,CAAA,QAAA,CAAlB,MAAkB,CAAlB;AACA,QAAI,CAAJ,WAAA,EAAkB;AAChB,oBAAc,oCAAoC,OAApC,OAAA,EAAA,kBAAA,CAAd,MAAc,CAAd;AACA,oCAAA,WAAA,EAA2C,OAA3C,WAAA;AACA,4BAAA,oBAAA,CAAA,aAAA,CAAA,WAAA,EAAA,MAAA;AACD;AACD,WAAA,WAAA;AAzB2B,GAAA;;AA4B7B;;;AAGA,kCAAgC,SAAA,8BAAA,CAAA,kBAAA,EAAsB;AACpD,wCAAoC,mBAApC,OAAA,IAAA,kBAAA;AACA,0BAAA,oBAAA,CAAA,8BAAA,CAAA,kBAAA;AACD;AAlC4B,CAA/B;;AAqCA,IAAM,sCAAN,EAAA;;AAEA;;;;;AAKA,SAAA,6BAAA,CAAA,WAAA,EAAA,WAAA,EAAiE;AAC/D,MAAI,CAAJ,WAAA,EAAkB;;AAElB,MAAM,OAAO,YAAb,IAAA;AACA,MAAM,OAAO,YAAb,IAAA;AACA,MAAM,SAAS,YAAA,IAAA,GAAmB,YAAlC,IAAA;AACA,MAAM,SAAS,YAAA,IAAA,GAAmB,YAAlC,IAAA;;AAEA,MAAM,qBAAqB,YAAA,kBAAA,CAA3B,KAA2B,EAA3B;AACA,cAAA,kBAAA,GAAA,kBAAA;;AAEA,OAAK,IAAI,IAAJ,CAAA,EAAW,QAAQ,mBAAxB,MAAA,EAAmD,IAAnD,KAAA,EAA8D,KAA9D,CAAA,EAAsE;AACpE,uBAAA,CAAA,IAAwB,OAAO,SAAS,mBAAxC,CAAwC,CAAxC;AACA,uBAAmB,IAAnB,CAAA,IAA4B,OAAO,SAAS,mBAAmB,IAA/D,CAA4C,CAA5C;AACD;AACF;;QAEO,sB,GAAA,sB;;AAER;;;;;;;AAOA;;;;;;;;;AASA;;;;;;;;AAQA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1GA;;;IAGM,uB;AACJ,WAAA,oBAAA,GAAc;AAAA,oBAAA,IAAA,EAAA,oBAAA;;AACZ,SAAA,WAAA,GAAmB,IAAnB,GAAmB,EAAnB;AACD;;AAED;;;;;;;6BAIS,M,EAAQ;AACf,UAAM,MAAM,+BAA+B,OAA/B,OAAA,EAAZ,MAAY,CAAZ;AACA,aAAO,KAAA,WAAA,CAAA,GAAA,CAAP,GAAO,CAAP;AACD;;AAED;;;;;;;;;kCAMc,W,EAAa,M,EAAQ;AACjC,UAAM,MAAM,+BAA+B,OAA/B,OAAA,EAAZ,MAAY,CAAZ;AACA,WAAA,WAAA,CAAA,GAAA,CAAA,GAAA,EAAA,WAAA;AACD;;AAED;;;;;;mDAG+B,kB,EAAoB;AACjD,qCAA+B,mBAA/B,OAAA,IAA6D,mBAA7D,UAAA;AACD;;AAED;;;;;;;AAGF;;;;;AAIA,SAAA,WAAA,CAAA,MAAA,EAA6B;AAC3B,MAAM,iBAAiB,OAAA,WAAA,GACjB,MAAI,OAAA,WAAA,CAAJ,IAAA,GAAA,GAAA,GAA+B,OAAA,WAAA,CAA/B,IAAA,GAAA,GAAA,GAA0D,OAAA,WAAA,CAA1D,IAAA,GAAA,GAAA,IAAA,KACH,OAAA,WAAA,CAFoB,IACjB,CADiB,GAAvB,EAAA;;AAKA,SAAU,OAAV,OAAU,GAAV,GAAU,GAAkB,OAA5B,uBAAU,GAAV,cAAA;AACD;;AAED,IAAM,iCAAN,EAAA;;AAEA,IAAM,uBAAuB,IAA7B,oBAA6B,EAA7B;QACQ,oB,GAAA,oB;QAAsB,W,GAAA,W;;;;;;;;;;AChD9B,IAAA,QAAA,QAAA,eAAA,CAAA;;AASA,IAAA,wBAAA,QAAA,2BAAA,CAAA;;AAEA;AACA;;AAEA;;;;AApBA;;;;;;AAwBA,SAAA,yBAAA,CAAA,MAAA,EAA2C;AACzC;AACA;AACA,MAAM,4BAA4B,CAAA,GAAA,MAAA,yBAAA,EAAA,CAAA,EAC3B,OAAA,cAAA,GAD2B,CAAA,EACA,KAAA,EAAA,GAAU,OADV,cAAA,EAAA,CAAA,EAE3B,OAF2B,cAAA,EAEJ,MAAA,MAAA,GAAS,OAFvC,cAAkC,CAAlC;;AAIA;AACA,MAAI,kBAAA,KAAJ,CAAA;AACA,MAAI,gBAAA,KAAJ,CAAA;AACA,MAAI,gBAAA,KAAJ,CAAA;AACA,MAAI,CAAC,OAAL,uBAAA,EAAqC;AACnC;AACA,sBAAA,yBAAA;AACA,oBAAA,IAAA;AACA,oBAAgB,CAAA,GAAA,MAAA,gCAAA,EAAhB,eAAgB,CAAhB;AAJF,GAAA,MAKO;AAAA,QAAA,wBAC+B,CAAA,GAAA,MAAA,6CAAA,EAD/B,yBAC+B,CAD/B;;AAAA,sBAAA,sBAAA,eAAA;AAAA,oBAAA,sBAAA,aAAA;;AAGL,oBAAA,eAAA;AACD;;AAED,MAAM,qBAAqB,CAAA,GAAA,MAAA,kCAAA,EAA3B,eAA2B,CAA3B;;AAEA,MAAI,QAAA,KAAJ,CAAA;AACA,MAAI,cAAA,KAAJ,CAAA;;AAEA;AACA,UAAQ,OAAR,MAAA;AACA,gBAAc,OAAA,wBAAA,GAAd,CAAA;AACA,OAAK,IAAI,IAAJ,CAAA,EAAW,QAAQ,gBAAxB,MAAA,EAAgD,IAAhD,KAAA,EAA2D,KAA3D,CAAA,EAAmE;AACjE,oBAAA,CAAA,KAAA,KAAA;AACA,oBAAgB,IAAhB,CAAA,KAAA,KAAA;AACA,oBAAgB,IAAhB,CAAA,IAAyB,gBAAgB,IAAhB,CAAA,IAAA,KAAA,GAAzB,WAAA;AACD;;AAED;AACA,UAAQ,OAAA,MAAA,IAAiB,OAAA,MAAA,GAAgB,OAAzC,wBAAQ,CAAR;AACA,gBAAc,IAAd,KAAA;AACA,OAAK,IAAI,KAAJ,CAAA,EAAW,SAAQ,mBAAxB,MAAA,EAAmD,KAAnD,MAAA,EAA8D,MAA9D,CAAA,EAAsE;AACpE,uBAAA,EAAA,IAAwB,mBAAA,EAAA,IAAA,KAAA,GAAxB,WAAA;AACD;;AAED,MAAM,eAAe,gBAAgB,cAAhB,MAAA,GAAuC,gBAAA,MAAA,GAA5D,CAAA;;AAEA,SAAO;AACL,qBADK,eAAA;AAEL,mBAFK,aAAA;AAGL,wBAHK,kBAAA;AAIL,mBAJK,aAAA;AAKL,kBAAc;AALT,GAAP;AAOD;;AAED;;;;AAIA,SAAA,4BAAA,CAAA,MAAA,EAA8C;AAC5C;AACA;AACA,MAAM,4BAA4B,CAAA,GAAA,MAAA,yBAAA,EAC9B,OAAA,cAAA,GAD8B,CAAA,EACH,OADG,cAAA,EACoB,KAAA,EAAA,GAAU,OAD9B,cAAA,EAAA,CAAA,EAE3B,OAF2B,cAAA,EAEJ,MAAA,MAAA,GAAS,OAFvC,cAAkC,CAAlC;;AAIA;AACA,MAAI,kBAAA,KAAJ,CAAA;AACA,MAAI,gBAAA,KAAJ,CAAA;AACA,MAAI,gBAAA,KAAJ,CAAA;AACA,MAAI,CAAC,OAAL,uBAAA,EAAqC;AACnC;AACA,sBAAA,yBAAA;AACA,oBAAA,IAAA;AACA,oBAAgB,CAAA,GAAA,MAAA,gCAAA,EAAhB,eAAgB,CAAhB;AAJF,GAAA,MAKO;AACL,QAAM,sBAAsB,CAAA,GAAA,MAAA,6CAAA,EAA5B,yBAA4B,CAA5B;AAEA,sBAAkB,oBAAlB,eAAA;AACA,oBAAgB,oBAAhB,aAAA;AACA,oBAAA,eAAA;AACD;;AAED,MAAM,qBAAqB,CAAA,GAAA,MAAA,kCAAA,EAA3B,eAA2B,CAA3B;;AAEA,MAAI,QAAA,KAAJ,CAAA;AACA,MAAI,cAAA,KAAJ,CAAA;;AAEA;AACA,UAAQ,OAAR,MAAA;AACA,gBAAc,CAAC,OAAD,wBAAA,GAAd,CAAA;AACA,OAAK,IAAI,IAAJ,CAAA,EAAW,QAAQ,gBAAxB,MAAA,EAAgD,IAAhD,KAAA,EAA2D,KAA3D,CAAA,EAAmE;AACjE,oBAAA,CAAA,KAAA,KAAA;AACA,oBAAgB,IAAhB,CAAA,KAAA,KAAA;AACA,oBAAgB,IAAhB,CAAA,IAAyB,gBAAgB,IAAhB,CAAA,IAAA,KAAA,GAAzB,WAAA;AACD;;AAED;AACA,UAAQ,OAAA,MAAA,IAAiB,OAAA,MAAA,GAAgB,OAAzC,wBAAQ,CAAR;AACA,gBAAA,CAAA;AACA,OAAK,IAAI,MAAJ,CAAA,EAAW,UAAQ,mBAAxB,MAAA,EAAmD,MAAnD,OAAA,EAA8D,OAA9D,CAAA,EAAsE;AACpE,uBAAA,GAAA,IAAwB,mBAAA,GAAA,IAAA,KAAA,GAAxB,WAAA;AACD;;AAED,MAAM,eAAe,gBAAgB,cAAhB,MAAA,GAAuC,gBAAA,MAAA,GAA5D,CAAA;;AAEA,SAAO;AACL,qBADK,eAAA;AAEL,mBAFK,aAAA;AAGL,wBAHK,kBAAA;AAIL,mBAJK,aAAA;AAKL,kBAAc;AALT,GAAP;AAOD;;AAED;;;;AAIA,SAAA,4BAAA,CAAA,MAAA,EAA8C;AAC5C,MAAI,QAAA,KAAJ,CAAA;AACA,MAAI,cAAA,KAAJ,CAAA;;AAEA;AACA,gBAAc,OAAA,wBAAA,GAAd,CAAA;AACA,MAAM,4BAA4B,CAAA,GAAA,MAAA,2BAAA,EAC9B,CAD8B,WAAA,EAAA,WAAA,EAAA,CAAA,EACA,OADA,cAAA,EACuB,MAAA,MAAA,GAAS,OADlE,cAAkC,CAAlC;;AAGA,MAAI,kBAAA,KAAJ,CAAA;AACA,MAAI,gBAAA,KAAJ,CAAA;AACA,MAAI,gBAAA,KAAJ,CAAA;;AAEA;AACA,MAAI,CAAC,OAAL,uBAAA,EAAqC;AACnC;AACA,sBAAA,yBAAA;AACA,oBAAA,IAAA;AACA,oBAAgB,CAAA,GAAA,MAAA,gCAAA,EAAhB,eAAgB,CAAhB;AAJF,GAAA,MAKO;AACL,QAAM,sBAAsB,CAAA,GAAA,MAAA,6CAAA,EAA5B,yBAA4B,CAA5B;AAEA,sBAAkB,oBAAlB,eAAA;AACA,oBAAgB,oBAAhB,aAAA;;AAEA;AACA,oBAAgB,gBAAA,GAAA,CAAoB,UAAA,KAAA,EAAA,KAAA,EAAA;AAAA,aAAkB,QAAA,CAAA,KAAA,CAAA,GAAA,CAAA,GAAlB,KAAA;AAApC,KAAgB,CAAhB;AACD;;AAED;AACA,MAAM,qBAAqB,CAAA,GAAA,MAAA,sCAAA,EAA3B,eAA2B,CAA3B;;AAEA;AACA,UAAQ,OAAR,MAAA;AACA,OAAK,IAAI,IAAJ,CAAA,EAAW,QAAQ,gBAAxB,MAAA,EAAgD,IAAhD,KAAA,EAA2D,KAA3D,CAAA,EAAmE;AACjE,oBAAA,CAAA,KAAA,KAAA;AACA,oBAAgB,IAAhB,CAAA,KAAA,KAAA;AACD;;AAED;AACA,UAAQ,OAAA,wBAAA,IAAmC,OAAA,MAAA,GAAgB,OAA3D,wBAAQ,CAAR;AACA,gBAAc,CAAC,IAAD,KAAA,IAAd,CAAA;AACA,OAAK,IAAI,MAAJ,CAAA,EAAW,UAAQ,mBAAxB,MAAA,EAAmD,MAAnD,OAAA,EAA8D,OAA9D,CAAA,EAAsE;AACpE,uBAAA,GAAA,IAAwB,mBAAA,GAAA,IAAA,KAAA,GAAxB,WAAA;AACD;;AAED,MAAM,eAAe,gBAAgB,cAAhB,MAAA,GAAuC,gBAAA,MAAA,GAA5D,CAAA;;AAEA,SAAO;AACL,qBADK,eAAA;AAEL,mBAFK,aAAA;AAGL,wBAHK,kBAAA;AAIL,mBAJK,aAAA;AAKL,kBAAc;AALT,GAAP;AAOD;;AAED,IAAM,gCAAgC;AACpC,WADoC,SAAA;;AAGpC;;;;AAIA,sBAAoB,SAAA,kBAAA,CAAA,MAAA,EAAY;AAC9B;AACA,QAAI,OAAA,cAAA,GAAA,CAAA,KAAJ,CAAA,EAAqC;AACnC,aAAA,cAAA;AACD;;AAED;AACA,QAAM,WAAW,0BAAjB,MAAiB,CAAjB;AACA,QAAM,cAAc,6BAApB,MAAoB,CAApB;AACA,QAAM,cAAc,6BAApB,MAAoB,CAApB;;AAEA;AACA,QAAM,kBAAkB,SAAA,eAAA,CAAA,MAAA,CAAgC,YAAhC,eAAA,EACpB,YADJ,eAAwB,CAAxB;AAEA,QAAM,gBAAgB,SAAA,aAAA,CAAA,MAAA,CAA8B,YAA9B,aAAA,EAClB,YADJ,aAAsB,CAAtB;AAEA,QAAM,qBAAqB,SAAA,kBAAA,CAAA,MAAA,CAAmC,YAAnC,kBAAA,EACvB,YADJ,kBAA2B,CAA3B;AAEA,QAAM,gBAAgB,SAAA,aAAA,GAChB,SAAA,aAAA,CAAA,MAAA,CAA8B,YAA9B,aAAA,EAAyD,YADzC,aAChB,CADgB,GAAtB,IAAA;AAGA,QAAM,eAAe,SAAA,YAAA,GAAwB,YAAxB,YAAA,GAAmD,YAAxE,YAAA;;AAEA,WAAO;AACL,uBADK,eAAA;AAEL,qBAFK,aAAA;AAGL,0BAHK,kBAAA;AAIL,qBAJK,aAAA;AAKL,oBAAc;AALT,KAAP;AA9BkC,GAAA;;AAuCpC;;;;AAvCoC,cAAA,SAAA,UAAA,CAAA,MAAA,EA2CjB;AACjB,WAAU,CAAA,GAAA,sBAAA,WAAA,EAAV,MAAU,IAAV,GAAU,GAAuB,OAAjC,cAAA;AACD;AA7CmC,CAAtC;;QAgDQ,6B,GAAA,6B;;AAER;;;;;;;;;;;;;;;ACnPA,IAAA,wBAAA,QAAA,2BAAA,CAAA;;AAEA,IAAM,oBAAN,GAAA,C,CARA;;;;;;AAUA,IAAM,kBAAkB;AACtB;AACA,CAFsB,iBAAA,EAEF,CAFE,iBAAA,EAAA,iBAAA,EAAA,iBAAA,EAGF,CAHE,iBAAA,EAAA,iBAAA,EAAA,iBAAA,EAAA,iBAAA,EAAA,iBAAA,EAKtB,CALsB,iBAAA,EAAA,iBAAA,EAAA,iBAAA;AAMtB;AACA,CAPsB,iBAAA,EAOF,CAPE,iBAAA,EAOkB,CAPlB,iBAAA,EAQtB,CARsB,iBAAA,EAAA,iBAAA,EAQkB,CARlB,iBAAA,EAAA,iBAAA,EAAA,iBAAA,EASkB,CATlB,iBAAA,EAAA,iBAAA,EAUF,CAVE,iBAAA,EAUkB,CAVlB,iBAAA;AAWtB;AACA,CAZsB,iBAAA,EAAA,iBAAA,EAYkB,CAZlB,iBAAA,EAatB,CAbsB,iBAAA,EAAA,iBAAA,EAAA,iBAAA,EAAA,iBAAA,EAAA,iBAAA,EAAA,iBAAA,EAAA,iBAAA,EAAA,iBAAA,EAekB,CAflB,iBAAA;AAgBtB;AACA,CAjBsB,iBAAA,EAiBF,CAjBE,iBAAA,EAiBkB,CAjBlB,iBAAA,EAAA,iBAAA,EAkBF,CAlBE,iBAAA,EAkBkB,CAlBlB,iBAAA,EAAA,iBAAA,EAmBF,CAnBE,iBAAA,EAAA,iBAAA,EAoBtB,CApBsB,iBAAA,EAoBF,CApBE,iBAAA,EAAA,iBAAA;AAqBtB;AArBsB,iBAAA,EAsBF,CAtBE,iBAAA,EAsBkB,CAtBlB,iBAAA,EAAA,iBAAA,EAAA,iBAAA,EAuBkB,CAvBlB,iBAAA,EAAA,iBAAA,EAAA,iBAAA,EAAA,iBAAA,EAAA,iBAAA,EAyBF,CAzBE,iBAAA,EAAA,iBAAA;AA0BtB;AACA,CA3BsB,iBAAA,EA2BF,CA3BE,iBAAA,EA2BkB,CA3BlB,iBAAA,EA4BtB,CA5BsB,iBAAA,EA4BF,CA5BE,iBAAA,EAAA,iBAAA,EA6BtB,CA7BsB,iBAAA,EAAA,iBAAA,EAAA,iBAAA,EA8BtB,CA9BsB,iBAAA,EAAA,iBAAA,EA8BkB,CA9B1C,iBAAwB,CAAxB;;AAiCA,IAAM,0BAA0B;AAC9B;AAD8B,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AAM9B;AAN8B,CAAA,EAAA,CAAA,EAOxB,CAPwB,CAAA,EAAA,CAAA,EAAA,CAAA,EAQxB,CARwB,CAAA,EAAA,CAAA,EAAA,CAAA,EASxB,CATwB,CAAA,EAAA,CAAA,EAAA,CAAA,EAUxB,CAVwB,CAAA;AAW9B;AAX8B,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AAgB9B;AAhB8B,CAAA,EAiB3B,CAjB2B,CAAA,EAAA,CAAA,EAAA,CAAA,EAkB3B,CAlB2B,CAAA,EAAA,CAAA,EAAA,CAAA,EAmB3B,CAnB2B,CAAA,EAAA,CAAA,EAAA,CAAA,EAoB3B,CApB2B,CAAA,EAAA,CAAA;AAqB9B;AArB8B,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AA0B9B;AACA,CA3B8B,CAAA,EAAA,CAAA,EAAA,CAAA,EA4B9B,CA5B8B,CAAA,EAAA,CAAA,EAAA,CAAA,EA6B9B,CA7B8B,CAAA,EAAA,CAAA,EAAA,CAAA,EA8B9B,CA9B8B,CAAA,EAAA,CAAA,EAAhC,CAAgC,CAAhC;;AAiCA,IAAM,qBAAqB;AACzB;AADyB,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AAMzB;AANyB,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AAWzB;AAXyB,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AAgBzB;AAhByB,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AAqBzB;AArByB,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AA0BzB;AA1ByB,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAA3B,CAA2B,CAA3B;;AAiCA;AACA;AACA,IAAM,gBAAgB;AACpB;AADoB,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AAIpB;AAJoB,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AAOpB;AAPoB,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA;AAUpB;AAVoB,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA;AAapB;AAboB,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA;AAgBpB;AAhBoB,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAtB,EAAsB,CAAtB;;AAqBA,IAAM,6BAA6B;AACjC,WADiC,MAAA;;AAGjC;;;;AAIA,sBAAoB,SAAA,kBAAA,CAAA,MAAA,EAAU;AAC5B,QAAM,gBAAgB,OAAA,uBAAA,GAAA,eAAA,GAAtB,uBAAA;;AAEA,WAAO;AACL,uBADK,eAAA;AAEL,qBAFK,aAAA;AAGL,0BAHK,kBAAA;AAIL,qBAJK,aAAA;AAKL,oBAAc,cAAc;AALvB,KAAP;AAV+B,GAAA;;AAmBjC;;;;AAnBiC,cAAA,SAAA,UAAA,CAAA,MAAA,EAuBd;AACjB,WAAO,CAAA,GAAA,sBAAA,WAAA,EAAP,MAAO,CAAP;AACD;AAzBgC,CAAnC;;QA4BQ,0B,GAAA,0B;;;;;;;;;;AC1JR,IAAA,QAAA,QAAA,eAAA,CAAA;;AAMA,IAAA,wBAAA,QAAA,2BAAA,CAAA;;AAEA;AAdA;;;;;;AAeA,IAAM,4BAA4B,CAChC,CADgC,iBAAA,EACZ,CADY,kBAAA,EAAA,kBAAA,EAAA,iBAAA,EAEb,CAFa,kBAAA,EAAA,kBAAA,EAGhC,CAHgC,iBAAA,EAAA,kBAAA,EAGQ,CAHR,kBAAA,EAAA,iBAAA,EAAA,kBAAA,EAIO,CAJP,kBAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,kBAAA,EAAA,mBAAA,EAAA,CAAA,EAO7B,CAP6B,kBAAA,EAOR,CAPQ,mBAAA,EAAA,CAAA,EAAA,CAAA,EAQ1B,CAR0B,CAAA,EAAA,kBAAA,EAAA,mBAAA,EAAA,kBAAA,EAUhC,CAVgC,kBAAA,EAAA,mBAAA,EAAA,kBAAA,EAAA,kBAAA,EAWZ,CAXY,mBAAA,EAWU,CAXV,kBAAA,EAYhC,CAZgC,kBAAA,EAYX,CAZW,mBAAA,EAYW,CAZ7C,kBAAkC,CAAlC;;AAehC,CAAgC,CAAhC;;AAuBA,IAAI,oCAAJ,IAAA;AACA,IAAI,kCAAJ,IAAA;AACA,IAAI,qBAAJ,IAAA;;AAEA,IAAM,oCAAoC;AACxC,WADwC,aAAA;;AAGxC;;;;AAIA,sBAAoB,SAAA,kBAAA,CAAA,MAAA,EAAU;AAC5B,QAAI,kBAAA,KAAJ,CAAA;AACA,QAAI,gBAAA,KAAJ,CAAA;;AAEA,QAAI,CAAJ,iCAAA,EAAwC;AACtC;AACA,UAAM,sBAAsB,CAAA,GAAA,MAAA,sCAAA,EAAA,yBAAA,EAA5B,uBAA4B,CAA5B;AAEA,0CAAoC,oBAApC,eAAA;AACA,wCAAkC,oBAAlC,aAAA;AACD;;AAED,sBAAA,iCAAA;AACA,oBAAA,+BAAA;;AAEA,QAAI,gBAAA,KAAJ,CAAA;AACA;AACA,QAAI,CAAC,OAAL,uBAAA,EAAqC;AACnC,wBAAkB,CAAA,GAAA,MAAA,uCAAA,EAAA,eAAA,EAAlB,aAAkB,CAAlB;AAEA,sBAAA,IAAA;AACA,sBAAgB,CAAA,GAAA,MAAA,gCAAA,EAAhB,eAAgB,CAAhB;AAJF,KAAA,MAKO;AACL,sBAAA,eAAA;AACD;;AAED,yBAAqB,qBAAA,kBAAA,GAEf,CAAA,GAAA,MAAA,kCAAA,EAFN,eAEM,CAFN;;AAIA,QAAM,eAAe,gBAAgB,cAAhB,MAAA,GAAuC,gBAAA,MAAA,GAA5D,CAAA;;AAEA,WAAO;AACL,uBADK,eAAA;AAEL,qBAFK,aAAA;AAGL,0BAHK,kBAAA;AAIL,qBAJK,aAAA;AAKL,oBAAc;AALT,KAAP;AAvCsC,GAAA;;AAgDxC;;;;AAhDwC,cAAA,SAAA,UAAA,CAAA,MAAA,EAoDrB;AACjB,WAAO,CAAA,GAAA,sBAAA,WAAA,EAAP,MAAO,CAAP;AACD;AAtDuC,CAA1C;;QAyDQ,iC,GAAA,iC;;;;;;;;;;ACvGR,IAAA,QAAA,QAAA,eAAA,CAAA;;AAQA,IAAA,wBAAA,QAAA,2BAAA,CAAA;;AACA,IAAA,0BAAA,QAAA,6BAAA,CAAA;;AAEA,IAAM,kCAAkC;AACtC,WADsC,WAAA;;AAGtC;;;;AAIA,sBAAoB,SAAA,kBAAA,CAAA,MAAA,EAAU;AAC5B,WAAA,cAAA,GAAwB,KAAA,GAAA,CAAS,OAAT,cAAA,EAAxB,CAAwB,CAAxB;;AAEA,QAAM,aAAa,CAAA,GAAA,MAAA,QAAA,EAAnB,MAAmB,CAAnB;AACA,eAAA,OAAA,GAAqB,OAAA,WAAA,IAArB,aAAA;AACA,QAAM,sBAAsB,wBAAA,sBAAA,CAAA,kBAAA,CAA5B,UAA4B,CAA5B;;AAEA;;AAP4B,QAAA,mBAQW,CAAA,GAAA,MAAA,eAAA,EAAgB,OAAhB,cAAA,EACnC,oBADmC,eAAA,EACE,oBATb,aAQW,CARX;AAAA,QAAA,kBAAA,iBAAA,eAAA;AAAA,QAAA,gBAAA,iBAAA,aAAA;;AAAA,QAAA,wBAUQ,CAAA,GAAA,MAAA,sCAAA,EAAA,eAAA,EAVR,aAUQ,CAVR;;AAAA,sBAAA,sBAAA,eAAA;AAAA,oBAAA,sBAAA,aAAA;;AAa5B,QAAI,gBAAA,KAAJ,CAAA;AACA;AACA,QAAI,CAAC,OAAL,uBAAA,EAAqC;AACnC,wBAAkB,CAAA,GAAA,MAAA,uCAAA,EAAA,eAAA,EAAlB,aAAkB,CAAlB;AAEA,sBAAA,IAAA;AACA,sBAAgB,CAAA,GAAA,MAAA,gCAAA,EAAhB,eAAgB,CAAhB;AAJF,KAAA,MAKO;AACL,sBAAA,eAAA;AACD;;AAED,QAAM,qBAAqB,CAAA,GAAA,MAAA,kCAAA,EAA3B,eAA2B,CAA3B;;AAEA,QAAM,eAAe,gBAAgB,cAAhB,MAAA,GAAuC,gBAAA,MAAA,GAA5D,CAAA;;AAEA,WAAO;AACL,uBADK,eAAA;AAEL,qBAFK,aAAA;AAGL,0BAHK,kBAAA;AAIL,qBAJK,aAAA;AAKL,oBAAc;AALT,KAAP;AAnCoC,GAAA;;AA4CtC;;;;AA5CsC,cAAA,SAAA,UAAA,CAAA,MAAA,EAgDnB;AACjB,WAAU,CAAA,GAAA,sBAAA,WAAA,EAAV,MAAU,IAAV,GAAU,GAAuB,OAAjC,cAAA;AACD;AAlDqC,CAAxC,C,CAtBA;;;;;;;;;;;QA2EQ,+B,GAAA,+B;;AAER;;;;;;;;;;;;;;AC7EA,IAAA,QAAA,QAAA,eAAA,CAAA;;AAOA,IAAA,wBAAA,QAAA,2BAAA,CAAA;;AAEA;;;;;;;;;AASA;;;;;AAKA,SAAA,gCAAA,CAAA,cAAA,EAA0D;AACxD,MAAM,aAAa,KAAA,EAAA,GAAnB,cAAA;AACA,MAAM,eAAe,MAAA,MAAA,GAArB,cAAA;;AAEA,SAAO,CAAA,GAAA,MAAA,yBAAA,EAAA,CAAA,EAAA,cAAA,EAAA,UAAA,EAAA,CAAA,EAAA,cAAA,EAAP,YAAO,CAAP;AAGD;;AAED,IAAM,sCAAsC;AAC1C,WAD0C,iBAAA;;AAG1C;;;;AAIA,sBAAoB,SAAA,kBAAA,CAAA,MAAA,EAAU;AAC5B;AACA,QAAM,4BAA4B,iCAAiC,OAAnE,cAAkC,CAAlC;;AAEA;AACA,QAAI,kBAAA,KAAJ,CAAA;AACA,QAAI,gBAAA,KAAJ,CAAA;AACA,QAAI,gBAAA,KAAJ,CAAA;AACA,QAAI,CAAC,OAAL,uBAAA,EAAqC;AACnC;AACA,wBAAA,yBAAA;AACA,sBAAA,IAAA;AACA,sBAAgB,CAAA,GAAA,MAAA,gCAAA,EAAhB,eAAgB,CAAhB;AAJF,KAAA,MAKO;AAAA,UAAA,wBAC+B,CAAA,GAAA,MAAA,6CAAA,EAD/B,yBAC+B,CAD/B;;AAAA,wBAAA,sBAAA,eAAA;AAAA,sBAAA,sBAAA,aAAA;;AAGL,sBAAA,eAAA;AACD;;AAED,QAAM,qBAAqB,CAAA,GAAA,MAAA,kCAAA,EAA3B,eAA2B,CAA3B;;AAEA,QAAM,eAAe,gBAAgB,cAAhB,MAAA,GAAuC,gBAAA,MAAA,GAA5D,CAAA;;AAEA,WAAO;AACL,uBADK,eAAA;AAEL,qBAFK,aAAA;AAGL,0BAHK,kBAAA;AAIL,qBAJK,aAAA;AAKL,oBAAc;AALT,KAAP;AA9BwC,GAAA;;AAuC1C;;;;AAvC0C,cAAA,SAAA,UAAA,CAAA,MAAA,EA2CvB;AACjB,WAAU,CAAA,GAAA,sBAAA,WAAA,EAAV,MAAU,IAAV,GAAU,GAAuB,OAAjC,cAAA;AACD;AA7CyC,CAA5C;;QAgDQ,mC,GAAA,mC;;;;;;;;;;AChFR,IAAA,QAAA,QAAA,eAAA,CAAA;;AACA,IAAA,wBAAA,QAAA,2BAAA,CAAA;;AAEA;;;;;;AAMA;AACA,IAAM,oBAAN,kBAAA;;AAEA,IAAM,kBAAkB;AACtB;AADsB,iBAAA,EAAA,iBAAA,EAAA,iBAAA,EAGtB,CAHsB,iBAAA,EAGF,CAHE,iBAAA,EAAA,iBAAA,EAItB,CAJsB,iBAAA,EAAA,iBAAA,EAIkB,CAJlB,iBAAA;;AAMtB;AANsB,iBAAA,EAAA,iBAAA,EAAA,iBAAA,EAQtB,CARsB,iBAAA,EAAA,iBAAA,EAQkB,CARlB,iBAAA,EAAA,iBAAA,EASF,CATE,iBAAA,EASkB,CATlB,iBAAA;;AAWtB;AAXsB,iBAAA,EAAA,iBAAA,EAAA,iBAAA,EAAA,iBAAA,EAaF,CAbE,iBAAA,EAakB,CAblB,iBAAA,EActB,CAdsB,iBAAA,EAcF,CAdE,iBAAA,EAAA,iBAAA;;AAgBtB;AACA,CAjBsB,iBAAA,EAiBF,CAjBE,iBAAA,EAAA,iBAAA,EAAA,iBAAA,EAkBH,CAlBG,iBAAA,EAkBiB,CAlBjB,iBAAA,EAmBtB,CAnBsB,iBAAA,EAAA,iBAAA,EAmBiB,CAnBzC,iBAAwB,CAAxB;;AAsBA;AACA,IAAM,0BAAN,aAAA;;AAEA,IAAM,qBAAqB;AACzB;AADyB,CAAA,EAAA,uBAAA,EAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA,uBAAA;;AAMzB;AANyB,CAAA,EAAA,uBAAA,EAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA,uBAAA;;AAWzB;AAXyB,CAAA,EAAA,uBAAA,EAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA,uBAAA;;AAgBzB;AAhByB,CAAA,EAAA,uBAAA,EAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAA3B,uBAA2B,CAA3B;;AAsBA,IAAM,oCAAoC;AACxC,WADwC,aAAA;;AAGxC;;;;AAIA,sBAAoB,SAAA,kBAAA,CAAA,MAAA,EAAU;AAC5B,QAAM,gBAAgB,OAAA,uBAAA,GAAA,eAAA,GAEhB,CAAA,GAAA,MAAA,gCAAA,EAFN,eAEM,CAFN;;AAIA,WAAO;AACL,uBADK,eAAA;AAEL,qBAFK,aAAA;AAGL,0BAHK,kBAAA;AAIL,qBAJK,IAAA;AAKL,oBAAc,gBAAA,MAAA,GAAyB;AALlC,KAAP;AAZsC,GAAA;;AAqBxC;;;;AArBwC,cAAA,SAAA,UAAA,CAAA,MAAA,EAyBrB;AACjB,WAAO,CAAA,GAAA,sBAAA,WAAA,EAAP,MAAO,CAAP;AACD;AA3BuC,CAA1C;;QA8BQ,iC,GAAA,iC;;;;;;;;;;;;;;;;;;;;;;ACzFR,IAAA,eAAA,QAAA,cAAA,CAAA;;AAKA,IAAA,YAAA,QAAA,WAAA,CAAA;;AACA,IAAA,kBAAA,QAAA,oBAAA,CAAA;;AAMA,IAAA,QAAA,QAAA,SAAA,CAAA;;;;;;;;;;;;;;;;;;;;AASA;;;IAGM,kB;;;AACJ,WAAA,eAAA,GAAc;AAAA,oBAAA,IAAA,EAAA,eAAA;;AAAA,QAAA,QAAA,2BAAA,IAAA,EAAA,CAAA,gBAAA,SAAA,IAAA,OAAA,cAAA,CAAA,eAAA,CAAA,EAAA,IAAA,CAAA,IAAA,CAAA,CAAA;;AAGZ,UAAA,OAAA,GAAA,IAAA;AACA,UAAA,GAAA,GAAA,IAAA;AACA,UAAA,MAAA,GAAA,IAAA;AACA,UAAA,sBAAA,GAAA,IAAA;AANY,WAAA,KAAA;AAOb;;AAED;;;;;;;;;;;;;;+BAWW,M,EAAQ,c,EAAgB,Y,EAAc,Y,EAAc;AAAA,UAAA,SAAA,IAAA;;AAC7D,WAAA,OAAA,GAAA,MAAA;;AAEA,aAAO,QAAA,OAAA,GAAA,IAAA,CACC,YAAA;AAAA,eAAM,OAAN,kBAAM,EAAN;AADD,OAAA,EAAA,IAAA,CAEC,YAAA;AAAA,eAAM,QAAA,GAAA,CAAY,CACtB,OAAA,iBAAA,CADsB,cACtB,CADsB,EAEtB,OAAA,iBAAA,CAFI,YAEJ,CAFsB,CAAZ,CAAN;AAFD,OAAA,EAAA,IAAA,CAMC,YAAA;AAAA,eAAM,OAAA,WAAA,CAAN,YAAM,CAAN;AANR,OAAO,CAAP;AAOD;;;8BAES,CAAE;;;4BAEJ;AACN;AACA,WAAA,MAAA,CAAA,KAAA;AACD;;AAED;;;;;;;;;;;0BAQM;AACJ,WAAA,cAAA;AACD;;;qCAEgB;AAAE;AACjB,mBAAA,QAAA,CAAA,QAAA,CAAkB,UAAA,aAAA,CAAlB,QAAA;AACA,mBAAA,QAAA,CAAA,QAAA,CAAA,IAAA;AACD;;AAED;;;;;;;;;;;;;2BAUO,W,EAAa,S,EAAW;AAC7B,WAAA,MAAA,CAAA,qBAAA,CAAA,WAAA,EAAA,SAAA;AACD;;AAED;;;;;;;;;2BAMO;AAAA,UAAA,SAAA,IAAA;;AACL;AACA,WAAA,GAAA,CAAA,KAAA,CAAe,KAAA,GAAA,CAAA,gBAAA,GAA4B,KAAA,GAAA,CAA3C,gBAAA;;AAEA;AACA;AACA,UAAI,gBAAA,mBAAA,CAAJ,6BAAA,EAAuD;AACrD,SAAA,GAAA,MAAA,eAAA,EAAgB,KAAhB,GAAA,EAA0B,gBAAA,mBAAA,CAA1B,iBAAA;AACA,aAAA,GAAA,CAAA,KAAA,CAAe,KAAA,GAAA,CAAA,gBAAA,GAA4B,KAAA,GAAA,CAA3C,gBAAA;AACD;;AAED;AACA;AACA,sBAAA,mBAAA,CAAA,mBAAA,CAAwC,UAAA,cAAA,EAAA,iBAAA,EAAA;AAAA,eACtC,OAAA,iBAAA,CAAA,cAAA,EADsC,iBACtC,CADsC;AAAxC,OAAA;AAEA,sBAAA,mBAAA,CAAA,4BAAA,CACE,UAAA,cAAA,EAAA;AAAA,eAAoB,OAAA,0BAAA,CAApB,cAAoB,CAApB;AADF,OAAA;AAED;;AAED;;;;;;;;;;;sCAQkB,c,EAAgB,iB,EAAmB;AACnD;AACA;AACA,UAAI,KAAA,sBAAA,KAAJ,cAAA,EAAoD;AAClD,uBAAA,UAAA,CAA0B,KAA1B,GAAA;AACA,aAAA,sBAAA,GAAA,cAAA;AACD;;AAED;AACA,wBAAA,OAAA,CAA0B,UAAA,gBAAA,EAAA;AAAA,eAAA,kBAAA;AAA1B,OAAA;AACD;;AAED;;;;;;;;;;+CAO2B,c,EAAgB;AACzC,WAAA,sBAAA,GAAA,cAAA;AACA,qBAAA,IAAA,CAAoB,KAApB,GAAA;AACD;;AAED;;;;;;;;yCAKqB;AAAA,UAAA,SAAA,IAAA;;AACnB;AACA,UAAI;AACF,aAAA,GAAA,GAAW,CAAA,GAAA,MAAA,eAAA,EAAgB,KAA3B,OAAW,CAAX;AADF,OAAA,CAGA,OAAA,CAAA,EAAU;AACR,cAAA,4CAAA;AACA,cAAA,CAAA;AACD;;AAED;AACA,OAAA,GAAA,MAAA,iCAAA,EAAkC,KAAlC,OAAA,EAAgD,KAAhD,GAAA,EAA0D,YAAA;AAAA,eAAM,OAAN,kBAAM,EAAN;AAA1D,OAAA;;AAEA;AACA,WAAA,GAAA,CAAA,UAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AACA,WAAA,GAAA,CAAA,UAAA,CAAA,CAAA;;AAEA;AACA,WAAA,GAAA,CAAA,MAAA,CAAgB,KAAA,GAAA,CAAhB,UAAA;AACA,WAAA,GAAA,CAAA,SAAA,CAAmB,KAAA,GAAA,CAAnB,MAAA;AACD;;AAED;;;;;;;;;;sCAOkB,c,EAAgB;AAAA,UAAA,SAAA,IAAA;;AAChC,UAAM,WACJ,eAAA,GAAA,CAAmB,UAAA,MAAA,EAAA;AAAA,eAAU,gBAAA,mBAAA,CAAA,kBAAA,CAAuC,OAAvC,GAAA,EAAV,MAAU,CAAV;AADrB,OACE,CADF;AAEA,aAAO,QAAA,GAAA,CAAP,QAAO,CAAP;AACD;;AAED;;;;;;;;;;sCAOkB,Y,EAAc;AAAA,UAAA,SAAA,IAAA;;AAC9B,aAAO,QAAA,GAAA,CAAY,aAAA,GAAA,CACZ,UAAA,WAAA,EAAA;AAAA,eAAe,gBAAA,YAAA,CAAA,WAAA,CAAyB,OAAzB,GAAA,EAAf,WAAe,CAAf;AADP,OAAmB,CAAZ,CAAP;AAED;;AAED;;;;;;;;;;;gCAQY,Y,EAAc;AACxB;AACA,YAAM,IAAA,SAAA,CAAN,wBAAM,CAAN;AACD;;AAED;;;;;;yCAGqB;AACnB,WAAA,MAAA,CAAA,MAAA,CAAA,WAAA,GAAiC,CAAA,GAAA,MAAA,gBAAA,MAAqB,CAAA,GAAA,MAAtD,iBAAsD,GAAtD;AACA,6CAAuC,KAAvC,GAAA;AACD;;AAED;;;;;;;qCAIiB;AACf,aAAO,KAAA,MAAA,CAAA,MAAA,CAAP,UAAA;AACD;;AAED;;;;;;;2CAIuB;AACrB,aAAO,KAAA,MAAA,CAAA,MAAA,CAAP,gBAAA;AACD;;;;EAvN2B,aAAA,sB;;AA0N9B;;;;;AAIA,SAAA,sCAAA,CAAA,EAAA,EAAoD;AAClD,MAAI,gBAAA,mBAAA,CAAJ,6BAAA,EAAuD;AACrD,QAAM,QAAQ,CAAA,GAAA,MAAd,gBAAc,GAAd;AACA,QAAM,SAAS,CAAA,GAAA,MAAf,iBAAe,GAAf;;AAEA;AACA,QAAM,UAAU,gBAAA,mBAAA,CAAhB,aAAA;AACA,OAAA,WAAA,CAAe,GAAf,UAAA,EAAA,OAAA;AACA,OAAA,UAAA,CAAc,GAAd,UAAA,EAAA,CAAA,EAAgC,GAAhC,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,CAAA,EAA2D,GAA3D,IAAA,EAAoE,GAApE,aAAA,EAAA,IAAA;;AAEA;AACA,QAAM,eAAe,gBAAA,mBAAA,CAArB,kBAAA;AACA,OAAA,gBAAA,CAAoB,GAApB,YAAA,EAAA,YAAA;AACA,OAAA,mBAAA,CAAuB,GAAvB,YAAA,EAAwC,GAAxC,iBAAA,EAAA,KAAA,EAAA,MAAA;;AAEA;AACA,oBAAA,mBAAA,CAAA,4BAAA,CAAiD,UAAA,cAAA,EAAkB;AACjE,qBAAA,MAAA,CAAA,sBAAA,CAAA,OAAA,CAAqD,UAAA,EAAA,EAAM;AACzD,YAAM,UAAU,gBAAA,mBAAA,CAAA,UAAA,CAAhB,EAAgB,CAAhB;AACA,WAAA,WAAA,CAAe,GAAf,UAAA,EAAA,OAAA;AACA,WAAA,UAAA,CAAc,GAAd,UAAA,EAAA,CAAA,EAAgC,GAAhC,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,CAAA,EAA2D,GAA3D,IAAA,EAAoE,GAApE,aAAA,EAAA,IAAA;AAHF,OAAA;AADF,KAAA;AAOD;AACF;;QAEQ,e,GAAA,e;;;;;;;;;;;;;;;AChRT;;;IAGM,QACJ,SAAA,KAAA,GAAc;AAAA,kBAAA,IAAA,EAAA,KAAA;AAEb;AADC;;;AAGF;;;QAGM,K,GAAA,K;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXR,IAAA,UAAA,QAAA,WAAA,CAAA;;;;;;;;;;;;;;;;;;;;AAEA;;;IAGM,Q;;;AACJ;;;AAGA,WAAA,KAAA,CAAA,qBAAA,EAAmC;AAAA,oBAAA,IAAA,EAAA,KAAA;;AAGjC;AAHiC,QAAA,QAAA,2BAAA,IAAA,EAAA,CAAA,MAAA,SAAA,IAAA,OAAA,cAAA,CAAA,KAAA,CAAA,EAAA,IAAA,CAAA,IAAA,EAAA,qBAAA,CAAA,CAAA;;AAIjC,QAAI,IAAA,MAAA,KAAJ,KAAA,EAA0B;AACxB,YAAM,IAAA,SAAA,CAAN,2CAAM,CAAN;AACD;;AAED,UAAA,kBAAA,GAA0B,YAAA;AAAA,aAAM,MAAN,cAAA;AAA1B,KAAA;AACA,UAAA,OAAA,GAAA,EAAA;AACA,UAAA,OAAA,GAAA,IAAA;AAViC,WAAA,KAAA;AAWlC;;;;4BAEO;AACN,WAAA,MAAA,SAAA,CAAA,SAAA,IAAA,OAAA,cAAA,CAAA,MAAA,SAAA,CAAA,EAAA,OAAA,EAAA,IAAA,EAAA,IAAA,CAAA,IAAA;AACA,WAAA,OAAA,CAAA,OAAA,CAAqB,UAAA,KAAA,EAAA;AAAA,eAAS,MAAT,KAAS,EAAT;AAArB,OAAA;AACA,WAAA,OAAA,CAAA,KAAA;AACD;;AAED;;;;;;;mCAIe,W,EAAa,S,EAAW;AACrC,WAAA,MAAA,SAAA,CAAA,SAAA,IAAA,OAAA,cAAA,CAAA,MAAA,SAAA,CAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,IAAA,CAAA,IAAA,EAAA,WAAA,EAAA,SAAA;AACA,WAAA,OAAA,CAAA,MAAA,CAAA,WAAA,EAAA,SAAA;AACD;;AAED;;;;wBACa;AACX,aAAO,KAAP,OAAA;AACD;;;;EAnCiB,QAAA,oB;;QAsCX,K,GAAA,K;;;;;;;;;;;AC3CT,OAAA,IAAA,CAAA,SAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,UAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;;;AACA,OAAA,IAAA,CAAA,OAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,QAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;;;AACA,OAAA,IAAA,CAAA,QAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,SAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;;;AACA,OAAA,IAAA,CAAA,KAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AAAA,MAAA,QAAA,SAAA,IAAA,QAAA,YAAA,EAAA;AAAA,SAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;AAAA,gBAAA,IAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,aAAA,MAAA,GAAA,CAAA;AAAA;AAAA,GAAA;AAAA,CAAA;;;;;;;;;;ACCA,IAAA,QAAA,QAAA,QAAA,CAAA;;AAEA,IAAM,UAAN,SAAA,C,CANA;;;;AAOA,IAAM,mBAAmB,KAAA,EAAA,GAAzB,GAAA;AACA,IAAM,mBAAmB,MAAM,KAA/B,EAAA;AACA,IAAM,UAAU,KAAA,EAAA,GAAhB,CAAA;AACA,IAAM,SAAS,KAAA,EAAA,GAAf,CAAA;;AAEA;;;;AAIA,SAAA,QAAA,CAAA,GAAA,EAAuB;AACrB,SAAO,MAAP,gBAAA;AACD;;AAED;;;;AAIA,SAAA,QAAA,CAAA,GAAA,EAAuB;AACrB,SAAO,MAAP,gBAAA;AACD;;AAED;;;;;;;;AAQA,SAAA,QAAA,CAAA,CAAA,EAAA,CAAA,EAAwB;AACtB,MAAM,OAAO,IAAb,CAAA;AACA,SAAO,CAAC,OAAA,CAAA,GAAA,IAAA,GAAkB,CAAnB,IAAA,IAAP,OAAA;AACD;;AAED;;;;;AAKA,SAAA,aAAA,CAAA,CAAA,EAAA,CAAA,EAA6B;AAC3B,SAAO,EAAA,CAAA,MAAS,EAAT,CAAS,CAAT,IACH,EAAA,CAAA,MAAS,EADN,CACM,CADN,IAEH,EAAA,CAAA,MAAS,EAFb,CAEa,CAFb;AAGD;;AAED;;;;AAIA,SAAA,YAAA,CAAA,CAAA,EAAyB;AACvB,SAAA,MAAW,EAAX,CAAW,CAAX,GAAA,GAAA,GAAmB,EAAnB,CAAmB,CAAnB,GAAA,GAAA,GAA2B,EAA3B,CAA2B,CAA3B,GAAA,GAAA;AACD;;AAED;;;;;;AAMA,SAAA,gBAAA,GAAqC;AAAA,MAAX,QAAW,UAAA,MAAA,GAAA,CAAA,IAAA,UAAA,CAAA,MAAA,SAAA,GAAA,UAAA,CAAA,CAAA,GAAH,CAAG;;AACnC,MAAM,IAAI,KAAV,MAAU,EAAV;AACA,SAAO,cAAA,CAAA,EAAP,KAAO,CAAP;AACD;;AAED;;;;;;;AAOA,SAAA,aAAA,CAAA,CAAA,EAAqC;AAAA,MAAX,QAAW,UAAA,MAAA,GAAA,CAAA,IAAA,UAAA,CAAA,MAAA,SAAA,GAAA,UAAA,CAAA,CAAA,GAAH,CAAG;;AACnC,OAAA,GAAA,CAAA,CAAA,EAAY,KAAA,MAAA,KAAZ,GAAA,EAAiC,KAAA,MAAA,KAAjC,GAAA,EAAsD,KAAA,MAAA,KAAtD,GAAA;AACA,OAAA,SAAA,CAAA,CAAA,EAAA,CAAA;AACA,OAAA,KAAA,CAAA,CAAA,EAAA,CAAA,EAAA,KAAA;AACA,SAAA,CAAA;AACD;;AAED;;;;;;;;;AASA,SAAA,0BAAA,CAAA,KAAA,EAAsD;AAAA,MAAX,QAAW,UAAA,MAAA,GAAA,CAAA,IAAA,UAAA,CAAA,MAAA,SAAA,GAAA,UAAA,CAAA,CAAA,GAAH,CAAG;;AACpD,MAAM,SAAS,KAAf,MAAe,EAAf;AACA,SAAO,wBAAA,MAAA,EAAA,KAAA,EAAP,KAAO,CAAP;AACD;;AAED;;;;;;;;;;AAUA,SAAA,uBAAA,CAAA,MAAA,EAAA,KAAA,EAA2D;AAAA,MAAX,QAAW,UAAA,MAAA,GAAA,CAAA,IAAA,UAAA,CAAA,MAAA,SAAA,GAAA,UAAA,CAAA,CAAA,GAAH,CAAG;;AACzD,gBAAA,MAAA;AACA;AACA;AACA,SAAA,CAAA,IAAY,EAAE,MAAA,CAAA,IAAW,OAAX,CAAW,CAAX,GAAuB,MAAA,CAAA,IAAW,OAApC,CAAoC,CAApC,IAAiD,MAA7D,CAA6D,CAA7D;AACA,OAAA,SAAA,CAAA,MAAA,EAAA,MAAA;AACA,OAAA,KAAA,CAAA,MAAA,EAAA,MAAA,EAAA,KAAA;AACA,SAAA,MAAA;AACD;;AAED;;;;;;AAMA,SAAA,iBAAA,CAAA,GAAA,EAAA,KAAA,EAAuC;AACrC,MAAM,WAAW,KAAjB,MAAiB,EAAjB;AACA,OAAK,IAAI,IAAT,CAAA,EAAgB,IAAhB,CAAA,EAAA,GAAA,EAA4B;AAC1B,QAAM,MAAM,IAAA,CAAA,IAAS,MAAA,CAAA,IAArB,CAAA;AACA,QAAM,MAAM,IAAA,CAAA,IAAS,MAAA,CAAA,IAArB,CAAA;AACA,aAAA,CAAA,IAAc,CAAA,GAAA,MAAA,kBAAA,EAAA,GAAA,EAAd,GAAc,CAAd;AACD;AACD,SAAA,QAAA;AACD;;AAED;;;;;;;;AAQA,SAAA,yBAAA,CAAA,CAAA,EAAA,gBAAA,EAAA,gBAAA,EAA0E;AACxE;AACA,MAAM,eAAN,kBAAA;AACA,OAAA,KAAA,CAAA,YAAA,EAAA,YAAA,EAAA,CAAA;AACA,OAAA,SAAA,CAAA,YAAA,EAAA,YAAA;;AAEA;AACA,MAAM,gBAAgB,CAAA,GAAA,MAAA,kBAAA,EAAA,gBAAA,EAAtB,gBAAsB,CAAtB;;AAEA;AACA,MAAM,WAAW,KAAjB,MAAiB,EAAjB;AACA,OAAA,YAAA,CAAA,QAAA,EAAA,YAAA,EAAA,aAAA;;AAEA;AACA,OAAA,aAAA,CAAA,CAAA,EAAA,CAAA,EAAA,QAAA;AACD;;AAED;;;;;;;AAOA,SAAA,eAAA,CAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAA2C;AACzC,SAAO,KAAA,GAAA,CAAA,GAAA,EACH,EAAA,CAAA,IAAO,EAAA,CAAA,IADJ,KAAA,EAEH,EAAA,CAAA,IAAO,EAAA,CAAA,IAFJ,KAAA,EAGH,EAAA,CAAA,IAAO,EAAA,CAAA,IAHJ,KAAA,EAIH,EAAA,CAAA,IAAO,EAAA,CAAA,IAJX,KAAO,CAAP;AAKD;;AAED;;;;AAIA,SAAA,mBAAA,CAAA,CAAA,EAAgC;AAC9B,MAAI,MAAM,EAAA,CAAA,IAAO,EAAP,CAAO,CAAP,GAAc,EAAd,CAAc,CAAd,GAAqB,EAA/B,CAA+B,CAA/B;AACA,QAAM,MAAM,EAAN,CAAM,CAAN,GAAA,GAAA,GAAmB,EAAzB,CAAyB,CAAzB;AACA,SAAA,GAAA;AACD;;QAGC,O,GAAA,O;QACA,O,GAAA,O;QACA,M,GAAA,M;QACA,Q,GAAA,Q;QACA,Q,GAAA,Q;QACA,Q,GAAA,Q;QACA,a,GAAA,a;QACA,Y,GAAA,Y;QACA,gB,GAAA,gB;QACA,a,GAAA,a;QACA,0B,GAAA,0B;QACA,uB,GAAA,uB;QACA,iB,GAAA,iB;QACA,yB,GAAA,yB;QACA,e,GAAA,e;QACA,mB,GAAA,mB;;;;;;;;;;ACrMF,IAAA,WAAA,QAAA,YAAA,CAAA;;AACA,IAAA,YAAA,QAAA,YAAA,CAAA;;AACA,IAAA,QAAA,QAAA,QAAA,CAAA;;AACA,IAAA,uBAAA,QAAA,iDAAA,CAAA;;AAPA;;;;AASA,IAAI,gBAAJ,EAAA;AACA,IAAI,iBAAJ,EAAA;;AAEA;;;;;AAKA,SAAA,eAAA,CAAA,MAAA,EAAiC;AAC/B,MAAM,SAAS,EAAC,OAAhB,KAAe,EAAf;AACA;AACA,SAAO,OAAA,UAAA,CAAA,OAAA,EAAA,MAAA,KAAsC,OAAA,UAAA,CAAA,oBAAA,EAA7C,MAA6C,CAA7C;AACD;;AAED;;;;;AAKA,SAAA,YAAA,CAAA,EAAA,EAA0B;AACxB,MAAM,SAAS,GAAf,YAAe,EAAf;AACA,MAAI,CAAJ,MAAA,EAAa;AACX,UAAM,IAAA,KAAA,CAAN,8CAAM,CAAN;AACD;AACD,SAAA,MAAA;AACD;AACD;AACA;;;;;;;AAOA,SAAA,iBAAA,CAAA,EAAA,EAAA,OAAA,EAAA,YAAA,EAAsD;AACpD,MAAM,iBAAiB,GAAA,iBAAA,CAAA,OAAA,EAAvB,YAAuB,CAAvB;AACA,MAAI,iBAAJ,CAAA,EAAwB;AACtB,UAAM,IAAA,KAAA,CAAA,uDAAN,YAAM,CAAN;AACD;AACD,SAAA,cAAA;AACD;;AAED;;;;;;;AAOA,SAAA,YAAA,CAAA,EAAA,EAAA,YAAA,EAAA,cAAA,EAAwD;AACtD,MAAM,UAAU,GAAhB,aAAgB,EAAhB;AACA,KAAA,YAAA,CAAA,OAAA,EAAA,YAAA;AACA,KAAA,YAAA,CAAA,OAAA,EAAA,cAAA;AACA,KAAA,WAAA,CAAA,OAAA;;AAEA,MAAI,CAAC,GAAA,mBAAA,CAAA,OAAA,EAAgC,GAArC,WAAK,CAAL,EAAsD;AACpD,QAAM,UAAU,GAAA,iBAAA,CAAhB,OAAgB,CAAhB;AACA,YAAA,KAAA,CAAA,8CAAA,EAAA,OAAA;AACA,UAAM,IAAA,KAAA,CAAN,8CAAM,CAAN;AACD;;AAED,SAAA,OAAA;AACD;;AAED;;;;;;;AAOA,SAAA,WAAA,CAAA,EAAA,EAAA,YAAA,EAAA,gBAAA,EAAyD;AACvD,MAAM,aAAa,mBAAmB,GAAnB,eAAA,GAAwC,GAA3D,aAAA;AACA,MAAM,SAAS,GAAA,YAAA,CAAf,UAAe,CAAf;AACA,KAAA,YAAA,CAAA,MAAA,EAAA,YAAA;AACA,KAAA,aAAA,CAAA,MAAA;;AAEA,MAAI,CAAC,GAAA,kBAAA,CAAA,MAAA,EAA8B,GAAnC,cAAK,CAAL,EAAuD;AACrD,QAAM,UAAU,GAAA,gBAAA,CAAhB,MAAgB,CAAhB;AACA,YAAA,KAAA,CAAA,wCAAA,EAAA,OAAA;AACA,UAAM,IAAA,KAAA,CAAN,wCAAM,CAAN;AACD;;AAED,SAAA,MAAA;AACD;;AAED;;;;;;;;AAQA,SAAA,UAAA,CAAA,EAAA,EAAA,GAAA,EAA6B;AAC3B,SAAO,CAAA,GAAA,MAAA,QAAA,EAAA,GAAA,EAAA,IAAA,CACG,UAAA,YAAA,EAAA;AAAA,WAAgB,YAAA,EAAA,EAAA,YAAA,EAA8B,IAAA,QAAA,CAA9C,OAA8C,CAA9B,CAAhB;AADV,GAAO,CAAP;AAED;;AAED;;;;;;;;;;AAUA,SAAA,WAAA,CAAA,EAAA,EAAA,eAAA,EAAA,iBAAA,EAA6D;AAC3D,SAAO,QAAA,GAAA,CAAY,CAAA,eAAA,EAAA,iBAAA,EAAA,GAAA,CAGT,UAAA,GAAA,EAAA;AAAA,WAAO,WAAA,EAAA,EAAP,GAAO,CAAP;AAHH,GAAY,CAAZ,EAAA,IAAA,CAIG,UAAA,OAAA,EAAW;AACf,QAAM,eAAe,QAArB,CAAqB,CAArB;AACA,QAAM,iBAAiB,QAAvB,CAAuB,CAAvB;;AAEA,WAAO,aAAA,EAAA,EAAA,YAAA,EAAP,cAAO,CAAP;AARN,GAAO,CAAP;AAUD;;AAED;;;;;;;;;;;;;;;AAeA,SAAA,oBAAA,CAAA,EAAA,EAAA,OAAA,EAAA,MAAA,EAAA,KAAA,EAA0D;AACxD,WAAS,UAAU,GAAnB,YAAA;AACA,UAAQ,SAAS,GAAjB,WAAA;AACA,MAAM,aAAa,WAAW,GAAX,YAAA,GAA6B,IAAA,YAAA,CAA7B,OAA6B,CAA7B,GAAyD,IAAA,WAAA,CAA5E,OAA4E,CAA5E;;AAEA,MAAM,SAAS,GAAf,YAAe,EAAf;AACA,KAAA,UAAA,CAAA,MAAA,EAAA,MAAA;AACA,KAAA,UAAA,CAAA,MAAA,EAAA,UAAA,EAAA,KAAA;;AAEA;AACA,MAAI,MAAJ,WAAA,EAAiB;AACf,WAAA,OAAA,GAAA,UAAA;AACD;;AAED,SAAA,MAAA;AACD;;AAED;;;;;;;;;AASA,SAAA,iCAAA,CAAA,MAAA,EAAA,EAAA,EAAA,WAAA,EAA0F;AAAA,MAAtB,iBAAsB,UAAA,MAAA,GAAA,CAAA,IAAA,UAAA,CAAA,MAAA,SAAA,GAAA,UAAA,CAAA,CAAA,GAAL,GAAK;;AACxF,4CAAA,MAAA,EAAA,EAAA;AACA,MAAM,kBACF,CAAA,GAAA,MAAA,QAAA,EAAS,UAAA,CAAA,EAAK;AACZ,8CAAA,MAAA,EAAA,EAAA;AACA;AAFF,GAAA,EADJ,cACI,CADJ;AAKA,SAAA,gBAAA,CAAA,QAAA,EAAA,eAAA;AACD;;AAED;;;;;;;AAOA,SAAA,yCAAA,CAAA,MAAA,EAAA,EAAA,EAA+D;AAC7D;AACA,MAAM,6BAA6B,OAAA,gBAAA,IAAnC,CAAA;AACA,kBAAgB,KAAA,KAAA,CAAW,OAAA,WAAA,GAA3B,0BAAgB,CAAhB;AACA,mBAAiB,KAAA,KAAA,CAAW,OAAA,YAAA,GAA5B,0BAAiB,CAAjB;AACA,SAAA,KAAA,GAAA,aAAA;AACA,SAAA,MAAA,GAAA,cAAA;AACA,KAAA,QAAA,CAAA,CAAA,EAAA,CAAA,EAAA,aAAA,EAAA,cAAA;AACD;;AAED;;;AAGA,SAAA,gBAAA,GAA4B;AAC1B,SAAA,aAAA;AACD;;AAED;;;AAGA,SAAA,iBAAA,GAA6B;AAC3B,SAAA,cAAA;AACD;;AAED;;;;;;AAMA,SAAA,eAAA,CAAA,EAAA,EAAA,WAAA,EAAA,KAAA,EAAA,MAAA,EAAyD;AACvD;AACA;AACA;;AAEA,KAAA,eAAA,CAAmB,GAAnB,WAAA,EAAA,WAAA;AACA;AACA;AACD;;AAED;;;;;;;;;;AAUA,SAAA,iBAAA,CAAA,EAAA,EAAA,OAAA,EAAA,YAAA,EAAsD;AACpD,MAAM,cAAc,GAApB,iBAAoB,EAApB;;AAEA,KAAA,eAAA,CAAmB,GAAnB,WAAA,EAAA,WAAA;AACA,KAAA,oBAAA,CAAwB,GAAxB,WAAA,EAAwC,GAAxC,iBAAA,EAA8D,GAA9D,UAAA,EAAA,OAAA,EAAA,CAAA;;AAEA,MAAA,YAAA,EAAkB;AAChB,OAAA,uBAAA,CAA2B,GAA3B,WAAA,EAA2C,GAA3C,gBAAA,EAAgE,GAAhE,YAAA,EAAA,YAAA;AACD;;AAED,SAAA,WAAA;AACD;;AAED;;;;;;;;AAQA,SAAA,yBAAA,CAAA,EAAA,EAAA,KAAA,EAAA,MAAA,EAAsD;AACpD,UAAQ,SAAR,kBAAA;AACA,WAAS,UAAT,mBAAA;;AAEA;AACA,MAAM,UAAU,GAAhB,aAAgB,EAAhB;AACA,KAAA,WAAA,CAAe,GAAf,UAAA,EAAA,OAAA;AACA,KAAA,aAAA,CAAiB,GAAjB,UAAA,EAAgC,GAAhC,cAAA,EAAmD,GAAnD,aAAA;AACA,KAAA,aAAA,CAAiB,GAAjB,UAAA,EAAgC,GAAhC,cAAA,EAAmD,GAAnD,aAAA;AACA,KAAA,aAAA,CAAiB,GAAjB,UAAA,EAAgC,GAAhC,kBAAA,EAAuD,GAAvD,OAAA;AACA,KAAA,aAAA,CAAiB,GAAjB,UAAA,EAAgC,GAAhC,kBAAA,EAAuD,GAAvD,OAAA;AACA,KAAA,UAAA,CAAc,GAAd,UAAA,EAAA,CAAA,EAAgC,GAAhC,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,CAAA,EAA2D,GAA3D,IAAA,EAAoE,GAApE,aAAA,EAAA,IAAA;;AAEA,SAAA,OAAA;AACD;;AAED;;;;;;;;AAQA,SAAA,kBAAA,CAAA,EAAA,EAAA,KAAA,EAAA,MAAA,EAA+C;AAC7C,UAAQ,SAAR,kBAAA;AACA,WAAS,UAAT,mBAAA;;AAEA,MAAM,eAAe,GAArB,kBAAqB,EAArB;AACA,KAAA,gBAAA,CAAoB,GAApB,YAAA,EAAA,YAAA;AACA,KAAA,mBAAA,CAAuB,GAAvB,YAAA,EAAwC,GAAxC,iBAAA,EAAA,KAAA,EAAA,MAAA;;AAEA,SAAA,YAAA;AACD;;AAED,IAAM,yBAAyB,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAA/B,CAA+B,CAA/B;;AAUA;;;;AAIA,SAAA,6BAAA,CAAA,EAAA,EAA2C;AACzC,MAAM,kBAAkB,qBAAA,EAAA,EAAxB,sBAAwB,CAAxB;AACA,SAAO;AACL,YADK,eAAA;AAEL,UAFK,CAAA;AAGL,UAAM,GAHD,KAAA;AAIL,gBAJK,KAAA;AAKL,YALK,CAAA;AAML,YAAQ;AANH,GAAP;AAQD;;AAED;AACA;AACA;;AAEA;;;;;;;;AAQA,SAAA,uCAAA,CAAA,yBAAA,EAAA,aAAA,EAA2F;AACzF,MAAM,0BAAN,EAAA;;AAEA,OAAK,IAAI,IAAJ,CAAA,EAAW,IAAX,CAAA,EAAkB,IAAlB,CAAA,EAAyB,QAAQ,cAAtC,MAAA,EAA4D,IAA5D,KAAA,EAAuE,KAAK,KAA5E,CAAA,EAAoF;AAClF,QAAI,cAAA,CAAA,IAAJ,CAAA;;AAEA,4BAAA,CAAA,IAA6B,0BAA7B,CAA6B,CAA7B;AACA,4BAAwB,IAAxB,CAAA,IAAiC,0BAA0B,IAA3D,CAAiC,CAAjC;AACA,4BAAwB,IAAxB,CAAA,IAAiC,0BAA0B,IAA3D,CAAiC,CAAjC;AACD;;AAED,SAAA,uBAAA;AACD;;AAED;;;;;;;;;AASA,SAAA,gCAAA,CAAA,QAAA,EAAoD;AAClD,MAAM,UAAU,KAAhB,MAAgB,EAAhB;AACA,MAAM,UAAU,KAAhB,MAAgB,EAAhB;AACA,MAAM,UAAU,KAAhB,MAAgB,EAAhB;AACA,MAAM,UAAU,KAAhB,MAAgB,EAAhB;AACA,MAAM,UAAU,KAAhB,MAAgB,EAAhB;AACA,MAAM,UAAU,KAAhB,MAAgB,EAAhB;AACA,MAAM,UAAU,KAAhB,MAAgB,EAAhB;AACA,MAAM,UAAU,KAAhB,MAAgB,EAAhB;;AAEA,MAAM,UAAN,EAAA;;AAEA;AACA,OAAK,IAAI,IAAJ,CAAA,EAAW,QAAQ,SAAxB,MAAA,EAAyC,IAAzC,KAAA,EAAoD,KAApD,CAAA,EAA4D;AAC1D;AACA,SAAA,GAAA,CAAA,OAAA,EAAkB,SAAS,IAA3B,CAAkB,CAAlB,EAAmC,SAAS,IAA5C,CAAmC,CAAnC,EAAoD,SAAS,IAA7D,CAAoD,CAApD;AACA,SAAA,GAAA,CAAA,OAAA,EAAkB,SAAS,IAA3B,CAAkB,CAAlB,EAAmC,SAAS,IAA5C,CAAmC,CAAnC,EAAoD,SAAS,IAA7D,CAAoD,CAApD;AACA,SAAA,GAAA,CAAA,OAAA,EAAkB,SAAS,IAA3B,CAAkB,CAAlB,EAAmC,SAAS,IAA5C,CAAmC,CAAnC,EAAoD,SAAS,IAA7D,CAAoD,CAApD;;AAEA;AACA,SAAA,QAAA,CAAA,OAAA,EAAA,OAAA,EAAA,OAAA;AACA,SAAA,QAAA,CAAA,OAAA,EAAA,OAAA,EAAA,OAAA;AACA,SAAA,KAAA,CAAA,OAAA,EAAA,OAAA,EAAA,OAAA;AACA,SAAA,SAAA,CAAA,OAAA,EAAA,OAAA;;AAEA,SAAA,QAAA,CAAA,OAAA,EAAA,OAAA,EAAA,OAAA;AACA,SAAA,QAAA,CAAA,OAAA,EAAA,OAAA,EAAA,OAAA;AACA,SAAA,KAAA,CAAA,OAAA,EAAA,OAAA,EAAA,OAAA;AACA,SAAA,SAAA,CAAA,OAAA,EAAA,OAAA;;AAEA,SAAA,QAAA,CAAA,OAAA,EAAA,OAAA,EAAA,OAAA;AACA,SAAA,QAAA,CAAA,OAAA,EAAA,OAAA,EAAA,OAAA;AACA,SAAA,KAAA,CAAA,OAAA,EAAA,OAAA,EAAA,OAAA;AACA,SAAA,SAAA,CAAA,OAAA,EAAA,OAAA;;AAEA;AACA,YAAQ,IAAR,CAAA,IAAiB,QAAjB,CAAiB,CAAjB;AACA,YAAQ,IAAR,CAAA,IAAiB,QAAjB,CAAiB,CAAjB;AACA,YAAQ,IAAR,CAAA,IAAiB,QAAjB,CAAiB,CAAjB;AACA,YAAQ,IAAR,CAAA,IAAiB,QAAjB,CAAiB,CAAjB;AACA,YAAQ,IAAR,CAAA,IAAiB,QAAjB,CAAiB,CAAjB;AACA,YAAQ,IAAR,CAAA,IAAiB,QAAjB,CAAiB,CAAjB;AACA,YAAQ,IAAR,CAAA,IAAiB,QAAjB,CAAiB,CAAjB;AACA,YAAQ,IAAR,CAAA,IAAiB,QAAjB,CAAiB,CAAjB;AACA,YAAQ,IAAR,CAAA,IAAiB,QAAjB,CAAiB,CAAjB;AACD;;AAED,SAAA,OAAA;AACD;;AAED,IAAM,iCAAN,GAAA;;AAEA;;;;;;;AAOA,SAAA,kCAAA,CAAA,eAAA,EAA6D;AAC3D,MAAM,wBAAwB,KAA9B,MAA8B,EAA9B;AACA,MAAM,4BAA4B,KAAlC,MAAkC,EAAlC;AACA,MAAM,qBAAN,EAAA;;AAEA;AACA,OAAK,IAAI,IAAJ,CAAA,EAAW,IAAX,CAAA,EAAkB,QAAQ,gBAA/B,MAAA,EAAuD,IAAvD,KAAA,EAAkE,KAAA,CAAA,EAAQ,KAA1E,CAAA,EAAkF;AAChF,SAAA,GAAA,CAAA,qBAAA,EACI,gBADJ,CACI,CADJ,EACwB,gBAAgB,IADxC,CACwB,CADxB,EACgD,gBAAgB,IADhE,CACgD,CADhD;AAEA,4CAAA,yBAAA,EAAA,qBAAA;AACA,uBAAA,CAAA,IAAwB,0BAAxB,CAAwB,CAAxB;AACA,uBAAmB,IAAnB,CAAA,IAA4B,0BAA5B,CAA4B,CAA5B;AACD;;AAED,wCAAA,kBAAA;;AAEA,SAAA,kBAAA;AACD;;AAED;;;;;;;;;AASA,SAAA,sCAAA,CAAA,eAAA,EAAiE;AAC/D,MAAM,wBAAwB,KAA9B,MAA8B,EAA9B;AACA,MAAM,4BAA4B,KAAlC,MAAkC,EAAlC;AACA,MAAM,qBAAN,EAAA;;AAEA;AACA,OAAK,IAAI,IAAJ,CAAA,EAAW,IAAX,CAAA,EAAkB,QAAQ,gBAA/B,MAAA,EAAuD,IAAvD,KAAA,EAAkE,KAAA,CAAA,EAAQ,KAA1E,CAAA,EAAkF;AAChF,SAAA,GAAA,CAAA,qBAAA,EACI,gBADJ,CACI,CADJ,EACwB,gBAAgB,IADxC,CACwB,CADxB,EACgD,gBAAgB,IADhE,CACgD,CADhD;AAEA,gDAAA,yBAAA,EAAA,qBAAA;AACA,uBAAA,CAAA,IAAwB,0BAAxB,CAAwB,CAAxB;AACA,uBAAmB,IAAnB,CAAA,IAA4B,0BAA5B,CAA4B,CAA5B;AACD;;AAED,wCAAA,kBAAA;;AAEA,SAAA,kBAAA;AACD;;AAED;;;AAGA,SAAA,qCAAA,CAAA,kBAAA,EAAmE;AACjE,MAAI,KAAA,KAAJ,CAAA;AACA,MAAI,KAAA,KAAJ,CAAA;AACA,MAAI,KAAA,KAAJ,CAAA;;AAEA;AACA,OAAK,IAAI,IAAJ,CAAA,EAAW,QAAQ,mBAAxB,MAAA,EAAmD,IAAnD,KAAA,EAA8D,KAA9D,CAAA,EAAsE;AACpE,SAAK,mBAAL,CAAK,CAAL;AACA,SAAK,mBAAmB,IAAxB,CAAK,CAAL;AACA,SAAK,mBAAmB,IAAxB,CAAK,CAAL;;AAEA,QAAI,KAAA,EAAA,GAAA,8BAAA,IAA4C,KAAA,EAAA,GAAhD,8BAAA,EAA0F;AACxF,yBAAA,CAAA;AACD;AACD,QAAI,KAAA,EAAA,GAAA,8BAAA,IAA4C,KAAA,EAAA,GAAhD,8BAAA,EAA0F;AACxF,yBAAmB,IAAnB,CAAA;AACD;AACD,QAAI,KAAA,EAAA,GAAA,8BAAA,IAA4C,KAAA,EAAA,GAAhD,8BAAA,EAA0F;AACxF,yBAAmB,IAAnB,CAAA;AACD;AACF;AACF;;AAED;;;;;;;AAOA,SAAA,uCAAA,CAAA,kBAAA,EAAA,cAAA,EAAqF;AACnF,MAAM,IAAI,eAAV,CAAU,CAAV;AACA,MAAM,IAAI,eAAV,CAAU,CAAV;AACA,MAAM,IAAI,eAAV,CAAU,CAAV;;AAEA,MAAI,YAAA,KAAJ,CAAA;AACA,MAAI,MAAJ,CAAA,EAAa;AACX,gBAAY,KAAA,KAAA,CAAA,CAAA,EAAZ,CAAY,CAAZ;AADF,GAAA,MAEO,IAAI,IAAJ,CAAA,EAAW;AAChB,gBAAY,UAAZ,OAAA;AADK,GAAA,MAEA;AACL,gBAAY,CAAC,UAAb,OAAA;AACD;;AAED,MAAM,IAAI,CAAC,YAAY,KAAb,EAAA,IAAwB,UAAlC,MAAA;;AAEA;AACA;;AAEA;AACA;AACA,MAAM,IAAI,CAAC,IAAD,CAAA,IAAV,GAAA;;AAEA,qBAAA,CAAA,IAAA,CAAA;AACA,qBAAA,CAAA,IAAA,CAAA;AACD;;AAED;;;;;;;;;AASA,SAAA,2CAAA,CAAA,kBAAA,EAAA,cAAA,EAAyF;AACvF,MAAM,IAAI,eAAV,CAAU,CAAV;AACA,MAAM,IAAI,eAAV,CAAU,CAAV;AACA,MAAM,IAAI,eAAV,CAAU,CAAV;;AAEA,MAAI,YAAA,KAAJ,CAAA;AACA,MAAI,MAAJ,CAAA,EAAa;AACX,gBAAY,KAAA,KAAA,CAAA,CAAA,EAAZ,CAAY,CAAZ;AADF,GAAA,MAEO,IAAI,IAAJ,CAAA,EAAW;AAChB,gBAAY,UAAZ,OAAA;AADK,GAAA,MAEA;AACL,gBAAY,CAAC,UAAb,OAAA;AACD;;AAED,MAAM,IAAI,CAAC,YAAY,KAAb,EAAA,IAAwB,UAAlC,MAAA;;AAEA,MAAM,IAAI,IAAA,CAAA,GAAA,CAAA,GAAV,CAAA;;AAEA,qBAAA,CAAA,IAAA,CAAA;AACA,qBAAA,CAAA,IAAA,CAAA;AACD;;AAED;;;;;;;;;;AAUA,SAAA,sCAAA,CAAA,kBAAA,EAAA,gBAAA,EAAsF;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAO;AACL,qBADK,kBAAA;AAEL,mBAAe;AAFV,GAAP;AAID;;AAED;;;;;;;;AAQA,SAAA,eAAA,CAAA,cAAA,EAAA,YAAA,EAAA,UAAA,EAAmE;AACjE,MAAM,eAAe,6BAAA,cAAA,EAAA,YAAA,EAArB,UAAqB,CAArB;;AAEA;AACA;AACA,MAAM,sBAAsB,8CAA5B,YAA4B,CAA5B;;AAEA;AACA,sBAAoB,oBAApB,eAAA,EAAyD,oBAAzD,eAAA;;AAEA,SAAA,mBAAA;AACD;;AAED;;;;;;;;;;;;AAYA,SAAA,4BAAA,CAAA,cAAA,EAAA,YAAA,EAAA,UAAA,EAAgF;AAC9E,MAAM,uBAAuB,aACvB,wCAAA,YAAA,EADuB,UACvB,CADuB,GAA7B,YAAA;;AAIA,MAAM,eAAN,EAAA;AACA,MAAM,IAAI,KAAV,MAAU,EAAV;AACA,MAAM,IAAI,KAAV,MAAU,EAAV;AACA,MAAM,IAAI,KAAV,MAAU,EAAV;AACA,MAAM,OAAO,KAAb,MAAa,EAAb;AACA,MAAM,OAAO,KAAb,MAAa,EAAb;AACA,MAAM,OAAO,KAAb,MAAa,EAAb;AACA,MAAM,WAAW,KAAjB,MAAiB,EAAjB;AACA,MAAM,cAAc,KAApB,MAAoB,EAApB;AACA,MAAM,iBAAiB,KAAvB,MAAuB,EAAvB;AACA,MAAM,gBAAgB,KAAtB,MAAsB,EAAtB;AACA,MAAM,sBAAsB,KAA5B,MAA4B,EAA5B;AACA,MAAM,UAAU,KAAhB,MAAgB,EAAhB;;AAEA,MAAI,WAAA,KAAJ,CAAA;AACA,MAAI,QAAA,KAAJ,CAAA;AACA,MAAI,WAAA,KAAJ,CAAA;AACA,MAAI,WAAA,KAAJ,CAAA;AACA,MAAI,cAAA,KAAJ,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAK,WAAA,CAAA,EAAc,WAAd,CAAA,EAA4B,QAAQ,qBAAzC,MAAA,EACK,WADL,KAAA,EAEK,YAFL,CAAA,EAEoB;AAClB;AACA,SAAA,GAAA,CAAA,CAAA,EACI,qBADJ,QACI,CADJ,EAEI,qBAAqB,WAFzB,CAEI,CAFJ,EAGI,qBAAqB,WAHzB,CAGI,CAHJ;AAIA,SAAA,GAAA,CAAA,CAAA,EACI,qBAAqB,WADzB,CACI,CADJ,EAEI,qBAAqB,WAFzB,CAEI,CAFJ,EAGI,qBAAqB,WAHzB,CAGI,CAHJ;AAIA,SAAA,GAAA,CAAA,CAAA,EACI,qBAAqB,WADzB,CACI,CADJ,EAEI,qBAAqB,WAFzB,CAEI,CAFJ,EAGI,qBAAqB,WAHzB,CAGI,CAHJ;;AAKA,SAAA,QAAA,CAAA,IAAA,EAAA,CAAA,EAAA,CAAA;AACA,SAAA,QAAA,CAAA,IAAA,EAAA,CAAA,EAAA,CAAA;AACA,SAAA,QAAA,CAAA,IAAA,EAAA,CAAA,EAAA,CAAA;;AAEA,SAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EAA2B,IAA3B,cAAA;AACA,SAAA,KAAA,CAAA,WAAA,EAAA,IAAA,EAA8B,IAA9B,cAAA;AACA,SAAA,KAAA,CAAA,cAAA,EAAA,IAAA,EAAiC,IAAjC,cAAA;;AAEA;AACA,SAAK,WAAL,CAAA,EAAmB,WAAnB,cAAA,EAAA,UAAA,EAA0D;AACxD,WAAA,WAAA,CAAA,aAAA,EAAA,CAAA,EAAA,QAAA,EAAA,QAAA;;AAEA;AACA,mBAAA,UAAA,IAA2B,cAA3B,CAA2B,CAA3B;AACA,mBAAA,UAAA,IAA2B,cAA3B,CAA2B,CAA3B;AACA,mBAAA,UAAA,IAA2B,cAA3B,CAA2B,CAA3B;AACA,WAAA,GAAA,CAAA,OAAA,EAAA,aAAA,EAAA,QAAA;AACA,mBAAA,UAAA,IAA2B,QAA3B,CAA2B,CAA3B;AACA,mBAAA,UAAA,IAA2B,QAA3B,CAA2B,CAA3B;AACA,mBAAA,UAAA,IAA2B,QAA3B,CAA2B,CAA3B;AACA,WAAA,GAAA,CAAA,OAAA,EAAA,aAAA,EAAA,cAAA;AACA,mBAAA,UAAA,IAA2B,QAA3B,CAA2B,CAA3B;AACA,mBAAA,UAAA,IAA2B,QAA3B,CAA2B,CAA3B;AACA,mBAAA,UAAA,IAA2B,QAA3B,CAA2B,CAA3B;;AAEA;AACA,WAAK,cAAL,CAAA,EAAsB,eAAtB,QAAA,EAAA,aAAA,EAA8D;AAC5D,aAAA,WAAA,CAAA,mBAAA,EAAA,aAAA,EAAA,WAAA,EAAA,WAAA;;AAEA,qBAAA,UAAA,IAA2B,oBAA3B,CAA2B,CAA3B;AACA,qBAAA,UAAA,IAA2B,oBAA3B,CAA2B,CAA3B;AACA,qBAAA,UAAA,IAA2B,oBAA3B,CAA2B,CAA3B;AACA,aAAA,QAAA,CAAA,OAAA,EAAA,mBAAA,EAAA,WAAA;AACA,qBAAA,UAAA,IAA2B,QAA3B,CAA2B,CAA3B;AACA,qBAAA,UAAA,IAA2B,QAA3B,CAA2B,CAA3B;AACA,qBAAA,UAAA,IAA2B,QAA3B,CAA2B,CAA3B;AACA,aAAA,GAAA,CAAA,OAAA,EAAA,mBAAA,EAAA,QAAA;AACA,qBAAA,UAAA,IAA2B,QAA3B,CAA2B,CAA3B;AACA,qBAAA,UAAA,IAA2B,QAA3B,CAA2B,CAA3B;AACA,qBAAA,UAAA,IAA2B,QAA3B,CAA2B,CAA3B;;AAEA,qBAAA,UAAA,IAA2B,oBAA3B,CAA2B,CAA3B;AACA,qBAAA,UAAA,IAA2B,oBAA3B,CAA2B,CAA3B;AACA,qBAAA,UAAA,IAA2B,oBAA3B,CAA2B,CAA3B;AACA,aAAA,GAAA,CAAA,OAAA,EAAA,mBAAA,EAAA,QAAA;AACA,qBAAA,UAAA,IAA2B,QAA3B,CAA2B,CAA3B;AACA,qBAAA,UAAA,IAA2B,QAA3B,CAA2B,CAA3B;AACA,qBAAA,UAAA,IAA2B,QAA3B,CAA2B,CAA3B;AACA,aAAA,GAAA,CAAA,OAAA,EAAA,mBAAA,EAAA,cAAA;AACA,qBAAA,UAAA,IAA2B,QAA3B,CAA2B,CAA3B;AACA,qBAAA,UAAA,IAA2B,QAA3B,CAA2B,CAA3B;AACA,qBAAA,UAAA,IAA2B,QAA3B,CAA2B,CAA3B;AACD;AACF;AACF;;AAED,SAAA,YAAA;AACD;;AAED;;;;;;;AAOA,SAAA,mBAAA,CAAA,GAAA,EAAA,SAAA,EAA6C;AAC3C,MAAM,UAAU,KAAhB,MAAgB,EAAhB;;AAEA,OAAK,IAAI,IAAJ,CAAA,EAAW,QAAQ,UAAxB,MAAA,EAA0C,IAA1C,KAAA,EAAqD,KAArD,CAAA,EAA6D;AAC3D,SAAA,GAAA,CAAA,OAAA,EAAkB,UAAlB,CAAkB,CAAlB,EAAgC,UAAU,IAA1C,CAAgC,CAAhC,EAAkD,UAAU,IAA5D,CAAkD,CAAlD;;AAEA,SAAA,SAAA,CAAA,OAAA,EAAA,OAAA;;AAEA,QAAA,CAAA,IAAS,QAAT,CAAS,CAAT;AACA,QAAI,IAAJ,CAAA,IAAa,QAAb,CAAa,CAAb;AACA,QAAI,IAAJ,CAAA,IAAa,QAAb,CAAa,CAAb;AACD;AACF;;AAED;;;;;;;;;;;;;;AAcA,SAAA,6CAAA,CAAA,kBAAA,EAA2E;AACzE,MAAM,kBAAN,EAAA;AACA,MAAM,gBAAN,EAAA;;AAEA,MAAM,mBAAmB,IAAI,SAAJ,OAAA,CAAzB,mBAAyB,CAAzB;AACA,MAAM,SAAS,KAAf,MAAe,EAAf;AACA,MAAI,qBAAA,KAAJ,CAAA;AACA,MAAI,qBAAA,KAAJ,CAAA;AACA,MAAI,iBAAA,KAAJ,CAAA;;AAEA;AACA,OAAK,qBAAA,CAAA,EAAwB,qBAAqB,mBAAlD,MAAA,EACK,qBADL,kBAAA,EAEK,sBAFL,CAAA,EAE8B;AAC5B,SAAA,GAAA,CAAA,MAAA,EACI,mBADJ,kBACI,CADJ,EAEI,mBAAmB,qBAFvB,CAEI,CAFJ,EAGI,mBAAmB,qBAHvB,CAGI,CAHJ;;AAKA;AACA,QAAI,CAAC,iBAAA,GAAA,CAAL,MAAK,CAAL,EAAmC;AACjC;AACA,uBAAiB,gBAAA,MAAA,GAAjB,CAAA;AACA,uBAAA,GAAA,CAAA,MAAA,EAAA,cAAA;;AAEA;AACA,sBAAA,IAAA,CAAqB,OAArB,CAAqB,CAArB;AACA,sBAAA,IAAA,CAAqB,OAArB,CAAqB,CAArB;AACA,sBAAA,IAAA,CAAqB,OAArB,CAAqB,CAArB;AACD;;AAED,qBAAiB,iBAAA,GAAA,CAAjB,MAAiB,CAAjB;;AAEA;AACA,kBAAA,IAAA,CAAA,cAAA;AACD;;AAED,SAAO;AACL,qBADK,eAAA;AAEL,mBAAe;AAFV,GAAP;AAID;;AAED,IAAM,wCAAN,CAAA;;AAEA;AACA;AACA;AACA,IAAM,UAAU,KAAhB,MAAgB,EAAhB;;AAEA;;;;;;;;;;;AAWA,SAAA,mBAAA,CAAA,MAAA,EAAqC;AACnC,SAAU,CAAC,OAAA,CAAA,IAAD,OAAA,EAAA,OAAA,CAAH,qCAAG,IAAH,GAAG,IACH,CAAC,OAAA,CAAA,IAAD,OAAA,EAAA,OAAA,CADA,qCACA,IADA,GAAG,KAAH,KAEA,CAAC,OAAA,CAAA,IAAD,OAAA,EAAA,OAAA,CAFP,qCAEO,CAFG,CAAV;AAGD;;AAED;;;;;;;;;;;;;;;;AAgBA,SAAA,yBAAA,CAAA,eAAA,EAAA,aAAA,EAAA,UAAA,EAAA,iBAAA,EAAA,eAAA,EAAA,YAAA,EACqF;AACnF,MAAM,kBAAN,EAAA;AACA,MAAI,uBAAJ,CAAA;;AAEA,MAAI,aAAA,KAAJ,CAAA;AACA,MAAI,eAAA,KAAJ,CAAA;AACA,MAAI,aAAA,KAAJ,CAAA;AACA,MAAI,aAAA,KAAJ,CAAA;AACA,MAAI,eAAA,KAAJ,CAAA;AACA,MAAI,eAAA,KAAJ,CAAA;AACA,MAAI,KAAA,KAAJ,CAAA;AACA,MAAI,KAAA,KAAJ,CAAA;AACA,MAAI,KAAA,KAAJ,CAAA;AACA,MAAI,KAAA,KAAJ,CAAA;AACA,MAAI,KAAA,KAAJ,CAAA;AACA,MAAI,KAAA,KAAJ,CAAA;AACA,MAAI,KAAA,KAAJ,CAAA;AACA,MAAI,KAAA,KAAJ,CAAA;AACA,MAAI,KAAA,KAAJ,CAAA;AACA,MAAI,KAAA,KAAJ,CAAA;AACA,MAAI,KAAA,KAAJ,CAAA;AACA,MAAI,KAAA,KAAJ,CAAA;;AAEA;AACA;;AAEA;AACA,OAAK,aAAL,eAAA,EAAmC,aAAnC,aAAA,EAAA,YAAA,EAA6E;AAC3E,iBAAa,aAAb,UAAA;AACA,iBAAa,aAAb,UAAA;;AAEA;AACA,SAAK,eAAL,iBAAA,EAAuC,eAAvC,eAAA,EAAA,cAAA,EAAuF;AACrF,qBAAe,eAAf,YAAA;AACA,qBAAe,eAAf,YAAA;;AAEA;;AAEA,WAAK,KAAA,GAAA,CAAA,UAAA,IAAuB,KAAA,GAAA,CAA5B,YAA4B,CAA5B;AACA,WAAK,KAAA,GAAA,CAAA,UAAA,IAAuB,KAAA,GAAA,CAA5B,YAA4B,CAA5B;AACA,WAAK,KAAA,GAAA,CAAL,UAAK,CAAL;;AAEA,WAAK,KAAA,GAAA,CAAA,UAAA,IAAuB,KAAA,GAAA,CAA5B,YAA4B,CAA5B;AACA,WAAK,KAAA,GAAA,CAAA,UAAA,IAAuB,KAAA,GAAA,CAA5B,YAA4B,CAA5B;AACA,WAAK,KAAA,GAAA,CAAL,UAAK,CAAL;;AAEA,WAAK,KAAA,GAAA,CAAA,UAAA,IAAuB,KAAA,GAAA,CAA5B,YAA4B,CAA5B;AACA,WAAK,KAAA,GAAA,CAAA,UAAA,IAAuB,KAAA,GAAA,CAA5B,YAA4B,CAA5B;AACA,WAAK,KAAA,GAAA,CAAL,UAAK,CAAL;;AAEA,WAAK,KAAA,GAAA,CAAA,UAAA,IAAuB,KAAA,GAAA,CAA5B,YAA4B,CAA5B;AACA,WAAK,KAAA,GAAA,CAAA,UAAA,IAAuB,KAAA,GAAA,CAA5B,YAA4B,CAA5B;AACA,WAAK,KAAA,GAAA,CAAL,UAAK,CAAL;;AAEA;;AAEA,sBAAA,oBAAA,IAAA,EAAA;AACA,sBAAgB,uBAAhB,CAAA,IAAA,EAAA;AACA,sBAAgB,uBAAhB,CAAA,IAAA,EAAA;AACA,sBAAgB,uBAAhB,CAAA,IAAA,EAAA;AACA,sBAAgB,uBAAhB,CAAA,IAAA,EAAA;AACA,sBAAgB,uBAAhB,CAAA,IAAA,EAAA;AACA,sBAAgB,uBAAhB,CAAA,IAAA,EAAA;AACA,sBAAgB,uBAAhB,CAAA,IAAA,EAAA;AACA,sBAAgB,uBAAhB,CAAA,IAAA,EAAA;;AAEA;;AAEA,sBAAgB,uBAAhB,CAAA,IAAA,EAAA;AACA,sBAAgB,uBAAhB,EAAA,IAAA,EAAA;AACA,sBAAgB,uBAAhB,EAAA,IAAA,EAAA;AACA,sBAAgB,uBAAhB,EAAA,IAAA,EAAA;AACA,sBAAgB,uBAAhB,EAAA,IAAA,EAAA;AACA,sBAAgB,uBAAhB,EAAA,IAAA,EAAA;AACA,sBAAgB,uBAAhB,EAAA,IAAA,EAAA;AACA,sBAAgB,uBAAhB,EAAA,IAAA,EAAA;AACA,sBAAgB,uBAAhB,EAAA,IAAA,EAAA;;AAEA,8BAAA,EAAA;AACD;AACF;;AAED,SAAA,eAAA;AACD;;AAED;;;;;;;;;;;;;AAaA,SAAA,2BAAA,CAAA,cAAA,EAAA,WAAA,EAAA,UAAA,EAAA,QAAA,EAAA,KAAA,EAA+F;AAC7F,MAAM,kBAAN,EAAA;AACA,MAAI,uBAAJ,CAAA;;AAEA,MAAI,QAAA,KAAJ,CAAA;AACA,MAAI,eAAA,KAAJ,CAAA;AACA,MAAI,eAAA,KAAJ,CAAA;AACA,MAAI,KAAA,KAAJ,CAAA;AACA,MAAI,KAAA,KAAJ,CAAA;AACA,MAAI,KAAA,KAAJ,CAAA;AACA,MAAI,KAAA,KAAJ,CAAA;AACA,MAAI,KAAA,KAAJ,CAAA;AACA,MAAI,KAAA,KAAJ,CAAA;AACA,MAAI,KAAA,KAAJ,CAAA;AACA,MAAI,KAAA,KAAJ,CAAA;AACA,MAAI,KAAA,KAAJ,CAAA;AACA,MAAI,KAAA,KAAJ,CAAA;AACA,MAAI,KAAA,KAAJ,CAAA;AACA,MAAI,KAAA,KAAJ,CAAA;;AAEA;AACA,OAAK,QAAL,UAAA,EAAyB,QAAzB,QAAA,EAAA,OAAA,EAAoD;AAClD,mBAAe,QAAf,KAAA;AACA,mBAAe,QAAf,YAAA;;AAEA;;AAEA,SAAK,KAAA,GAAA,CAAL,YAAK,CAAL;AACA,SAAK,KAAA,GAAA,CAAL,YAAK,CAAL;AACA,SAAA,cAAA;;AAEA,SAAK,KAAA,GAAA,CAAL,YAAK,CAAL;AACA,SAAK,KAAA,GAAA,CAAL,YAAK,CAAL;AACA,SAAA,WAAA;;AAEA,SAAK,KAAA,GAAA,CAAL,YAAK,CAAL;AACA,SAAK,KAAA,GAAA,CAAL,YAAK,CAAL;AACA,SAAA,cAAA;;AAEA,SAAK,KAAA,GAAA,CAAL,YAAK,CAAL;AACA,SAAK,KAAA,GAAA,CAAL,YAAK,CAAL;AACA,SAAA,WAAA;;AAEA;;AAEA,oBAAA,oBAAA,IAAA,EAAA;AACA,oBAAgB,uBAAhB,CAAA,IAAA,EAAA;AACA,oBAAgB,uBAAhB,CAAA,IAAA,EAAA;AACA,oBAAgB,uBAAhB,CAAA,IAAA,EAAA;AACA,oBAAgB,uBAAhB,CAAA,IAAA,EAAA;AACA,oBAAgB,uBAAhB,CAAA,IAAA,EAAA;AACA,oBAAgB,uBAAhB,CAAA,IAAA,EAAA;AACA,oBAAgB,uBAAhB,CAAA,IAAA,EAAA;AACA,oBAAgB,uBAAhB,CAAA,IAAA,EAAA;;AAEA;;AAEA,oBAAgB,uBAAhB,CAAA,IAAA,EAAA;AACA,oBAAgB,uBAAhB,EAAA,IAAA,EAAA;AACA,oBAAgB,uBAAhB,EAAA,IAAA,EAAA;AACA,oBAAgB,uBAAhB,EAAA,IAAA,EAAA;AACA,oBAAgB,uBAAhB,EAAA,IAAA,EAAA;AACA,oBAAgB,uBAAhB,EAAA,IAAA,EAAA;AACA,oBAAgB,uBAAhB,EAAA,IAAA,EAAA;AACA,oBAAgB,uBAAhB,EAAA,IAAA,EAAA;AACA,oBAAgB,uBAAhB,EAAA,IAAA,EAAA;;AAEA,4BAAA,EAAA;AACD;;AAED,SAAA,eAAA;AACD;;AAED;;;;;;;;;;;;AAYA,SAAA,2BAAA,CAAA,eAAA,EAAA,UAAA,EAAA,QAAA,EAAA,KAAA,EAAA,SAAA,EAA8F;AAC5F,MAAM,SAAS,MAAf,CAAe,CAAf;AACA,MAAM,SAAS,MAAf,CAAe,CAAf;AACA,MAAM,SAAS,MAAf,CAAe,CAAf;AACA,MAAM,aAAa,UAAnB,CAAmB,CAAnB;AACA,MAAM,aAAa,UAAnB,CAAmB,CAAnB;AACA,MAAM,aAAa,UAAnB,CAAmB,CAAnB;;AAEA,OAAK,IAAI,IAAT,UAAA,EAAyB,IAAzB,QAAA,EAAuC,KAAvC,CAAA,EAA+C;AAC7C,oBAAA,CAAA,IAAqB,gBAAA,CAAA,IAAA,MAAA,GAArB,UAAA;AACA,oBAAgB,IAAhB,CAAA,IAAyB,gBAAgB,IAAhB,CAAA,IAAA,MAAA,GAAzB,UAAA;AACA,oBAAgB,IAAhB,CAAA,IAAyB,gBAAgB,IAAhB,CAAA,IAAA,MAAA,GAAzB,UAAA;AACD;AACF;;AAED;;QAGE,gB,GAAA,gB;QACA,iB,GAAA,iB;QACA,e,GAAA,e;QACA,Y,GAAA,Y;QACA,iB,GAAA,iB;QACA,Y,GAAA,Y;QACA,W,GAAA,W;QACA,U,GAAA,U;QACA,W,GAAA,W;QACA,oB,GAAA,oB;QACA,iC,GAAA,iC;QACA,e,GAAA,e;QACA,iB,GAAA,iB;QACA,yB,GAAA,yB;QACA,kB,GAAA,kB;QACA,6B,GAAA,6B;QAEA,uC,GAAA,uC;QACA,gC,GAAA,gC;QACA,kC,GAAA,kC;QACA,sC,GAAA,sC;QACA,sC,GAAA,sC;QACA,e,GAAA,e;QACA,6C,GAAA,6C;QACA,yB,GAAA,yB;QACA,2B,GAAA,2B;QACA,2B,GAAA,2B;;AAGF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACplCA;;;IAGM,U;AACJ;;;AAGA,WAAA,OAAA,CAAA,YAAA,EAA0B;AAAA,oBAAA,IAAA,EAAA,OAAA;;AACxB,SAAA,aAAA,GAAA,YAAA;AACA,SAAA,IAAA,GAAY,IAAZ,GAAY,EAAZ;AACD;;AAED;;;;;;;wBAII,G,EAAK,K,EAAO;AACd,UAAM,WAAW,KAAA,aAAA,CAAjB,GAAiB,CAAjB;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,QAAA,EAAA,KAAA;AACD;;AAED;;;;;;;wBAII,G,EAAK;AACP,UAAM,WAAW,KAAA,aAAA,CAAjB,GAAiB,CAAjB;AACA,aAAO,KAAA,IAAA,CAAA,GAAA,CAAP,QAAO,CAAP;AACD;;AAED;;;;;;;wBAII,G,EAAK;AACP,UAAM,WAAW,KAAA,aAAA,CAAjB,GAAiB,CAAjB;AACA,aAAO,KAAA,IAAA,CAAA,GAAA,CAAP,QAAO,CAAP;AACD;;AAED;;;;;;;2BAIO,I,EAAM;AACX,aAAO,KAAA,IAAA,CAAA,MAAA,CAAP,IAAO,CAAP;AACD;;AAED;;;;;;4BAGQ,Q,EAAU;AAChB,WAAA,IAAA,CAAA,OAAA,CAAA,QAAA;AACD;;;4BAEO;AACN,WAAA,IAAA,CAAA,KAAA;AACD;;AAED;;;;;;wBAGW;AACT,aAAO,KAAA,IAAA,CAAP,IAAA;AACD;;;;;;QAGK,O,GAAA,O;;;;;;;;;;;;;;;;;AClER;;;;AAIA;AACA,IAAM,cAAN,IAAA;;AAEA;;;;;;;AAOA,SAAA,2BAAA,CAAA,QAAA,EAAA,MAAA,EAAA,QAAA,EAAiE;AAC/D,WAAA,OAAA,CAAiB,UAAA,OAAA,EAAW;AAC1B,WAAA,OAAA,CAAe,UAAA,KAAA,EAAS;AACtB,cAAA,gBAAA,CAAA,KAAA,EAAA,QAAA,EAAA,KAAA;AADF,KAAA;AADF,GAAA;AAKD;;AAED;;;;;;;;;;AAUA,SAAA,aAAA,CAAA,OAAA,EAAA,MAAA,EAAA,EAAA,EAAA,OAAA,EAAqD;AACnD,MAAM,UAAU,SAAA,aAAA,CAAhB,OAAgB,CAAhB;AACA,MAAA,MAAA,EAAY;AACV,WAAA,WAAA,CAAA,OAAA;AACD;AACD,MAAA,EAAA,EAAQ;AACN,YAAA,EAAA,GAAA,EAAA;AACD;AACD,MAAA,OAAA,EAAa;AACX,YAAA,OAAA,CAAgB,UAAA,SAAA,EAAA;AAAA,aAAa,SAAA,OAAA,EAAb,SAAa,CAAb;AAAhB,KAAA;AACD;AACD,SAAA,OAAA;AACD;;AAED;;;;;;;AAOA,SAAA,aAAA,CAAA,OAAA,EAAA,SAAA,EAA2C;AACzC,MAAI,aAAA,KAAJ,CAAA;AACA,MAAI,gBAAA,KAAJ,CAAA;AACA,eAAa,QAAA,SAAA,CAAA,OAAA,CAAb,SAAa,CAAb;AACA,MAAI,cAAJ,CAAA,EAAqB;AACnB,QAAI,eAAA,CAAA,IAAoB,QAAA,SAAA,CAAkB,aAAlB,CAAA,MAAxB,GAAA,EAAmE;AACjE,sBAAgB,aAAa,UAA7B,MAAA;AACA,UAAI,kBAAkB,QAAA,SAAA,CAAlB,MAAA,IACF,QAAA,SAAA,CAAA,aAAA,MADF,GAAA,EAC4C;AAC1C,eAAA,IAAA;AACD;AACF;AACF;AACD,SAAA,KAAA;AACD;;AAED;;;;;;;;;;AAUA,SAAA,WAAA,CAAA,OAAA,EAAA,SAAA,EAAA,OAAA,EAAkD;AAChD,MAAI,OAAA,OAAA,KAAJ,WAAA,EAAoC;AAClC,QAAI,cAAA,OAAA,EAAJ,SAAI,CAAJ,EAAuC;AACrC,kBAAA,OAAA,EAAA,SAAA;AADF,KAAA,MAGK;AACH,eAAA,OAAA,EAAA,SAAA;AACD;AANH,GAAA,MAQK,IAAA,OAAA,EAAa;AAChB,aAAA,OAAA,EAAA,SAAA;AADG,GAAA,MAGA;AACH,gBAAA,OAAA,EAAA,SAAA;AACD;AACF;;AAED;;;;;;;AAOA,SAAA,aAAA,CAAA,OAAA,EAAgC;AAC9B,MAAI,IAAJ,CAAA;AACA,MAAI,IAAJ,CAAA;AACA,SAAA,OAAA,EAAgB;AACd,SAAK,QAAL,UAAA;AACA,SAAK,QAAL,SAAA;AACA,cAAU,QAAV,YAAA;AACD;AACD,OAAK,SAAA,eAAA,CAAL,UAAA;AACA,OAAK,SAAA,eAAA,CAAL,SAAA;AACA,SAAO,EAAE,GAAF,CAAA,EAAQ,GAAf,CAAO,EAAP;AACD;;AAED;;;;;AAKA,SAAA,eAAA,GAA2B;AACzB,MAAI,IAAA,KAAJ,CAAA;AACA,MAAI,IAAA,KAAJ,CAAA;AACA,MAAI,OAAO,OAAP,UAAA,KAAJ,WAAA,EAA8C;AAC5C;AACA,QAAI,OAAJ,UAAA;AACA,QAAI,OAAJ,WAAA;AAHF,GAAA,MAKK,IAAI,OAAO,SAAP,eAAA,KAAA,WAAA,IACP,OAAO,SAAA,eAAA,CAAP,WAAA,KADO,WAAA,IAEP,SAAA,eAAA,CAAA,WAAA,KAFG,CAAA,EAEyC;AAC5C;AACA,QAAI,SAAA,eAAA,CAAJ,WAAA;AACA,QAAI,SAAA,eAAA,CAAJ,YAAA;AALG,GAAA,MAOA;AACH;AACA,QAAI,SAAA,oBAAA,CAAA,MAAA,EAAA,CAAA,EAAJ,WAAA;AACA,QAAI,SAAA,oBAAA,CAAA,MAAA,EAAA,CAAA,EAAJ,YAAA;AACD;AACD,SAAO,EAAE,GAAF,CAAA,EAAQ,GAAf,CAAO,EAAP;AACD;;AAED;;;;;;;;AAQA,SAAA,oBAAA,CAAA,MAAA,EAAA,KAAA,EAA6C;AAC3C,MAAI,SAAS,MAAA,UAAA,KAAb,MAAA,EAA0C;AACxC,WAAA,WAAA,CAAA,KAAA;AACA,WAAA,IAAA;AACD;AACD,SAAA,KAAA;AACD;;AAED;;;;;;AAMA,SAAA,QAAA,CAAA,OAAA,EAAA,SAAA,EAAsC;AACpC,UAAA,YAAA,CAAA,OAAA,EAA8B,QAAA,SAAA,GAAA,GAAA,GAA9B,SAAA;AACD;;AAED;;;;;;AAMA,SAAA,WAAA,CAAA,OAAA,EAAA,SAAA,EAAyC;AACvC,UAAA,YAAA,CAAA,OAAA,EACE,QAAA,SAAA,CAAA,KAAA,CAAA,GAAA,EAAA,MAAA,CAEQ,UAAA,KAAA,EAAA;AAAA,WAAS,UAAT,SAAA;AAFR,GAAA,EAAA,IAAA,CADF,GACE,CADF;AAKD;;AAED;;;;;AAKA,SAAA,YAAA,CAAA,OAAA,EAA+B;AAC7B,UAAA,SAAA,GAAA,EAAA;AACD;;AAED;;;;;;;;;;;;AAYA,SAAA,YAAA,CAAA,IAAA,EAAA,OAAA,EAAA,MAAA,EAAA,EAAA,EAAA,OAAA,EAA0D;AACxD,MAAI,aAAA,KAAJ,CAAA;AACA,MAAI,QAAA,KAAJ,CAAA;AACA,WAAS,UAAU,SAAA,oBAAA,CAAA,MAAA,EAAnB,CAAmB,CAAnB;AACA,eAAa,cAAA,OAAA,EAAA,IAAA,EAAA,EAAA,EAAb,OAAa,CAAb;AACA,aAAA,KAAA,CAAA,QAAA,GAAA,UAAA;AACA,aAAA,KAAA,CAAA,UAAA,GAAA,QAAA;AACA,aAAA,KAAA,CAAA,UAAA,GAAA,QAAA;AACA,SAAA,WAAA,CAAA,UAAA;AACA,aAAA,SAAA,GAAA,IAAA;AACA,UAAQ,WAAR,WAAA;AACA,SAAA,WAAA,CAAA,UAAA;AACA,SAAA,KAAA;AACD;;AAED;;;;;;;AAOA,SAAA,iBAAA,CAAA,SAAA,EAAsC;AACpC,MAAI,YAAA,KAAJ,CAAA;AACA,MAAI,gBAAA,KAAJ,CAAA;AACA,kBAAA,EAAA;AACA,OAAA,SAAA,IAAA,SAAA,EAA6B;AAC3B,QAAI,UAAA,cAAA,CAAJ,SAAI,CAAJ,EAAyC;AACvC,oBAAA,IAAA,CAAmB,mBAAA,SAAA,IAAA,GAAA,GACjB,mBAAmB,UADrB,SACqB,CAAnB,CADF;AAED;AACF;AACD,SAAO,MAAM,cAAA,IAAA,CAAb,GAAa,CAAb;AACD;;AAED;;;;;;;;;AASA,SAAA,4BAAA,CAAA,WAAA,EAAA,IAAA,EAAyD;AACvD,MAAI,QAAA,KAAJ,CAAA;AACA,MAAI,UAAA,KAAJ,CAAA;AACA,SAAO,mBAAP,IAAO,CAAP;AACA,SAAO,KAAA,OAAA,CAAA,MAAA,EAAA,KAAA,EAAA,OAAA,CAAA,MAAA,EAAP,KAAO,CAAP;AACA,UAAQ,IAAA,MAAA,CAAW,WAAA,IAAA,GAAX,WAAA,EAAR,GAAQ,CAAR;AACA,YAAU,MAAA,IAAA,CAAV,WAAU,CAAV;AACA,SAAO,YAAA,IAAA,GAAA,IAAA,GAA0B,mBAAmB,QAAA,CAAA,EAAA,OAAA,CAAA,KAAA,EAApD,GAAoD,CAAnB,CAAjC;AACD;;AAED;;;;;;AAMA,SAAA,aAAA,CAAA,OAAA,EAAA,KAAA,EAAuC;AACrC,UAAA,KAAA,CAAA,UAAA,GAAA,KAAA;AACA,UAAA,KAAA,CAAA,gBAAA,GAAA,KAAA;AACA,UAAA,KAAA,CAAA,aAAA,GAAA,KAAA;AACA,UAAA,KAAA,CAAA,YAAA,GAAA,KAAA;AACA,UAAA,KAAA,CAAA,WAAA,GAAA,KAAA;AACD;;AAED;;;;;;AAMA,SAAA,4BAAA,CAAA,OAAA,EAAA,KAAA,EAAsD;AACpD,UAAA,KAAA,CAAA,kBAAA,GAAmC,QAAnC,GAAA;AACA,UAAA,KAAA,CAAA,wBAAA,GAAyC,QAAzC,GAAA;AACA,UAAA,KAAA,CAAA,qBAAA,GAAsC,QAAtC,GAAA;AACA,UAAA,KAAA,CAAA,oBAAA,GAAqC,QAArC,GAAA;AACA,UAAA,KAAA,CAAA,mBAAA,GAAoC,QAApC,GAAA;AACD;;AAED;;;;;;AAMA,SAAA,yBAAA,CAAA,OAAA,EAAA,KAAA,EAAmD;AACjD,UAAA,KAAA,CAAA,eAAA,GAAgC,QAAhC,GAAA;AACA,UAAA,KAAA,CAAA,qBAAA,GAAsC,QAAtC,GAAA;AACA,UAAA,KAAA,CAAA,kBAAA,GAAmC,QAAnC,GAAA;AACA,UAAA,KAAA,CAAA,iBAAA,GAAkC,QAAlC,GAAA;AACA,UAAA,KAAA,CAAA,gBAAA,GAAiC,QAAjC,GAAA;AACD;;AAED;;;;;AAKA,SAAA,iBAAA,CAAA,OAAA,EAAoC;AAClC,UAAA,KAAA,CAAA,UAAA,GAAA,MAAA;AACA,UAAA,KAAA,CAAA,gBAAA,GAAA,MAAA;AACA,UAAA,KAAA,CAAA,aAAA,GAAA,MAAA;AACA,UAAA,KAAA,CAAA,YAAA,GAAA,MAAA;AACD;;AAED;;;;;;AAMA,SAAA,uBAAA,CAAA,MAAA,EAAA,SAAA,EAAoD;AAClD,MAAI,mBAAmB,OAAA,gBAAA,CAAwB,MAA/C,SAAuB,CAAvB;;AAEA,OAAK,IAAI,IAAJ,CAAA,EAAW,QAAQ,iBAAxB,MAAA,EAAiD,IAAjD,KAAA,EAAA,GAAA,EAAiE;AAC/D,WAAA,WAAA,CAAmB,iBAAnB,CAAmB,CAAnB;AACD;AACF;;AAED;;;;;;;;AAQA,SAAA,sCAAA,CAAA,OAAA,EAAA,SAAA,EAAoE;AAClE,MAAM,QAAQ,kBAAkB,UAAlB,GAAA,GAAA,GAAA,GAAwC,UAAxC,GAAA,GAAA,GAAA,GAA8D,UAA9D,GAAA,GAAA,GAAA,GACZ,UADY,GAAA,GAAd,GAAA;AAEA,UAAA,KAAA,CAAA,wBAAA,GAAA,KAAA;AACA,UAAA,KAAA,CAAA,8BAAA,GAAA,KAAA;AACA,UAAA,KAAA,CAAA,2BAAA,GAAA,KAAA;AACA,UAAA,KAAA,CAAA,0BAAA,GAAA,KAAA;AACA,UAAA,KAAA,CAAA,yBAAA,GAAA,KAAA;AACD;;AAED;AACA,IAAM,kBAAkB;AACtB,UAAQ,SAAA,MAAA,CAAA,CAAA,EAAA;AAAA,WAAA,CAAA;AADc,GAAA;AAEtB,cAAY,SAAA,UAAA,CAAA,CAAA,EAAA;AAAA,WAAK,IAAL,CAAA;AAFU,GAAA;AAGtB,eAAa,SAAA,WAAA,CAAA,CAAA,EAAA;AAAA,WAAK,KAAK,IAAV,CAAK,CAAL;AAHS,GAAA;AAItB,iBAAe,SAAA,aAAA,CAAA,CAAA,EAAA;AAAA,WAAK,IAAA,GAAA,GAAU,IAAA,CAAA,GAAV,CAAA,GAAsB,CAAA,CAAA,GAAK,CAAC,IAAI,IAAL,CAAA,IAAhC,CAAA;AAJO,GAAA;AAKtB,eAAa,SAAA,WAAA,CAAA,CAAA,EAAA;AAAA,WAAK,IAAA,CAAA,GAAL,CAAA;AALS,GAAA;AAMtB,gBAAc,SAAA,YAAA,CAAA,CAAA,EAAA;AAAA,WAAK,IAAI,EAAA,CAAA,GAAA,CAAA,GAAT,CAAA;AANQ,GAAA;AAOtB,kBAAgB,SAAA,cAAA,CAAA,CAAA,EAAA;AAAA,WAAK,IAAA,GAAA,GAAU,IAAA,CAAA,GAAA,CAAA,GAAV,CAAA,GAA0B,CAAC,IAAD,CAAA,KAAW,IAAA,CAAA,GAAX,CAAA,KAAyB,IAAA,CAAA,GAAzB,CAAA,IAA/B,CAAA;AAPM,GAAA;AAQtB,eAAa,SAAA,WAAA,CAAA,CAAA,EAAA;AAAA,WAAK,IAAA,CAAA,GAAA,CAAA,GAAL,CAAA;AARS,GAAA;AAStB,gBAAc,SAAA,YAAA,CAAA,CAAA,EAAA;AAAA,WAAK,IAAI,EAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAT,CAAA;AATQ,GAAA;AAUtB,kBAAgB,SAAA,cAAA,CAAA,CAAA,EAAA;AAAA,WAAK,IAAA,GAAA,GAAU,IAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAV,CAAA,GAA8B,IAAI,IAAI,EAAJ,CAAA,GAAA,CAAA,GAAA,CAAA,GAAvC,CAAA;AAVM,GAAA;AAWtB,eAAa,SAAA,WAAA,CAAA,CAAA,EAAA;AAAA,WAAK,IAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAL,CAAA;AAXS,GAAA;AAYtB,gBAAc,SAAA,YAAA,CAAA,CAAA,EAAA;AAAA,WAAK,IAAI,EAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAT,CAAA;AAZQ,GAAA;AAatB,kBAAgB,SAAA,cAAA,CAAA,CAAA,EAAA;AAAA,WAAK,IAAA,GAAA,GAAU,KAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAV,CAAA,GAAmC,IAAI,KAAK,EAAL,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAA5C,CAAA;AAAA;AAbM,CAAxB;;AAgBA;AACA,IAAM,yBAAyB;AAC7B,UAAQ,SAAA,MAAA,CAAA,CAAA,EAAA;AAAA,WAAA,CAAA;AADqB,GAAA;AAE7B,cAAY,SAAA,UAAA,CAAA,CAAA,EAAA;AAAA,WAAK,KAAA,IAAA,CAAL,CAAK,CAAL;AAFiB,GAAA;AAG7B,eAAa,SAAA,WAAA,CAAA,CAAA,EAAA;AAAA,WAAK,IAAI,KAAA,IAAA,CAAU,IAAnB,CAAS,CAAT;AAHgB,GAAA;AAI7B,iBAAe,SAAA,aAAA,CAAA,CAAA,EAAA;AAAA,WAAK,IAAA,GAAA,GAAU,KAAA,IAAA,CAAU,IAApB,GAAU,CAAV,GAA+B,IAAI,aAAa,KAAA,IAAA,CAAU,IAA/D,CAAqD,CAArD;AAAA;AAJc,CAA/B;;AAOA;;;;;;;;AAQA,SAAA,0BAAA,CAAA,OAAA,EAAA,aAAA,EAA4D;AAC1D,MAAI,IAAA,KAAJ,CAAA;AACA,MAAI,IAAA,KAAJ,CAAA;AACA,MAAI,kBAAA,KAAJ,CAAA;AACA,MAAI,OAAA,KAAJ,CAAA;AACA,MAAI,OAAA,KAAJ,CAAA;AACA,MAAI,OAAA,KAAJ,CAAA;AACA,MAAI,OAAA,KAAJ,CAAA;;AAEA,oBAAkB,IAAlB,OAAA;AACA,SAAO,kBAAA,eAAA,GAAP,eAAA;AACA,SAAO,IAAA,OAAA,GAAA,eAAA,GAAP,eAAA;AACA,SAAO,IAAA,OAAA,GAAA,OAAA,GAAP,eAAA;AACA,SAAO,UAAA,OAAA,GAAP,OAAA;;AAEA,MAAI,cAAA,CAAA,EAAA,CAAA,GAAA,IAAA,GACF,cAAA,CAAA,EAAA,CAAA,GADE,IAAA,GAEF,cAAA,CAAA,EAAA,CAAA,GAFE,IAAA,GAGF,cAAA,CAAA,EAAA,CAAA,GAHF,IAAA;AAIA,MAAI,cAAA,CAAA,EAAA,CAAA,GAAA,IAAA,GACF,cAAA,CAAA,EAAA,CAAA,GADE,IAAA,GAEF,cAAA,CAAA,EAAA,CAAA,GAFE,IAAA,GAGF,cAAA,CAAA,EAAA,CAAA,GAHF,IAAA;;AAKA,SAAO,EAAE,GAAF,CAAA,EAAQ,GAAf,CAAO,EAAP;AACD;;AAED;;;;;;;AAOA,SAAA,YAAA,CAAA,OAAA,EAAA,SAAA,EAA0C;AACxC,UAAA,KAAA,CAAA,eAAA,GAAA,SAAA;AACA,UAAA,KAAA,CAAA,YAAA,GAAA,SAAA;AACA,UAAA,KAAA,CAAA,WAAA,GAAA,SAAA;AACA,UAAA,KAAA,CAAA,UAAA,GAAA,SAAA;AACA,UAAA,KAAA,CAAA,SAAA,GAAA,SAAA;AACD;;AAED;;;;;;;;AAQA,SAAA,OAAA,CAAA,KAAA,EAAwB;AACtB,MAAI,IAAA,KAAJ,CAAA;AACA,MAAI,IAAA,KAAJ,CAAA;AACA,MAAI,QAAA,KAAJ,CAAA;AACA,MAAI,OAAA,KAAJ,CAAA;;AAEA,OAAK,IAAA,CAAA,EAAO,QAAQ,MAApB,MAAA,EAAkC,IAAlC,KAAA,EAAA,GAAA,EAAkD;AAChD,QAAI,SAAS,KAAA,MAAA,KAAb,KAAI,CAAJ;AACA,WAAO,MAAP,CAAO,CAAP;AACA,UAAA,CAAA,IAAW,MAAX,CAAW,CAAX;AACA,UAAA,CAAA,IAAA,IAAA;AACD;;AAED,SAAA,KAAA;AACD;;AAED;;;;;;;;AAQA,SAAA,WAAA,CAAA,MAAA,EAA6B;AAC3B,MAAI,CAAA,OAAA,MAAA,KAAA,WAAA,GAAA,WAAA,GAAA,QAAA,MAAA,CAAA,MAAJ,QAAA,EAAgC;AAC9B,QAAM,cAAN,EAAA;;AAEA,WAAA,IAAA,CAAA,MAAA,EAAA,OAAA,CACW,UAAA,GAAA,EAAA;AAAA,aAAO,YAAA,GAAA,IAAmB,OAA1B,GAA0B,CAA1B;AADX,KAAA;;AAGA,WAAA,WAAA;AANF,GAAA,MAQK;AACH,WAAA,MAAA;AACD;AACF;;AAED;;;;;;;;AAQA,SAAA,QAAA,CAAA,MAAA,EAA0B;AACxB,MAAI,CAAA,OAAA,MAAA,KAAA,WAAA,GAAA,WAAA,GAAA,QAAA,MAAA,CAAA,MAAJ,QAAA,EAAgC;AAC9B;AACA,QAAI,cAAA,KAAJ,CAAA;AACA,QAAI,kBAAJ,KAAA,EAA6B;AAC3B,oBAAA,EAAA;AADF,KAAA,MAGK;AACH,oBAAA,EAAA;AACD;;AAED,WAAA,IAAA,CAAA,MAAA,EAAA,OAAA,CACW,UAAA,GAAA,EAAA;AAAA,aAAO,YAAA,GAAA,IAAmB,SAAS,OAAnC,GAAmC,CAAT,CAA1B;AADX,KAAA;;AAGA,WAAA,WAAA;AAbF,GAAA,MAeK;AACH,WAAA,MAAA;AACD;AACF;;AAED;;;;;;;;AAQA,SAAA,QAAA,CAAA,GAAA,EAAuB;AACrB,MAAM,OAAO,IAAA,CAAA,IAAS,IAAA,CAAA,GAAA,GAAA,GAAc,IAAd,CAAA,GAAsB,IAAI,IAAhD,CAAa,CAAb;AACA,SAAO;AACL,OAAG,IADE,CAAA;AAEL,OAAG,IAAA,IAAA,IAAY,IAAA,CAAA,GAFV,IAEF,CAFE;AAGL,OAAG,IAAA,CAAA,GAAQ;AAHN,GAAP;AAKD;;AAED;;;;;;;;AAQA,SAAA,QAAA,CAAA,GAAA,EAAuB;AACrB,MAAM,OAAO,CAAC,IAAI,IAAL,CAAA,IAAc,IAA3B,CAAA;AACA,SAAO;AACL,OAAG,IADE,CAAA;AAEL,OAAG,IAAA,CAAA,GAAQ,IAAR,CAAA,IAAiB,OAAA,CAAA,GAAA,IAAA,GAAkB,aAFjC,IAEF,CAFE;AAGL,OAAG,OAAO;AAHL,GAAP;AAKD;;AAED;;;;;;;;;;AAUA,SAAA,QAAA,CAAA,GAAA,EAAuB;AACrB,MAAI,IAAA,KAAJ,CAAA;AACA,MAAI,IAAA,KAAJ,CAAA;AACA,MAAI,IAAA,KAAJ,CAAA;;AAEA,MAAI,IAAA,CAAA,KAAJ,CAAA,EAAiB;AACf;AACA,QAAI,IAAJ,CAAA;AACA,QAAI,IAAJ,CAAA;AACA,QAAI,IAAJ,CAAA;AAJF,GAAA,MAMK;AACH,QAAM,IAAI,IAAA,CAAA,GAAA,GAAA,GACR,IAAA,CAAA,IAAS,IAAI,IADL,CACR,CADQ,GAER,IAAA,CAAA,GAAQ,IAAR,CAAA,GAAgB,IAAA,CAAA,GAAQ,IAF1B,CAAA;AAGA,QAAM,IAAI,IAAI,IAAJ,CAAA,GAAV,CAAA;;AAEA,QAAI,SAAA,CAAA,EAAA,CAAA,EAAe,IAAA,CAAA,GAAQ,IAA3B,CAAI,CAAJ;AACA,QAAI,SAAA,CAAA,EAAA,CAAA,EAAe,IAAnB,CAAI,CAAJ;AACA,QAAI,SAAA,CAAA,EAAA,CAAA,EAAe,IAAA,CAAA,GAAQ,IAA3B,CAAI,CAAJ;AACD;;AAED,SAAO;AACL,OADK,CAAA;AAEL,OAFK,CAAA;AAGL,OAAG;AAHE,GAAP;AAKD;;AAED,SAAA,QAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAA2B;AACzB,MAAI,IAAJ,CAAA,EAAW;AACT;AADF,GAAA,MAGK,IAAI,IAAJ,CAAA,EAAW;AACd;AACD;;AAED,MAAI,IAAI,IAAR,CAAA,EAAe;AACb,WAAO,IAAI,CAAC,IAAD,CAAA,IAAA,CAAA,GAAX,CAAA;AADF,GAAA,MAGK,IAAI,IAAI,IAAR,CAAA,EAAe;AAClB,WAAA,CAAA;AADG,GAAA,MAGA,IAAI,IAAI,IAAR,CAAA,EAAe;AAClB,WAAO,IAAI,CAAC,IAAD,CAAA,KAAW,IAAA,CAAA,GAAX,CAAA,IAAX,CAAA;AADG,GAAA,MAGA;AACH,WAAA,CAAA;AACD;AACF;;AAED;;;;;;;;;;AAUA,SAAA,QAAA,CAAA,GAAA,EAAuB;AACrB,MAAM,MAAM,KAAA,GAAA,CAAS,IAAT,CAAA,EAAgB,IAAhB,CAAA,EAAuB,IAAnC,CAAY,CAAZ;AACA,MAAM,MAAM,KAAA,GAAA,CAAS,IAAT,CAAA,EAAgB,IAAhB,CAAA,EAAuB,IAAnC,CAAY,CAAZ;AACA,MAAI,IAAA,KAAJ,CAAA;AACA,MAAI,IAAA,KAAJ,CAAA;AACA,MAAM,IAAI,CAAC,MAAD,GAAA,IAAV,CAAA;;AAEA,MAAI,QAAJ,GAAA,EAAiB;AACf;AACA,QAAA,CAAA;AACA,QAAA,CAAA;AAHF,GAAA,MAKK;AACH,QAAM,IAAI,MAAV,GAAA;AACA,QAAI,IAAA,GAAA,GACF,KAAK,IAAA,GAAA,GADH,GACF,CADE,GAEF,KAAK,MAFP,GAEE,CAFF;;AAIA,YAAA,GAAA;AACE,WAAK,IAAL,CAAA;AACE,YAAI,CAAC,IAAA,CAAA,GAAQ,IAAT,CAAA,IAAA,CAAA,IAAuB,IAAA,CAAA,GAAQ,IAAR,CAAA,GAAA,CAAA,GAA3B,CAAI,CAAJ;AACA;AACF,WAAK,IAAL,CAAA;AACE,YAAI,CAAC,IAAA,CAAA,GAAQ,IAAT,CAAA,IAAA,CAAA,GAAJ,CAAA;AACA;AACF,WAAK,IAAL,CAAA;AACE,YAAI,CAAC,IAAA,CAAA,GAAQ,IAAT,CAAA,IAAA,CAAA,GAAJ,CAAA;AACA;AATJ;;AAYA,SAAA,CAAA;AACD;;AAED,SAAO;AACL,OADK,CAAA;AAEL,OAFK,CAAA;AAGL,OAAG;AAHE,GAAP;AAKD;;AAED;;;;;;;;AAQA,SAAA,oBAAA,CAAA,GAAA,EAAmC;AACjC,SAAO,OAAO,IAAP,CAAA,KAAA,WAAA,GAAA,UACG,IAAA,CAAA,GADH,GAAA,GAAA,GAAA,GACkB,IAAA,CAAA,GADlB,GAAA,GAAA,IAAA,GACkC,IAAA,CAAA,GADlC,GAAA,GAAA,IAAA,GACkD,IADlD,CAAA,GAAA,GAAA,GAAA,SAEE,IAAA,CAAA,GAFF,GAAA,GAAA,GAAA,GAEiB,IAAA,CAAA,GAFjB,GAAA,GAAA,IAAA,GAEiC,IAAA,CAAA,GAFjC,GAAA,GAAP,IAAA;AAGD;;AAED;;;;;;;;AAQA,SAAA,0BAAA,CAAA,OAAA,EAAA,SAAA,EAAwD;AACtD,SAAA,OAAA,EAAgB;AACd,QAAI,cAAA,OAAA,EAAJ,SAAI,CAAJ,EAAuC;AACrC,aAAA,OAAA;AACD;AACF;;AAED,SAAA,IAAA;AACD;;AAED,IAAI,iBAAA,KAAJ,CAAA;;AAEA;;;;;AAKA,SAAA,mBAAA,CAAA,SAAA,EAAwC;AACtC;AACA,MAAI,CAAJ,cAAA,EAAqB;AACnB,qBAAiB,SAAA,aAAA,CAAjB,OAAiB,CAAjB;AACA,aAAA,oBAAA,CAAA,MAAA,EAAA,CAAA,EAAA,WAAA,CAAA,cAAA;AACD;;AAED;AACA,MAAI,eAAJ,UAAA,EAA+B;AAC7B,mBAAA,UAAA,CAAA,OAAA,GAAA,SAAA;AADF,GAAA,MAGK;AACH,mBAAA,WAAA,CAA2B,SAAA,cAAA,CAA3B,SAA2B,CAA3B;AACD;AACF;;AAED,SAAA,cAAA,GAA0B;AACxB,SAAO,WAAA,IAAA,CAAe,OAAA,SAAA,CAAf,SAAA,KAA8C,CAAC,UAAA,IAAA,CAAe,OAAA,SAAA,CAAf,SAAA;AAAtD;AACD;;AAED,SAAA,WAAA,GAAuB;AACrB,SAAO,qBAAA,IAAA,CAAyB,OAAA,SAAA,CAAzB,SAAA;AAAP;AACD;;AAED;;;;;;;;;;;;;;AAcA,SAAA,QAAA,CAAA,eAAA,EAAA,KAAA,EAAwE;AAAA,MAAA,QAAA,IAAA;AAAA,MAAA,aAAA,SAAA;;AAAA,MAA9B,uBAA8B,UAAA,MAAA,GAAA,CAAA,IAAA,UAAA,CAAA,MAAA,SAAA,GAAA,UAAA,CAAA,CAAA,GAAP,KAAO;;AACtE,MAAI,YAAA,KAAJ,CAAA;;AAEA,SAAO,YAAM;AACX;AACA;AACA,QAAM,UAAN,KAAA;AACA,QAAM,OAAN,UAAA;;AAEA;AACA,QAAI,wBAAwB,CAA5B,SAAA,EAAwC;AACtC,sBAAA,KAAA,CAAA,OAAA,EAAA,IAAA;AACD;;AAED;AACA,iBAAA,SAAA;AACA,gBAAY,WAAW,YAAM;AAC3B;AACA,kBAAA,IAAA;AACA,UAAI,CAAJ,oBAAA,EAA2B;AACzB,wBAAA,KAAA,CAAA,OAAA,EAAA,IAAA;AACD;AALS,KAAA,EAAZ,KAAY,CAAZ;AAbF,GAAA;AAqBD;;AAED;;;;;;;;;;;;;;;AAeA,SAAA,QAAA,CAAA,eAAA,EAAA,KAAA,EAAwE;AAAA,MAAA,SAAA,IAAA;AAAA,MAAA,cAAA,SAAA;;AAAA,MAA9B,uBAA8B,UAAA,MAAA,GAAA,CAAA,IAAA,UAAA,CAAA,MAAA,SAAA,GAAA,UAAA,CAAA,CAAA,GAAP,KAAO;;AACtE,MAAI,YAAA,KAAJ,CAAA;;AAEA,SAAO,YAAM;AACX;AACA;AACA,QAAM,UAAN,MAAA;AACA,QAAM,OAAN,WAAA;;AAEA;AACA;AACA,QAAI,CAAJ,SAAA,EAAgB;AACd,UAAA,oBAAA,EAA0B;AACxB,wBAAA,KAAA,CAAA,OAAA,EAAA,IAAA;AACD;;AAED;AACA,kBAAY,WAAW,YAAM;AAC3B;AACA,oBAAA,IAAA;AACA,YAAI,CAAJ,oBAAA,EAA2B;AACzB,0BAAA,KAAA,CAAA,OAAA,EAAA,IAAA;AACD;AALS,OAAA,EAAZ,KAAY,CAAZ;AAOD;AArBH,GAAA;AAuBD;;AAED;;;;;;AAMA,SAAA,WAAA,CAAA,KAAA,EAAA,SAAA,EAAuC;AACrC,MAAM,SAAS,IAAA,KAAA,CAAU,MAAA,MAAA,GAAA,CAAA,GAAzB,CAAe,CAAf;AACA,MAAI,MAAJ,MAAA,EAAkB;AAChB,WAAA,IAAA,CAAY,MAAZ,CAAY,CAAZ;AACD;AACD,OAAK,IAAI,IAAJ,CAAA,EAAW,QAAQ,MAAxB,MAAA,EAAsC,IAAtC,KAAA,EAAA,GAAA,EAAsD;AACpD,WAAA,IAAA,CAAA,SAAA;AACA,WAAA,IAAA,CAAY,MAAZ,CAAY,CAAZ;AACD;AACD,SAAA,MAAA;AACD;;AAED;;;;;;;AAOA,SAAA,YAAA,CAAA,KAAA,EAAA,GAAA,EAAkC;AAChC,SAAO,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAAqB;AACtC,YAAA,KAAA,CAAA,oBAAA,GAAA;;AAEA,UAAA,gBAAA,CAAA,MAAA,EAA+B,UAAA,CAAA,EAAA;AAAA,aAAK,QAAL,KAAK,CAAL;AAA/B,KAAA;AACA,UAAA,gBAAA,CAAA,OAAA,EAAA,MAAA;AACA,UAAA,gBAAA,CAAA,OAAA,EAAA,MAAA;;AAEA,UAAA,GAAA,GAAA,GAAA;AAPF,GAAO,CAAP;AASD;;AAED;;;;;;AAMA,SAAA,QAAA,CAAA,GAAA,EAAuB;AACrB,SAAO,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAAqB;AACtC,QAAM,MAAM,IAAZ,cAAY,EAAZ;;AAEA,QAAA,gBAAA,CAAA,MAAA,EAA6B,UAAA,CAAA,EAAA;AAAA,aAAK,QAAQ,IAAb,QAAK,CAAL;AAA7B,KAAA;AACA,QAAA,gBAAA,CAAA,OAAA,EAAA,MAAA;AACA,QAAA,gBAAA,CAAA,OAAA,EAAA,MAAA;;AAEA,YAAA,KAAA,CAAA,mBAAA,GAAA;;AAEA,QAAA,IAAA,CAAA,KAAA,EAAA,GAAA;AACA,QAAA,IAAA;AAVF,GAAO,CAAP;AAYD;;AAED;;;;;;AAMA,SAAA,QAAA,CAAA,GAAA,EAAuB;AACrB,SAAO,SAAA,GAAA,EAAA,IAAA,CAAmB,UAAA,QAAA,EAAA;AAAA,WAAY,KAAA,KAAA,CAAZ,QAAY,CAAZ;AAA1B,GAAO,CAAP;AACD;;AAED;;;;;AAKA,SAAA,aAAA,GAAyB;AACvB,SAAO,IAAA,KAAA,GAAP,KAAA;AACD;;AAED;;;;;AAKA,SAAA,UAAA,CAAA,MAAA,EAA4B;AAC1B,MAAI,CAAA,OAAA,MAAA,KAAA,WAAA,GAAA,WAAA,GAAA,QAAA,MAAA,CAAA,MAAJ,QAAA,EAAgC;AAC9B,WAAA,MAAA,CAAA,MAAA;AACA,WAAA,IAAA,CAAA,MAAA,EAAA,OAAA,CAA4B,UAAA,GAAA,EAAA;AAAA,aAAO,WAAW,OAAlB,GAAkB,CAAX,CAAP;AAA5B,KAAA;AACD;AACF;;AAED;;;;;;;;;AASA,SAAA,UAAA,GAAsB;AACpB,SAAO,uCAAA,OAAA,CAAA,OAAA,EAAwD,UAAA,CAAA,EAAK;AAClE,QAAM,IAAI,KAAA,MAAA,KAAA,EAAA,GAAV,CAAA;AACA,QAAM,IAAI,MAAA,GAAA,GAAA,CAAA,GAAiB,IAAA,GAAA,GAA3B,GAAA;AACA,WAAO,EAAA,QAAA,CAAP,EAAO,CAAP;AAHF,GAAO,CAAP;AAKD;;AAED;;;;;;;;AAQA,SAAA,GAAA,CAAA,CAAA,EAAA,CAAA,EAAmB;AACjB,SAAO,CAAE,IAAD,CAAC,GAAF,CAAA,IAAP,CAAA;AACD;;AAED;;;;;AAKA,SAAA,kBAAA,CAAA,GAAA,EAAA,GAAA,EAAsC;AACpC,SAAO,KAAA,MAAA,MAAiB,MAAjB,GAAA,IAAP,GAAA;AACD;;AAED;;;;;AAKA,SAAA,gBAAA,CAAA,GAAA,EAAA,GAAA,EAAoC;AAClC,SAAO,SAAS,KAAA,MAAA,MAAiB,MAAjB,GAAA,IAAhB,GAAO,CAAP;AACD;;AAED;;;;AAIA,SAAA,UAAA,CAAA,IAAA,EAA0B;AACxB,SAAO,KAAK,iBAAA,CAAA,EAAoB,KAAhC,MAAY,CAAL,CAAP;AACD;;AAED;;;;;AAKA,SAAA,qBAAA,CAAA,kBAAA,EAAmD;AACjD;AACA,WAAA,gBAAA,CAAA,kBAAA,EAA8C,YAAA;AAAA,WAAM,mBAAmB,CAAC,SAA1B,MAAM,CAAN;AAA9C,GAAA;AACA;AACA,SAAA,gBAAA,CAAA,MAAA,EAAgC,YAAA;AAAA,WAAM,mBAAN,KAAM,CAAN;AAAhC,GAAA;AACA,SAAA,gBAAA,CAAA,OAAA,EAAiC,YAAA;AAAA,WAAM,mBAAN,IAAM,CAAN;AAAjC,GAAA;AACD;;AAED;;;;;;;AAOA,SAAA,KAAA,CAAA,KAAA,EAAA,GAAA,EAA2B;AACzB,MAAM,IAAN,EAAA;AACA,OAAK,IAAI,IAAJ,CAAA,EAAW,IAAhB,KAAA,EAA2B,IAA3B,GAAA,EAAoC,KAApC,GAAA,EAA8C;AAC5C,MAAA,CAAA,IAAA,CAAA;AACD;AACD,SAAA,CAAA;AACD;;AAED;;;;AAIA,SAAA,KAAA,CAAA,KAAA,EAAsB;AACpB,SAAO,OAAA,KAAA,KAAA,QAAA,IACL,SADK,KACL,CADK,IAEL,SAAA,KAAA,MAFF,KAAA;AAGD;;AAED;;;;;;;AAOA,SAAA,IAAA,CAAA,IAAA,EAAA,SAAA,EAA+B;AAC7B,OAAK,IAAI,IAAJ,CAAA,EAAW,QAAQ,KAAxB,MAAA,EAAqC,IAArC,KAAA,EAAA,GAAA,EAAqD;AACnD,QAAM,QAAQ,KAAd,CAAc,CAAd;AACA,QAAI,UAAA,IAAA,CAAA,IAAA,EAAA,KAAA,EAAA,CAAA,EAAJ,IAAI,CAAJ,EAA0C;AACxC,aAAA,KAAA;AACD;AACF;AACD,SAAA,IAAA;AACD;;AAED,IAAM,WAAW;AACf,OADe,EAAA;AAEf,OAFe,EAAA;AAGf,OAHe,EAAA;AAIf,OAJe,EAAA;AAKf,OALe,EAAA;AAMf,OANe,EAAA;AAOf,OAPe,EAAA;AAQf,OARe,EAAA;AASf,OATe,EAAA;AAUf,OAVe,EAAA;AAWf,OAXe,EAAA;AAYf,OAZe,EAAA;AAaf,OAbe,EAAA;AAcf,OAde,EAAA;AAef,OAfe,EAAA;AAgBf,OAhBe,EAAA;AAiBf,OAjBe,EAAA;AAkBf,OAlBe,EAAA;AAmBf,OAnBe,EAAA;AAoBf,OApBe,EAAA;AAqBf,OArBe,EAAA;AAsBf,OAtBe,EAAA;AAuBf,OAvBe,EAAA;AAwBf,OAxBe,EAAA;AAyBf,OAzBe,EAAA;AA0Bf,OA1Be,EAAA;AA2Bf,OA3Be,EAAA;AA4Bf,OA5Be,EAAA;AA6Bf,OA7Be,EAAA;AA8Bf,OA9Be,EAAA;AA+Bf,OA/Be,EAAA;AAgCf,OAhCe,EAAA;AAiCf,OAjCe,EAAA;AAkCf,OAlCe,EAAA;AAmCf,OAnCe,EAAA;AAoCf,OApCe,EAAA;AAqCf,WArCe,EAAA;AAsCf,WAtCe,EAAA;AAuCf,YAvCe,EAAA;AAwCf,UAxCe,EAAA;AAyCf,QAzCe,EAAA;AA0Cf,WA1Ce,EAAA;AA2Cf,UAAQ;AA3CO,CAAjB;;AA8CA,IAAM,eAAN,4BAAA;AACA,IAAM,iBAAN,8BAAA;;QAGE,W,GAAA,W;QACA,2B,GAAA,2B;QACA,a,GAAA,a;QACA,a,GAAA,a;QACA,W,GAAA,W;QACA,a,GAAA,a;QACA,e,GAAA,e;QACA,oB,GAAA,oB;QACA,Q,GAAA,Q;QACA,W,GAAA,W;QACA,Y,GAAA,Y;QACA,Y,GAAA,Y;QACA,iB,GAAA,iB;QACA,4B,GAAA,4B;QACA,a,GAAA,a;QACA,4B,GAAA,4B;QACA,yB,GAAA,yB;QACA,iB,GAAA,iB;QACA,uB,GAAA,uB;QACA,sC,GAAA,sC;QACA,e,GAAA,e;QACA,sB,GAAA,sB;QACA,0B,GAAA,0B;QACA,Y,GAAA,Y;QACA,O,GAAA,O;QACA,W,GAAA,W;QACA,Q,GAAA,Q;QACA,Q,GAAA,Q;QACA,Q,GAAA,Q;QACA,Q,GAAA,Q;QACA,Q,GAAA,Q;QACA,oB,GAAA,oB;QACA,0B,GAAA,0B;QACA,mB,GAAA,mB;QACA,c,GAAA,c;QACA,W,GAAA,W;QACA,Q,GAAA,Q;QACA,Q,GAAA,Q;QACA,Y,GAAA,Y;QACA,Q,GAAA,Q;QACA,Q,GAAA,Q;QACA,a,GAAA,a;QACA,U,GAAA,U;QACA,U,GAAA,U;QACA,G,GAAA,G;QACA,kB,GAAA,kB;QACA,gB,GAAA,gB;QACA,U,GAAA,U;QACA,qB,GAAA,qB;QACA,K,GAAA,K;QACA,K,GAAA,K;QACA,I,GAAA,I;QACA,Q,GAAA,Q;QACA,Y,GAAA,Y;QACA,c,GAAA,c;;AAGF;;;;;;;;AAQA","file":"grafx.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export * from './src';\n","/**\n * An AnimationJob is used with the animator controller to update and re-draw something each frame.\n *\n * @abstract\n */\nclass AnimationJob {\n  /**\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(onComplete) {\n    // AnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === AnimationJob) {\n      throw new TypeError('Cannot construct AnimationJob instances directly');\n    }\n\n    this._startTime = 0;\n    this._isComplete = true;\n    this._onComplete = onComplete;\n  }\n\n  /**\n   * Indicates whether this AnimationJob is complete.\n   *\n   * @return {boolean}\n   */\n  get isComplete() {\n    return this._isComplete;\n  }\n\n  /**\n   * Sets this AnimationJob as started.\n   *\n   * @param {DOMHighResTimeStamp} startTime\n   */\n  start(startTime) {\n    this._startTime = startTime;\n    this._isComplete = false;\n  }\n\n  /**\n   * Updates the animation progress of this AnimationJob to match the given time.\n   *\n   * This is called from the overall animation loop.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @abstract\n   */\n  update(currentTime, deltaTime) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * Draws the current state of this AnimationJob.\n   *\n   * This is called from the overall animation loop.\n   *\n   * @abstract\n   */\n  draw() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * Handles any necessary state for this AnimationJob being finished.\n   *\n   * @param {boolean} isCancelled\n   */\n  finish(isCancelled) {\n    console.log(`${this.constructor.name} ${isCancelled ? 'cancelled' : 'completed'}`);\n\n    this._isComplete = true;\n\n    if (this._onComplete) {\n      this._onComplete();\n    }\n  }\n}\n\nexport {AnimationJob};\n","import {FrameLatencyProfiler} from './frame-latency-profiler';\nimport {PersistentAnimationJob} from './persistent-animation-job';\nimport {TransientAnimationJob} from './transient-animation-job';\n\nconst _DELTA_TIME_UPPER_THRESHOLD = 200;\nconst _FRAME_DURATION_WARNING_THRESHOLD = 1000 / 30;\nconst _FRAME_LATENCY_LOG_PERIOD = 5000;\nconst _LATENCY_LOG_LABEL = 'Animation frame period';\n\n/**\n * This class handles the animation loop.\n *\n * This class's responsibilities include:\n * - updating modules for the current frame,\n * - drawing renderables for the current frame,\n * - starting and stopping transient animation jobs,\n * - capping time step durations at a max threshold.\n */\nclass Animator {\n  constructor() {\n    this._jobs = [];\n    this._previousTime = null;\n    this._isPaused = true;\n    this._requestAnimationFrameId = null;\n    this._totalUnpausedRunTime = 0;\n    this._lastUnpauseTime = null;\n    this._latencyProfiler = new FrameLatencyProfiler(_FRAME_LATENCY_LOG_PERIOD,\n        _FRAME_DURATION_WARNING_THRESHOLD, _LATENCY_LOG_LABEL);\n  }\n\n  /**\n   * Starts the given AnimationJob.\n   *\n   * @param {AnimationJob} job\n   */\n  startJob(job) {\n    // Is this a restart?\n    if (!job.isComplete) {\n      console.debug(`Restarting AnimationJob: ${job.constructor.name}`);\n\n      if (job instanceof PersistentAnimationJob) {\n        job.reset();\n      } else {\n        job.finish(true);\n        job.start(window.performance.now());\n      }\n    } else {\n      console.debug(`Starting AnimationJob: ${job.constructor.name}`);\n\n      job.start(this._previousTime);\n      this._jobs.push(job);\n    }\n\n    this._startAnimationLoop();\n  }\n\n  /**\n   * Cancels the given AnimationJob.\n   *\n   * @param {AnimationJob} job\n   */\n  cancelJob(job) {\n    console.debug(`Cancelling AnimationJob: ${job.constructor.name}`);\n    job.finish(true);\n  }\n\n  /**\n   * Cancels all running AnimationJobs.\n   */\n  cancelAll() {\n    while (this._jobs.length) {\n      this.cancelJob(this._jobs[0]);\n    }\n  }\n\n  /** @returns {DOMHighResTimeStamp} */\n  get currentTime() {\n    return this._previousTime;\n  }\n\n  /** @returns {boolean} */\n  get isPaused() {\n    return this._isPaused;\n  }\n\n  pause() {\n    this._stopAnimationLoop();\n    console.debug('Animator paused');\n  }\n\n  unpause() {\n    this._startAnimationLoop();\n    console.debug('Animator unpaused');\n  }\n\n  /**\n   * This is the animation loop that drives all of the animation.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @private\n   */\n  _animationLoop(currentTime) {\n    // When pausing and restarting, it's possible for the previous time to be slightly inconsistent\n    // with the animationFrame time.\n    if (currentTime < this._previousTime) {\n      this._previousTime = currentTime - 1;\n    }\n\n    let deltaTime = currentTime - this._previousTime;\n    this._previousTime = currentTime;\n\n    this._latencyProfiler.recordFrameLatency(deltaTime);\n\n    // Large delays between frames can cause lead to instability in the system, so this caps them to\n    // a max threshold.\n    deltaTime = deltaTime > _DELTA_TIME_UPPER_THRESHOLD ?\n        _DELTA_TIME_UPPER_THRESHOLD : deltaTime;\n\n    if (!this._isPaused) {\n      this._requestAnimationFrameId =\n          window.requestAnimationFrame(currentTime => this._animationLoop(currentTime));\n      this._updateJobs(currentTime, deltaTime);\n      this._drawJobs();\n    }\n  }\n\n  /**\n   * Updates all of the active AnimationJobs.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @private\n   */\n  _updateJobs(currentTime, deltaTime) {\n    for (let i = 0, count = this._jobs.length; i < count; i++) {\n      let job = this._jobs[i];\n\n      // Remove jobs from the list after they are complete.\n      if (job.isComplete) {\n        this._removeJob(job, i);\n        i--;\n        count--;\n        continue;\n      }\n\n      // Check whether the job is transient and has reached its end.\n      if (job instanceof TransientAnimationJob && job.endTime < currentTime) {\n        job.finish(false);\n      } else {\n        job.update(currentTime, deltaTime);\n      }\n    }\n  }\n\n  /**\n   * Removes the given job from the collection of active, animating jobs.\n   *\n   * @param {AnimationJob} job\n   * @param {number} [index=-1]\n   * @private\n   */\n  _removeJob(job, index = -1) {\n    console.debug(`Removing AnimationJob: ${job.constructor.name}`);\n\n    if (index >= 0) {\n      this._jobs.splice(index, 1);\n    } else {\n      const count = this._jobs.length;\n      for (index = 0; index < count; index++) {\n        if (this._jobs[index] === job) {\n          this._jobs.splice(index, 1);\n          break;\n        }\n      }\n    }\n\n    // Stop the animation loop when there are no more jobs to animate.\n    if (this._jobs.length === 0) {\n      this._stopAnimationLoop();\n    }\n  }\n\n  /**\n   * Draws all of the active AnimationJobs.\n   *\n   * @private\n   */\n  _drawJobs() {\n    for (let i = 0, count = this._jobs.length; i < count; i++) {\n      this._jobs[i].draw();\n    }\n  }\n\n  /**\n   * Starts the animation loop if it is not already running.\n   *\n   * This method is idempotent.\n   *\n   * @private\n   */\n  _startAnimationLoop() {\n    if (this._isPaused) {\n      this._lastUnpauseTime = window.performance.now();\n    }\n    this._isPaused = false;\n\n    // Only actually start the loop if it isn't already running and the page has focus.\n    if (!this._requestAnimationFrameId && !document.hidden) {\n      this._latencyProfiler.start();\n      this._previousTime = window.performance.now();\n      this._requestAnimationFrameId =\n          window.requestAnimationFrame(time => this._animationLoop(time));\n    }\n  }\n\n  /**\n   * Stops the animation loop.\n   *\n   * @private\n   */\n  _stopAnimationLoop() {\n    if (!this._isPaused) {\n      this._totalUnpausedRunTime += this._timeSinceLastPaused;\n    }\n    this._isPaused = true;\n    window.cancelAnimationFrame(this._requestAnimationFrameId);\n    this._requestAnimationFrameId = null;\n    this._latencyProfiler.stop();\n  }\n\n  /**\n   * Creates a promise that will resolve on the next animation loop.\n   *\n   * @returns {Promise}\n   */\n  resolveOnNextFrame() {\n    return new Promise(window.requestAnimationFrame);\n  }\n\n  /**\n   * Gets the total amount of time the animator has been running while not paused.\n   *\n   * @returns {DOMHighResTimeStamp}\n   */\n  get totalRunTime() {\n    return this._isPaused\n        ? this._totalUnpausedRunTime\n        : this._totalUnpausedRunTime + this._timeSinceLastPaused;\n  }\n\n  /**\n   * @returns {DOMHighResTimeStamp}\n   */\n  get _timeSinceLastPaused() {\n    return window.performance.now() - this._lastUnpauseTime;\n  }\n}\n\nconst animator = new Animator();\n\nexport {animator};\n\n/**\n * @typedef {number} DOMHighResTimeStamp A number of milliseconds, accurate to one thousandth of a\n * millisecond.\n */\n\n","/**\n * This class keeps track of avg/min/max frame latencies over the last logging time period and\n * periodically logs these values.\n */\nclass FrameLatencyProfiler {\n  /**\n   * @param {number} logPeriod The period at which to print latency log messages. In milliseconds.\n   * @param {number} latencyWarningThreshold If the average latency exceeds this threshold, then the\n   * log message is shown as a warning. In milliseconds.\n   * @param {string} logLabel A label to show for each latency log message.\n   */\n  constructor(logPeriod, latencyWarningThreshold, logLabel) {\n    this._logPeriod = logPeriod;\n    this._latencyWarningThreshold = latencyWarningThreshold;\n    this._logLabel = logLabel;\n\n    this._frameCount = null;\n    this._maxFrameLatency = null;\n    this._minFrameLatency = null;\n    this._avgFrameLatency = null;\n\n    this._intervalId = null;\n  }\n\n  start() {\n    this.stop();\n    this.reset();\n\n    this._intervalId = setInterval(() => {\n      this.logFrameLatency();\n      this.reset();\n    }, this._logPeriod);\n  }\n\n  stop() {\n    clearInterval(this._intervalId);\n  }\n\n  reset() {\n    this._frameCount = 0;\n    this._maxFrameLatency = Number.MIN_VALUE;\n    this._minFrameLatency = Number.MAX_VALUE;\n    this._avgFrameLatency = 0;\n  }\n\n  /**\n   * Keeps track of a running average, min value, and max value for the frame latencies.\n   *\n   * @param {DOMHighResTimeStamp} frameLatency\n   */\n  recordFrameLatency(frameLatency) {\n    this._frameCount++;\n    this._maxFrameLatency =\n        this._maxFrameLatency < frameLatency ? frameLatency : this._maxFrameLatency;\n    this._minFrameLatency =\n        this._minFrameLatency > frameLatency ? frameLatency : this._minFrameLatency;\n    this._avgFrameLatency =\n        this._avgFrameLatency + (frameLatency - this._avgFrameLatency) / this._frameCount;\n  }\n\n  logFrameLatency() {\n    if (this._frameCount > 0) {\n      const message = `${this._logLabel}:  AVG=${this._avgFrameLatency.toFixed(3)}  ` +\n          `(MAX=${this._maxFrameLatency.toFixed(3)}; MIN=${this._minFrameLatency.toFixed(3)})`;\n      if (this._maxFrameLatency >= this._latencyWarningThreshold) {\n        console.warn(message);\n      } else {\n        console.debug(message);\n      }\n    }\n  }\n}\n\nexport {FrameLatencyProfiler};\n","export * from './animation-job';\nexport * from './animator';\nexport * from './frame-latency-profiler';\nexport * from './persistent-animation-job';\nexport * from './transient-animation-job';\n","import {AnimationJob} from './animation-job';\n\n/**\n * A PersistentAnimationJob recurs or has an indefinite duration.\n *\n * @abstract\n */\nclass PersistentAnimationJob extends AnimationJob {\n  /**\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(onComplete) {\n    super(onComplete);\n\n    // PersistentAnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === PersistentAnimationJob) {\n      throw new TypeError('Cannot construct PersistentAnimationJob instances directly');\n    }\n  }\n\n  /**\n   * @abstract\n   */\n  reset() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n}\n\nexport {PersistentAnimationJob};\n","import {_util} from './util';\n\nimport {AnimationJob} from './animation-job';\n\n/**\n * A TransientAnimationJob is temporary and has a definite beginning and end.\n *\n * @abstract\n */\nclass TransientAnimationJob extends AnimationJob {\n  /**\n   * @param {number} duration\n   * @param {number} delay\n   * @param {Function|String} easingFunction\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(duration, delay, easingFunction, onComplete) {\n    super(onComplete);\n\n    // TransientAnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === TransientAnimationJob) {\n      throw new TypeError('Cannot construct TransientAnimationJob instances directly');\n    }\n\n    this._duration = duration;\n    this._delay = delay;\n    this._easingFunction = typeof easingFunction === 'function'\n        ? easingFunction\n        : _util.easingFunctions[easingFunction];\n  }\n\n  /**\n   * @returns {number}\n   */\n  get endTime() {\n    return this._startTime + this._duration + this._delay;\n  }\n}\n\nexport {TransientAnimationJob};\n","/**\n * This module defines a collection of static utility functions.\n */\n\n// A collection of different types of easing functions.\nconst easingFunctions = {\n  linear: t => t,\n  easeInQuad: t => t * t,\n  easeOutQuad: t => t * (2 - t),\n  easeInOutQuad: t => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t,\n  easeInCubic: t => t * t * t,\n  easeOutCubic: t => 1 + --t * t * t,\n  easeInOutCubic: t => t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,\n  easeInQuart: t => t * t * t * t,\n  easeOutQuart: t => 1 - --t * t * t * t,\n  easeInOutQuart: t => t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t,\n  easeInQuint: t => t * t * t * t * t,\n  easeOutQuint: t => 1 + --t * t * t * t * t,\n  easeInOutQuint: t => t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t\n};\n\nconst _util = {\n  easingFunctions,\n};\n\nexport {\n  _util,\n};\n","export * from './src/aabb-collidable';\nexport * from './src/capsule-collidable';\nexport * from './src/collidable';\nexport * from './src/line-segment';\nexport * from './src/obb-collidable';\nexport * from './src/sphere-collidable';\n","import {Collidable} from './collidable';\nimport {LineSegment} from './line-segment';\nimport {tmpVec1, tmpVec2} from '../../../util';\n\n/**\n * This class represents an axially-aligned bounding box (AABB).\n *\n * This is primarily useful for collision detection. An AABB is only appropriate for some\n * geometries. For other geometries, an oriented bounding box (OBB) or a bounding sphere may be more\n * appropriate.\n */\nclass Aabb extends Collidable {\n  /**\n   * @param {number} minX\n   * @param {number} minY\n   * @param {number} minZ\n   * @param {number} maxX\n   * @param {number} maxY\n   * @param {number} maxZ\n   * @param {boolean} [isStationary=false]\n   * @param {CollidablePhysicsJob} [physicsJob]\n   */\n  constructor(minX, minY, minZ, maxX, maxY, maxZ, isStationary = false, physicsJob) {\n    super(isStationary, physicsJob);\n    this.minX = minX;\n    this.minY = minY;\n    this.minZ = minZ;\n    this.maxX = maxX;\n    this.maxY = maxY;\n    this.maxZ = maxZ;\n  }\n\n  /**\n   * Creates a new bounding box with the dimensions of an axially-aligned cube centered around the \n   * given center and with the given half-side length.\n   *\n   * @param {vec3} center\n   * @param {number} halfSideLength\n   */\n  static createAsUniformAroundCenter(center, halfSideLength) {\n    const bounds = new Aabb(0, 0, 0, 0, 0, 0);\n    bounds.setAsUniformAroundCenter(center, halfSideLength);\n    return bounds;\n  }\n\n  /**\n   * Updates the dimensions of this bounding box to represent an axially-aligned cube centered\n   * around the given center and with the given half-side length.\n   *\n   * @param {vec3} center\n   * @param {number} halfSideLength\n   */\n  setAsUniformAroundCenter(center, halfSideLength) {\n    this.minX = center[0] - halfSideLength;\n    this.minY = center[1] - halfSideLength;\n    this.minZ = center[2] - halfSideLength;\n    this.maxX = center[0] + halfSideLength;\n    this.maxY = center[1] + halfSideLength;\n    this.maxZ = center[2] + halfSideLength;\n  }\n\n  /** @returns {number} */\n  get rangeX() {\n    return this.maxX - this.minX;\n  }\n  /** @returns {number} */\n  get rangeY() {\n    return this.maxY - this.minY;\n  }\n  /** @returns {number} */\n  get rangeZ() {\n    return this.maxZ - this.minZ;\n  }\n\n  /** @returns {number} */\n  get centerX() {\n    return this.minX + this.rangeX / 2;\n  }\n  /** @returns {number} */\n  get centerY() {\n    return this.minY + this.rangeY / 2;\n  }\n  /** @returns {number} */\n  get centerZ() {\n    return this.minZ + this.rangeZ / 2;\n  }\n\n  /** @returns {number} */\n  get surfaceArea() {\n    const rangeX = this.rangeX;\n    const rangeY = this.rangeY;\n    const rangeZ = this.rangeZ;\n    return 2 * (rangeX * rangeY + rangeX * rangeZ + rangeY * rangeZ);\n  }\n\n  /**\n   * @returns {vec3}\n   * @override\n   */\n  get centerOfVolume() {\n    // Reuse the same object when this is called multiple times.\n    this._centerOfVolume = this._centerOfVolume || vec3.create();\n    vec3.set(this._centerOfVolume, this.centerX, this.centerY, this.centerZ);\n    return this._centerOfVolume;\n  }\n\n  /**\n   * @returns {Collidable}\n   * @override\n   */\n  get boundingVolume() {\n    return this;\n  }\n\n  /**\n   * @param {vec3} value\n   * @override\n   */\n  set position(value) {\n    const rangeX = this.rangeX;\n    const rangeY = this.rangeY;\n    const rangeZ = this.rangeZ;\n    this.minX = value[0] - rangeX / 2;\n    this.minY = value[1] - rangeY / 2;\n    this.minZ = value[2] - rangeZ / 2;\n    this.maxX = value[0] + rangeX / 2;\n    this.maxY = value[1] + rangeY / 2;\n    this.maxZ = value[2] + rangeZ / 2;\n  }\n\n  /**\n   * @param {quat} value\n   * @override\n   */\n  set orientation(value) {\n    // Do nothing.\n  }\n\n  /**\n   * Calls the given callback once for each vertex.\n   *\n   * Stops as soon as the callback returns true for a vertex.\n   *\n   * @param {VertexCallback} callback\n   * @param {vec3} [vertex] Output param.\n   * @returns {boolean} True if one of the callbacks returned true.\n   */\n  someVertex(callback, vertex) {\n    vertex = vertex || tmpVec1;\n\n    vec3.set(vertex, this.minX, this.minY, this.minZ);\n    if (callback(vertex)) return true;\n\n    vec3.set(vertex, this.maxX, this.minY, this.minZ);\n    if (callback(vertex)) return true;\n\n    vec3.set(vertex, this.minX, this.maxY, this.minZ);\n    if (callback(vertex)) return true;\n\n    vec3.set(vertex, this.maxX, this.maxY, this.minZ);\n    if (callback(vertex)) return true;\n\n    vec3.set(vertex, this.minX, this.minY, this.maxZ);\n    if (callback(vertex)) return true;\n\n    vec3.set(vertex, this.maxX, this.minY, this.maxZ);\n    if (callback(vertex)) return true;\n\n    vec3.set(vertex, this.minX, this.maxY, this.maxZ);\n    if (callback(vertex)) return true;\n\n    vec3.set(vertex, this.maxX, this.maxY, this.maxZ);\n    if (callback(vertex)) return true;\n\n    return false;\n  }\n\n  /**\n   * Calls the given callback once for each edge.\n   *\n   * @param {EdgeCallback} callback\n   * @param {LineSegment} [edge] Output param.\n   * @returns {boolean} True if one of the callbacks returned true.\n   */\n  someEdge(callback, edge) {\n    edge = edge || _segment;\n\n    //\n    // Edges along front face.\n    //\n\n    vec3.set(tmpVec1, this.minX, this.minY, this.minZ);\n    vec3.set(tmpVec2, this.maxX, this.minY, this.minZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.minX, this.maxY, this.minZ);\n    vec3.set(tmpVec2, this.maxX, this.maxY, this.minZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.minX, this.minY, this.minZ);\n    vec3.set(tmpVec2, this.minX, this.maxY, this.minZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.maxX, this.minY, this.minZ);\n    vec3.set(tmpVec2, this.maxX, this.maxY, this.minZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    //\n    // Edges along back face.\n    //\n\n    vec3.set(tmpVec1, this.minX, this.minY, this.maxZ);\n    vec3.set(tmpVec2, this.maxX, this.minY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.minX, this.maxY, this.maxZ);\n    vec3.set(tmpVec2, this.maxX, this.maxY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.minX, this.minY, this.maxZ);\n    vec3.set(tmpVec2, this.minX, this.maxY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.maxX, this.minY, this.maxZ);\n    vec3.set(tmpVec2, this.maxX, this.maxY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    //\n    // Edges between front and back faces.\n    //\n\n    vec3.set(tmpVec1, this.minX, this.minY, this.minZ);\n    vec3.set(tmpVec2, this.minX, this.minY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.maxX, this.minY, this.minZ);\n    vec3.set(tmpVec2, this.maxX, this.minY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.minX, this.maxY, this.minZ);\n    vec3.set(tmpVec2, this.minX, this.maxY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.maxX, this.maxY, this.minZ);\n    vec3.set(tmpVec2, this.maxX, this.maxY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    return false;\n  }\n}\n\nconst _segment = new LineSegment(vec3.create(), vec3.create());\n\nexport {Aabb};\n","import {Collidable} from './collidable';\nimport {LineSegment} from './line-segment';\n\n/**\n * This class represents a capsule.\n *\n * - A capsule is a cylinder with semi-spheres on either end.\n * - A capsule can represent a rough approximation of many useful shapes.\n * - A capsule can be used for relatively efficient collision detection.\n */\nclass Capsule extends Collidable {\n  /**\n   * The default orientation of the capsule is along the z-axis.\n   *\n   * @param {number} halfDistance Half the distance from the centers of the capsule end spheres.\n   * @param {number} radius\n   * @param {boolean} [isStationary=false]\n   * @param {CollidablePhysicsJob} [physicsJob]\n   */\n  constructor(halfDistance, radius, isStationary = false, physicsJob) {\n    super(isStationary, physicsJob);\n    this.halfDistance = halfDistance;\n    this.segment = new LineSegment(vec3.fromValues(0, 0, -halfDistance),\n        vec3.fromValues(0, 0, halfDistance));\n    this.radius = radius;\n  }\n\n  /**\n   * @returns {vec3}\n   * @override\n   */\n  get centerOfVolume() {\n    return this.segment.center;\n  }\n\n  /**\n   * @returns {Collidable}\n   * @override\n   */\n  get boundingVolume() {\n    return this;\n  }\n\n  /**\n   * @param {vec3} value\n   * @override\n   */\n  set position(value) {\n    this.segment.center = value;\n  }\n\n  /**\n   * @param {quat} value\n   * @override\n   */\n  set orientation(value) {\n    this.segment.orientation = value;\n  }\n}\n\nexport {Capsule};\n","/**\n * This class represents a 3D collidable rigid object.\n *\n * This is useful for collision detection and response.\n *\n * @abstract\n */\nclass Collidable {\n  /**\n   * @param {boolean} isStationary\n   * @param {CollidablePhysicsJob} [physicsJob]\n   */\n  constructor(isStationary, physicsJob) {\n    // Collidable is an abstract class. It should not be instantiated directly.\n    if (new.target === Collidable) {\n      throw new TypeError('Cannot construct Collidable instances directly');\n    }\n\n    this.isStationary = isStationary;\n    this.physicsJob = physicsJob;\n    this.collisions = [];\n    this.previousCollisions = [];\n  }\n\n  /**\n   * Implementing classes can override this to provide a center of mass that is different than the\n   * center of volume.\n   *\n   * @returns {vec3}\n   */\n  get centerOfMass() {\n    return this.centerOfVolume;\n  }\n\n  /**\n   * @returns {vec3}\n   * @abstract\n   */\n  get centerOfVolume() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * @returns {Collidable}\n   * @abstract\n   */\n  get boundingVolume() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * @param {vec3} value\n   * @abstract\n   */\n  set position(value) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * @param {quat} value\n   * @abstract\n   */\n  set orientation(value) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n}\n\nexport {Collidable};\n","import {tmpVec1, tmpVec2} from '../../../util';\n\n/**\n * This class represents a line segment.\n */\nclass LineSegment {\n  /**\n   * @param {vec3} start\n   * @param {vec3} end\n   */\n  constructor(start, end) {\n    this.start = vec3.create();\n    this.end = vec3.create();\n    this._center = vec3.create();\n    this._originalOrientationStart = vec3.create();\n    this._originalOrientationEnd = vec3.create();\n    this.reset(start, end);\n  }\n\n  /**\n   * @param {vec3} start\n   * @param {vec3} end\n   */\n  reset(start, end) {\n    vec3.copy(this.start, start);\n    vec3.copy(this.end, end);\n    vec3.subtract(this._originalOrientationStart, this.start, this.center);\n    vec3.subtract(this._originalOrientationEnd, this.end, this.center);\n  }\n\n  /** @returns {LineSegment} */\n  clone() {\n    const segment = new LineSegment(this.start, this.end);\n    segment._originalOrientationStart = this._originalOrientationStart;\n    segment._originalOrientationEnd = this._originalOrientationEnd;\n    return segment;\n  }\n\n  /**\n   * The UN-NORMALIZED direction of this segment.\n   *\n   * @returns {vec3}\n   */\n  get dir() {\n    // Reuse the same object when this is called multiple times.\n    this._dir = this._dir || vec3.create();\n    return vec3.subtract(this._dir, this.end, this.start);\n  }\n\n  /** @returns {vec3} */\n  get center() {\n    vec3.lerp(this._center, this.start, this.end, 0.5);\n    return this._center;\n  }\n\n  /** @param {vec3} value */\n  set center(value) {\n    // Reuse the same object when this is called multiple times.\n    this._displacement = this._displacement || vec3.create();\n    vec3.subtract(this._displacement, value, this.center);\n\n    vec3.add(this.start, this.start, this._displacement);\n    vec3.add(this.end, this.end, this._displacement);\n  }\n\n  /** @param {quat} value */\n  set orientation(value) {\n    vec3.transformQuat(tmpVec1, this._originalOrientationStart, value);\n    vec3.transformQuat(tmpVec2, this._originalOrientationEnd, value);\n\n    // We don't want this to be re-calculated between start/end updates.\n    const center = this.center;\n\n    vec3.add(this.start, center, tmpVec1);\n    vec3.add(this.end, center, tmpVec2);\n  }\n}\n\nexport {LineSegment};\n","import {Collidable} from './collidable';\nimport {Sphere} from './sphere-collidable';\nimport {LineSegment} from './line-segment';\n\n/**\n * This class represents an oriented bounding box (OBB).\n *\n * This is useful both for collision detection and for representing any rotated rectangular cuboid.\n * An OBB is only appropriate for some geometries. For other geometries, an axially-aligned bounding\n * box (AABB) or a bounding sphere may be more appropriate.\n */\nclass Obb extends Collidable {\n  /**\n   * Defaults to being centered at the origin with its local axes aligned with the world axes.\n   *\n   * @param {number} halfSideLengthX\n   * @param {number} halfSideLengthY\n   * @param {number} halfSideLengthZ\n   * @param {boolean} [isStationary=false]\n   * @param {CollidablePhysicsJob} [physicsJob]\n   */\n  constructor(halfSideLengthX, halfSideLengthY, halfSideLengthZ, isStationary = false, physicsJob) {\n    super(isStationary, physicsJob);\n    this.extents = [\n      vec3.fromValues(halfSideLengthX, 0, 0),\n      vec3.fromValues(0, halfSideLengthY, 0),\n      vec3.fromValues(0, 0, halfSideLengthZ)\n    ];\n    this.axes = [\n      vec3.fromValues(1, 0, 0),\n      vec3.fromValues(0, 1, 0),\n      vec3.fromValues(0, 0, 1)\n    ];\n    this.halfSideLengths = [\n      halfSideLengthX,\n      halfSideLengthY,\n      halfSideLengthZ\n    ];\n    this._center = vec3.create();\n    this._orientation = quat.create();\n  }\n\n  /**\n   * @returns {vec3}\n   * @override\n   */\n  get centerOfVolume() {\n    return this._center;\n  }\n\n  /**\n   * @returns {Collidable}\n   * @override\n   */\n  get boundingVolume() {\n    // Reuse the same value when this is called multiple times.\n    if (!this._boundingSphere) {\n      const radius = Math.sqrt(this.halfSideLengthX * this.halfSideLengthX +\n          this.halfSideLengthY * this.halfSideLengthY +\n          this.halfSideLengthZ * this.halfSideLengthZ);\n      this._boundingSphere = new Sphere(0, 0, 0, radius, this.isStationary);\n    }\n    this._boundingSphere.position = this._center;\n    return this._boundingSphere;\n  }\n\n  /**\n   * @param {vec3} value\n   * @override\n   */\n  set position(value) {\n    vec3.copy(this._center, value);\n  }\n\n  /**\n   * @param {quat} value\n   * @override\n   */\n  set orientation(value) {\n    quat.copy(this._orientation, value);\n    this._updateExtents();\n  }\n  /** @returns {quat} */\n  get orientation() {\n    return this._orientation;\n  }\n\n  /** @returns {number} */\n  get halfSideLengthX() {\n    return this.halfSideLengths[0];\n  }\n  /** @param {number} value */\n  set halfSideLengthX(value) {\n    this.halfSideLengths[0] = value;\n    this._updateExtents();\n  }\n\n  /** @returns {number} */\n  get halfSideLengthY() {\n    return this.halfSideLengths[1];\n  }\n  /** @param {number} value */\n  set halfSideLengthY(value) {\n    this.halfSideLengths[1] = value;\n    this._updateExtents();\n  }\n\n  /** @returns {number} */\n  get halfSideLengthZ() {\n    return this.halfSideLengths[2];\n  }\n  /** @param {number} value */\n  set halfSideLengthZ(value) {\n    this.halfSideLengths[2] = value;\n    this._updateExtents();\n  }\n\n  /**\n   * Calls the given callback once for each vertex.\n   *\n   * Stops as soon as the callback returns true for a vertex.\n   *\n   * @param {VertexCallback} callback\n   * @param {vec3} [vertex] Output param.\n   * @returns {boolean} True if one of the callbacks returned true.\n   */\n  someVertex(callback, vertex) {\n    vertex = vertex || _vertex1;\n\n    for (let xScale = -1; xScale <= 1; xScale += 2) {\n      for (let yScale = -1; yScale <= 1; yScale += 2) {\n        for (let zScale = -1; zScale <= 1; zScale += 2) {\n          vec3.copy(vertex, this._center);\n          vec3.scaleAndAdd(vertex, vertex, this.extents[0], xScale);\n          vec3.scaleAndAdd(vertex, vertex, this.extents[1], yScale);\n          vec3.scaleAndAdd(vertex, vertex, this.extents[2], zScale);\n          if (callback(vertex)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Calls the given callback once for each edge.\n   *\n   * @param {EdgeCallback} callback\n   * @param {LineSegment} [edge] Output param.\n   * @returns {boolean} True if one of the callbacks returned true.\n   */\n  someEdge(callback, edge) {\n    edge = edge || _segment;\n\n    return _edgeExtentScales.some(edgeExtentScalePair => {\n      const vertex1ExtentScales = edgeExtentScalePair[0];\n      const vertex2ExtentScales = edgeExtentScalePair[1];\n\n      // Calculate the edge's first and second vertex.\n      vec3.copy(_vertex1, this._center);\n      vec3.copy(_vertex2, this._center);\n      for (let i = 0; i < 3; i++) {\n        vec3.scaleAndAdd(_vertex1, _vertex1, this.extents[i], vertex1ExtentScales[i]);\n        vec3.scaleAndAdd(_vertex2, _vertex2, this.extents[i], vertex2ExtentScales[i]);\n      }\n\n      // Call back with the edge.\n      edge.reset(_vertex1, _vertex2);\n      return callback(edge);\n    });\n  }\n\n  /**\n   * Calls the given callback once for each face.\n   *\n   * @param {FaceCallback} callback\n   * @param {Array.<vec3>} [face] Output param.\n   * @returns {boolean} True if one of the callbacks returned true.\n   */\n  someFace(callback, face) {\n    face = face || [];\n\n    return _faceExtentScales.some(faceExtentScales => {\n      const vertex1ExtentScales = faceExtentScales[0];\n      const vertex2ExtentScales = faceExtentScales[1];\n      const vertex3ExtentScales = faceExtentScales[2];\n      const vertex4ExtentScales = faceExtentScales[3];\n\n      // Calculate the face's vertices.\n      vec3.copy(_vertex1, this._center);\n      vec3.copy(_vertex2, this._center);\n      vec3.copy(_vertex3, this._center);\n      vec3.copy(_vertex4, this._center);\n      for (let i = 0; i < 3; i++) {\n        vec3.scaleAndAdd(_vertex1, _vertex1, this.extents[i], vertex1ExtentScales[i]);\n        vec3.scaleAndAdd(_vertex2, _vertex2, this.extents[i], vertex2ExtentScales[i]);\n        vec3.scaleAndAdd(_vertex3, _vertex3, this.extents[i], vertex3ExtentScales[i]);\n        vec3.scaleAndAdd(_vertex4, _vertex4, this.extents[i], vertex4ExtentScales[i]);\n      }\n\n      // Call back with the face.\n      face.splice(0, 4, _vertex1, _vertex2, _vertex3, _vertex4);\n      return callback(face);\n    });\n  }\n\n  /**\n   * Calls the given callback once for each face with a given additional offset from the center\n   * applied to each face.\n   *\n   * @param {FaceCallback} callback\n   * @param {number} radiusOffset\n   * @param {Array.<vec3>} [face] Output param.\n   * @returns {boolean} True if one of the callbacks returned true.\n   */\n  somePushedOutFace(callback, radiusOffset, face) {\n    face = face || [];\n\n    return _faceExtentScales.some((faceExtentScales, index) => {\n      const vertex1ExtentScales = faceExtentScales[0];\n      const vertex2ExtentScales = faceExtentScales[1];\n      const vertex3ExtentScales = faceExtentScales[2];\n      const vertex4ExtentScales = faceExtentScales[3];\n      const directionOffsets = _pushedOutFaceOffsetDirections[index];\n\n      // Calculate the face's vertices.\n      vec3.copy(_vertex1, this._center);\n      vec3.copy(_vertex2, this._center);\n      vec3.copy(_vertex3, this._center);\n      vec3.copy(_vertex4, this._center);\n      for (let i = 0; i < 3; i++) {\n        // Add the offset for the normal vertex position.\n        vec3.scaleAndAdd(_vertex1, _vertex1, this.extents[i], vertex1ExtentScales[i]);\n        vec3.scaleAndAdd(_vertex2, _vertex2, this.extents[i], vertex2ExtentScales[i]);\n        vec3.scaleAndAdd(_vertex3, _vertex3, this.extents[i], vertex3ExtentScales[i]);\n        vec3.scaleAndAdd(_vertex4, _vertex4, this.extents[i], vertex4ExtentScales[i]);\n        // Add the pushed-out offset.\n        vec3.scaleAndAdd(_vertex1, _vertex1, this.extents[i],\n            radiusOffset / this.halfSideLengths[i] * directionOffsets[i]);\n        vec3.scaleAndAdd(_vertex2, _vertex2, this.extents[i],\n            radiusOffset / this.halfSideLengths[i] * directionOffsets[i]);\n        vec3.scaleAndAdd(_vertex3, _vertex3, this.extents[i],\n            radiusOffset / this.halfSideLengths[i] * directionOffsets[i]);\n        vec3.scaleAndAdd(_vertex4, _vertex4, this.extents[i],\n            radiusOffset / this.halfSideLengths[i] * directionOffsets[i]);\n      }\n\n      // Call back with the face.\n      face.splice(0, 4, _vertex1, _vertex2, _vertex3, _vertex4);\n      return callback(face);\n    });\n  }\n\n  _updateExtents() {\n    vec3.set(_vertex1, this.halfSideLengths[0], 0, 0);\n    vec3.transformQuat(this.extents[0], _vertex1, this._orientation);\n    vec3.set(_vertex1, 0, this.halfSideLengths[1], 0);\n    vec3.transformQuat(this.extents[1], _vertex1, this._orientation);\n    vec3.set(_vertex1, 0, 0, this.halfSideLengths[2]);\n    vec3.transformQuat(this.extents[2], _vertex1, this._orientation);\n\n    vec3.set(_vertex1, 1, 0, 0);\n    vec3.transformQuat(this.axes[0], _vertex1, this._orientation);\n    vec3.set(_vertex1, 0, 1, 0);\n    vec3.transformQuat(this.axes[1], _vertex1, this._orientation);\n    vec3.set(_vertex1, 0, 0, 1);\n    vec3.transformQuat(this.axes[2], _vertex1, this._orientation);\n  }\n}\n\nconst _vertex1 = vec3.create();\nconst _vertex2 = vec3.create();\nconst _vertex3 = vec3.create();\nconst _vertex4 = vec3.create();\nconst _segment = new LineSegment(vec3.create(), vec3.create());\n\nconst _edgeExtentScales = [\n  // Front-face edges.\n  [[1, -1, -1], [1, -1, 1]],\n  [[1, -1, -1], [1, 1, -1]],\n  [[1, 1, 1], [1, -1, 1]],\n  [[1, 1, 1], [1, 1, -1]],\n  // Back-face edges.\n  [[-1, -1, -1], [-1, -1, 1]],\n  [[-1, -1, -1], [-1, 1, -1]],\n  [[-1, 1, 1], [-1, -1, 1]],\n  [[-1, 1, 1], [-1, 1, -1]],\n  // Front-to-back edges.\n  [[1, -1, 1], [-1, -1, 1]],\n  [[1, 1, -1], [-1, 1, -1]],\n  [[1, 1, 1], [-1, 1, 1]],\n  [[1, -1, -1], [-1, -1, -1]],\n];\n\nconst _faceExtentScales = [\n  [[1, -1, -1], [1, -1, 1], [1, 1, 1], [1, 1, -1]],\n  [[-1, -1, -1], [-1, -1, 1], [-1, 1, 1], [-1, 1, -1]],\n  [[-1, 1, -1], [1, 1, -1], [1, 1, 1], [-1, 1, 1]],\n  [[-1, -1, -1], [1, -1, -1], [1, -1, 1], [-1, -1, 1]],\n  [[-1, -1, 1], [1, -1, 1], [1, 1, 1], [-1, 1, 1]],\n  [[-1, -1, -1], [1, -1, -1], [1, 1, -1], [-1, 1, -1]],\n];\n\nconst _pushedOutFaceOffsetDirections = [\n  vec3.fromValues(1, 0, 0),\n  vec3.fromValues(-1, 0, 0),\n  vec3.fromValues(0, 1, 0),\n  vec3.fromValues(0, -1, 0),\n  vec3.fromValues(0, 0, 1),\n  vec3.fromValues(0, 0, -1),\n];\n\nexport {Obb};\n\n/**\n * @callback VertexCallback\n * @param {vec3}\n * @returns {boolean} If true, iteration will stop.\n */\n\n/**\n * @callback EdgeCallback\n * @param {LineSegment}\n * @returns {boolean} If true, iteration will stop.\n */\n\n/**\n * @callback FaceCallback\n * @param {Array.<vec3>}\n * @returns {boolean} If true, iteration will stop.\n */\n","import {Collidable} from './collidable';\n\n/**\n * This class represents a bounding sphere.\n *\n * This is primarily useful for collision detection. A bounding sphere is only appropriate for some\n * geometries. For other geometries, an axially-aligned bounding box may be more appropriate. For\n * others still, an oriented bounding box or a more complicated hierarchical model may be more\n * appropriate.\n */\nclass Sphere extends Collidable {\n  /**\n   * @param {number} centerX\n   * @param {number} centerY\n   * @param {number} centerZ\n   * @param {number} radius\n   * @param {boolean} [isStationary=false]\n   * @param {CollidablePhysicsJob} [physicsJob]\n   */\n  constructor(centerX, centerY, centerZ, radius, isStationary = false, physicsJob) {\n    super(isStationary, physicsJob);\n    this.centerX = centerX;\n    this.centerY = centerY;\n    this.centerZ = centerZ;\n    this.radius = radius;\n  }\n\n  /**\n   * @returns {vec3}\n   * @override\n   */\n  get centerOfVolume() {\n    // Reuse the same object when this is called multiple times.\n    this._center = this._center || vec3.create();\n    vec3.set(this._center, this.centerX, this.centerY, this.centerZ);\n    return this._center;\n  }\n\n  /**\n   * @returns {Collidable}\n   * @override\n   */\n  get boundingVolume() {\n    return this;\n  }\n\n  /**\n   * @param {vec3} value\n   * @override\n   */\n  set position(value) {\n    this.centerX = value[0];\n    this.centerY = value[1];\n    this.centerZ = value[2];\n  }\n\n  /**\n   * @param {quat} value\n   * @override\n   */\n  set orientation(value) {\n    // Do nothing.\n  }\n}\n\nexport {Sphere};\n","import * as aabbCollisionDetection from './src/aabb-collision-detection';\nimport * as capsuleCollisionDetection from './src/capsule-collision-detection';\nimport * as obbCollisionDetection from './src/obb-collision-detection';\nimport * as sphereCollisionDetection from './src/sphere-collision-detection';\n\nexport {\n  aabbCollisionDetection,\n  capsuleCollisionDetection,\n  obbCollisionDetection,\n  sphereCollisionDetection,\n};\n","import * as sphereCollisionDetection from './sphere-collision-detection';\nimport * as obbCollisionDetection from './obb-collision-detection';\nimport * as capsuleCollisionDetection from './capsule-collision-detection';\nimport {aabbVsPoint as geometryAabbVsPoint} from '../../../util';\n\n/**\n * This module defines utility methods for detecting whether intersection has occurred between\n * axially-aligned bounding boxes and other shapes.\n */\n\n/**\n * @param {Aabb} aabb\n * @param {vec3} point\n * @returns {boolean}\n */\nfunction aabbVsPoint(aabb, point) {\n  return geometryAabbVsPoint(aabb, point);\n}\n\n/**\n * @param {Aabb} aabb\n * @param {Sphere} sphere\n * @returns {boolean}\n */\nfunction aabbVsSphere(aabb, sphere) {\n  return sphereCollisionDetection.sphereVsAabb(sphere, aabb);\n}\n\n/**\n * @param {Aabb} aabbA\n * @param {Aabb} aabbB\n * @returns {boolean}\n */\nfunction aabbVsAabb(aabbA, aabbB) {\n  return aabbA.maxX >= aabbB.minX && aabbA.minX <= aabbB.maxX &&\n      aabbA.maxY >= aabbB.minY && aabbA.minY <= aabbB.maxY &&\n      aabbA.maxZ >= aabbB.minZ && aabbA.minZ <= aabbB.maxZ;\n}\n\n/**\n * @param {Aabb} aabb\n * @param {Obb} obb\n * @returns {boolean}\n */\nfunction aabbVsObb(aabb, obb) {\n  return obbCollisionDetection.obbVsAabb(obb, aabb);\n}\n\n/**\n * @param {Aabb} aabb\n * @param {Capsule} capsule\n * @returns {boolean}\n */\nfunction aabbVsCapsule(aabb, capsule) {\n  return capsuleCollisionDetection.capsuleVsAabb(capsule, aabb);\n}\n\nexport {\n  aabbVsPoint,\n  aabbVsSphere,\n  aabbVsAabb,\n  aabbVsObb,\n  aabbVsCapsule,\n};\n","/**\n * This module defines utility methods for detecting whether intersection has occurred between\n * capsules and other shapes.\n */\n\nimport {\n  findClosestPointFromAabbToPoint,\n  findSquaredDistanceBetweenSegments,\n  findSquaredDistanceFromSegmentToPoint,\n  tmpVec1\n} from '../../../util';\nimport * as obbCollisionDetection from './obb-collision-detection';\n\n/**\n * @param {Capsule} capsule\n * @param {vec3} point\n * @returns {boolean}\n */\nfunction capsuleVsPoint(capsule, point) {\n  return findSquaredDistanceFromSegmentToPoint(capsule.segment, point) <=\n      capsule.radius * capsule.radius;\n}\n\n/**\n * @param {Capsule} capsule\n * @param {Sphere} sphere\n * @returns {boolean}\n */\nfunction capsuleVsSphere(capsule, sphere) {\n  const sumOfRadii = capsule.radius + sphere.radius;\n  return findSquaredDistanceFromSegmentToPoint(capsule.segment, sphere.centerOfVolume) <=\n      sumOfRadii * sumOfRadii;\n}\n\n/**\n * NOTE: This implementation cheats by checking whether vertices from one shape lie within the\n * other. Due to the tunnelling problem, it is possible that intersection occurs without any\n * vertices lying within the other shape. However, (A) this is unlikely, and (B) we are ignoring the\n * tunnelling problem for the rest of this collision system anyway.\n *\n * @param {Capsule} capsule\n * @param {Aabb} aabb\n * @returns {boolean}\n */\nfunction capsuleVsAabb(capsule, aabb) {\n  const squaredRadius = capsule.radius * capsule.radius;\n\n  // Check whether the two capsule ends intersect the AABB (sphere vs AABB) (addresses the\n  // capsule-vs-AABB-face case).\n  findClosestPointFromAabbToPoint(tmpVec1, aabb, capsule.segment.start);\n  if (vec3.squaredDistance(tmpVec1, capsule.segment.start) <= squaredRadius) {\n    return true;\n  }\n  findClosestPointFromAabbToPoint(tmpVec1, aabb, capsule.segment.end);\n  if (vec3.squaredDistance(tmpVec1, capsule.segment.end) <= squaredRadius) {\n    return true;\n  }\n\n  // Check whether the capsule intersects with any AABB edge (addresses the capsule-vs-AABB-edge\n  // case).\n  return aabb.someEdge(edge =>\n      findSquaredDistanceBetweenSegments(capsule.segment, edge) <= squaredRadius);\n\n  // (The capsule-vs-AABB-vertex case is covered by the capsule-vs-AABB-edge case).\n}\n\n/**\n * @param {Capsule} capsule\n * @param {Obb} obb\n * @returns {boolean}\n */\nfunction capsuleVsObb(capsule, obb) {\n  return obbCollisionDetection.obbVsCapsule(obb, capsule);\n}\n\n/**\n * @param {Capsule} capsuleA\n * @param {Capsule} capsuleB\n * @returns {boolean}\n */\nfunction capsuleVsCapsule(capsuleA, capsuleB) {\n  const sumOfRadii = capsuleA.radius + capsuleB.radius;\n  return findSquaredDistanceBetweenSegments(capsuleA.segment, capsuleB.segment) <=\n      sumOfRadii * sumOfRadii;\n}\n\nexport {\n  capsuleVsPoint,\n  capsuleVsSphere,\n  capsuleVsAabb,\n  capsuleVsObb,\n  capsuleVsCapsule,\n};\n","/**\n * This module defines utility methods for detecting whether intersection has occurred between\n * oriented bounding boxes and other shapes.\n */\n\nimport {\n  findClosestPointFromObbToPoint,\n  findPoiBetweenSegmentAndPlaneRegion,\n  findSquaredDistanceBetweenSegments,\n  tmpVec1,\n  tmpVec2,\n  tmpVec3,\n  tmpVec4\n} from '../../../util';\nimport * as aabbCollisionDetection from './aabb-collision-detection';\nimport * as capsuleCollisionDetection from './capsule-collision-detection';\n\n// TODO: Refactor these to not actually calculate the point of intersection. These checks can\n// instead be done more efficiently using SAT.\n\n/**\n * @param {Obb} obb\n * @param {vec3} point\n * @returns {boolean}\n */\nfunction obbVsPoint(obb, point) {\n  vec3.subtract(tmpVec4, point, obb.centerOfVolume);\n\n  vec3.set(tmpVec1, 1, 0, 0);\n  vec3.transformQuat(tmpVec1, tmpVec1, obb.orientation);\n  const axis1Distance = vec3.dot(tmpVec4, tmpVec1);\n\n  if (axis1Distance >= -obb.halfSideLengthX && axis1Distance <= obb.halfSideLengthX) {\n    vec3.set(tmpVec2, 0, 1, 0);\n    vec3.transformQuat(tmpVec2, tmpVec2, obb.orientation);\n    const axis2Distance = vec3.dot(tmpVec4, tmpVec2);\n\n    if (axis2Distance >= -obb.halfSideLengthY && axis2Distance <= obb.halfSideLengthY) {\n      vec3.set(tmpVec3, 0, 0, 1);\n      vec3.transformQuat(tmpVec3, tmpVec3, obb.orientation);\n      const axis3Distance = vec3.dot(tmpVec4, tmpVec3);\n\n      return axis3Distance >= -obb.halfSideLengthZ && axis3Distance <= obb.halfSideLengthZ;\n    }\n  }\n\n  return false;\n}\n\n/**\n * @param {Obb} obb\n * @param {Sphere} sphere\n * @returns {boolean}\n */\nfunction obbVsSphere(obb, sphere) {\n  findClosestPointFromObbToPoint(tmpVec1, obb, sphere.centerOfVolume);\n  return vec3.squaredDistance(tmpVec1, sphere.centerOfVolume) <=\n      sphere.radius * sphere.radius;\n}\n\n/**\n * NOTE: This implementation cheats by checking whether vertices from one shape lie within the\n * other. Due to the tunnelling problem, it is possible that intersection occurs without any\n * vertices lying within the other shape. However, (A) this is unlikely, and (B) we are ignoring the\n * tunnelling problem for the rest of this collision system anyway.\n *\n * @param {Obb} obb\n * @param {Aabb} aabb\n * @returns {boolean}\n */\nfunction obbVsAabb(obb, aabb) {\n  return _obbVsBoxHelper(obb, aabb, aabbCollisionDetection.aabbVsPoint);\n}\n\n/**\n * NOTE: This implementation cheats by checking whether vertices from one shape lie within the\n * other. Due to the tunnelling problem, it is possible that intersection occurs without any\n * vertices lying within the other shape. However, (A) this is unlikely, and (B) we are ignoring the\n * tunnelling problem for the rest of this collision system anyway.\n *\n * @param {Obb} obbA\n * @param {Obb} obbB\n * @returns {boolean}\n */\nfunction obbVsObb(obbA, obbB) {\n  return _obbVsBoxHelper(obbA, obbB, obbVsPoint);\n}\n\n/**\n * @param {Obb} obb\n * @param {Obb|Aabb} other\n * @param {Function} otherVsPointCallback\n * @returns {boolean}\n * @private\n */\nfunction _obbVsBoxHelper(obb, other, otherVsPointCallback) {\n  // Check whether any vertices from A lie within B's bounds.\n  if (obb.someVertex(vertex => otherVsPointCallback(other, vertex))) return true;\n\n  // Check whether any vertices from B lie within A's bounds.\n  if (other.someVertex(vertex => obbVsPoint(obb, vertex))) return true;\n\n  // We assume that a vertex-to-face collision would have been detected by one of the two above\n  // checks. Any edge-to-edge collision must involve both an edge from A through a face of B and\n  // vice versa. So it is sufficient to only check the edges of one and the faces of the other.\n  if (other.someEdge(edge =>\n          obb.someFace(face =>\n              findPoiBetweenSegmentAndPlaneRegion(tmpVec1, edge, ...face))))\n    return true;\n\n  return false;\n}\n\n/**\n * @param {Obb} obb\n * @param {Capsule} capsule\n * @returns {boolean}\n */\nfunction obbVsCapsule(obb, capsule) {\n  // Check the edges.\n  const squaredRadius = capsule.radius * capsule.radius;\n  let areIntersecting = obb.someEdge(edge =>\n      findSquaredDistanceBetweenSegments(capsule.segment, edge) < squaredRadius);\n\n  if (areIntersecting) return true;\n\n  // Check the faces.\n  areIntersecting = obb.somePushedOutFace(face =>\n          findPoiBetweenSegmentAndPlaneRegion(tmpVec1, capsule.segment, ...face), capsule.radius);\n\n  // Check for inclusion of one shape inside the other.\n  areIntersecting = areIntersecting || obbVsPoint(obb, capsule.centerOfVolume);\n  areIntersecting = areIntersecting || capsuleCollisionDetection.capsuleVsPoint(capsule,\n      obb.centerOfVolume);\n\n  return areIntersecting;\n}\n\nexport {\n  obbVsPoint,\n  obbVsSphere,\n  obbVsAabb,\n  obbVsObb,\n  obbVsCapsule,\n};\n","import {findClosestPointFromAabbToPoint, tmpVec1} from '../../../util';\nimport * as obbCollisionDetection from './obb-collision-detection';\nimport * as capsuleCollisionDetection from './capsule-collision-detection';\n\n/**\n * This module defines utility methods for detecting whether intersection has occurred between\n * spheres and other shapes.\n */\n\n/**\n * @param {Sphere} sphere\n * @param {vec3} point\n * @returns {boolean}\n */\nfunction sphereVsPoint(sphere, point) {\n  return vec3.squaredDistance(point, sphere.centerOfVolume) <= sphere.radius * sphere.radius;\n}\n\n/**\n * @param {Sphere} sphereA\n * @param {Sphere} sphereB\n * @returns {boolean}\n */\nfunction sphereVsSphere(sphereA, sphereB) {\n  const sumOfRadii = sphereA.radius + sphereB.radius;\n  return vec3.squaredDistance(sphereA.centerOfVolume, sphereB.centerOfVolume) <=\n      sumOfRadii * sumOfRadii;\n}\n\n/**\n * @param {Sphere} sphere\n * @param {Aabb} aabb\n * @returns {boolean}\n */\nfunction sphereVsAabb(sphere, aabb) {\n  findClosestPointFromAabbToPoint(tmpVec1, aabb, sphere.centerOfVolume);\n  return vec3.squaredDistance(tmpVec1, sphere.centerOfVolume) <= sphere.radius * sphere.radius;\n}\n\n/**\n * @param {Sphere} sphere\n * @param {Obb} obb\n * @returns {boolean}\n */\nfunction sphereVsObb(sphere, obb) {\n  return obbCollisionDetection.obbVsSphere(obb, sphere);\n}\n\n/**\n * @param {Sphere} sphere\n * @param {Capsule} capsule\n * @returns {boolean}\n */\nfunction sphereVsCapsule(sphere, capsule) {\n  return capsuleCollisionDetection.capsuleVsSphere(capsule, sphere);\n}\n\nexport {\n  sphereVsPoint,\n  sphereVsSphere,\n  sphereVsAabb,\n  sphereVsObb,\n  sphereVsCapsule,\n};\n","import * as aabbContactCalculation from './src/aabb-contact-calculation';\nimport * as capsuleContactCalculation from './src/capsule-contact-calculation';\nimport * as obbContactCalculation from './src/obb-contact-calculation';\nimport * as sphereContactCalculation from './src/sphere-contact-calculation';\n\nexport {\n  aabbContactCalculation,\n  capsuleContactCalculation,\n  obbContactCalculation,\n  sphereContactCalculation,\n};\n","/**\n * This module defines utility methods for calculating a contact point between axially-aligned \n * bounding boxes and other shapes.\n *\n * - Each of these functions assumes that the objects are actually colliding.\n * - The resulting contact point may be anywhere within the intersection of the two objects.\n */\n\nimport * as sphereContactCalculation from './sphere-contact-calculation';\nimport * as obbContactCalculation from './obb-contact-calculation';\nimport * as capsuleContactCalculation from './capsule-contact-calculation';\nimport {tmpVec1} from '../../../util';\nimport {aabbCollisionDetection} from '../../collision-detection';\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Aabb} aabb\n * @param {vec3} point\n */\nfunction aabbVsPoint(contactPoint, contactNormal, aabb, point) {\n  vec3.copy(contactPoint, point);\n  findAabbNormalFromContactPoint(contactNormal, contactPoint, aabb);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Aabb} aabb\n * @param {Sphere} sphere\n */\nfunction aabbVsSphere(contactPoint, contactNormal, aabb, sphere) {\n  sphereContactCalculation.sphereVsAabb(contactPoint, contactNormal, sphere, aabb);\n  vec3.negate(contactNormal, contactNormal);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Aabb} aabbA\n * @param {Aabb} aabbB\n */\nfunction aabbVsAabb(contactPoint, contactNormal, aabbA, aabbB) {\n  // Compute the contact normal.\n  vec3.set(contactNormal, 0, 0, 0);\n  const xIntersectionDepth = Math.min(aabbA.maxX - aabbB.minX, aabbB.maxX - aabbA.minX);\n  const yIntersectionDepth = Math.min(aabbA.maxY - aabbB.minY, aabbB.maxY - aabbA.minY);\n  const zIntersectionDepth = Math.min(aabbA.maxZ - aabbB.minZ, aabbB.maxZ - aabbA.minZ);\n  // Assume that the direction of intersection corresponds to whichever axis has the shallowest\n  // intersection.\n  if (xIntersectionDepth <= yIntersectionDepth) {\n    if (xIntersectionDepth <= zIntersectionDepth) {\n      contactNormal[0] = aabbA.maxX - aabbB.minX <= aabbB.maxX - aabbA.minX ? 1 : -1;\n    } else {\n      contactNormal[2] = aabbA.maxZ - aabbB.minZ <= aabbB.maxZ - aabbA.minZ ? 1 : -1;\n    }\n  } else {\n    if (yIntersectionDepth <= zIntersectionDepth) {\n      contactNormal[1] = aabbA.maxY - aabbB.minY <= aabbB.maxY - aabbA.minY ? 1 : -1;\n    } else {\n      contactNormal[2] = aabbA.maxZ - aabbB.minZ <= aabbB.maxZ - aabbA.minZ ? 1 : -1;\n    }\n  }\n\n  // TODO: The two AABBs form a square intersection cross-section region along the direction of the\n  // normal. Calculate the center of that square to use as the point of contact.\n  if (!aabbA.someVertex(vertex => aabbCollisionDetection.aabbVsPoint(aabbB, vertex),\n          contactPoint)) {\n    aabbB.someVertex(vertex => aabbCollisionDetection.aabbVsPoint(aabbA, vertex), contactPoint);\n  }\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Aabb} aabb\n * @param {Obb} obb\n */\nfunction aabbVsObb(contactPoint, contactNormal, aabb, obb) {\n  obbContactCalculation.obbVsAabb(contactPoint, contactNormal, obb, aabb);\n  vec3.negate(contactNormal, contactNormal);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Aabb} aabb\n * @param {Capsule} capsule\n */\nfunction aabbVsCapsule(contactPoint, contactNormal, aabb, capsule) {\n  capsuleContactCalculation.capsuleVsAabb(contactPoint, contactNormal, capsule, aabb);\n  vec3.negate(contactNormal, contactNormal);\n}\n\n/**\n * @param {vec3} contactNormal Output param.\n * @param {vec3} contactPoint\n * @param {Aabb} aabb\n * @private\n */\nfunction findAabbNormalFromContactPoint(contactNormal, contactPoint, aabb) {\n  vec3.set(contactNormal, 0, 0, 0);\n  vec3.subtract(tmpVec1, contactPoint, aabb.centerOfVolume);\n  const xDistanceFromFace = aabb.rangeX / 2 - Math.abs(tmpVec1[0]);\n  const yDistanceFromFace = aabb.rangeY / 2 - Math.abs(tmpVec1[1]);\n  const zDistanceFromFace = aabb.rangeZ / 2 - Math.abs(tmpVec1[2]);\n  // Assume that the point is contacting whichever face it's closest to.\n  if (xDistanceFromFace <= yDistanceFromFace) {\n    if (xDistanceFromFace <= zDistanceFromFace) {\n      contactNormal[0] = tmpVec1[0] > 0 ? 1 : -1;\n    } else {\n      contactNormal[2] = tmpVec1[2] > 0 ? 1 : -1;\n    }\n  } else {\n    if (yDistanceFromFace <= zDistanceFromFace) {\n      contactNormal[1] = tmpVec1[1] > 0 ? 1 : -1;\n    } else {\n      contactNormal[2] = tmpVec1[2] > 0 ? 1 : -1;\n    }\n  }\n}\n\nexport {\n  aabbVsPoint,\n  aabbVsSphere,\n  aabbVsAabb,\n  aabbVsObb,\n  aabbVsCapsule,\n  findAabbNormalFromContactPoint,\n};\n","/**\n * This module defines utility methods for calculating a contact point between capsules and other \n * shapes.\n *\n * - Each of these functions assumes that the objects are actually colliding.\n * - The resulting contact point may be anywhere within the intersection of the two objects.\n */\n\nimport {\n  findClosestPointFromAabbToPoint,\n  findClosestPointOnSegmentToPoint,\n  findClosestPointsFromSegmentToSegment,\n  tmpVec1,\n  tmpVec2\n} from '../../../util';\nimport * as obbContactCalculation from './obb-contact-calculation';\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Capsule} capsule\n * @param {vec3} point\n */\nfunction capsuleVsPoint(contactPoint, contactNormal, capsule, point) {\n  vec3.copy(contactPoint, point);\n  findClosestPointOnSegmentToPoint(contactNormal, capsule.segment, point);\n  vec3.subtract(contactNormal, contactPoint, contactNormal);\n  vec3.normalize(contactNormal, contactNormal);\n}\n\n/**\n * Finds the closest point on the surface of the capsule to the sphere center.\n *\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Capsule} capsule\n * @param {Sphere} sphere\n */\nfunction capsuleVsSphere(contactPoint, contactNormal, capsule, sphere) {\n  const sphereCenter = sphere.centerOfVolume;\n  findClosestPointOnSegmentToPoint(contactPoint, capsule.segment, sphereCenter);\n  vec3.subtract(contactNormal, sphereCenter, contactPoint);\n  vec3.normalize(contactNormal, contactNormal);\n  vec3.scaleAndAdd(contactPoint, contactPoint, contactNormal, capsule.radius);\n}\n\n/**\n * Finds the closest point on the surface of the capsule to the AABB.\n *\n * NOTE: This implementation cheats by checking whether vertices from one shape lie within the\n * other. Due to the tunnelling problem, it is possible that intersection occurs without any\n * vertices lying within the other shape. However, (A) this is unlikely, and (B) we are ignoring the\n * tunnelling problem for the rest of this collision system anyway.\n *\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Capsule} capsule\n * @param {Aabb} aabb\n */\nfunction capsuleVsAabb(contactPoint, contactNormal, capsule, aabb) {\n  // tmpVec1 represents the closest point on the capsule to the AABB. tmpVec2\n  // represents the closest point on the AABB to the capsule.\n\n  //\n  // Check whether the two capsule ends intersect the AABB (sphere vs AABB) (addresses the\n  // capsule-vs-AABB-face case).\n  //\n\n  const squaredRadius = capsule.radius * capsule.radius;\n  let doesAabbIntersectAnEndPoint = false;\n\n  let endPoint = capsule.segment.start;\n  findClosestPointFromAabbToPoint(tmpVec2, aabb, endPoint);\n  if (vec3.squaredDistance(tmpVec2, endPoint) <= squaredRadius) {\n    doesAabbIntersectAnEndPoint = true;\n  } else {\n    endPoint = capsule.segment.end;\n    findClosestPointFromAabbToPoint(tmpVec2, aabb, endPoint);\n    if (vec3.squaredDistance(tmpVec2, endPoint) <= squaredRadius) {\n      doesAabbIntersectAnEndPoint = true;\n    }\n  }\n\n  if (!doesAabbIntersectAnEndPoint) {\n    //\n    // Check whether the capsule intersects with any AABB edge (addresses the capsule-vs-AABB-edge\n    // case).\n    //\n    aabb.someEdge(edge => {\n      findClosestPointsFromSegmentToSegment(tmpVec1, tmpVec2,\n          capsule.segment, edge);\n      const distance = vec3.squaredDistance(tmpVec1, tmpVec2);\n      return distance <= squaredRadius;\n    });\n  }\n\n  // (The capsule-vs-AABB-vertex case is covered by the capsule-vs-AABB-edge case).\n\n  findClosestPointOnSegmentToPoint(tmpVec1, capsule.segment, tmpVec2);\n  vec3.subtract(contactNormal, tmpVec2, tmpVec1);\n  vec3.normalize(contactNormal, contactNormal);\n  vec3.scaleAndAdd(contactPoint, tmpVec1, contactNormal, capsule.radius);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Capsule} capsule\n * @param {Obb} obb\n */\nfunction capsuleVsObb(contactPoint, contactNormal, capsule, obb) {\n  obbContactCalculation.obbVsCapsule(contactPoint, contactNormal, obb, capsule);\n  vec3.negate(contactNormal, contactNormal);\n}\n\n/**\n * Finds the closest point on the surface of capsule A to capsule B.\n *\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Capsule} capsuleA\n * @param {Capsule} capsuleB\n */\nfunction capsuleVsCapsule(contactPoint, contactNormal, capsuleA, capsuleB) {\n  findClosestPointsFromSegmentToSegment(tmpVec1, tmpVec2,\n      capsuleA.segment, capsuleB.segment);\n  vec3.subtract(contactNormal, tmpVec2, tmpVec1);\n  vec3.normalize(contactNormal, contactNormal);\n  vec3.scaleAndAdd(contactPoint, tmpVec1, contactNormal, capsuleA.radius);\n}\n\nexport {\n  capsuleVsPoint,\n  capsuleVsSphere,\n  capsuleVsAabb,\n  capsuleVsObb,\n  capsuleVsCapsule,\n};\n","/**\n * This module defines utility methods for calculating a contact point between oriented bounding\n * boxes and other shapes.\n *\n * - Each of these functions assumes that the objects are actually colliding.\n * - The resulting contact point may be anywhere within the intersection of the two objects.\n */\n\nimport {\n  findPoiBetweenSegmentAndPlaneRegion,\n  findClosestPointFromObbToPoint,\n  findSquaredDistanceBetweenSegments,\n  findClosestPointsFromSegmentToSegment,\n  tmpVec1\n} from '../../../util';\nimport {aabbCollisionDetection, obbCollisionDetection} from '../../collision-detection';\nimport {LineSegment} from '../../collidables';\nimport * as aabbContactCalculation from './aabb-contact-calculation';\n\n// TODO: There are more efficient (but far more complicated) algorithms for finding the point of\n// intersection with OBBs. Port over some other pre-existing solutions for these.\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Obb} obb\n * @param {vec3} point\n */\nfunction obbVsPoint(contactPoint, contactNormal, obb, point) {\n  vec3.copy(contactPoint, point);\n  findObbNormalFromContactPoint(contactNormal, contactPoint, obb);\n}\n\n/**\n * Finds the closest point anywhere inside the OBB to the center of the sphere.\n *\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Obb} obb\n * @param {Sphere} sphere\n */\nfunction obbVsSphere(contactPoint, contactNormal, obb, sphere) {\n  findClosestPointFromObbToPoint(contactPoint, obb, sphere.centerOfVolume);\n  vec3.subtract(contactNormal, sphere.centerOfVolume, contactPoint);\n  vec3.normalize(contactNormal, contactNormal);\n}\n\n/**\n * NOTE: This implementation cheats by checking whether vertices from one shape lie within the\n * other. Due to the tunnelling problem, it is possible that intersection occurs without any\n * vertices lying within the other shape. However, (A) this is unlikely, and (B) we are ignoring the\n * tunnelling problem for the rest of this collision system anyway.\n *\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Obb} obb\n * @param {Aabb} aabb\n */\nfunction obbVsAabb(contactPoint, contactNormal, obb, aabb) {\n  return _obbVsBoxHelper(contactPoint, contactNormal, obb, aabb, aabbCollisionDetection.aabbVsPoint,\n      aabbContactCalculation.findAabbNormalFromContactPoint);\n}\n\n/**\n * NOTE: This implementation cheats by checking whether vertices from one shape lie within the\n * other. Due to the tunnelling problem, it is possible that intersection occurs without any\n * vertices lying within the other shape. However, (A) this is unlikely, and (B) we are ignoring the\n * tunnelling problem for the rest of this collision system anyway.\n *\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Obb} obbA\n * @param {Obb} obbB\n */\nfunction obbVsObb(contactPoint, contactNormal, obbA, obbB) {\n  return _obbVsBoxHelper(contactPoint, contactNormal, obbA, obbB, obbCollisionDetection.obbVsPoint,\n      findObbNormalFromContactPoint);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Obb} obb\n * @param {Obb|Aabb} other\n * @param {Function} otherVsPointCollisionDetectionCallback\n * @param {Function} findOtherNormalFromContactPoint\n * @private\n */\nfunction _obbVsBoxHelper(contactPoint, contactNormal, obb, other,\n                         otherVsPointCollisionDetectionCallback,\n                         findOtherNormalFromContactPoint) {\n  // Check whether any vertices from A lie within B's bounds.\n  if (obb.someVertex(vertex => otherVsPointCollisionDetectionCallback(other, vertex),\n          contactPoint)) {\n    findOtherNormalFromContactPoint(contactNormal, contactPoint, other);\n    vec3.negate(contactNormal, contactNormal);\n    return;\n  }\n\n  // Check whether any vertices from B lie within A's bounds.\n  if (other.someVertex(vertex => obbCollisionDetection.obbVsPoint(obb, vertex), contactPoint)) {\n    findObbNormalFromContactPoint(contactNormal, contactPoint, obb);\n    return;\n  }\n\n  // We assume that a vertex-to-face collision would have been detected by one of the two above\n  // checks. Any edge-to-edge collision must involve both an edge from A through a face of B and\n  // vice versa. So it is sufficient to only check the edges of one and the faces of the other.\n  other.someEdge(edge =>\n      obb.someFace(face => findPoiBetweenSegmentAndPlaneRegion(contactPoint, edge, ...face)));\n  findObbNormalFromContactPoint(contactNormal, contactPoint, obb);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Obb} obb\n * @param {Capsule} capsule\n */\nfunction obbVsCapsule(contactPoint, contactNormal, obb, capsule) {\n  // tmpVec1 is the point on the capsule segment that is closest to the OBB.\n\n  //\n  // Check the edges.\n  //\n\n  const segment = new LineSegment(vec3.create(), vec3.create());\n  const squaredRadius = capsule.radius * capsule.radius;\n  const areIntersecting = obb.someEdge(edge =>\n      findSquaredDistanceBetweenSegments(capsule.segment, edge) < squaredRadius, segment);\n\n  if (areIntersecting) {\n    findClosestPointsFromSegmentToSegment(tmpVec1, contactPoint, capsule.segment, segment);\n    vec3.subtract(contactNormal, tmpVec1, contactPoint);\n    vec3.normalize(contactNormal, contactNormal);\n    return;\n  }\n\n  //\n  // Check the faces.\n  //\n\n  obb.somePushedOutFace(face =>\n      findPoiBetweenSegmentAndPlaneRegion(tmpVec1, capsule.segment, ...face), capsule.radius);\n\n  findObbNormalFromContactPoint(contactNormal, tmpVec1, obb);\n\n  // NOTE: This assumes that the angle between the capsule segment and the face plane is not oblique\n  // and that the depth of penetration is shallow. When both of these conditions are not true, the\n  // contact point will be offset from the intersection point on the pushed-out face.\n  vec3.scaleAndAdd(contactPoint, tmpVec1, contactNormal, -capsule.radius);\n}\n\n/**\n * @param {vec3} contactNormal Output param.\n * @param {vec3} contactPoint\n * @param {Obb} obb\n * @private\n */\nfunction findObbNormalFromContactPoint(contactNormal, contactPoint, obb) {\n  // Calculate the displacement along each axis.\n  const projections = [];\n  vec3.subtract(tmpVec1, contactPoint, obb.centerOfVolume);\n  for (let i = 0; i < 3; i++) {\n    projections[i] = vec3.dot(obb.axes[i], tmpVec1);\n  }\n\n  // Determine which face the normal is pointing away from.\n  vec3.set(contactNormal, 0, 0, 0);\n  const xDistanceFromFace = obb.halfSideLengths[0] - Math.abs(projections[0]);\n  const yDistanceFromFace = obb.halfSideLengths[1] - Math.abs(projections[1]);\n  const zDistanceFromFace = obb.halfSideLengths[2] - Math.abs(projections[2]);\n  // Assume that the point is contacting whichever face it's closest to.\n  if (xDistanceFromFace <= yDistanceFromFace) {\n    if (xDistanceFromFace <= zDistanceFromFace) {\n      contactNormal[0] = projections[0] > 0 ? 1 : -1;\n    } else {\n      contactNormal[2] = projections[2] > 0 ? 1 : -1;\n    }\n  } else {\n    if (yDistanceFromFace <= zDistanceFromFace) {\n      contactNormal[1] = projections[1] > 0 ? 1 : -1;\n    } else {\n      contactNormal[2] = projections[2] > 0 ? 1 : -1;\n    }\n  }\n\n  // Apply the OBB's orientation to the normal.\n  vec3.transformQuat(contactNormal, contactNormal, obb.orientation);\n}\n\nexport {\n  obbVsPoint,\n  obbVsSphere,\n  obbVsAabb,\n  obbVsObb,\n  obbVsCapsule,\n  findObbNormalFromContactPoint,\n};\n","/**\n * This module defines utility methods for calculating a contact point between spheres and other\n * shapes.\n *\n * - Each of these functions assumes that the objects are actually colliding.\n * - The resulting contact point may be anywhere within the intersection of the two objects.\n */\n\nimport {findClosestPointFromAabbSurfaceToPoint} from '../../../util';\nimport {findAabbNormalFromContactPoint} from './aabb-contact-calculation';\nimport * as obbContactCalculation from './obb-contact-calculation';\nimport * as capsuleContactCalculation from './capsule-contact-calculation';\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Sphere} sphere\n * @param {vec3} point\n */\nfunction sphereVsPoint(contactPoint, contactNormal, sphere, point) {\n  vec3.copy(contactPoint, point);\n  // Assume that the point is contacting the closest point on the surface of the sphere.\n  vec3.subtract(contactNormal, point, sphere.centerOfVolume);\n  vec3.normalize(contactNormal, contactNormal);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Sphere} sphereA\n * @param {Sphere} sphereB\n */\nfunction sphereVsSphere(contactPoint, contactNormal, sphereA, sphereB) {\n  vec3.subtract(contactNormal, sphereB.centerOfVolume, sphereA.centerOfVolume);\n  vec3.normalize(contactNormal, contactNormal);\n  // The point on the surface of sphere A that is closest to the center of sphere B.\n  vec3.scaleAndAdd(contactPoint, sphereA.centerOfVolume, contactNormal, sphereA.radius);\n}\n\n/**\n * Finds the closest point on the surface of the AABB to the sphere center.\n *\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Sphere} sphere\n * @param {Aabb} aabb\n */\nfunction sphereVsAabb(contactPoint, contactNormal, sphere, aabb) {\n  findClosestPointFromAabbSurfaceToPoint(contactPoint, aabb, sphere.centerOfVolume);\n  findAabbNormalFromContactPoint(contactNormal, contactPoint, aabb);\n  vec3.negate(contactNormal, contactNormal);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Sphere} sphere\n * @param {Obb} obb\n */\nfunction sphereVsObb(contactPoint, contactNormal, sphere, obb) {\n  obbContactCalculation.obbVsSphere(contactPoint, contactNormal, obb, sphere);\n  vec3.negate(contactNormal, contactNormal);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Sphere} sphere\n * @param {Capsule} capsule\n */\nfunction sphereVsCapsule(contactPoint, contactNormal, sphere, capsule) {\n  capsuleContactCalculation.capsuleVsSphere(contactPoint, contactNormal, capsule, sphere);\n  vec3.negate(contactNormal, contactNormal);\n}\n\nexport {\n  sphereVsPoint,\n  sphereVsSphere,\n  sphereVsAabb,\n  sphereVsObb,\n  sphereVsCapsule,\n};\n","export * from './collidables';\nexport * from './collision-detection';\nexport * from './contact-calculation';\n\nexport * from './src/collidable-factories';\nexport * from './src/collidable-physics-job';\nexport * from './src/collidable-store';\nexport * from './src/collision-handler';\nexport * from './src/collision-utils';\n","/**\n * This module defines a set of factory functions for creating Collidable instances.\n */\n\nimport {\n  Capsule,\n  Obb,\n  Sphere\n} from '../collidables';\nimport {_geometry} from '../../util';\n\n/**\n * @param {CollidableShapeConfig} params\n * @param {CollidablePhysicsJob} [physicsJob]\n * @returns {Collidable}\n */\nfunction createCollidableFromRenderableShape(params, physicsJob) {\n  return _collidableCreators[params.collidableShapeId](params, physicsJob);\n}\n\n/**\n * This assumes the base RenderableShape has a side length of one unit.\n *\n * @param {CollidableShapeConfig} params\n * @param {CollidablePhysicsJob} [physicsJob]\n * @returns {Collidable}\n */\nfunction createObbFromRenderableShape(params, physicsJob) {\n  const halfRangeX = params.scale[0] / 2;\n  const halfRangeY = params.scale[1] / 2;\n  const halfRangeZ = params.scale[2] / 2;\n  return new Obb(halfRangeX, halfRangeY, halfRangeZ, params.isStationary, physicsJob);\n}\n\n/**\n * This assumes the base RenderableShape has a \"radius\" of one unit.\n *\n * @param {CollidableShapeConfig} params\n * @param {CollidablePhysicsJob} [physicsJob]\n * @returns {Collidable}\n */\nfunction createSphereFromRenderableShape(params, physicsJob) {\n  const radius = params.radius || vec3.length(params.scale) / Math.sqrt(3);\n  return new Sphere(0, 0, 0, radius, params.isStationary, physicsJob);\n}\n\n/**\n * The radius of the created capsule will be an average from the two shortest sides.\n *\n * There are two modes: either we use scale, or we use radius and capsuleEndPointsDistance.\n *\n * @param {CollidableShapeConfig} params\n * @param {CollidablePhysicsJob} [physicsJob]\n * @returns {Collidable}\n */\nfunction createCapsuleFromRenderableShape(params, physicsJob) {\n  const scale = params.scale;\n  const capsuleEndPointsDistance = params.capsuleEndPointsDistance;\n  const isStationary = params.isStationary;\n  let radius = params.radius;\n\n  let halfDistance;\n\n  // There are two modes: either we use scale, or we use radius and capsuleEndPointsDistance.\n  if (typeof radius === 'number' && typeof capsuleEndPointsDistance === 'number') {\n    halfDistance = capsuleEndPointsDistance / 2;\n  } else {\n    const copy = vec3.clone(scale);\n    copy.sort();\n\n    const length = copy[2];\n    radius = (copy[0] + copy[1]) / 2;\n    halfDistance = length / 2 - radius;\n  }\n\n  const orientation = quat.create();\n  if (scale[0] > scale[1]) {\n    if (scale[0] > scale[2]) {\n      vec3.rotateY(orientation, orientation, _geometry.HALF_PI);\n    } else {\n      // Do nothing; the capsule defaults to being aligned with the z-axis.\n    }\n  } else {\n    if (scale[1] > scale[2]) {\n      vec3.rotateX(orientation, orientation, -_geometry.HALF_PI);\n    } else {\n      // Do nothing; the capsule defaults to being aligned with the z-axis.\n    }\n  }\n\n  const capsule = new Capsule(halfDistance, radius, isStationary, physicsJob);\n  capsule.orientation = orientation;\n\n  return capsule;\n}\n\n/**\n * @param {CollidableShapeConfig} params\n * @param {CollidablePhysicsJob} [physicsJob]\n * @returns {Collidable}\n */\nfunction createSphereOrCapsuleFromRenderableShape(params, physicsJob) {\n  const scale = params.scale;\n  const radius = params.radius;\n  const capsuleEndPointsDistance = params.capsuleEndPointsDistance;\n\n  const halfLengthX = scale[0] * radius;\n  const halfLengthY = scale[1] * radius;\n  const halfLengthZ = scale[2] * (radius + capsuleEndPointsDistance) / 2;\n\n  const minLength = Math.min(Math.min(halfLengthX, halfLengthY), halfLengthZ);\n  const maxLength = Math.max(Math.max(halfLengthX, halfLengthY), halfLengthZ);\n\n  if (maxLength / minLength >= _SPHERE_VS_CAPSULE_ASPECT_RATIO_THRESHOLD) {\n    return createCapsuleFromRenderableShape(params, physicsJob);\n  } else {\n    return createSphereFromRenderableShape(params, physicsJob);\n  }\n}\n\nconst _SPHERE_VS_CAPSULE_ASPECT_RATIO_THRESHOLD = 2;\n\nconst _collidableCreators = {\n  'CUBE': createObbFromRenderableShape,\n  'SPHERE_OR_CAPSULE': createSphereOrCapsuleFromRenderableShape,\n  'SPHERE': createSphereFromRenderableShape,\n  'CAPSULE': createCapsuleFromRenderableShape,\n};\n\nexport {\n  createCapsuleFromRenderableShape,\n  createCollidableFromRenderableShape,\n  createObbFromRenderableShape,\n  createSphereFromRenderableShape,\n  createSphereOrCapsuleFromRenderableShape,\n};\n\n/**\n * @typedef {Object} CollidableShapeConfig\n * @property {string} collidableShapeId The ID of the type of collidable shape.\n * @property {vec3} [scale]\n * @property {boolean} [isStationary=false] Whether the collidable is fixed in place.\n */\n\n/**\n * @typedef {CollidableShapeConfig} SphericalCollidableShapeParams\n * @property {number} radius\n */\n\n/**\n * @typedef {SphericalCollidableShapeParams} CapsuleCollidableShapeParams\n * @property {number} capsuleEndPointsDistance The distance between the centers of the spheres on either end\n * of the capsule.\n */\n","import {createCollidableFromRenderableShape} from './collidable-factories';\nimport {collidableStore} from './collidable-store';\nimport {PhysicsJob} from '../../src/physics-job';\nimport {createForCollidable} from '../../util';\n\n/**\n * A CollidablePhysicsJob extends the standard PhysicsJob with a collidable geometry.\n */\nclass CollidablePhysicsJob extends PhysicsJob {\n  /**\n   * @param {CollidableShapeConfig} collidableParams\n   * @param {PhysicsState} state\n   * @param {Array.<ForceApplier>} forceAppliers\n   * @param {Object} controller\n   * @param {CollisionHandler} collisionHandler\n   */\n  constructor(collidableParams, state, forceAppliers, controller, collisionHandler) {\n    super(forceAppliers, state);\n\n    collidableParams.scale = collidableParams.scale || vec3.fromValues(1, 1, 1);\n    this.collidable = createCollidableFromRenderableShape(collidableParams, this);\n    this.currentState.unrotatedInertiaTensor =\n        createForCollidable(this.collidable, this.currentState.mass);\n    this.currentState.updateDependentFields();\n    this.isAtRest = false;\n    this.controller = controller;\n    this._collisionHandler = collisionHandler;\n  }\n\n  /**\n   * @param {ForceApplier} forceApplier\n   */\n  addForceApplier(forceApplier) {\n    super.addForceApplier(forceApplier);\n    this.isAtRest = false;\n  }\n\n  /**\n   * @param {ForceApplier} forceApplier\n   */\n  removeForceApplier(forceApplier) {\n    super.removeForceApplier(forceApplier);\n    this.isAtRest = false;\n  }\n\n  /**\n   * This callback is triggered in response to a collision.\n   *\n   * @param {Collision} collision\n   * @returns {boolean} True if this needs the standard collision restitution to proceed.\n   */\n  handleCollision(collision) {\n    return this._collisionHandler(collision);\n  }\n\n  /**\n   * @param {number} [startTime]\n   * @override\n   */\n  start(startTime) {\n    super.start(startTime);\n    collidableStore.registerCollidable(this.collidable);\n  }\n\n  /**\n   * @override\n   */\n  finish() {\n    super.finish();\n    collidableStore.unregisterCollidable(this.collidable);\n  }\n\n  /** @returns {vec3} */\n  get position() {\n    return this.currentState.position;\n  }\n\n  /** @param {vec3} value */\n  set position(value) {\n    this.currentState.position = vec3.clone(value);\n    this.collidable.position = vec3.clone(value);\n  }\n}\n\nexport {CollidablePhysicsJob};\n\n/**\n * @typedef {Function} CollisionHandler\n * @param {Collision} collision\n * @returns {boolean} True if this needs the standard collision restitution to proceed.\n */\n","import {detectBoundingVolumeIntersection} from './collision-utils';\n\n// TODO: Implement some form of bounding volume hierarchy to make searching for potential collisions\n// more efficient.\n\n/**\n * This class registers and retrieves all Collidables within a scene.\n */\nclass CollidableStore {\n  constructor() {\n    this._collidables = [];\n  }\n\n  /**\n   * Caches the given program wrapper.\n   *\n   * This method is idempotent; a given program will only be cached once.\n   *\n   * @param {Collidable} collidable\n   */\n  registerCollidable(collidable) {\n    this._collidables.push(collidable);\n  }\n\n  /**\n   * @param {Collidable} collidable\n   */\n  unregisterCollidable(collidable) {\n    const index = this._collidables.indexOf(collidable);\n    if (index >= 0) {\n      this._collidables.splice(index, 1);\n    }\n  }\n\n  /**\n   * @param {Collidable} collidable\n   * @returns {Array.<Collidable>}\n   */\n  getPossibleCollisionsForCollidable(collidable) {\n    return this._collidables.filter(other =>\n      collidable !== other &&\n      detectBoundingVolumeIntersection(collidable, other));\n  }\n\n  /**\n   * @returns {Array.<Collision>}\n   */\n  getPossibleCollisionsForAllCollidables() {\n    const result = [];\n    for (let i = 0, count = this._collidables.length; i < count; i++) {\n      const collidableA = this._collidables[i];\n      for (let j = i + 1; j < count; j++) {\n        const collidableB = this._collidables[j];\n        if (detectBoundingVolumeIntersection(collidableA, collidableB)) {\n          result.push({collidableA: collidableA, collidableB: collidableB});\n        }\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @param {Function} callback\n   */\n  forEach(callback) {\n    this._collidables.forEach(callback);\n  }\n}\n\nconst collidableStore = new CollidableStore();\nexport {collidableStore};\n\n/**\n * @typedef {Object} Collision\n * @property {Collidable} collidableA\n * @property {Collidable} collidableB\n * @property {vec3} [contactPoint] In world coordinates.\n * @property {vec3} [contactNormal] Points away from body A and toward body B.\n * @property {number} [time]\n */\n","import {\n  areVec3sClose,\n  tmpVec1,\n  tmpVec2,\n  tmpVec3,\n  tmpVec4,\n} from '../../util';\n\nimport {collidableStore} from './collidable-store';\nimport {detectIntersection, calculateContact} from './collision-utils';\n\n/**\n * This module defines a collision pipeline.\n *\n * These functions will detect collisions between collidable bodies and update their momenta in\n * response to the collisions.\n *\n * - Consists of an efficient broad-phase collision detection step followed by a precise\n *   narrow-phase step.\n * - Calculates the position, surface normal, and time of each contact.\n * - Calculates the impulse of a collision and updates the bodies' linear and angular momenta in\n *   response.\n * - Applies Coulomb friction to colliding bodies.\n * - Sub-divides the time step to more precisely determine when and where a collision occurs.\n * - Supports multiple collisions with a single body in a single time step.\n * - Efficiently supports bodies coming to rest against each other.\n * - Bodies will never penetrate one another.\n * - This does not address the tunnelling problem. That is, it is possible for two fast-moving\n *   bodies to pass through each other as long as they did not intersect each other during any time\n *   step.\n * - This only supports collisions between certain types of shapes. Fortunately, this set provides\n *   reasonable approximations for most other shapes. The supported types of shapes are: spheres,\n *   capsules, AABBs, and OBBs.\n *\n * ## Objects that come to rest\n *\n * An important efficiency improvement is to not process objects through the physics engine pipeline\n * after they have come to rest. The isAtRest field indicates when a body has come to rest.\n *\n * isAtRest is set to true after a physics frame is finished if the collisions, forces, position,\n * and orientation of a job have not changed from the previous to the current state.\n *\n * isAtRest is set to false from two possible events: after a physics frame is finished if the\n * collisions have changed from the previous to the current state, or when a force is added to\n * removed from the job.\n *\n * ## Collision calculations do not consider velocity\n *\n * Collision detection works by waiting until two bodies intersect. However, because time frames are\n * not infinitely small, when an intersection is detected, it's already past the exact instance of\n * collision. To alleviate problems from this, the velocity of each body can be considered when\n * calculating the collision time, position, and contact normal. However, taking velocity into\n * account makes the contact calculations much more complex, so we do not consider velocity in our\n * calculations.\n *\n * A notable consequence of this is that the calculated contact normals can be incorrect. Consider\n * the following moving squares. At time t2 they are found to have collided. The calculated contact\n * point will be somewhere within the intersection of the corners. But the calculated contact normal\n * will point upwards, while the true contact normal should point to the right. This is because the\n * contact calculations do not consider velocity and instead only consider the shallowest direction\n * of overlap.\n *\n * // Time t1\n *                    +------------+\n *                    |            |\n *                    |            |\n *                <-- |      B     |\n *                    |            |\n *  +------------+    |            |\n *  |            |    +------------+\n *  |            |\n *  |      A     | -->\n *  |            |\n *  |            |\n *  +------------+\n *\n * // Time t2\n *         +------------+\n *         |            |\n *         |            |\n *         |      B     |\n *         |            |\n *  +------------+      |\n *  |      +-----|------+\n *  |            |\n *  |      A     |\n *  |            |\n *  |            |\n *  +------------+\n */\n\n/**\n * Detect and handle any collisions between a given job and all other collidable bodies.\n *\n * @param {CollidablePhysicsJob} job\n * @param {DOMHighResTimeStamp} elapsedTime\n * @param {PhysicsConfig} physicsParams\n */\nfunction handleCollisionsForJob(job, elapsedTime, physicsParams) {\n  const collidable = job.collidable;\n\n  // Clear any previous collision info.\n  collidable.previousCollisions = collidable.collisions;\n  collidable.collisions = [];\n\n  // Find all colliding collidables.\n  const collidingCollidables = findIntersectingCollidablesForCollidable(collidable);\n\n  // Store the time of collision for each collision.\n  const collisions = _recordCollisions(collidable, collidingCollidables, elapsedTime);\n\n  // Calculate the points of contact for each collision.\n  _calculatePointsOfContact(collisions);\n\n  // Collision resolution.\n  _resolveCollisions(collisions, physicsParams);\n}\n\n/**\n * Finds all other collidables that intersect with the given collidable.\n *\n * @param {Collidable} collidable\n * @returns {Array.<Collidable>}\n */\nfunction findIntersectingCollidablesForCollidable(collidable) {\n  // Broad-phase collision detection (pairs whose bounding volumes intersect).\n  const collidingCollidables = collidableStore.getPossibleCollisionsForCollidable(collidable);\n\n  // Narrow-phase collision detection (pairs that actually intersect).\n  return _detectPreciseCollisionsFromCollidingCollidables(collidable, collidingCollidables);\n}\n\n/**\n * @param {Array.<CollidablePhysicsJob>} jobs\n */\nfunction determineJobsAtRest(jobs) {\n  jobs.forEach(job => job.isAtRest = _isJobAtRest(job));\n}\n\nfunction recordOldCollisionsForDevModeForAllCollidables() {\n  collidableStore.forEach(_recordOldCollisionsForDevModeForCollidable);\n}\n\n/**\n * Logs a warning message for any pair of objects that intersect.\n */\nfunction checkThatNoObjectsCollide() {\n  // Broad-phase collision detection (pairs whose bounding volumes intersect).\n  let collisions = collidableStore.getPossibleCollisionsForAllCollidables();\n\n  // Narrow-phase collision detection (pairs that actually intersect).\n  collisions = _detectPreciseCollisionsFromCollisions(collisions);\n\n  collisions.forEach(collision => {\n    console.warn('Objects still intersect after collision resolution', collision);\n  });\n}\n\n/**\n * Create collision objects that record the time of collision and the collidables in the collision.\n *\n * Also record references to these collisions on the collidables.\n *\n * @param {Collidable} collidable\n * @param {Array.<Collidable>} collidingCollidables\n * @param {DOMHighResTimeStamp} elapsedTime\n * @returns {Array.<Collision>}\n * @private\n */\nfunction _recordCollisions(collidable, collidingCollidables, elapsedTime) {\n  return collidingCollidables.map(other => {\n    const collision = {\n      collidableA: collidable,\n      collidableB: other,\n      time: elapsedTime\n    };\n\n    // Record the fact that these objects collided (the ModelController may want to handle this).\n    collision.collidableA.collisions.push(collision);\n    collision.collidableB.collisions.push(collision);\n\n    return collision;\n  });\n}\n\n/**\n * Narrow-phase collision detection.\n *\n * Given a list of possible collision pairs, filter out which pairs are actually colliding.\n *\n * @param {Array.<Collision>} collisions\n * @returns {Array.<Collision>}\n * @private\n */\nfunction _detectPreciseCollisionsFromCollisions(collisions) {\n  return collisions.filter(collision => {\n    // TODO:\n    // - Use temporal bisection with discrete sub-time steps to find time of collision (use\n    //       x-vs-y-specific intersection detection methods).\n    // - Make sure the collision object is set up with the \"previousState\" from the sub-step\n    //   before collision and the time from the sub-step after collision (determined from the\n    //   previous temporal bisection search...)\n\n    return detectIntersection(collision.collidableA, collision.collidableB);\n  });\n}\n\n/**\n * Narrow-phase collision detection.\n *\n * Given a list of possible collision pairs, filter out which pairs are actually colliding.\n *\n * @param {Collidable} collidable\n * @param {Array.<Collidable>} collidingCollidables\n * @returns {Array.<Collidable>}\n * @private\n */\nfunction _detectPreciseCollisionsFromCollidingCollidables(collidable, collidingCollidables) {\n  return collidingCollidables.filter(other => {\n    // TODO:\n    // - Use temporal bisection with discrete sub-time steps to find time of collision (use\n    //       x-vs-y-specific intersection detection methods).\n    // - Make sure the collision object is set up with the \"previousState\" from the sub-step\n    //   before collision and the time from the sub-step after collision (determined from the\n    //   previous temporal bisection search...)\n\n    return detectIntersection(collidable, other);\n  });\n}\n\n/**\n * Calculate the intersection position and contact normal of each collision.\n *\n * @param {Array.<Collision>} collisions\n * @private\n */\nfunction _calculatePointsOfContact(collisions) {\n  collisions.forEach(calculateContact);\n}\n\n/**\n * Updates the linear and angular momenta of each body in response to its collision.\n *\n * @param {Array.<Collision>} collisions\n * @param {PhysicsConfig} physicsParams\n * @private\n */\nfunction _resolveCollisions(collisions, physicsParams) {\n  collisions.forEach(collision => {\n    // If neither physics job needs the standard collision restitution, then don't do it.\n    if (_notifyPhysicsJobsOfCollision(collision)) {\n      if (collision.collidableA.physicsJob && collision.collidableB.physicsJob) {\n        // Neither of the collidables is stationary.\n        _resolveCollision(collision, physicsParams);\n      } else {\n        // One of the two collidables is stationary.\n        _resolveCollisionWithStationaryObject(collision, physicsParams);\n      }\n    }\n  });\n}\n\n/**\n * @param {Collision} collision\n * @returns {boolean} True if one of the PhysicsJobs need the standard collision restitution to\n * proceed.\n * @private\n */\nfunction _notifyPhysicsJobsOfCollision(collision) {\n  return collision.collidableA.physicsJob.handleCollision(collision) ||\n      collision.collidableB.physicsJob.handleCollision(collision)\n}\n\n/**\n * Resolve a collision between two moving, physics-based objects.\n *\n * This is based on collision-response algorithms from Wikipedia\n * (https://en.wikipedia.org/wiki/Collision_response#Impulse-based_reaction_model).\n *\n * @param {Collision} collision\n * @param {PhysicsConfig} physicsParams\n * @private\n */\nfunction _resolveCollision(collision, physicsParams) {\n  const collidableA = collision.collidableA;\n  const collidableB = collision.collidableB;\n  const previousStateA = collidableA.physicsJob.previousState;\n  const previousStateB = collidableB.physicsJob.previousState;\n  const nextStateA = collidableA.physicsJob.currentState;\n  const nextStateB = collidableB.physicsJob.currentState;\n  const centerA = collidableA.centerOfMass;\n  const centerB = collidableB.centerOfMass;\n  const contactPoint = collision.contactPoint;\n\n  const contactPointOffsetA = tmpVec3;\n  vec3.subtract(contactPointOffsetA, contactPoint, centerA);\n  const contactPointOffsetB = tmpVec4;\n  vec3.subtract(contactPointOffsetB, contactPoint, centerB);\n\n  //\n  // Calculate the relative velocity of the bodies at the point of contact.\n  //\n  // We use the velocity from the previous state, since it is the velocity that led to the\n  // collision.\n  //\n\n  const velocityA = tmpVec1;\n  vec3.cross(tmpVec1, previousStateA.angularVelocity, contactPointOffsetA);\n  vec3.add(velocityA, previousStateA.velocity, tmpVec1);\n\n  const velocityB = tmpVec2;\n  vec3.cross(tmpVec2, previousStateB.angularVelocity, contactPointOffsetB);\n  vec3.add(velocityB, previousStateB.velocity, tmpVec2);\n\n  const relativeVelocity = vec3.create();\n  vec3.subtract(relativeVelocity, velocityB, velocityA);\n\n  if (vec3.dot(relativeVelocity, collision.contactNormal) >= 0) {\n    // If the relative velocity is not pointing against the normal, then the normal was calculated\n    // incorrectly (this is likely due to the time step being too large and the fact that our\n    // contact calculations don't consider velocity). So update the contact normal to be in the\n    // direction of the relative velocity.\n\n    // TODO: Check that this works as expected.\n\n    // console.warn('Non-collision because objects are moving away from each other.');\n\n    vec3.copy(collision.contactNormal, relativeVelocity);\n    vec3.normalize(collision.contactNormal, collision.contactNormal);\n    vec3.negate(collision.contactNormal, collision.contactNormal);\n  }\n\n  _applyImpulseFromCollision(collision, relativeVelocity, contactPointOffsetA,\n      contactPointOffsetB, physicsParams);\n\n  // NOTE: This state reversion is only applied to collidableA. This assumes that only A is moving\n  // during this iteration of the collision pipeline.\n\n  // Revert to the position and orientation from immediately before the collision.\n  vec3.copy(nextStateA.position, previousStateA.position);\n  quat.copy(nextStateA.orientation, previousStateA.orientation);\n\n  // Also revert the collidables' position and orientation.\n  collidableA.position = previousStateA.position;\n  collidableA.orientation = previousStateA.orientation;\n\n  nextStateA.updateDependentFields();\n  nextStateB.updateDependentFields();\n}\n\n/**\n * Resolve a collision between one moving, physics-based object and one stationary object.\n *\n * @param {Collision} collision\n * @param {PhysicsConfig} physicsParams\n * @private\n */\nfunction _resolveCollisionWithStationaryObject(collision, physicsParams) {\n  const contactNormal = collision.contactNormal;\n\n  let physicsCollidable;\n  if (collision.collidableA.physicsJob) {\n    physicsCollidable = collision.collidableA;\n  } else {\n    physicsCollidable = collision.collidableB;\n    vec3.negate(contactNormal, contactNormal);\n  }\n\n  const previousState = physicsCollidable.physicsJob.previousState;\n  const nextState = physicsCollidable.physicsJob.currentState;\n  const center = physicsCollidable.centerOfMass;\n  const contactPoint = collision.contactPoint;\n\n  const contactPointOffset = tmpVec3;\n  vec3.subtract(contactPointOffset, contactPoint, center);\n\n  // Calculate the relative velocity of the bodies at the point of contact. We use the velocity from\n  // the previous state, since it is the velocity that led to the collision.\n  const velocity = vec3.create();\n  vec3.cross(tmpVec1, previousState.angularVelocity, contactPointOffset);\n  vec3.add(velocity, previousState.velocity, tmpVec1);\n\n  if (vec3.dot(velocity, contactNormal) <= 0) {\n    // If the relative velocity is not pointing against the normal, then the normal was calculated\n    // incorrectly (this is likely due to the time step being too large and the fact that our\n    // contact calculations don't consider velocity). So update the contact normal to be in the\n    // direction of the relative velocity.\n\n    // TODO: Check that this works as expected.\n\n    console.warn('Non-collision because object is moving away from stationary object.');\n\n    vec3.copy(collision.contactNormal, velocity);\n    vec3.normalize(collision.contactNormal, collision.contactNormal);\n    vec3.negate(collision.contactNormal, collision.contactNormal);\n  }\n\n  _applyImpulseFromCollisionWithStationaryObject(physicsCollidable, collision, velocity,\n      contactPointOffset, physicsParams);\n\n  // Revert to the position and orientation from immediately before the collision.\n  vec3.copy(nextState.position, previousState.position);\n  quat.copy(nextState.orientation, previousState.orientation);\n\n  // Also revert the collidable's position and orientation.\n  physicsCollidable.position = previousState.position;\n  physicsCollidable.orientation = previousState.orientation;\n\n  nextState.updateDependentFields();\n}\n\n/**\n * This is based on collision-response algorithms from Wikipedia\n * (https://en.wikipedia.org/wiki/Collision_response#Impulse-based_reaction_model). This algorithm\n * has been simplified by assuming the stationary body has infinite mass and zero velocity.\n *\n * @param {Collision} collision\n * @param {vec3} relativeVelocity\n * @param {vec3} contactPointOffsetA\n * @param {vec3} contactPointOffsetB\n * @param {PhysicsConfig} physicsParams\n * @private\n */\nfunction _applyImpulseFromCollision(collision, relativeVelocity, contactPointOffsetA,\n                                    contactPointOffsetB, physicsParams) {\n  const collidableA = collision.collidableA;\n  const collidableB = collision.collidableB;\n\n  const stateA = collidableA.physicsJob.currentState;\n  const stateB = collidableB.physicsJob.currentState;\n\n  const contactNormal = collision.contactNormal;\n\n  //\n  // Calculate and apply the main collision impulse.\n  //\n\n  vec3.scale(tmpVec1, relativeVelocity, -(1 + physicsParams.coefficientOfRestitution));\n  const numerator = vec3.dot(tmpVec1, contactNormal);\n\n  vec3.cross(tmpVec1, contactPointOffsetA, contactNormal);\n  vec3.transformMat3(tmpVec1, tmpVec1, stateA.inverseInertiaTensor);\n  vec3.cross(tmpVec1, tmpVec1, contactPointOffsetA);\n\n  vec3.cross(tmpVec2, contactPointOffsetB, contactNormal);\n  vec3.transformMat3(tmpVec2, tmpVec2, stateB.inverseInertiaTensor);\n  vec3.cross(tmpVec2, tmpVec2, contactPointOffsetB);\n\n  vec3.add(tmpVec1, tmpVec1, tmpVec2);\n  const denominator = vec3.dot(tmpVec1, contactNormal) + stateA.inverseMass + stateB.inverseMass;\n\n  const impulseMagnitude = numerator / denominator;\n\n  _applyImpulse(stateA, -impulseMagnitude, contactNormal, contactPointOffsetA);\n  _applyImpulse(stateB, impulseMagnitude, contactNormal, contactPointOffsetB);\n\n  //\n  // Calculate and apply a dynamic friction impulse.\n  //\n\n  const frictionImpulseMagnitude = impulseMagnitude * physicsParams.coefficientOfFriction;\n\n  const tangent = tmpVec2;\n  vec3.scale(tmpVec1, contactNormal, vec3.dot(relativeVelocity, contactNormal));\n  vec3.subtract(tangent, relativeVelocity, tmpVec1);\n  vec3.normalize(tangent, tangent);\n\n  _applyImpulse(stateA, frictionImpulseMagnitude, tangent, contactPointOffsetA);\n  _applyImpulse(stateB, -frictionImpulseMagnitude, tangent, contactPointOffsetB);\n}\n\n/**\n * This is based on collision-response algorithms from Wikipedia\n * (https://en.wikipedia.org/wiki/Collision_response#Impulse-based_reaction_model). This algorithm\n * has been simplified by assuming the stationary body has infinite mass and zero velocity.\n *\n * @param {Collidable} physicsCollidable\n * @param {Collision} collision\n * @param {vec3} velocity\n * @param {vec3} contactPointOffset\n * @param {PhysicsConfig} physicsParams\n * @private\n */\nfunction _applyImpulseFromCollisionWithStationaryObject(physicsCollidable, collision, velocity,\n                                                        contactPointOffset, physicsParams) {\n  const state = physicsCollidable.physicsJob.currentState;\n  const contactNormal = collision.contactNormal;\n\n  //\n  // Calculate and apply the main collision impulse.\n  //\n\n  vec3.scale(tmpVec1, velocity, -(1 + physicsParams.coefficientOfRestitution));\n  const numerator = vec3.dot(tmpVec1, contactNormal);\n\n  vec3.cross(tmpVec1, contactPointOffset, contactNormal);\n  vec3.transformMat3(tmpVec1, tmpVec1, state.inverseInertiaTensor);\n  vec3.cross(tmpVec1, tmpVec1, contactPointOffset);\n  const denominator = vec3.dot(tmpVec1, contactNormal) + state.inverseMass;\n\n  const impulseMagnitude = numerator / denominator;\n\n  _applyImpulse(state, impulseMagnitude, contactNormal, contactPointOffset);\n\n  //\n  // Calculate and apply a dynamic friction impulse.\n  //\n\n  const frictionImpulseMagnitude = impulseMagnitude * physicsParams.coefficientOfFriction;\n\n  const tangent = tmpVec2;\n  vec3.scale(tmpVec1, contactNormal, vec3.dot(velocity, contactNormal));\n  vec3.subtract(tangent, velocity, tmpVec1);\n  vec3.normalize(tangent, tangent);\n\n  _applyImpulse(state, frictionImpulseMagnitude, tangent, contactPointOffset);\n}\n\n/**\n * @param {PhysicsState} state\n * @param {number} impulseMagnitude\n * @param {vec3} impulseDirection\n * @param {vec3} contactPointOffset\n * @private\n */\nfunction _applyImpulse(state, impulseMagnitude, impulseDirection, contactPointOffset) {\n  // Calculate the updated linear momenta.\n  const finalLinearMomentum = vec3.create();\n  vec3.scaleAndAdd(finalLinearMomentum, state.momentum, impulseDirection, impulseMagnitude);\n\n  // Calculate the updated angular momenta.\n  const finalAngularMomentum = vec3.create();\n  vec3.cross(tmpVec1, contactPointOffset, impulseDirection);\n  vec3.scaleAndAdd(finalAngularMomentum, state.angularMomentum, tmpVec1, impulseMagnitude);\n\n  // Apply the updated momenta.\n  vec3.copy(state.momentum, finalLinearMomentum);\n  vec3.copy(state.angularMomentum, finalAngularMomentum);\n}\n\n/**\n * @param {CollidablePhysicsJob} job\n * @returns {boolean}\n * @private\n */\nfunction _isJobAtRest(job) {\n  return areVec3sClose(job.currentState.position, job.previousState.position) &&\n      areVec3sClose(job.currentState.velocity, job.previousState.velocity) &&\n      areVec3sClose(job.currentState.orientation, job.previousState.orientation) &&\n      _doCollisionsMatch(job.collidable.collisions, job.collidable.previousCollisions);\n}\n\n/**\n * @param {Array.<Collision>} collisionsA\n * @param {Array.<Collision>} collisionsB\n * @returns {boolean}\n * @private\n */\nfunction _doCollisionsMatch(collisionsA, collisionsB) {\n  const count = collisionsA.length;\n\n  if (count !== collisionsB.length) return false;\n\n  for (let i = 0; i < count; i++) {\n    const collisionA = collisionsA[i];\n    const collisionB = collisionsB[i];\n    if (collisionA.collidableA !== collisionB.collidableA ||\n        collisionA.collidableB !== collisionB.collidableB ||\n        !areVec3sClose(collisionA.contactPoint, collisionB.contactPoint) ||\n        !areVec3sClose(collisionA.contactNormal, collisionB.contactNormal)) {\n      return false\n    }\n  }\n\n  return true;\n}\n\n/**\n * @param {Collidable} collidable\n * @private\n */\nfunction _recordOldCollisionsForDevModeForCollidable(collidable) {\n  if (!collidable.extraPreviousCollisions) {\n    collidable.extraPreviousCollisions = [];\n  }\n\n  for (let i = 3; i > 0; i--) {\n    collidable.extraPreviousCollisions[i] = collidable.extraPreviousCollisions[i - 1];\n  }\n  collidable.extraPreviousCollisions[0] = collidable.previousCollisions;\n}\n\n/**\n * @param {Collision} collision\n * @param {Object} thisController\n * @returns {Object}\n */\nfunction getOtherControllerFromCollision(collision, thisController) {\n  const controllerA = collision.collidableA.physicsJob.controller;\n  const controllerB = collision.collidableB.physicsJob.controller;\n  if (controllerA === thisController) {\n    return controllerB;\n  } else if (controllerB === thisController) {\n    return controllerA;\n  } else {\n    throw new Error('Neither collidable corresponds to the given controller');\n  }\n}\n\nexport {\n  handleCollisionsForJob,\n  findIntersectingCollidablesForCollidable,\n  determineJobsAtRest,\n  recordOldCollisionsForDevModeForAllCollidables,\n  checkThatNoObjectsCollide,\n  getOtherControllerFromCollision,\n};\n","import {\n  Aabb,\n  Capsule,\n  Obb,\n  Sphere\n} from '../collidables';\n\nimport {\n  aabbCollisionDetection,\n  capsuleCollisionDetection,\n  obbCollisionDetection,\n  sphereCollisionDetection,\n} from '../collision-detection';\n\nimport {\n  aabbContactCalculation,\n  capsuleContactCalculation,\n  obbContactCalculation,\n  sphereContactCalculation,\n} from '../contact-calculation';\n\n/**\n * This module defines a collection of static utility functions for detecting and responding to\n * collisions.\n */\n\n/**\n * @param {Collidable} a\n * @param {Collidable} b\n * @returns {boolean}\n */\nfunction detectIntersection(a, b) {\n  if (a instanceof Sphere) {\n    if (b instanceof Sphere) {\n      return sphereCollisionDetection.sphereVsSphere(a, b);\n    } else if (b instanceof Aabb) {\n      return sphereCollisionDetection.sphereVsAabb(a, b);\n    } else if (b instanceof Capsule) {\n      return sphereCollisionDetection.sphereVsCapsule(a, b);\n    } else if (b instanceof Obb) {\n      return sphereCollisionDetection.sphereVsObb(a, b);\n    } else {\n      return sphereCollisionDetection.sphereVsPoint(a, b);\n    }\n  } else if (a instanceof Aabb) {\n    if (b instanceof Sphere) {\n      return aabbCollisionDetection.aabbVsSphere(a, b);\n    } else if (b instanceof Aabb) {\n      return aabbCollisionDetection.aabbVsAabb(a, b);\n    } else if (b instanceof Capsule) {\n      return aabbCollisionDetection.aabbVsCapsule(a, b);\n    } else if (b instanceof Obb) {\n      return aabbCollisionDetection.aabbVsObb(a, b);\n    } else {\n      return aabbCollisionDetection.aabbVsPoint(a, b);\n    }\n  } else if (a instanceof Capsule) {\n    if (b instanceof Sphere) {\n      return capsuleCollisionDetection.capsuleVsSphere(a, b);\n    } else if (b instanceof Aabb) {\n      return capsuleCollisionDetection.capsuleVsAabb(a, b);\n    } else if (b instanceof Capsule) {\n      return capsuleCollisionDetection.capsuleVsCapsule(a, b);\n    } else if (b instanceof Obb) {\n      return capsuleCollisionDetection.capsuleVsObb(a, b);\n    } else {\n      return capsuleCollisionDetection.capsuleVsPoint(a, b);\n    }\n  } else if (a instanceof Obb) {\n    if (b instanceof Sphere) {\n      return obbCollisionDetection.obbVsSphere(a, b);\n    } else if (b instanceof Aabb) {\n      return obbCollisionDetection.obbVsAabb(a, b);\n    } else if (b instanceof Capsule) {\n      return obbCollisionDetection.obbVsCapsule(a, b);\n    } else if (b instanceof Obb) {\n      return obbCollisionDetection.obbVsObb(a, b);\n    } else {\n      return obbCollisionDetection.obbVsPoint(a, b);\n    }\n  } else {\n    if (b instanceof Sphere) {\n      return sphereCollisionDetection.sphereVsPoint(b, a);\n    } else if (b instanceof Aabb) {\n      return aabbCollisionDetection.aabbVsPoint(b, a);\n    } else if (b instanceof Capsule) {\n      return capsuleCollisionDetection.capsuleVsPoint(b, a);\n    } else if (b instanceof Obb) {\n      return obbCollisionDetection.obbVsPoint(b, a);\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * @param {Collision} collision\n */\nfunction calculateContact(collision) {\n  const a = collision.collidableA;\n  const b = collision.collidableB;\n  const contactPoint = vec3.create();\n  const contactNormal = vec3.create();\n\n  if (a instanceof Sphere) {\n    if (b instanceof Sphere) {\n      sphereContactCalculation.sphereVsSphere(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Aabb) {\n      sphereContactCalculation.sphereVsAabb(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Capsule) {\n      sphereContactCalculation.sphereVsCapsule(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Obb) {\n      sphereContactCalculation.sphereVsObb(contactPoint, contactNormal, a, b);\n    } else {\n      sphereContactCalculation.sphereVsPoint(contactPoint, contactNormal, a, b);\n    }\n  } else if (a instanceof Aabb) {\n    if (b instanceof Sphere) {\n      aabbContactCalculation.aabbVsSphere(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Aabb) {\n      aabbContactCalculation.aabbVsAabb(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Capsule) {\n      aabbContactCalculation.aabbVsCapsule(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Obb) {\n      aabbContactCalculation.aabbVsObb(contactPoint, contactNormal, a, b);\n    } else {\n      aabbContactCalculation.aabbVsPoint(contactPoint, contactNormal, a, b);\n    }\n  } else if (a instanceof Capsule) {\n    if (b instanceof Sphere) {\n      capsuleContactCalculation.capsuleVsSphere(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Aabb) {\n      capsuleContactCalculation.capsuleVsAabb(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Capsule) {\n      capsuleContactCalculation.capsuleVsCapsule(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Obb) {\n      capsuleContactCalculation.capsuleVsObb(contactPoint, contactNormal, a, b);\n    } else {\n      capsuleContactCalculation.capsuleVsPoint(contactPoint, contactNormal, a, b);\n    }\n  } else if (a instanceof Obb) {\n    if (b instanceof Sphere) {\n      obbContactCalculation.obbVsSphere(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Aabb) {\n      obbContactCalculation.obbVsAabb(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Capsule) {\n      obbContactCalculation.obbVsCapsule(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Obb) {\n      obbContactCalculation.obbVsObb(contactPoint, contactNormal, a, b);\n    } else {\n      obbContactCalculation.obbVsPoint(contactPoint, contactNormal, a, b);\n    }\n  } else {\n    if (b instanceof Sphere) {\n      sphereContactCalculation.sphereVsPoint(contactPoint, contactNormal, b, a);\n    } else if (b instanceof Aabb) {\n      aabbContactCalculation.aabbVsPoint(contactPoint, contactNormal, b, a);\n    } else if (b instanceof Capsule) {\n      capsuleContactCalculation.capsuleVsPoint(contactPoint, contactNormal, b, a);\n    } else if (b instanceof Obb) {\n      obbContactCalculation.obbVsPoint(contactPoint, contactNormal, b, a);\n    } else {}\n    vec3.negate(contactNormal, contactNormal);\n  }\n\n  collision.contactPoint = contactPoint;\n  collision.contactNormal = contactNormal;\n}\n\n/**\n * @param {Collidable} a\n * @param {Collidable} b\n * @returns {boolean}\n */\nfunction detectBoundingVolumeIntersection(a, b) {\n  return detectIntersection(a.boundingVolume, b.boundingVolume);\n}\n\nexport {\n  detectIntersection,\n  calculateContact,\n  detectBoundingVolumeIntersection,\n};\n","/**\n * This module re-exports all of the exports in the grafx framework. This makes the entire framework\n * conveniently accessible via this single module.\n */\n\nexport * from './collisions';\nexport * from './integrator';\nexport * from './util';\n\nexport * from './src/physics-engine';\nexport * from './src/physics-job';\nexport * from './src/physics-state';\n","export * from './src/integrator';\nexport * from './src/rk4-integrator';\n","/**\n * This class numerically integrates the equations of motion. That is, an integrator implements\n * physics simulations by updating position and velocity values for each time step.\n *\n * @abstract\n */\nclass Integrator {\n  constructor() {\n    // Integrator is an abstract class. It should not be instantiated directly.\n    if (new.target === Integrator) {\n      throw new TypeError('Cannot construct Integrator instances directly');\n    }\n  }\n\n  /**\n   * Integrate the state from t to t + dt.\n   *\n   * @param {PhysicsJob} job\n   * @param {number} t Total elapsed time.\n   * @param {number} dt Duration of the current time step.\n   * @abstract\n   */\n  integrate(job, t, dt) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * @returns {PhysicsDerivative}\n   */\n  static createDerivative() {\n    return {\n      velocity: vec3.create(),\n      force: vec3.create(),\n      spin: quat.create(),\n      torque: vec3.create()\n    };\n  }\n}\n\nexport {Integrator};\n\n/**\n * @typedef {Object} PhysicsDerivative\n * @property {vec3} velocity Derivative of position.\n * @property {vec3} force Derivative of momentum.\n * @property {quat} spin Derivative of orientation.\n * @property {vec3} torque Derivative of angular momentum.\n */\n\n/**\n * @typedef {Object} ForceApplierOutput\n * @property {vec3} force\n * @property {vec3} torque\n */\n\n/**\n * @typedef {Object} ForceApplierInput\n * @property {PhysicsState} state\n * @property {number} t\n * @property {number} dt\n */\n","import {_geometry, _util} from '../../util';\nimport {Integrator} from './integrator';\nimport {PhysicsState} from '../../src/physics-state';\n\n// TODO: Account for the fact that collisions take place between time steps; integration should\n// really consider the previous state as being the time and state at the moment of collision.\n\n/**\n * This class numerically integrates the equations of motion. That is, this implements physics\n * simulations by updating position and velocity values for each time step.\n *\n * This integrator is an implementation of the classical Runge-Kutta method (RK4)\n * (https://en.wikipedia.org/wiki/Runge_kutta).\n *\n * This integrator causes energy to be lost at a small rate. This is a common problem for numerical\n * integrators, and is usually negligible.\n */\nclass RK4Integrator extends Integrator {\n  constructor() {\n    super();\n    if (_util.isInDevMode) {\n      this._wrapForDevMode();\n    }\n  }\n\n  /**\n   * Integrate the state from t to t + dt.\n   *\n   * @param {PhysicsJob} job\n   * @param {number} t Total elapsed time.\n   * @param {number} dt Duration of the current time step.\n   */\n  integrate(job, t, dt) {\n    const state = job.currentState;\n    _tempState.copy(state);\n\n    _calculateDerivative(_a, _tempState, job, t, 0, _EMPTY_DERIVATIVE);\n    _calculateDerivative(_b, _tempState, job, t, dt * 0.5, _a);\n    _calculateDerivative(_c, _tempState, job, t, dt * 0.5, _b);\n    _calculateDerivative(_d, _tempState, job, t, dt, _c);\n\n    _calculateVec3DerivativeWeightedSum(\n        _positionDerivative, _a.velocity, _b.velocity, _c.velocity, _d.velocity);\n    _calculateVec3DerivativeWeightedSum(\n        _momentumDerivative, _a.force, _b.force, _c.force, _d.force);\n    _calculateQuatDerivativeWeightedSum(_orientationDerivative, _a.spin, _b.spin, _c.spin, _d.spin);\n    _calculateVec3DerivativeWeightedSum(\n        _angularMomentumDerivative, _a.torque, _b.torque, _c.torque, _d.torque);\n\n    vec3.scaleAndAdd(state.position, state.position, _positionDerivative, dt);\n    vec3.scaleAndAdd(state.momentum, state.momentum, _momentumDerivative, dt);\n    _geometry.scaleAndAddQuat(state.orientation, state.orientation, _orientationDerivative, dt);\n    vec3.scaleAndAdd(state.angularMomentum, state.angularMomentum, _angularMomentumDerivative, dt);\n\n    state.updateDependentFields();\n  }\n\n  /**\n   * Wraps the integrate method and check for NaN values after each integration.\n   *\n   * @private\n   */\n  _wrapForDevMode() {\n    const unguardedIntegrate = this.integrate.bind(this);\n    this.integrate = (job, t, dt) => {\n      unguardedIntegrate(job, t, dt);\n      _checkForStateError(job.currentState);\n    };\n  }\n}\n\n/**\n * Calculate the derivative from the given state with the given time step.\n *\n * @param {PhysicsDerivative} out\n * @param {PhysicsState} state\n * @param {PhysicsJob} job\n * @param {number} t\n * @param {number} dt\n * @param {PhysicsDerivative} d\n * @private\n */\nfunction _calculateDerivative(out, state, job, t, dt, d) {\n  vec3.scaleAndAdd(state.position, state.position, d.velocity, dt);\n  vec3.scaleAndAdd(state.momentum, state.momentum, d.force, dt);\n  _geometry.scaleAndAddQuat(state.orientation, state.orientation, d.spin, dt);\n  vec3.scaleAndAdd(state.angularMomentum, state.angularMomentum, d.torque, dt);\n\n  state.updateDependentFields();\n\n  out.velocity = state.velocity;\n  out.spin = state.spin;\n  vec3.set(out.force, 0, 0, 0);\n  vec3.set(out.torque, 0, 0, 0);\n\n  _forceApplierOutput.force = out.force;\n  _forceApplierOutput.torque = out.torque;\n  _forceApplierInput.state = state;\n  _forceApplierInput.t = t + dt;\n  _forceApplierInput.dt = dt;\n\n  job.applyForces(_forceApplierOutput, _forceApplierInput);\n}\n\nconst _EMPTY_DERIVATIVE = Integrator.createDerivative();\n\nconst _tempState = new PhysicsState();\nconst _a = Integrator.createDerivative();\nconst _b = Integrator.createDerivative();\nconst _c = Integrator.createDerivative();\nconst _d = Integrator.createDerivative();\n\nconst _positionDerivative = vec3.create();\nconst _momentumDerivative = vec3.create();\nconst _orientationDerivative = quat.create();\nconst _angularMomentumDerivative = vec3.create();\n\nconst _forceApplierOutput = {};\nconst _forceApplierInput = {};\n\n/**\n * @param {vec3} out\n * @param {vec3} a\n * @param {vec3} b\n * @param {vec3} c\n * @param {vec3} d\n * @private\n */\nfunction _calculateVec3DerivativeWeightedSum(out, a, b, c, d) {\n  out[0] = 1 / 6 * (a[0] + 2 * (b[0] + c[0]) + d[0]);\n  out[1] = 1 / 6 * (a[1] + 2 * (b[1] + c[1]) + d[1]);\n  out[2] = 1 / 6 * (a[2] + 2 * (b[2] + c[2]) + d[2]);\n}\n\n/**\n * @param {quat} out\n * @param {quat} a\n * @param {quat} b\n * @param {quat} c\n * @param {quat} d\n * @private\n */\nfunction _calculateQuatDerivativeWeightedSum(out, a, b, c, d) {\n  out[0] = 1 / 6 * (a[0] + 2 * (b[0] + c[0]) + d[0]);\n  out[1] = 1 / 6 * (a[1] + 2 * (b[1] + c[1]) + d[1]);\n  out[2] = 1 / 6 * (a[2] + 2 * (b[2] + c[2]) + d[2]);\n  out[3] = 1 / 6 * (a[3] + 2 * (b[3] + c[3]) + d[3]);\n}\n\n/**\n * @param {PhysicsState} state\n * @private\n */\nfunction _checkForStateError(state) {\n  const errorProperties = [\n    'position',\n    'momentum',\n    'orientation',\n    'angularMomentum',\n  ].filter(property => _containsNaN(state[property]));\n  const property = errorProperties[0];\n  if (property) {\n    throw new Error(`${property} contains a NaN value after integrating: ${state[property]}`);\n  }\n}\n\n/**\n * Determines whether the given vector contains a NaN value.\n *\n * @param {vec3} v\n * @private\n */\nfunction _containsNaN(v) {\n  return isNaN(v[0]) || isNaN(v[1]) || isNaN(v[2]);\n}\n\nconst rk4Integrator = new RK4Integrator();\n\nexport {rk4Integrator};\n","import {FrameLatencyProfiler, PersistentAnimationJob} from 'lsl-animatex';\nimport {_util} from '../util';\n\nimport {\n  checkThatNoObjectsCollide,\n  CollidablePhysicsJob,\n  determineJobsAtRest,\n  handleCollisionsForJob,\n  recordOldCollisionsForDevModeForAllCollidables,\n} from '../collisions';\nimport {PhysicsState} from './physics-state';\nimport {rk4Integrator} from '../integrator';\n\nconst _FRAME_LATENCY_LOG_PERIOD = 5000;\nconst _LATENCY_LOG_LABEL = 'Physics frame duration';\n\n/**\n * This physics engine simulates high-performance, three-dimensional rigid-body dynamics.\n *\n * Notable features:\n * - Includes collision detection with impulse-based resolution.\n * - Decouples the physics simulation and animation rendering time steps, and uses a fixed timestep\n * for the physics loop. This gives us numerical stability and precise reproducibility.\n * - Suppresses linear and angular momenta below a certain threshold.\n *\n * The engine consists primarily of a collection of individual physics jobs and an update loop. This\n * update loop is in turn controlled by the animation loop. However, whereas the animation loop\n * renders each job once per frame loop--regardless of how much time actually elapsed since the\n * previous frame--the physics loop updates its jobs at a constant rate. To reconcile these frame\n * rates, the physics loop runs as many times as is needed in order to catch up to the time of the\n * current animation frame. The physics frame rate should be much higher than the animation frame\n * rate.\n *\n * It is VERY IMPORTANT for a PhysicsJob to minimize the runtime of its update step.\n *\n * ## A note on job order\n *\n * The integration+collision pipeline handle one job at a time. A consequence of this design\n * is that half of the collisions technically represent a false interaction between the state of the\n * first object at time t and the state of the second object at time t - 1.\n *\n * This implementation prevents a more problematic issue. If all objects were first integrated, then\n * all objects were checked for collisions, then all collisions were resolved, then the following\n * scenario could arise:\n * - The next position of object A collides with the previous position of object B, but not with the\n *   next position of object B, so object A moves successfully to its new position.\n * - The next position of object B collides with the next position of object C, so objects B and C\n *   are reset to their previous positions.\n * - Object B and C now intersect.\n */\nclass PhysicsEngine extends PersistentAnimationJob {\n  /**\n   * Clients should call PhysicsEngine.create instead of instantiating a PhysicsEngine directly.\n   *\n   * @param {PhysicsConfig} physicsParams\n   */\n  constructor(physicsParams) {\n    super();\n\n    if (_physicsEngine) {\n      throw new Error('Can\\'t instantiate multiple instances of PhysicsEngine.');\n    }\n\n    _physicsEngine = this;\n\n    this._physicsParams = physicsParams;\n    this.integrator = rk4Integrator;\n    this._elapsedTime = 0.0;\n    this._remainingTime = 0.0;\n    this._nonCollidableJobs = [];\n    this._collidableJobs = [];\n\n    if (_util.isInDevMode) {\n      this._setUpForInDevMode();\n    }\n  }\n\n  /**\n   * @param {PhysicsConfig} physicsParams\n   */\n  static create(physicsParams) {\n    new PhysicsEngine(physicsParams);\n  }\n\n  reset() {\n    this._elapsedTime = 0.0;\n    this._remainingTime = 0.0;\n    this._nonCollidableJobs = [];\n    this._collidableJobs = [];\n  }\n\n  /**\n   * Adds the given PhysicsJob.\n   *\n   * @param {PhysicsJob} job\n   */\n  addJob(job) {\n    // console.debug(`Starting PhysicsJob`);\n\n    if (job instanceof CollidablePhysicsJob) {\n      this._collidableJobs.push(job);\n    } else {\n      this._nonCollidableJobs.push(job);\n    }\n  }\n\n  /**\n   * Removes the given PhysicsJob.\n   *\n   * Throws no error if the job is not registered.\n   *\n   * @param {PhysicsJob} job\n   */\n  removeJob(job) {\n    // console.debug(`Cancelling PhysicsJob`);\n    this._removeJob(job);\n  }\n\n  /**\n   * Wraps the draw and update methods in a profiler function that will track the frame latencies.\n   *\n   * @private\n   */\n  _setUpForInDevMode() {\n    const unwrappedUpdate = this.update.bind(this);\n    const latencyProfiler = new FrameLatencyProfiler(_FRAME_LATENCY_LOG_PERIOD, \n        this._physicsParams.timeStepDuration, _LATENCY_LOG_LABEL);\n    latencyProfiler.start();\n\n    this.update = (...args) => {\n      const beforeTime = performance.now();\n      unwrappedUpdate(...args);\n      const deltaTime = performance.now() - beforeTime;\n      latencyProfiler.recordFrameLatency(deltaTime);\n    };\n  }\n\n  /**\n   * Update the physics state for the current animation update frame.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  update(currentTime, deltaTime) {\n    this._remainingTime += deltaTime;\n\n    // Run as many constant-interval physics updates as are needed for the given animation frame\n    // interval.\n    while (this._remainingTime >= this._physicsParams.timeStepDuration) {\n      this._updateToNextPhysicsFrame();\n      this._elapsedTime += this._physicsParams.timeStepDuration;\n      this._remainingTime -= this._physicsParams.timeStepDuration;\n    }\n\n    // Calculate the intermediate physics state to use for rendering the current animation frame.\n    const partialRatio = this._remainingTime / this._physicsParams.timeStepDuration;\n    this._setPartialStateForRenderTimeStepForAllJobs(partialRatio);\n  }\n\n  _updateToNextPhysicsFrame() {\n    if (_util.isInDevMode) {\n      this._recordOldStatesForAllJobsForDevMode();\n      recordOldCollisionsForDevModeForAllCollidables();\n    }\n\n    this._nonCollidableJobs.forEach(this._integratePhysicsStateForJob.bind(this));\n    this._collidableJobs.forEach(job => {\n      if (!job.isAtRest) {\n        this._integratePhysicsStateForCollidableJob(job);\n        handleCollisionsForJob(job, this._elapsedTime, this._physicsParams);\n      }\n    });\n\n    if (_util.isInDevMode) {\n      checkThatNoObjectsCollide();\n    }\n\n    this._suppressLowMomentaForAllJobs();\n\n    determineJobsAtRest(this._collidableJobs);\n  }\n\n  /**\n   * Removes the given job from the collection of active jobs if it exists.\n   *\n   * @param {PhysicsJob} job\n   * @param {number} [index=-1]\n   * @private\n   */\n  _removeJob(job, index = -1) {\n    if (job instanceof CollidablePhysicsJob) {\n      _removeJobFromCollection(job, index, this._collidableJobs);\n    } else {\n      _removeJobFromCollection(job, index, this._nonCollidableJobs);\n    }\n  }\n\n  /**\n   * Update the current physics state for a job for the current physics update frame.\n   *\n   * This includes applying all forces that have been registered with the physics job.\n   *\n   * @param {CollidablePhysicsJob} job\n   * @private\n   */\n  _integratePhysicsStateForCollidableJob(job) {\n    this._integratePhysicsStateForJob(job);\n\n    // Update the collidable's position and orientation.\n    job.collidable.position = job.currentState.position;\n    job.collidable.orientation = job.currentState.orientation;\n  }\n\n  /**\n   * Update the current physics state for a job for the current physics update frame.\n   *\n   * This includes applying all forces that have been registered with the physics job.\n   *\n   * @param {PhysicsJob} job\n   * @private\n   */\n  _integratePhysicsStateForJob(job) {\n    job.previousState.copy(job.currentState);\n    this.integrator.integrate(job, this._elapsedTime, this._physicsParams.timeStepDuration);\n  }\n\n  _suppressLowMomentaForAllJobs() {\n    this._collidableJobs.forEach(job => _suppressLowMomentaForJob(job,\n        this._physicsParams.lowMomentumSuppressionThreshold,\n        this._physicsParams.lowAngularMomentumSuppressionThreshold));\n    this._nonCollidableJobs.forEach(job => _suppressLowMomentaForJob(job,\n        this._physicsParams.lowMomentumSuppressionThreshold,\n        this._physicsParams.lowAngularMomentumSuppressionThreshold));\n  }\n\n  /**\n   * Calculate the intermediate physics state to use for rendering the current animation frame. The\n   * given ratio specifies how far the current render frame is between the previous and current\n   * physics update frames.\n   *\n   * @param {number} partialRatio\n   * @private\n   */\n  _setPartialStateForRenderTimeStepForAllJobs(partialRatio) {\n    this._collidableJobs.forEach(_setPartialStateForRenderTimeStepForJob.bind(null, partialRatio));\n    this._nonCollidableJobs.forEach(_setPartialStateForRenderTimeStepForJob.bind(null, partialRatio));\n  }\n\n  _recordOldStatesForAllJobsForDevMode() {\n    this._collidableJobs.forEach(_recordOldStatesForJob);\n    this._nonCollidableJobs.forEach(_recordOldStatesForJob);\n  }\n\n  draw() {}\n\n  /**\n   * @returns {PhysicsEngine}\n   */\n  static get instance() {\n    if (!_physicsEngine) {\n      throw new Error('Can\\'t access PhysicsEngine.instance before it has been instantiated.');\n    }\n    return _physicsEngine;\n  }\n}\n\n/**\n * @param {PhysicsJob} job\n * @param {number} lowMomentumSuppressionThreshold\n * @param {number} lowAngularMomentumSuppressionThreshold\n * @private\n */\nfunction _suppressLowMomentaForJob(job, lowMomentumSuppressionThreshold,\n                                   lowAngularMomentumSuppressionThreshold) {\n  const currentState = job.currentState;\n\n  if (vec3.squaredLength(currentState.momentum) < lowMomentumSuppressionThreshold) {\n    vec3.set(currentState.momentum, 0, 0, 0);\n  }\n\n  if (vec3.squaredLength(currentState.angularMomentum) < lowAngularMomentumSuppressionThreshold) {\n    vec3.set(currentState.angularMomentum, 0, 0, 0);\n  }\n}\n\n/**\n * @param {PhysicsJob} job\n * @param {number} index\n * @param {Array.<PhysicsJob>} jobs\n * @private\n */\nfunction _removeJobFromCollection(job, index, jobs) {\n  if (index >= 0) {\n    jobs.splice(index, 1);\n  } else {\n    const count = jobs.length;\n    for (index = 0; index < count; index++) {\n      if (jobs[index] === job) {\n        jobs.splice(index, 1);\n        break;\n      }\n    }\n  }\n}\n\n/**\n * @param {number} partialRatio\n * @param {PhysicsJob} job\n * @private\n */\nfunction _setPartialStateForRenderTimeStepForJob(partialRatio, job) {\n  job.renderState.lerp(job.previousState, job.currentState, partialRatio);\n}\n\n/**\n * @param {PhysicsJob} job\n * @private\n */\nfunction _recordOldStatesForJob(job) {\n  if (!job.extraPreviousStates) {\n    job.extraPreviousStates = [];\n    for (let i = 0; i < 4; i++) {\n      job.extraPreviousStates[i] = new PhysicsState();\n    }\n  }\n\n  for (let i = 3; i > 0; i--) {\n    job.extraPreviousStates[i].copy(job.extraPreviousStates[i - 1]);\n  }\n  job.extraPreviousStates[0].copy(job.previousState);\n}\n\nlet _physicsEngine = null;\n\nexport {PhysicsEngine};\n","import {animator} from 'lsl-animatex';\nimport {PhysicsEngine} from './physics-engine';\nimport {PhysicsState} from './physics-state';\nimport {_util} from '../util';\n\n/**\n * A PhysicsJob maintains a current force/momentum state and defines a method for applying forces at\n * a given physics time step.\n */\nclass PhysicsJob {\n  /**\n   * @param {Array.<ForceApplier>} [forceAppliers]\n   * @param {PhysicsState} [state]\n   */\n  constructor(forceAppliers, state) {\n    forceAppliers = forceAppliers || [];\n    state = state || new PhysicsState();\n\n    this.startTime = null;\n    this.currentState = state;\n    this.previousState = null;\n    this.renderState = null;\n    this._forceAppliers = forceAppliers;\n  }\n\n  /**\n   * @param {ForceApplierOutput} outputParams\n   * @param {ForceApplierInput} inputParams\n   */\n  applyForces(outputParams, inputParams) {\n    this._forceAppliers.forEach(forceApplier => forceApplier(outputParams, inputParams));\n  }\n\n  /**\n   * @param {ForceApplier} forceApplier\n   * @param {number} [index=0] The index to add the given force applier in the current list of\n   * appliers.\n   */\n  addForceApplier(forceApplier, index = 0) {\n    this._forceAppliers.splice(index, 0, forceApplier);\n  }\n\n  /**\n   * @param {ForceApplier} forceApplier\n   */\n  removeForceApplier(forceApplier) {\n    this._forceAppliers.splice(this._forceAppliers.indexOf(forceApplier), 1);\n  }\n\n  /**\n   * Registers this PhysicsJob and all of its descendant child jobs with the physics engine.\n   *\n   * @param {number} [startTime]\n   */\n  start(startTime) {\n    this.startTime = startTime || animator.currentTime;\n\n    const previousState = new PhysicsState();\n    previousState.copy(this.currentState);\n    const renderState = new PhysicsState();\n    renderState.copy(this.currentState);\n\n    this.previousState = previousState;\n    this.renderState = renderState;\n\n    if (_util.isInDevMode) {\n      // It is useful for debugging to be able to trace the states back to their jobs.\n      this.currentState.job = this;\n      this.previousState.job = this;\n      this.renderState.job = this;\n    }\n\n    PhysicsEngine.instance.addJob(this);\n  }\n\n  /**\n   * Unregisters this PhysicsJob and all of its descendant child jobs with the physics engine.\n   *\n   * Throws no error if the job is not registered.\n   */\n  finish() {\n    PhysicsEngine.instance.removeJob(this);\n  }\n\n  /**\n   * @param {number} [startTime]\n   */\n  restart(startTime) {\n    this.finish();\n    this.start(startTime);\n  }\n}\n\nexport {PhysicsJob};\n\n/**\n * @typedef {Function} ForceApplier\n * @property {vec3} force Output.\n * @property {vec3} torque Output.\n * @property {PhysicsState} state Input.\n * @property {number} t Input.\n * @property {number} dt Input.\n */\n\n/**\n * @typedef {Object} PhysicsConfig\n * @property {number} timeStepDuration\n * @property {number} gravity\n * @property {vec3} _gravityVec\n * @property {number} linearDragCoefficient\n * @property {number} angularDragCoefficient\n * @property {number} coefficientOfRestitution\n * @property {number} coefficientOfFriction\n * @property {number} lowMomentumSuppressionThreshold\n * @property {number} lowAngularMomentumSuppressionThreshold\n */\n","import {rotateTensor, createBoxInertiaTensor} from '../util';\n\n/**\n * This class represents the state of an object that is needed for a physics simulation (such as\n * position, momentum, and mass).\n */\nclass PhysicsState {\n  /**\n   * @param {DynamicsConfig} [dynamicsParams={}]\n   */\n  constructor(dynamicsParams = {}) {\n    const position = dynamicsParams.position || vec3.create();\n    const momentum = dynamicsParams.momentum || vec3.create();\n    const orientation = dynamicsParams.orientation || quat.create();\n    const angularMomentum = dynamicsParams.angularMomentum || vec3.create();\n    const mass = dynamicsParams.mass || 1;\n    const unrotatedInertiaTensor = dynamicsParams.unrotatedInertiaTensor || createBoxInertiaTensor(1, 1, 1, mass);\n\n    // Constant fields.\n\n    this.mass = mass;\n    this.inverseMass = 1 / mass;\n    this.unrotatedInertiaTensor = unrotatedInertiaTensor;\n\n    // Independent fields.\n\n    this.position = position;\n    this.momentum = momentum;\n    this.orientation = orientation;\n    this.angularMomentum = angularMomentum;\n\n    // Dependent fields.\n\n    // Linear velocity.\n    this.velocity = vec3.create();\n    // Quaternion-based representation of the rate of change in orientation.\n    this.spin = quat.create();\n    // Vector-based representation of the angular velocity.\n    this.angularVelocity = vec3.create();\n    // The inverse inertia tensor rotated to the world coordinate frame.\n    this.inverseInertiaTensor = mat3.create();\n\n    this.updateDependentFields();\n  }\n\n  updateDependentFields() {// TODO: Test this somehow...\n    // Update linear velocity.\n    vec3.scale(this.velocity, this.momentum, this.inverseMass);\n\n    // Update angular velocity.\n    quat.normalize(this.orientation, this.orientation);\n    rotateTensor(this.inverseInertiaTensor, this.unrotatedInertiaTensor, this.orientation);\n    mat3.invert(this.inverseInertiaTensor, this.unrotatedInertiaTensor);\n    vec3.transformMat3(this.angularVelocity, this.angularMomentum, this.inverseInertiaTensor);\n    quat.set(this.spin, this.angularVelocity[0], this.angularVelocity[1],\n        this.angularVelocity[2], 0);\n    quat.scale(this.spin, this.spin, 0.5);\n    quat.multiply(this.spin, this.spin, this.orientation);\n  }\n\n  /**\n   * Perform a deep copy.\n   *\n   * @param {PhysicsState} other\n   */\n  copy(other) {\n    this.mass = other.mass;\n    this.inverseMass = other.inverseMass;\n    mat3.copy(this.unrotatedInertiaTensor, other.unrotatedInertiaTensor);\n    mat3.copy(this.inverseInertiaTensor, other.inverseInertiaTensor);\n    vec3.copy(this.position, other.position);\n    vec3.copy(this.momentum, other.momentum);\n    quat.copy(this.orientation, other.orientation);\n    vec3.copy(this.angularMomentum, other.angularMomentum);\n    vec3.copy(this.velocity, other.velocity);\n    quat.copy(this.spin, other.spin);\n    vec3.copy(this.angularVelocity, other.angularVelocity);\n  }\n\n  /**\n   * @param {PhysicsState} a\n   * @param {PhysicsState} b\n   * @param {number} partialRatio\n   */\n  lerp(a, b, partialRatio) {\n    vec3.lerp(this.position, a.position, b.position, partialRatio);\n    vec3.lerp(this.momentum, a.momentum, b.momentum, partialRatio);\n    quat.slerp(this.orientation, a.orientation, b.orientation, partialRatio);\n    quat.normalize(this.orientation, this.orientation);\n    vec3.lerp(this.angularMomentum, a.angularMomentum, b.angularMomentum, partialRatio);\n    this.updateDependentFields();\n  }\n}\n\nexport {PhysicsState};\n\n/**\n * @typedef {Object} DynamicsConfig\n * @property {vec3} [position]\n * @property {vec3} [momentum]\n * @property {quat} [orientation]\n * @property {vec3} [angularMomentum]\n * @property {number} [mass]\n * @property {mat3} [unrotatedInertiaTensor]\n */\n","export * from './src/force-utils';\nexport * from './src/geometry';\nexport * from './src/inertia-tensor-utils';\nexport * from './src/util';\n","/**\n * This module defines a collection of static general utility functions for calculating forces.\n */\n\n/**\n * @param {GravityApplierConfig} config\n * @param {ForceApplierOutput} output\n * @param {ForceApplierInput} input\n */\nfunction applyGravity(config, output, input) {\n  vec3.scaleAndAdd(output.force, output.force, config._gravityVec, input.state.mass);\n}\n\n/**\n * @param {LinearDragApplierConfig} config\n * @param {ForceApplierOutput} output\n * @param {ForceApplierInput} input\n */\nfunction applyLinearDrag(config, output, input) {\n  const dragMagnitude = -vec3.squaredLength(input.state.velocity) * config.linearDragCoefficient;\n  vec3.normalize(_vec3, input.state.velocity);\n  vec3.scaleAndAdd(output.force, output.force, _vec3, dragMagnitude);\n}\n\n/**\n * @param {AngularDragApplierConfig} config\n * @param {ForceApplierOutput} output\n * @param {ForceApplierInput} input\n */\nfunction applyAngularDrag(config, output, input) {\n  vec3.scaleAndAdd(output.torque, output.torque, input.state.angularVelocity,\n      config.angularDragCoefficient);\n}\n\n/**\n * Applies a simple linear spring force (using Hooke's law).\n *\n * force = displacement * coefficient\n *\n * @param {LinearSpringForceApplierConfig} config\n * @param {ForceApplierOutput} output\n * @param {ForceApplierInput} input\n */\nfunction applyLinearSpringForce(config, output, input) {\n  vec3.subtract(_vec3, config.getIntendedPosition(), input.state.position);\n  vec3.scaleAndAdd(output.force, output.force, _vec3, config.springCoefficient);\n}\n\n/**\n * @param {SpringDampingApplierConfig} config\n * @param {ForceApplierOutput} output\n * @param {ForceApplierInput} input\n */\nfunction applySpringDamping(config, output, input) {\n  vec3.scale(_vec3, input.state.velocity, -config.dampingCoefficient);\n  vec3.add(output.force, output.force, _vec3);\n}\n\nconst _vec3 = vec3.create();\n\nexport {\n  applyAngularDrag,\n  applyGravity,\n  applyLinearDrag,\n  applyLinearSpringForce,\n  applySpringDamping,\n}\n\n/**\n * @typedef {Object} GravityApplierConfig\n * @property {vec3} _gravityVec\n */\n\n/**\n * @typedef {Object} LinearDragApplierConfig\n * @property {number} linearDragCoefficient\n */\n\n/**\n * @typedef {Object} AngularDragApplierConfig\n * @property {number} angularDragCoefficient\n */\n\n/**\n * @typedef {Object} LinearSpringForceApplierConfig\n * @property {number} springCoefficient\n * @property {Function.<vec3>} getIntendedPosition\n */\n\n/**\n * @typedef {Object} SpringDampingApplierConfig\n * @property {number} dampingCoefficient\n */\n","/**\n * This module defines a collection of static geometry utility functions.\n */\n\nconst EPSILON = 0.0000001;\nconst HALF_PI = Math.PI / 2;\nconst TWO_PI = Math.PI * 2;\n\n/**\n * Finds the minimum squared distance between two line segments.\n *\n * @param {LineSegment} segmentA\n * @param {LineSegment} segmentB\n * @returns {number}\n */\nfunction findSquaredDistanceBetweenSegments(segmentA, segmentB) {\n  findClosestPointsFromSegmentToSegment(_segmentDistance_tmpVecA, _segmentDistance_tmpVecB,\n      segmentA, segmentB);\n  return vec3.squaredDistance(_segmentDistance_tmpVecA, _segmentDistance_tmpVecB);\n}\n\n/**\n * Finds the minimum squared distance between a line segment and a point.\n *\n * @param {LineSegment} segment\n * @param {vec3} point\n * @returns {number}\n */\nfunction findSquaredDistanceFromSegmentToPoint(segment, point) {\n  findClosestPointOnSegmentToPoint(_segmentDistance_tmpVecA, segment, point);\n  return vec3.squaredDistance(_segmentDistance_tmpVecA, point);\n}\n\nconst _segmentDistance_tmpVecA = vec3.create();\nconst _segmentDistance_tmpVecB = vec3.create();\n\n/**\n * @param {vec3} outputPoint Output parameter.\n * @param {Aabb} aabb\n * @param {vec3} targetPoint\n */\nfunction findClosestPointFromAabbToPoint(outputPoint, aabb, targetPoint) {\n  outputPoint[0] = aabb.minX > targetPoint[0]\n      ? aabb.minX\n      : aabb.maxX < targetPoint[0]\n          ? aabb.maxX\n          : targetPoint[0];\n  outputPoint[1] = aabb.minY > targetPoint[1]\n      ? aabb.minY\n      : aabb.maxY < targetPoint[1]\n          ? aabb.maxY\n          : targetPoint[1];\n  outputPoint[2] = aabb.minZ > targetPoint[2]\n      ? aabb.minZ\n      : aabb.maxZ < targetPoint[2]\n          ? aabb.maxZ\n          : targetPoint[2];\n}\n\n/**\n * @param {vec3} outputPoint Output parameter.\n * @param {Aabb} aabb\n * @param {vec3} targetPoint\n */\nfunction findClosestPointFromAabbSurfaceToPoint(outputPoint, aabb, targetPoint) {\n  findClosestPointFromAabbToPoint(outputPoint, aabb, targetPoint);\n\n  // If the calculated point lies within the AABB, then we need to adjust one coordinate to lie\n  // along the edge of the AABB.\n  if (aabbVsPoint(aabb, outputPoint)) {\n    // Calculate the closest vertex.\n    _tmpVec1[0] = targetPoint[0] - aabb.minX < aabb.maxX - targetPoint[0]\n        ? aabb.minX\n        : aabb.maxX;\n    _tmpVec1[1] = targetPoint[1] - aabb.minY < aabb.maxY - targetPoint[1]\n        ? aabb.minY\n        : aabb.maxY;\n    _tmpVec1[2] = targetPoint[2] - aabb.minZ < aabb.maxZ - targetPoint[2]\n        ? aabb.minZ\n        : aabb.maxZ;\n\n    // Calculate the distance to the vertex along each dimension.\n    _tmpVec2[0] = _tmpVec1[0] - outputPoint[0];\n    _tmpVec2[0] = _tmpVec2[0] < 0 ? -_tmpVec2[0] : _tmpVec2[0];\n    _tmpVec2[1] = _tmpVec1[1] - outputPoint[1];\n    _tmpVec2[1] = _tmpVec2[1] < 1 ? -_tmpVec2[1] : _tmpVec2[1];\n    _tmpVec2[2] = _tmpVec1[2] - outputPoint[2];\n    _tmpVec2[2] = _tmpVec2[2] < 2 ? -_tmpVec2[2] : _tmpVec2[2];\n\n    // Determine along which dimension the point is closest to the AABB.\n    const index = _tmpVec2[0] < _tmpVec2[1]\n        ? (_tmpVec2[0] < _tmpVec2[2]\n            ? 0\n            : 2)\n        : (_tmpVec2[1] < _tmpVec2[2]\n            ? 1\n            : 2);\n\n    outputPoint[index] = _tmpVec1[index];\n  }\n}\n\n/**\n * Finds the point of intersection between a line segment and a coplanar quadrilateral.\n *\n * This assumes the region is not degenerate (has non-zero side lengths).\n *\n * @param {vec3} poi Output param. Null if there is no intersection.\n * @param {LineSegment} segment\n * @param {vec3} planeVertex1\n * @param {vec3} planeVertex2\n * @param {vec3} planeVertex3\n * @param {vec3} planeVertex4\n * @returns {boolean} True if there is an intersection.\n */\nfunction findPoiBetweenSegmentAndPlaneRegion(poi, segment, planeVertex1, planeVertex2, planeVertex3,\n                                             planeVertex4) {\n  return findPoiBetweenSegmentAndTriangle(poi, segment, planeVertex1, planeVertex2, planeVertex3) ||\n      findPoiBetweenSegmentAndTriangle(poi, segment, planeVertex1, planeVertex3, planeVertex4);\n}\n\n/**\n * Finds the point of intersection between a line segment and a triangle.\n *\n * This assumes the triangle is not degenerate (has non-zero side lengths).\n *\n * ----------------------------------------------------------------------------\n * Originally based on Dan Sunday's algorithms at http://geomalgorithms.com/a06-_intersect-2.html.\n *\n * Copyright 2001 softSurfer, 2012 Dan Sunday\n * This code may be freely used and modified for any purpose\n * providing that this copyright notice is included with it.\n * SoftSurfer makes no warranty for this code, and cannot be held\n * liable for any real or imagined damage resulting from its use.\n * Users of this code must verify correctness for their application.\n * ----------------------------------------------------------------------------\n *\n * @param {vec3} poi Output param. Null if there is no intersection.\n * @param {LineSegment} segment\n * @param {vec3} triangleVertex1\n * @param {vec3} triangleVertex2\n * @param {vec3} triangleVertex3\n * @returns {boolean} True if there is an intersection.\n */\nfunction findPoiBetweenSegmentAndTriangle(poi, segment, triangleVertex1, triangleVertex2,\n                                          triangleVertex3) {\n  //\n  // Find the point of intersection between the segment and the triangle's plane.\n  //\n\n  // First triangle edge.\n  vec3.subtract(_tmpVec1, triangleVertex2, triangleVertex1);\n  // Second triangle edge.\n  vec3.subtract(_tmpVec2, triangleVertex3, triangleVertex1);\n  // Triangle normal.\n  vec3.cross(_tmpVec3, _tmpVec1, _tmpVec2);\n  // Triangle to segment.\n  vec3.subtract(_tmpVec4, segment.start, triangleVertex1);\n\n  const normalToSegmentProj = vec3.dot(_tmpVec3, segment.dir);\n\n  if (normalToSegmentProj < EPSILON && normalToSegmentProj > -EPSILON) {\n    // The line segment is parallel to the triangle.\n    return false;\n  }\n\n  const normalToDiffProj = -vec3.dot(_tmpVec3, _tmpVec4);\n  const segmentNormalizedDistance = normalToDiffProj / normalToSegmentProj;\n\n  if (segmentNormalizedDistance < 0 || segmentNormalizedDistance > 1) {\n    // The line segment ends before intersecting the plane.\n    return false;\n  }\n\n  vec3.scaleAndAdd(poi, segment.start, segment.dir, segmentNormalizedDistance);\n\n  //\n  // Determine whether the point of intersection lies within the triangle.\n  //\n\n  const edge1DotEdge1 = vec3.dot(_tmpVec1, _tmpVec1);\n  const edge1DotEdge2 = vec3.dot(_tmpVec1, _tmpVec2);\n  const edge2DotEdge2 = vec3.dot(_tmpVec2, _tmpVec2);\n  // Triangle to point of intersection.\n  vec3.subtract(_tmpVec3, poi, triangleVertex1);\n  const diffDotEdge1 = vec3.dot(_tmpVec3, _tmpVec1);\n  const diffDotEdge2 = vec3.dot(_tmpVec3, _tmpVec2);\n  const denominator = edge1DotEdge2 * edge1DotEdge2 - edge1DotEdge1 * edge2DotEdge2;\n\n  // Check the triangle's parametric coordinates.\n  const s = (edge1DotEdge2 * diffDotEdge2 - edge2DotEdge2 * diffDotEdge1) / denominator;\n  if (s < 0 || s > 1) {\n    return false;\n  }\n  const t = (edge1DotEdge2 * diffDotEdge1 - edge1DotEdge1 * diffDotEdge2) / denominator;\n  if (t < 0 || s + t > 1) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * ----------------------------------------------------------------------------\n * Originally based on Jukka Jylänki's algorithm at\n * https://github.com/juj/MathGeoLib/blob/1093e39d91def7ff6905fb7489893190d7d81353/src/Geometry/OBB.cpp.\n *\n * Copyright 2011 Jukka Jylänki\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ----------------------------------------------------------------------------\n *\n * @param {vec3} outputPoint Output parameter.\n * @param {Obb} obb\n * @param {vec3} targetPoint\n */\nfunction findClosestPointFromObbToPoint(outputPoint, obb, targetPoint) {\n  vec3.subtract(_tmpVec1, targetPoint, obb.centerOfVolume);\n  vec3.copy(outputPoint, obb.centerOfVolume);\n  for (let i = 0; i < 3; i++) {\n    // Compute the displacement along this axis.\n    let projection = vec3.dot(obb.axes[i], _tmpVec1);\n    projection = projection > obb.halfSideLengths[i] ? obb.halfSideLengths[i] :\n        (projection < -obb.halfSideLengths[i] ? -obb.halfSideLengths[i] : projection);\n    vec3.scaleAndAdd(outputPoint, outputPoint, obb.axes[i], projection);\n  }\n}\n\n/**\n * Finds the closest position on one line segment to the other line segment, and vice versa.\n *\n * ----------------------------------------------------------------------------\n * Originally based on Jukka Jylänki's algorithm at\n * https://github.com/juj/MathGeoLib/blob/ff2d348a167008c831ae304483b824647f71fbf6/src/Geometry/LineSegment.cpp.\n *\n * Copyright 2011 Jukka Jylänki\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ----------------------------------------------------------------------------\n *\n * @param {vec3} closestA Output param.\n * @param {vec3} closestB Output param.\n * @param {LineSegment} segmentA\n * @param {LineSegment} segmentB\n */\nfunction findClosestPointsFromSegmentToSegment(closestA, closestB, segmentA, segmentB) {\n  const {distA, distB} = findClosestPointsFromLineToLine(\n      segmentA.start, segmentA.dir, segmentB.start, segmentB.dir);\n\n  const isDistAInBounds = distA >= 0 && distA <= 1;\n  const isDistBInBounds = distB >= 0 && distB <= 1;\n\n  if (isDistAInBounds) {\n    if (isDistBInBounds) {\n      // The distances along both line segments are within bounds.\n      vec3.scaleAndAdd(closestA, segmentA.start, segmentA.dir, distA);\n      vec3.scaleAndAdd(closestB, segmentB.start, segmentB.dir, distB);\n    } else {\n      // Only the distance along the first line segment is within bounds.\n      if (distB < 0) {\n        vec3.copy(closestB, segmentB.start);\n      } else {\n        vec3.copy(closestB, segmentB.end);\n      }\n      findClosestPointOnSegmentToPoint(closestA, segmentA, closestB);\n    }\n  } else {\n    if (isDistBInBounds) {\n      // Only the distance along the second line segment is within bounds.\n      if (distA < 0) {\n        vec3.copy(closestA, segmentA.start);\n      } else {\n        vec3.copy(closestA, segmentA.end);\n      }\n      findClosestPointOnSegmentToPoint(closestB, segmentB, closestA);\n    } else {\n      // Neither of the distances along either line segment are within bounds.\n      if (distA < 0) {\n        vec3.copy(closestA, segmentA.start);\n      } else {\n        vec3.copy(closestA, segmentA.end);\n      }\n\n      if (distB < 0) {\n        vec3.copy(closestB, segmentB.start);\n      } else {\n        vec3.copy(closestB, segmentB.end);\n      }\n\n      const altClosestA = vec3.create();\n      const altClosestB = vec3.create();\n\n      findClosestPointOnSegmentToPoint(altClosestA, segmentA, closestB);\n      findClosestPointOnSegmentToPoint(altClosestB, segmentB, closestA);\n\n      if (vec3.squaredDistance(altClosestA, closestB) <\n          vec3.squaredDistance(altClosestB, closestA)) {\n        vec3.copy(closestA, altClosestA);\n      } else {\n        vec3.copy(closestB, altClosestB);\n      }\n    }\n  }\n}\n\n/**\n * Finds the closest position on a line segment to a point.\n *\n * ----------------------------------------------------------------------------\n * Originally based on Jukka Jylänki's algorithm at\n * https://github.com/juj/MathGeoLib/blob/ff2d348a167008c831ae304483b824647f71fbf6/src/Geometry/LineSegment.cpp.\n *\n * Copyright 2011 Jukka Jylänki\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ----------------------------------------------------------------------------\n *\n * @param {vec3} closestPoint Output param.\n * @param {LineSegment} segment\n * @param {vec3} point\n * @private\n */\nfunction findClosestPointOnSegmentToPoint(closestPoint, segment, point) {\n  const dirSquaredLength = vec3.squaredLength(segment.dir);\n\n  if (!dirSquaredLength) {\n    // The point is at the segment start.\n    vec3.copy(closestPoint, segment.start);\n  } else {\n    // Calculate the projection of the point onto the line extending through the segment.\n    vec3.subtract(_tmpVec1, point, segment.start);\n    const t = vec3.dot(_tmpVec1, segment.dir) / dirSquaredLength;\n\n    if (t < 0) {\n      // The point projects beyond the segment start.\n      vec3.copy(closestPoint, segment.start);\n    } else if (t > 1) {\n      // The point projects beyond the segment end.\n      vec3.copy(closestPoint, segment.end);\n    } else {\n      // The point projects between the start and end of the segment.\n      vec3.scaleAndAdd(closestPoint, segment.start, segment.dir, t);\n    }\n  }\n}\n\n/**\n * Finds the closest position on one line to the other line, and vice versa.\n *\n * The positions are represented as scalar-value distances from the \"start\" positions of each line.\n * These are scaled according to the given direction vectors.\n *\n * ----------------------------------------------------------------------------\n * Originally based on Jukka Jylänki's algorithm at\n * https://github.com/juj/MathGeoLib/blob/ff2d348a167008c831ae304483b824647f71fbf6/src/Geometry/Line.cpp.\n *\n * Copyright 2011 Jukka Jylänki\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ----------------------------------------------------------------------------\n *\n * @param {vec3} startA The start position of line A.\n * @param {vec3} dirA The (unnormalized) direction of line A. Cannot be zero.\n * @param {vec3} startB The start position of line B.\n * @param {vec3} dirB The (unnormalized) direction of line B. Cannot be zero.\n * @returns {{distA: Number, distB: Number}}\n */\nfunction findClosestPointsFromLineToLine(startA, dirA, startB, dirB) {\n  vec3.subtract(_tmpVec1, startA, startB);\n  const dirBDotDirAToB = vec3.dot(dirB, _tmpVec1);\n  const dirADotDirAToB = vec3.dot(dirA, _tmpVec1);\n\n  const sqrLenDirB = vec3.squaredLength(dirB);\n  const sqrLenDirA = vec3.squaredLength(dirA);\n\n  const dirADotDirB = vec3.dot(dirA, dirB);\n\n  const denominator = sqrLenDirA * sqrLenDirB - dirADotDirB * dirADotDirB;\n\n  const distA = denominator < EPSILON\n      ? 0\n      : (dirADotDirB * dirBDotDirAToB - sqrLenDirB * dirADotDirAToB) / denominator;\n  const distB = (dirBDotDirAToB + dirADotDirB * distA) / sqrLenDirB;\n\n  return {\n    distA: distA,\n    distB: distB\n  };\n}\n\n/**\n * A good description of why we need these special operations for rotating tensors can be found\n * here: http://www.randygaul.net/2014/04/09/transformations-change-of-basis-matrix/.\n *\n * @param {mat3} output Output param.\n * @param {mat3} tensor\n * @param {quat} rotation\n */\nfunction rotateTensor(output, tensor, rotation) {// TODO: Test this somehow...\n  mat3.fromQuat(_tmpMat, rotation);\n  mat3.multiply(output, _tmpMat, tensor);\n  mat3.invert(_tmpMat, _tmpMat);\n  mat3.multiply(output, output, _tmpMat);\n}\n\n/**\n * @param {Aabb} aabb\n * @param {vec3} point\n * @returns {boolean}\n */\nfunction aabbVsPoint(aabb, point) {\n  return point[0] >= aabb.minX && point[0] <= aabb.maxX &&\n      point[1] >= aabb.minY && point[1] <= aabb.maxY &&\n      point[2] >= aabb.minZ && point[2] <= aabb.maxZ\n}\n\n/**\n * @param {quat} out\n * @param {quat} a\n * @param {quat} b\n * @param {number} scale\n * @returns {quat}\n */\nfunction scaleAndAddQuat(out, a, b, scale) {\n  return quat.set(out,\n      a[0] + b[0] * scale,\n      a[1] + b[1] * scale,\n      a[2] + b[2] * scale,\n      a[3] + b[3] * scale);\n}\n\n/**\n * @param {vec3} a\n * @param {vec3} b\n * @returns {boolean}\n */\nfunction areVec3sClose(a, b) {\n  for (let i = 0; i < 3; i++) {\n    if (a[i] - b[i] > EPSILON || b[i] - a[i] > EPSILON) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Re-used across the geometry utility functions, so we don't instantiate as many vec3 objects.\nconst _tmpVec1 = vec3.create();\nconst _tmpVec2 = vec3.create();\nconst _tmpVec3 = vec3.create();\nconst _tmpVec4 = vec3.create();\nconst _tmpMat = mat3.create();\n\n// Exposed to consumers, so they don't have to instantiate as many vec3 objects.\nconst tmpVec1 = vec3.create();\nconst tmpVec2 = vec3.create();\nconst tmpVec3 = vec3.create();\nconst tmpVec4 = vec3.create();\n\nconst _geometry = {\n  EPSILON,\n  HALF_PI,\n  TWO_PI,\n  scaleAndAddQuat,\n};\n\nexport {\n  _geometry,\n  tmpVec1,\n  tmpVec2,\n  tmpVec3,\n  tmpVec4,\n  findSquaredDistanceBetweenSegments,\n  findSquaredDistanceFromSegmentToPoint,\n  findClosestPointFromAabbToPoint,\n  findClosestPointFromAabbSurfaceToPoint,\n  findPoiBetweenSegmentAndTriangle,\n  findPoiBetweenSegmentAndPlaneRegion,\n  findClosestPointFromObbToPoint,\n  findClosestPointsFromSegmentToSegment,\n  findClosestPointOnSegmentToPoint,\n  findClosestPointsFromLineToLine,\n  rotateTensor,\n  aabbVsPoint,\n  areVec3sClose,\n};\n","/**\n * This module defines a collection of static utility functions for calculating inertia tensors.\n */\n\nimport {_geometry, rotateTensor} from './geometry';\n\n/**\n * @param {number} radius\n * @param {number} mass\n * @returns {mat3}\n */\nfunction createSphereInertiaTensor(radius, mass) {// TODO: Test this somehow...\n  const tensor = mat3.create();\n  const moment = 2 / 5 * mass * radius * radius;\n  tensor[0] = moment;\n  tensor[4] = moment;\n  tensor[8] = moment;\n  return tensor;\n}\n\n/**\n * @param {number} rangeX\n * @param {number} rangeY\n * @param {number} rangeZ\n * @param {number} mass\n * @returns {mat3}\n */\nfunction createBoxInertiaTensor(rangeX, rangeY, rangeZ, mass) {// TODO: Test this somehow...\n  const tensor = mat3.create();\n  const tmp = mass / 12;\n  const xRangeSquared = rangeX * rangeX;\n  const yRangeSquared = rangeY * rangeY;\n  const zRangeSquared = rangeZ * rangeZ;\n  tensor[0] = tmp * (yRangeSquared + zRangeSquared);\n  tensor[4] = tmp * (xRangeSquared + yRangeSquared);\n  tensor[8] = tmp * (xRangeSquared + zRangeSquared);\n  return tensor;\n}\n\n/**\n * ----------------------------------------------------------------------------\n * Originally based on Bojan Lovrovic's algorithm at\n * http://www.gamedev.net/page/resources/_/technical/math-and-physics/capsule-inertia-tensor-r3856.\n *\n * Copyright 2014 Bojan Lovrovic\n *\n * GameDev.net Open License\n * (http://www.gamedev.net/page/resources/_/gdnethelp/gamedevnet-open-license-r2956)\n *\n * TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n *\n * 1. Definitions.\n *\n * \"Article\" shall refer to any body of text written by Author which describes and documents the use\n * and/or operation of Source. It specifically does not refer to any accompanying Source either\n * embedded within the body of text or attached to the article as a file.\n *\n * \"Author\" means the individual or entity that offers the Work under the terms of this License.\n *\n * \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined\n * by Sections 1 through 9 of this document.\n *\n * \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is\n * granting the License.\n *\n * \"You\" (or \"Your\") shall mean an individual or entity exercising permissions granted by this\n * License.\n *\n * \"Source\" shall include all software text source code and configuration files used to create\n * executable software\n *\n * \"Object\" shall mean any Source which has been converted into a machine executable software\n *\n * \"Work\" consists of both the Article and Source\n *\n * \"Publisher\" refers to GameDev.net LLC\n *\n * This agreement is between You and Author, the owner and creator of the Work located at\n * Gamedev.net.\n *\n * 2. Fair Dealing Rights.\n *\n * Nothing in this License is intended to reduce, limit, or restrict any uses free from copyright or\n * rights arising from limitations or exceptions that are provided for in connection with the\n * copyright protection under copyright law or other applicable laws.\n *\n * 3. Grant of Copyright License.\n *\n * Subject to the terms and conditions of this License, the Author hereby grants to You a perpetual,\n * worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to the Work\n * under the following stated terms:\n * You may not reproduce the Article on any other website outside of Gamedev.net without express\n * written permission from the Author\n * You may use, copy, link, modify and distribute under Your own terms, binary Object code versions\n * based on the Work in your own software\n * You may reproduce, prepare derivative Works of, publicly display, publicly perform, sublicense,\n * and distribute the Source and such derivative Source in Source form only as part of a larger\n * software distribution and provided that attribution to the original Author is granted.\n * The origin of this Work must not be misrepresented; you must not claim that you wrote the\n * original Source. If you use this Source in a product, an acknowledgment of the Author name would\n * be appreciated but is not required.\n *\n * 4. Restrictions.\n *\n * The license granted in Section 3 above is expressly made subject to and limited by the following\n * restrictions:\n * Altered Source versions must be plainly marked as such, and must not be misrepresented as being\n * the original software.\n * This License must be visibly linked to from any online distribution of the Article by URI and\n * using the descriptive text \"Licensed under the GameDev.net Open License\"\n * Neither the name of the Author of this Work, nor any of their trademarks or service marks, may be\n * used to endorse or promote products derived from this Work without express prior permission of\n * the Author\n * Except as expressly stated herein, nothing in this License grants any license to Author's\n * trademarks, copyrights, patents, trade secrets or any other intellectual property. No license is\n * granted to the trademarks of Author even if such marks are included in the Work. Nothing in this\n * License shall be interpreted to prohibit Author from licensing under terms different from this\n * License any Work that Author otherwise would have a right to license.\n *\n * 5. Grant of Patent License.\n *\n * Subject to the terms and conditions of this License, each Contributor hereby grants to You a\n * perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in\n * this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise\n * transfer the Work, where such license applies only to those patent claims licensable by such\n * Contributor that are necessarily infringed by their Contribution(s) alone or by combination of\n * their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute\n * patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit)\n * alleging that the Work or Source incorporated within the Work constitutes direct or contributory\n * patent infringement, then any patent licenses granted to You under this License for that Work\n * shall terminate as of the date such litigation is filed.\n *\n * 6. Limitation of Liability.\n *\n * In no event and under no legal theory, whether in tort (including negligence), contract, or\n * otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or\n * agreed to in writing, shall any Author or Publisher be liable to You for damages, including any\n * direct, indirect, special, incidental, or consequential damages of any character arising as a\n * result of this License or out of the use or inability to use the Work (including but not limited\n * to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all\n * other commercial damages or losses), even if such Author has been advised of the possibility of\n * such damages.\n *\n * 7. DISCLAIMER OF WARRANTY\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\n * NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * 8. Publisher.\n *\n * The parties hereby confirm that the Publisher shall not, under any circumstances, be responsible\n * for and shall not have any liability in respect of the subject matter of this License. The\n * Publisher makes no warranty whatsoever in connection with the Work and shall not be liable to You\n * or any party on any legal theory for any damages whatsoever, including without limitation any\n * general, special, incidental or consequential damages arising in connection to this license. The\n * Publisher reserves the right to cease making the Work available to You at any time without notice\n *\n * 9. Termination\n *\n * This License and the rights granted hereunder will terminate automatically upon any breach by You\n * of the terms of this License. Individuals or entities who have received Deriviative Works from\n * You under this License, however, will not have their licenses terminated provided such\n * individuals or entities remain in full compliance with those licenses. Sections 1, 2, 6, 7, 8 and\n * 9 will survive any termination of this License.\n * Subject to the above terms and conditions, the license granted here is perpetual (for the\n * duration of the applicable copyright in the Work). Notwithstanding the above, Licensor reserves\n * the right to release the Work under different license terms or to stop distributing the Work at\n * any time; provided, however that any such election will not serve to withdraw this License (or\n * any other license that has been, or is required to be, granted under the terms of this License),\n * and this License will continue in full force and effect unless terminated as stated above.\n * ----------------------------------------------------------------------------\n *\n * @param {number} halfDistance\n * @param {number} radius\n * @param {number} mass\n * @returns {mat3}\n */\nfunction createCapsuleInertiaTensor(halfDistance, radius, mass) {// TODO: Test this somehow...\n  const tensor = mat3.create();\n\n  const cylinderHeight = halfDistance * 2;\n  const radiusSquared = radius * radius;\n  const cylinderVolume = Math.PI * radiusSquared * cylinderHeight;\n  const hemisphereCombinedVolume = 4 / 3 * Math.PI * radiusSquared;\n  const cylinderMass = cylinderVolume / (cylinderVolume * hemisphereCombinedVolume) * mass;\n  const hemisphereMass = (mass - cylinderMass) / 2;\n\n  // Contribution from the cylinder.\n  tensor[4] = radiusSquared * cylinderMass / 2;\n  tensor[0] = tensor[4] / 2 + cylinderMass * cylinderHeight * cylinderHeight / 12;\n  tensor[8] = tensor[0];\n\n  // Contributions from the hemispheres.\n  const tmp1 = hemisphereMass * 2 * radiusSquared / 5;\n  tensor[4] += tmp1 * 2;\n  const tmp2 =\n      (tmp1 + hemisphereMass * (halfDistance * halfDistance + 3 / 8 * cylinderHeight * radius)) * 2;\n  tensor[0] += tmp2;\n  tensor[8] += tmp2;\n\n  // The above calculations assume the capsule is aligned along the y-axis. However, our default\n  // capsule orientation is aligned along the z-axis.\n  const rotation = quat.create();\n  quat.rotateX(rotation, rotation, _geometry.HALF_PI);\n  rotateTensor(tensor, tensor, rotation);\n\n  return tensor;\n}\n\n/**\n * @param {Collidable} collidable\n * @param {number} mass\n * @returns {mat3}\n */\nfunction createForCollidable(collidable, mass) {\n  switch (collidable.constructor.name) {\n    case 'Sphere':\n      return createSphereInertiaTensor(collidable.radius, mass);\n    case 'Aabb':\n      return createBoxInertiaTensor(collidable.rangeX, collidable.rangeY, collidable.rangeZ, mass);\n    case 'Capsule':\n      return createCapsuleInertiaTensor(collidable.halfDistance, collidable.radius, mass);\n    case 'Obb':\n      return createBoxInertiaTensor(collidable.halfSideLengths[0] * 2,\n          collidable.halfSideLengths[1] * 2, collidable.halfSideLengths[2] * 2, mass);\n  }\n}\n\nexport {\n  createSphereInertiaTensor,\n  createBoxInertiaTensor,\n  createCapsuleInertiaTensor,\n  createForCollidable,\n};\n","/**\n * This module defines a collection of static general utility functions.\n */\n\n// TODO: This should be set from somewhere else (probably as a param to controller like before; but then I need to make this updatable)\nconst isInDevMode = true;\n\nconst _util = {\n  isInDevMode: isInDevMode\n};\n\nexport {\n  _util,\n};\n","export * from './src/camera';\nexport * from './src/first-person-camera';\nexport * from './src/fixed-camera';\nexport * from './src/fixed-follow-camera';\nexport * from './src/follow-camera';\nexport * from './src/third-person-camera';\nexport * from './src/overhead-camera';\n","import { PersistentAnimationJob } from 'lsl-animatex';\n\n// TODO: Make the rotation quaternion based with 6DoF.\n\n// TODO: Add support for scripting the camera to follow a curve:\n// (https://msdn.microsoft.com/en-us/library/bb203908(v=xnagamestudio.31).aspx)\n\n/**\n * This class defines common camera logic.\n *\n * @abstract\n */\nclass Camera extends PersistentAnimationJob {\n  /**\n   * If oldCamera is given, then the state of the new camera will be initialized to match that of\n   * the old camera. This enables a smooth transition when changing cameras.\n   *\n   * @param {CameraConfig} cameraParams\n   * @param {Camera} [oldCamera]\n   */\n  constructor(cameraParams, oldCamera) {\n    super();\n\n    // Camera is an abstract class. It should not be instantiated directly.\n    if (new.target === Camera) {\n      throw new TypeError('Cannot construct Camera instances directly');\n    }\n\n    this._cameraParams = cameraParams;\n    this._fovY = null;\n    this._aspectRatio = null;\n    this._zNear = null;\n    this._zFar = null;\n    this._position = vec3.create();\n    this._orientation = quat.create(); // TODO: Use this.\n    this._viewMatrix = mat4.create();\n    this._projectionMatrix = mat4.create();\n    this._viewProjectionMatrix = mat4.create();\n\n    this._matchOldCamera(oldCamera);\n  }\n\n  reset() {\n    this._setPerspective(this._cameraParams.fovY, this._cameraParams.defaultAspectRatio,\n      this._cameraParams.zNear, this._cameraParams.zFar);\n  }\n\n  // TODO: Call this after adding support for dynamically switching cameras.\n  destroy() {}\n\n  /**\n   * Set this camera's orientation and position.\n   *\n   * @param {vec3} eye The camera position.\n   * @param {vec3} target The focal point.\n   * @param {vec3} up The local up direction.\n   * @param {vec3} viewDirection The (normalized) direction the camera is looking.\n   * @protected\n   */\n  _setPositionAndLookAt(eye, target, up, viewDirection) {\n    vec3.copy(this._position, eye);\n    this._setLookAtFromCurrentPosition(target, up, viewDirection);\n  }\n\n  /**\n   * Set this camera's orientation, but do not change its position.\n   *\n   * @param {vec3} target The focal point.\n   * @param {vec3} up The local up direction.\n   * @param {vec3} viewDirection The (normalized) direction the camera is looking.\n   * @protected\n   */\n  _setLookAtFromCurrentPosition(target, up, viewDirection) {\n    mat4.lookAt(this._viewMatrix, this._position, target, up);\n    quat.rotationTo(this._orientation, this._cameraParams._defaultLookAtDirection, viewDirection); // TODO: Check this; might need to swap arguments.\n    this._updateViewProjectionMatrix();\n  }\n\n  /**\n   * Translate this camera by the given amount from its current position.\n   *\n   * @param {vec3} translation\n   * @protected\n   */\n  _translate(translation) {\n    vec3.add(this._position, this._position, translation);\n  }\n\n  /**\n   * Rotate this camera by the given amount from its current orientation.\n   *\n   * @param {quat} rotation\n   * @protected\n   */\n  _rotate(rotation) {\n    // TODO\n  }\n\n  /**\n   * @param {number} fovY In radians.\n   * @param {number} aspectRatio Width / height.\n   * @param {number} zNear\n   * @param {number} zFar\n   * @protected\n   */\n  _setPerspective(fovY, aspectRatio, zNear, zFar) {\n    this._fovY = fovY;\n    this._aspectRatio = aspectRatio;\n    this._zNear = zNear;\n    this._zFar = zFar;\n    this._updateProjectionMatrix();\n  }\n\n  /**\n   * Re-calculates the view-projection matrix. This should be called any time either the view or\n   * projection matrices is updated.\n   *\n   * @protected\n   */\n  _updateProjectionMatrix() {\n    mat4.perspective(\n      this._projectionMatrix, this._fovY, this._aspectRatio, this._zNear, this._zFar);\n    this._updateViewProjectionMatrix();\n  }\n\n  /**\n   * Re-calculates the view-projection matrix. This should be called any time either the view or\n   * projection matrices is updated.\n   *\n   * @protected\n   */\n  _updateViewProjectionMatrix() {\n    mat4.multiply(this._viewProjectionMatrix, this._projectionMatrix, this._viewMatrix);\n  }\n\n  /**\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @abstract\n   */\n  update(currentTime, deltaTime) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  draw() {}\n\n  /**\n   * @param {number} fovY The vertical field of view, in radians.\n   * @protected\n   */\n  set fov(fovY) {\n    this._fovY = fovY;\n    this._updateProjectionMatrix();\n  }\n\n  /**\n   * @param {number} aspectRatio Width / height.\n   */\n  set aspectRatio(aspectRatio) {\n    this._setPerspective(this._cameraParams.fovY, aspectRatio, this._cameraParams.zNear,\n      this._cameraParams.zFar);\n  }\n\n  /** @returns {vec3} */\n  get position() {\n    return this._position;\n  }\n  /** @returns {quat} */\n  get orientation() {\n    return this._orientation;\n  }\n  /** @returns {mat4} */\n  get viewMatrix() {\n    return this._viewMatrix;\n  }\n  /** @returns {mat4} */\n  get projectionMatrix() {\n    return this._projectionMatrix;\n  }\n  /** @returns {mat4} */\n  get viewProjectionMatrix() { // TODO: Stop using the above two getters and use this instead?\n    return this._viewProjectionMatrix;\n  }\n\n  /**\n   * Update this camera's state to match the given old camera.\n   *\n   * @param {Camera} oldCamera\n   * @protected\n   */\n  _matchOldCamera(oldCamera) {\n    if (!oldCamera) {\n      return;\n    }\n    this._fovY = oldCamera._fovY;\n    this._aspectRatio = oldCamera._aspectRatio;\n    this._zNear = oldCamera._zNear;\n    this._zFar = oldCamera._zFar;\n    vec3.copy(this._position, oldCamera._position);\n    vec3.copy(this._orientation, oldCamera._orientation);\n    mat4.copy(this._viewMatrix, oldCamera._viewMatrix);\n    mat4.copy(this._projectionMatrix, oldCamera._projectionMatrix);\n    mat4.copy(this._viewProjectionMatrix, oldCamera._viewProjectionMatrix);\n  }\n}\n\nexport { Camera };\n\n/**\n * @typedef {Function} CameraConfig\n * @property {number} fovY\n * @property {number} zNear\n * @property {number} zFar\n * @property {number} defaultAspectRatio\n * @property {vec3} _defaultLookAtDirection\n */\n\n/**\n * @typedef {Object} FollowCameraConfig\n * @property {number} springCoefficient\n * @property {number} dampingCoefficient\n * @property {number} intendedDistanceFromTarget\n * @property {number} intendedRotationAngleFromTarget\n * @property {vec3} intendedRotationAxisFromTarget\n * @property {vec3} _intendedTranslationFromTarget\n */\n\n/**\n * @typedef {Object} FirstPersonCameraConfig\n * @property {vec3} intendedDisplacementFromTarget\n * @property {vec3} viewDirection\n * @property {number} targetDistance\n */\n\n/**\n * @typedef {Object} FixedCameraConfig\n * @property {vec3} position\n * @property {vec3} viewDirection\n * @property {vec3} _up\n */\n","import { Camera } from './camera';\n\n/**\n * This class defines a first-person camera.\n *\n * A first-person camera is positioned at a character and moves and rotates with the character.\n */\nclass FirstPersonCamera extends Camera {\n  /**\n   * @param {CameraTarget} cameraTarget\n   * @param {FirstPersonCameraConfig} firstPersonCameraParams\n   * @param {CameraConfig} cameraParams\n   * @param {Camera} [oldCamera]\n   */\n  constructor(cameraTarget, firstPersonCameraParams, cameraParams, oldCamera) {\n    super(cameraParams, oldCamera);\n    this._cameraTarget = cameraTarget;\n    this._firstPersonCameraParams = firstPersonCameraParams;\n    this._cameraTarget = cameraTarget;\n  }\n\n  /**\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  update(currentTime, deltaTime) {\n    this._updatePosition();\n    this._updateOrientation();\n  }\n\n  /**\n   * @private\n   */\n  _updatePosition() {\n    const intendedPosition = this._getIntendedPosition();\n    vec3.copy(this._position, intendedPosition);\n  }\n\n  /**\n   * Update the camera's orientation using the \"look at\" method according to its position and the\n   * position of its target.\n   *\n   * @protected\n   */\n  _updateOrientation() {\n    // Get the view direction, and transform it to align with the target's orientation.\n    const viewDirection = vec3.create();\n    vec3.copy(viewDirection, this._firstPersonCameraParams.viewDirection);\n    vec3.transformQuat(viewDirection, viewDirection, this._cameraTarget.orientation);\n\n    const target = vec3.create();\n    vec3.scaleAndAdd(target, this._position, viewDirection,\n      this._firstPersonCameraParams.targetDistance);\n\n    // Initialize \"up\" as the world z-axis.\n    const up = vec3.fromValues(0, 1, 0);\n\n    // Transform \"up\" to align with the camera target's local z-axis.\n    vec3.transformQuat(up, up, this._cameraTarget.orientation);\n\n    const right = vec3.create();\n    vec3.cross(right, viewDirection, up);\n\n    // Transform \"up\" to align with the camera's local z-axis.\n    vec3.cross(up, right, viewDirection);\n\n    this._setPositionAndLookAt(this._position, target, up, viewDirection);\n  }\n\n  /**\n   * The intended position for this camera to be in according to the position and orientation of the\n   * camera target.\n   *\n   * @returns {vec3}\n   * @protected\n   * @abstract\n   */\n  _getIntendedPosition() {\n    const intendedPosition = vec3.create();\n    vec3.transformMat4(\n      intendedPosition,\n      this._firstPersonCameraParams.intendedDisplacementFromTarget,\n      this._cameraTarget.worldTransform);\n    return intendedPosition;\n  }\n}\n\nexport { FirstPersonCamera };\n","import {Camera} from './camera';\n\n/**\n * This class defines a fixed camera.\n *\n * A fixed camera's position and orientation are updated manually and remain fixed until a later\n * update.\n */\nclass FixedCamera extends Camera {\n  /**\n   * If oldCamera is given, then the state of the new camera will be initialized to match that of\n   * the old camera. This enables a smooth transition when changing cameras.\n   *\n   * @param {FixedCameraConfig} fixedCameraParams\n   * @param {CameraConfig} cameraParams\n   * @param {Camera} [oldCamera]\n   */\n  constructor(fixedCameraParams, cameraParams, oldCamera) {\n    super(cameraParams, oldCamera);\n\n    this._position = fixedCameraParams.position;\n    this._viewDirection = fixedCameraParams.viewDirection;\n    this._up = fixedCameraParams._up;\n    this.__target = vec3.create();\n  }\n\n  reset() {\n    super.reset();\n    this._update();\n  }\n\n  /**\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  update(currentTime, deltaTime) {}\n\n  _update() {\n    vec3.normalize(this._viewDirection, this._viewDirection);\n    vec3.normalize(this._up, this._up);\n\n    // Transform \"up\" to align with the camera's local z-axis.\n    const right = vec3.create();\n    vec3.cross(right, this._viewDirection, this._up);\n    vec3.cross(this._up, right, this._viewDirection);\n\n    this._setPositionAndLookAt(this._position, this._target, this._up, this._viewDirection);\n  }\n\n  /** @param {vec3} newDirection */\n  set viewDirection(newDirection) {\n    vec3.copy(this._viewDirection, newDirection);\n    this._update();\n  }\n\n  /** @param {vec3} newUp */\n  set up(newUp) {\n    vec3.copy(this._up, newUp);\n    this._update();\n  }\n\n  /** @param {vec3} newPosition */\n  set position(newPosition) {\n    vec3.copy(this._position, newPosition);\n    this._update();\n  }\n\n  /** @returns {vec3} */\n  // TODO: Look into whatever bug prevents the parent-class getter from working.\n  get position() {\n    return this._position;\n  }\n\n  /** @returns {vec3} */\n  get viewDirection() {\n    return this._viewDirection;\n  }\n  /** @returns {vec3} */\n  get up() {\n    return this._up;\n  }\n  /**\n   * @returns {vec3}\n   * @private\n   */\n  get _target() {\n    return vec3.add(this.__target, this._position, this._viewDirection);\n  }\n\n  /**\n   * @param {Camera} oldCamera\n   * @protected\n   */\n  _matchOldCamera(oldCamera) {\n    super._matchOldCamera(oldCamera);\n    if (oldCamera instanceof FixedCamera) {\n      vec3.copy(this._viewDirection, oldCamera._viewDirection);\n      vec3.copy(this._up, oldCamera._up);\n    }\n  }\n}\n\nexport {FixedCamera};\n","import {FollowCamera} from './follow-camera';\n\n/**\n * This class defines a fixed-offset follow camera.\n *\n * This camera is positioned at a relative, fixed distance and rotation from the observed target\n * and follows the target's position and orientation at this fixed distance.\n *\n * A follow camera rotates in all three dimensions; it does not have a fixed roll.\n */\nclass FixedFollowCamera extends FollowCamera {\n  /**\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  update(currentTime, deltaTime) {\n    this._updatePosition();\n    this._updateOrientation();\n  }\n\n  /**\n   * @private\n   */\n  _updatePosition() {\n    const intendedPosition = this._getIntendedPosition();\n    vec3.copy(this._position, intendedPosition);\n  }\n}\n\nexport {FixedFollowCamera};\n","import {ThirdPersonCamera} from './third-person-camera';\n\n/**\n * This class defines an abstract follow camera.\n *\n * This is a third-person type of camera whose roll always matches that of the target.\n */\nclass FollowCamera extends ThirdPersonCamera {\n  /**\n   * Update the camera's orientation using the \"look at\" method according to its position and the\n   * position of its target.\n   *\n   * @protected\n   */\n  _updateOrientation() {\n    const target = this._cameraTarget.position;\n\n    const viewDirection = vec3.create();\n    vec3.subtract(viewDirection, target, this._position);\n    vec3.normalize(viewDirection, viewDirection);\n\n    // Initialize \"up\" as the world z-axis.\n    const up = vec3.fromValues(0, 1, 0);\n\n    // Transform \"up\" to align with the camera target's local z-axis.\n    vec3.transformQuat(up, up, this._cameraTarget.orientation);\n\n    const right = vec3.create();\n    vec3.cross(right, viewDirection, up);\n\n    // Transform \"up\" to align with the camera's local z-axis.\n    vec3.cross(up, right, viewDirection);\n\n    this._setPositionAndLookAt(this._position, target, up, viewDirection);\n  }\n}\n\nexport {FollowCamera};\n","import {ThirdPersonCamera} from './third-person-camera';\n\n/**\n * This class defines an overhead camera.\n *\n * An overhead camera sits above the observed character and moves relative to the character without\n * rotating.\n *\n * An overhead camera's rotation with the character includes only yaw; it has a fixed pitch and\n * roll.\n */\nclass OverheadCamera extends ThirdPersonCamera {\n  /**\n   * If oldCamera is given, then the state of the new camera will be initialized to match that of\n   * the old camera. This enables a smooth transition when changing cameras.\n   *\n   * @param {CameraTarget} cameraTarget\n   * @param {FollowCameraConfig} followCameraParams\n   * @param {CameraConfig} cameraParams\n   * @param {Camera} [oldCamera]\n   */\n  constructor(cameraTarget, followCameraParams, cameraParams, oldCamera) {\n    super(cameraTarget, followCameraParams, cameraParams, oldCamera);\n\n    this.reset();\n  }\n\n  reset() {\n    super.reset();\n  }\n\n  // TODO: Implement this!\n}\n\nexport {OverheadCamera};\n","import {Camera} from './camera';\n\n/**\n * This class defines an abstract third-person camera.\n *\n * A third-person camera follows a target from a distance.\n *\n * @abstract\n */\nclass ThirdPersonCamera extends Camera {\n  /**\n   * If oldCamera is given, then the state of the new camera will be initialized to match that of\n   * the old camera. This enables a smooth transition when changing cameras.\n   *\n   * @param {CameraTarget} cameraTarget\n   * @param {FollowCameraConfig} followCameraParams\n   * @param {CameraConfig} cameraParams\n   * @param {Camera} [oldCamera]\n   */\n  constructor(cameraTarget, followCameraParams, cameraParams, oldCamera) {\n    super(cameraParams, oldCamera);\n\n    // ThirdPersonCamera is an abstract class. It should not be instantiated directly.\n    if (new.target === ThirdPersonCamera) {\n      throw new TypeError('Cannot construct ThirdPersonCamera instances directly');\n    }\n\n    this._followCameraParams = followCameraParams;\n    this._cameraTarget = cameraTarget;\n  }\n\n  /**\n   * The intended position for this camera to be in according to the position and orientation of the\n   * camera target.\n   *\n   * @returns {vec3}\n   * @protected\n   * @abstract\n   */\n  _getIntendedPosition() {\n    const intendedPosition = vec3.create();\n    vec3.transformMat4(\n        intendedPosition,\n        this._followCameraParams._intendedTranslationFromTarget,\n        this._cameraTarget.worldTransform);\n    return intendedPosition;\n  }\n\n  /** @param {CameraTarget} cameraTarget */\n  set cameraTarget(cameraTarget) {\n    this._cameraTarget = cameraTarget;\n  }\n}\n\nexport {ThirdPersonCamera};\n\n/**\n * @typedef {Object} CameraTarget\n * @property {vec3} position In world coordinates.\n * @property {quat} orientation Relative to the world axes.\n * @property {mat4} worldTransform The model transform matrix, in world coordinates.\n */\n","/**\n * This module re-exports all of the exports in the grafx framework. This makes the entire framework\n * conveniently accessible via this single module.\n */\n\nexport * from './cameras';\nexport * from './models';\nexport * from './program-wrapper';\nexport * from './renderable-shapes';\nexport * from './util';\n\nexport * from './src/grafx-controller';\nexport * from './src/light';\nexport * from './src/scene';\n","export * from './src/default-model';\nexport * from './src/invisible-model-controller';\nexport * from './src/model';\nexport * from './src/model-controller';\nexport * from './src/model-group-controller';\nexport * from './src/standard-model-controller';\n","import {createBufferFromData} from '../../util';\nimport {Model} from './model';\n\n/**\n * This class defines a default implementation of the rigid model.\n *\n * This implementation accepts a RenderableShape and applies standard OpenGL binding logic on top\n * of it.\n */\nclass DefaultModel extends Model {\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {RenderableShape} shapeConfig\n   */\n  constructor(gl, shapeConfig) {\n    super(gl);\n    this._shapeConfig = shapeConfig;\n    this._initializeBuffers();\n    this._initializeConfigs();\n  }\n\n  _initializeBuffers() {\n    // Create, bind, and move data into buffers for the vertex positions, normals, texture\n    // coordinates, and element array.\n    this._vertexPositionsBuffer = createBufferFromData(this._gl, this._shapeConfig.vertexPositions);\n    this._vertexNormalsBuffer = createBufferFromData(this._gl, this._shapeConfig.vertexNormals);\n    this._textureCoordinatesBuffer =\n        createBufferFromData(this._gl, this._shapeConfig.textureCoordinates);\n    if (this._shapeConfig.vertexIndices) {\n      this._vertexIndicesBuffer = createBufferFromData(this._gl, this._shapeConfig.vertexIndices,\n          this._gl.ELEMENT_ARRAY_BUFFER);\n    }\n  }\n\n  _initializeConfigs() {\n    this._vertexPositionsConfig = {\n      buffer: this._vertexPositionsBuffer,\n      size: 3,\n      type: this._gl.FLOAT,\n      normalized: false,\n      stride: 0,\n      offset: 0\n    };\n    this._textureCoordinatesConfig = {\n      buffer: this._textureCoordinatesBuffer,\n      size: 2,\n      type: this._gl.FLOAT,\n      normalized: false,\n      stride: 0,\n      offset: 0\n    };\n    this._vertexNormalsConfig = {\n      buffer: this._vertexNormalsBuffer,\n      size: 3,\n      type: this._gl.FLOAT,\n      normalized: false,\n      stride: 0,\n      offset: 0\n    };\n  }\n\n  /** @returns {number} */\n  get elementCount() {\n    return this._shapeConfig.elementCount;\n  }\n\n  /** @returns {number} */\n  get mode() {\n    return this._gl.TRIANGLES;\n    //return this._gl.LINE_STRIP;// TODO: REMOVE ME\n  }\n}\n\nexport {DefaultModel};\n","import {ModelController} from './model-controller';\n\n/**\n * This class defines an extension of the model-controller class that will maintain state but will\n * never render anything.\n */\nclass InvisibleModelController extends ModelController {\n  /**\n   * @param {ModelControllerConfig} params\n   */\n  constructor(params) {\n    super(params);\n  }\n\n  destroy() {}\n\n  update(currentTime, deltaTime) {}\n\n  draw() {}\n\n  /**\n   * Initializes the program variables configuration.\n   *\n   * @protected\n   */\n  _setUpProgramVariablesConfig() {\n    this._programVariablesConfig = {};\n  }\n\n  /**\n   * Overrides the default method to instead do nothing.\n   *\n   * @param {string} id\n   * @returns {Promise}\n   */\n  _setUpProgramWrapper(id) {\n    this._programWrapperId = id;\n    this._programWrapperPromise = Promise.resolve(null);\n    return this._programWrapperPromise;\n  }\n}\n\nexport {InvisibleModelController};\n","import {PersistentAnimationJob} from 'lsl-animatex';\nimport {\n  programWrapperStore,\n  textureStore,\n} from '../../program-wrapper';\n\n/**\n * This class defines a model-controller class.\n *\n * This should be extended by all components that handle models--i.e., anything that will be\n * rendering shapes.\n *\n * @implements {ModelControllerInterface}\n * @abstract\n */\nclass ModelController extends PersistentAnimationJob {\n  /**\n   * PRECONDITION: The ProgramWrapper referenced by the given params must have already been\n   * registered.\n   *\n   * @param {ModelControllerConfig} params\n   */\n  constructor(params) {\n    super();\n\n    // ModelController is an abstract class. It should not be instantiated directly.\n    if (new.target === ModelController) {\n      throw new TypeError('Cannot construct ModelController instances directly');\n    }\n\n    this._gl = params.gl;\n    this._getViewMatrix = params.getViewMatrix;\n    this._getProjectionMatrix = params.getProjectionMatrix;\n    this._getParentWorldTransform = params.getParentWorldTransform;\n    this._localTransform = mat4.create();\n    this._worldTransform = mat4.create();\n    this._texture = null;\n    this._programWrapper = null;\n    this._programWrapperId = null;\n    this._drawFrameHandler = () => this.draw();\n    this._programVariablesConfig = null;\n\n    this.position = vec3.create();\n    this.scale = vec3.fromValues(1, 1, 1);\n\n    this._setUpTexture(params.texturePath);\n    this._setUpProgramWrapper(params.programWrapperId);\n\n    this._isReadyPromise = Promise.all([\n      this._texturePromise,\n      this._programWrapperPromise,\n    ]);\n  }\n\n  reset() {}\n\n  /**\n   * Called when this is done being used, and is being destroyed from memory.\n   */\n  destroy() {\n    programWrapperStore.unregisterDrawFrameHandler(this._programWrapperId, this._drawFrameHandler);\n  }\n\n  /**\n   * Calls update, updateTransforms, and updateChildren.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  updateSelfAndChildren(currentTime, deltaTime) {\n    this.update(currentTime, deltaTime);\n    this.updateTransforms();\n    this.updateChildren(currentTime, deltaTime);\n  }\n\n  /**\n   * Updates relevant state for the sub-class.\n   *\n   * - This does not recursively update descendant model controllers; that's handled by\n   *   updateChildren.\n   * - This does not update the local or world-coordinate transforms; that's handled by\n   *   updateTransforms.\n   * - This is called before updateLocalTransform and updateChildren.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  update(currentTime, deltaTime) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * Updates the world-coordinate and local-coordinate model matrices.\n   *\n   * This is called after update and before updateChildren.\n   *\n   * NOTE: All overrides of this method should update [this._localTransform].\n   */\n  updateTransforms() {\n    mat4.multiply(this._worldTransform, this._getParentWorldTransform(), this._localTransform);\n  }\n\n  /**\n   * Updates relevant state for any children model controllers.\n   *\n   * This is called after update and updateLocalTransform.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  updateChildren(currentTime, deltaTime) {}\n\n  /**\n   * @abstract\n   */\n  draw() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * Gets the model transform matrix, in local coordinates.\n   *\n   * @returns {mat4}\n   */\n  get localTransform() {\n    return this._localTransform;\n  }\n\n  /**\n   * Gets the model transform matrix, in world coordinates.\n   *\n   * @returns {mat4}\n   */\n  get worldTransform() {\n    return this._worldTransform;\n  }\n\n  /**\n   * Returns a promise that resolves when this model controller is ready for the app to run.\n   *\n   * @returns {Promise}\n   */\n  getIsReady() {\n    return this._isReadyPromise;\n  }\n\n  /** @param {string} id */\n  set programWrapperId(id) {\n    programWrapperStore.unregisterDrawFrameHandler(this._programWrapperId, this._drawFrameHandler);\n    this._setUpProgramWrapper(id);\n  }\n\n  /** @param {string} value */\n  set texturePath(value) {\n    this._setUpTexture(value);\n  }\n\n  /**\n   * Initializes the program variables configuration.\n   *\n   * @protected\n   * @abstract\n   */\n  _setUpProgramVariablesConfig() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * @param {string} [texturePath]\n   * @returns {Promise}\n   * @private\n   */\n  _setUpTexture(texturePath) {\n    this._texturePromise = texturePath\n        ? textureStore.loadTexture(this._gl, texturePath)\n        : Promise.resolve(null);\n\n    // Assign the actual texture.\n    this._texturePromise = this._texturePromise\n        .then(texture => this._texture = texture)\n        .then(() => this._setUpProgramVariablesConfig());\n\n    return this._texturePromise;\n  }\n\n  /**\n   * @param {string} id\n   * @returns {Promise}\n   * @private\n   */\n  _setUpProgramWrapper(id) {\n    this._programWrapperId = id;\n    this._programWrapperPromise = programWrapperStore.getProgramWrapperPromise(id)\n        .then(programWrapper => this._programWrapper = programWrapper);\n    Promise.all([this._programWrapperPromise, this._texturePromise])\n        .then(() => programWrapperStore.registerDrawFrameHandler(id, this._drawFrameHandler));\n    return this._programWrapperPromise;\n  }\n}\n\nexport {ModelController};\n\n/**\n * @typedef {Object} ModelControllerInterface\n * @property {Function.<Promise>} getIsReady\n * @property {Function} reset\n * @property {Function} destroy\n * @property {mat4} localTransform\n * @property {mat4} worldTransform\n * @property {vec3} position\n */\n\n/**\n * @typedef {Object} ModelControllerConfig\n * @property {WebGLRenderingContext} gl\n * @property {Function.<mat4>} getViewMatrix\n * @property {Function.<mat4>} getProjectionMatrix\n * @property {Function.<mat4>} getParentWorldTransform\n * @property {string} programWrapperId\n * @property {string} [texturePath]\n */\n\n/**\n * @typedef {Object} ModelGroupControllerConfig\n * @property {WebGLRenderingContext} gl\n * @property {Function.<mat4>} getViewMatrix\n * @property {Function.<mat4>} getProjectionMatrix\n * @property {Function.<mat4>} getParentWorldTransform\n */\n","import { PersistentAnimationJob } from 'lsl-animatex';\n\n/**\n * This class controls groups of models.\n *\n * This is useful for higher-level controllers that control other models and also transform them.\n *\n * @implements {ModelControllerInterface}\n * @abstract\n */\nclass ModelGroupController extends PersistentAnimationJob {\n  /**\n   * If either of the shader paths are omitted, then this model controller will not create a\n   * rendering program configuration.\n   *\n   * @param {ModelGroupControllerConfig} params\n   */\n  constructor(params) {\n    super();\n\n    // ModelGroupController is an abstract class. It should not be instantiated directly.\n    if (new.target === ModelGroupController) {\n      throw new TypeError('Cannot construct ModelGroupController instances directly');\n    }\n\n    this._gl = params.gl;\n    this._getViewMatrix = params.getViewMatrix;\n    this._getProjectionMatrix = params.getProjectionMatrix;\n    this._getParentWorldTransform = params.getParentWorldTransform || (() => mat4.create());\n    this._localTransform = mat4.create();\n    this._worldTransform = mat4.create();\n    this._modelCtrls = [];\n  }\n\n  destroy() {\n    this.clearModelControllers();\n  }\n\n  reset() {\n    this._triggerOnAllModelControllers('reset');\n  }\n\n  clearModelControllers() {\n    this._triggerOnAllModelControllers('destroy');\n    this._modelCtrls = [];\n  }\n\n  /**\n   * Calls update, updateTransforms, and updateChildren.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  updateSelfAndChildren(currentTime, deltaTime) {\n    this.update(currentTime, deltaTime);\n    this.updateTransforms();\n    this.updateChildren(currentTime, deltaTime);\n  }\n\n  /**\n   * Updates relevant state for the sub-class.\n   *\n   * - This does not recursively update descendant model controllers; that's handled by\n   *   updateChildren.\n   * - This does not update the local or world-coordinate transforms; that's handled by\n   *   updateTransforms.\n   * - This is called before updateLocalTransform and updateChildren.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  update(currentTime, deltaTime) {}\n\n  /**\n   * Updates the world-coordinate and local-coordinate model matrices.\n   *\n   * This is called after update and before updateChildren.\n   *\n   * NOTE: All implementations of this method should update [this._localTransform].\n   */\n  updateTransforms() {\n    mat4.multiply(this._worldTransform, this._getParentWorldTransform(), this._localTransform);\n  }\n\n  /**\n   * Updates relevant state for any children model controllers.\n   *\n   * This is called after update and updateLocalTransform.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  updateChildren(currentTime, deltaTime) {\n    this._triggerOnAllModelControllers('updateSelfAndChildren', [currentTime, deltaTime]);\n  }\n\n  draw() {\n    // We don't call draw on the children model controllers, because they register themselves to be\n    // drawn with their given shader program.\n  }\n\n  /**\n   * @param {ModelControllerInterface} modelCtrl\n   * @returns {Promise.<ModelControllerInterface>}\n   * @protected\n   */\n  _startModelController(modelCtrl) {\n    return modelCtrl.getIsReady().then(() => {\n      modelCtrl.reset();\n      this._modelCtrls.push(modelCtrl);\n      return modelCtrl;\n    });\n  }\n\n  /**\n   * @param {ModelControllerInterface} modelCtrl\n   * @protected\n   */\n  _onModelControllerDestroyed(modelCtrl) {\n    const index = this._modelCtrls.indexOf(modelCtrl);\n    this._modelCtrls.splice(index, 1);\n    modelCtrl.destroy();\n  }\n\n  /**\n   * @param {vec3} targetPosition\n   * @param {number} maxSquaredDistance\n   * @protected\n   */\n  _removeDistantModelControllers(targetPosition, maxSquaredDistance) {\n    this._modelCtrls\n      // Get the ModelControllers that are too far away.\n      .filter(modelCtrl =>\n        vec3.squaredDistance(modelCtrl.position, targetPosition) > maxSquaredDistance)\n      // Remove the far-away ModelControllers.\n      .forEach(modelCtrl => this._onModelControllerDestroyed(modelCtrl));\n  }\n\n  /**\n   * Gets the model transform matrix, in local coordinates.\n   *\n   * @returns {mat4}\n   */\n  get localTransform() {\n    return this._localTransform;\n  }\n\n  /**\n   * Gets the model transform matrix, in world coordinates.\n   *\n   * @returns {mat4}\n   */\n  get worldTransform() {\n    return this._worldTransform;\n  }\n\n  /**\n   * Returns a promise that resolves when this model controller is ready for the app to run.\n   *\n   * @returns {Promise}\n   */\n  getIsReady() {\n    return Promise.all(this._modelCtrls.map(controller => controller.getIsReady()));\n  }\n\n  /**\n   * @param {string} methodName\n   * @param {Array.<*>} [args]\n   * @protected\n   */\n  _triggerOnAllModelControllers(methodName, args = []) {\n    //this._demoObject[methodName](...args);\n    this._modelCtrls.forEach(object => object[methodName](...args));\n  }\n}\n\nexport { ModelGroupController };\n","/**\n * This class defines a top-level model.\n *\n * @abstract\n */\nclass Model {\n  /**\n   * @param {WebGLRenderingContext} gl\n   */\n  constructor(gl) {\n    // Model is an abstract class. It should not be instantiated directly.\n    if (new.target === Model) {\n      throw new TypeError('Cannot construct Model instances directly');\n    }\n\n    this._gl = gl;\n    this.bounds = null;\n\n    this._vertexPositionsBuffer = null;\n    this._vertexNormalsBuffer = null;\n    this._textureCoordinatesBuffer = null;\n\n    this._vertexPositionsConfig = null;\n    this._textureCoordinatesConfig = null;\n    this._vertexNormalsConfig = null;\n\n    // If this is kept null, then gl.drawArrays will be used (with gl.ARRAY_BUFFER) instead of\n    // gl.drawElements (with gl.ELEMENT_ARRAY_BUFFER).\n    this._vertexIndicesBuffer = null;\n  }\n\n  /**\n   * Updates the normals on this shape to either be spherical (point outwards from the center) or\n   * orthogonal to the faces of their triangles.\n   *\n   * @param {boolean} isUsingSphericalNormals\n   * @protected\n   * @abstract\n   */\n  _setNormals(isUsingSphericalNormals) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /** @returns {?AttributeConfig} */\n  get vertexPositionsConfig() {\n    return this._vertexPositionsConfig;\n  }\n\n  /** @returns {?AttributeConfig} */\n  get textureCoordinatesConfig() {\n    return this._textureCoordinatesConfig;\n  }\n\n  /** @returns {?AttributeConfig} */\n  get vertexNormalsConfig() {\n    return this._vertexNormalsConfig;\n  }\n\n  /** @returns {?WebGLBuffer} */\n  get vertexIndicesBuffer() {\n    return this._vertexIndicesBuffer;\n  }\n\n  /**\n   * @returns {number}\n   * @abstract\n   */\n  get elementCount() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * @returns {number}\n   * @abstract\n   */\n  get mode() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n}\n\nexport {Model};\n","import {renderableShapeFactory} from '../../renderable-shapes';\n\nimport {ModelController} from './model-controller';\n\n/**\n * This class defines an extension of the model-controller class that uses a common set of program\n * variables and transformation matrices.\n */\nclass StandardModelController extends ModelController {\n  /**\n   * @param {ModelControllerConfig} params\n   * @param {RenderableShapeConfig} shapeParams\n   */\n  constructor(params, shapeParams) {\n    super(params);\n\n    this.scale = shapeParams.scale || vec3.fromValues(1, 1, 1);\n    this._mvMatrix = mat4.create();\n    this._normalMatrix = mat4.create();\n    this._model = renderableShapeFactory.createModel(this._gl, shapeParams);\n  }\n\n  update(currentTime, deltaTime) {}\n\n  draw() {\n    // Update the model-view matrix.\n    mat4.multiply(this._mvMatrix, this._getViewMatrix(), this._worldTransform);\n\n    // Update the normal matrix.\n    mat4.invert(this._normalMatrix, this._mvMatrix);\n    mat4.transpose(this._normalMatrix, this._normalMatrix);\n\n    // Update the uniform variables.\n    this._programVariablesConfig.uniforms['uPMatrix'] = this._getProjectionMatrix();\n    this._programVariablesConfig.uniforms['uMVMatrix'] = this._mvMatrix;\n    this._programVariablesConfig.uniforms['uNormalMatrix'] = this._normalMatrix;\n\n    // Draw shapes using the current variables configuration.\n    this._programWrapper.draw(this._gl, this._programVariablesConfig, 0, this._model.elementCount);\n  }\n\n  /**\n   * Initializes the program variables configuration.\n   *\n   * @protected\n   */\n  _setUpProgramVariablesConfig() {\n    this._programVariablesConfig = {\n      attributes: {\n        aVertexPosition: this._model.vertexPositionsConfig,\n        aTextureCoord: this._model.textureCoordinatesConfig,\n        aVertexNormal: this._model.vertexNormalsConfig,\n      },\n      uniforms: {\n        uPMatrix: this._getProjectionMatrix(),\n        uMVMatrix: this._mvMatrix,\n        uNormalMatrix: this._normalMatrix,\n        uSampler: this._texture,\n      },\n      mode: this._model.mode,\n      vertexIndices: this._model.vertexIndicesBuffer,\n      elementCount: this._model.elementCount,\n    };\n  }\n}\n\nexport {StandardModelController};\n","export * from './src/program-wrapper';\nexport * from './src/program-wrapper-store';\nexport * from './src/texture-store';\nexport * from './src/uniform-setter';\n","import {bindFramebuffer} from '../../util';\n\nimport {programWrapperStore} from './program-wrapper-store';\n\n/**\n * This class wraps a collection of ProgramWrappers and supports drawing them as a group.\n */\nclass GroupProgramWrapper {\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramWrapperConfig} config\n   */\n  constructor(gl, config) {\n    this.config = config;\n    this._childrenProgramWrappers = [];\n    this._isReady = null;\n\n    this._loadChildren(gl, config).then(() => {\n      if (config.initialize) config.initialize(gl);\n      if (config.isAPostProcessor) {\n        _createChildrenFramebuffersAndTextures(gl, config);\n      }\n    });\n  }\n\n  /** @returns {string} */\n  get programId() {\n    return this.config.id;\n  }\n\n  /** @returns {Promise} */\n  getIsReady() {\n    return this._isReady;\n  }\n\n  /**\n   * Renders shapes using this program.\n   *\n   * @param {WebGLRenderingContext} gl\n   */\n  draw(gl) {\n    if (this.config.webGLStateSetter) this.config.webGLStateSetter(gl);\n    this.config.childrenFramebufferIds.forEach(_clearFramebuffer.bind(this, gl));\n    this.config.childrenProgramsToDraw.forEach(_drawChildProgramWrapper.bind(this, gl));\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramWrapperConfig} config\n   * @private\n   */\n  _loadChildren(gl, config) {\n    this._isReady = Promise.all(\n        config.childrenProgramConfigs.map(config =>\n            programWrapperStore.loadProgramWrapper(gl, config)\n                .then(programWrapper => this._childrenProgramWrappers.push(programWrapper))));\n    return this._isReady;\n  }\n}\n\n/**\n * @param {WebGLRenderingContext} gl\n * @param {string} id\n * @private\n */\nfunction _clearFramebuffer(gl, id) {\n  const framebuffer = programWrapperStore.getFramebuffer(id);\n  bindFramebuffer(gl, framebuffer);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n}\n\n/**\n * @param {WebGLRenderingContext} gl\n * @param {ProgramWrapperConfig} config\n * @private\n */\nfunction _createChildrenFramebuffersAndTextures(gl, config) {\n  config.childrenFramebufferIds.forEach(id =>\n      programWrapperStore.createNewFramebufferAndTexture(gl, id, false));\n}\n\n/**\n * @param {WebGLRenderingContext} gl\n * @param {ChildProgramAndFramebufferIds} childProgramAndFramebufferIds\n * @private\n */\nfunction _drawChildProgramWrapper(gl, childProgramAndFramebufferIds) {\n  const {programId, inputFramebufferIds, outputFramebufferId} = childProgramAndFramebufferIds;\n\n  const framebuffer = outputFramebufferId ?\n      programWrapperStore.getFramebuffer(outputFramebufferId) : null;\n  const programWrapper = programWrapperStore.getProgramWrapper(programId);\n  const programVariablesConfig =\n      programWrapper.config.getProgramVariablesConfig(gl, inputFramebufferIds);\n\n  bindFramebuffer(gl, framebuffer);\n  programWrapper.setProgram(gl);\n  programWrapper.draw(gl, programVariablesConfig);\n}\n\nexport {GroupProgramWrapper};\n","import {createFramebuffer, createRenderBuffer, createTextureForRendering} from '../../util';\n\nimport {GroupProgramWrapper} from './group-program-wrapper';\nimport {ProgramWrapper} from './program-wrapper';\n\n/**\n * This class loads, compiles, and stores WebGL rendering programs.\n *\n * Also, this stores draw-frame handlers for a given program. This makes it easy for a top-level\n * controller to group together draw calls for a given program and therefore minimize program\n * switches.\n *\n * Also, this distinguishes between rendering programs that are used for rendering individual models\n * and post-processing programs that are used for manipulating the entire frame after all the models\n * have rendered.\n *\n * This also allows for grouping programs, which consist of multiple child programs that are all\n * rendered in sequence for a related purpose.\n */\nclass ProgramWrapperStore {\n  constructor() {\n    this._modelProgramCache = {};\n    this._sortedModelPrograms = [];\n    this._postProcessingProgramCache = {};\n    this._sortedPostProcessingPrograms = [];\n    this._frambuffers = {};\n    this._textures = {};\n    this._renderBuffers = {};\n  }\n\n  /**\n   * Loads and caches a program wrapper using the given configuration.\n   *\n   * This method is idempotent; a given program will only be cached once.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramWrapperConfig} params\n   * @returns {Promise.<ProgramWrapper|GroupProgramWrapper, Error>}\n   * @private\n   */\n  loadProgramWrapper(gl, params) {\n    let cache;\n    let sortedList;\n    if (params.isAPostProcessor) {\n      cache = this._postProcessingProgramCache;\n      sortedList = this._sortedPostProcessingPrograms;\n    } else {\n      cache = this._modelProgramCache;\n      sortedList = this._sortedModelPrograms;\n    }\n    let cacheInfo = cache[params.id];\n\n    // Cache the program if it has not been previously registered.\n    if (!cacheInfo) {\n      cacheInfo = {};\n\n      cacheInfo.params = params;\n      cacheInfo.renderPriority = params.renderPriority;\n\n      let programWrapper = params.childrenProgramConfigs ?\n          new GroupProgramWrapper(gl, params) : new ProgramWrapper(gl, params);\n\n      cacheInfo.programWrapper = programWrapper;\n      cacheInfo.promise = programWrapper.getIsReady().then(() => cacheInfo.programWrapper);\n\n      if (params.isAPostProcessor) {\n        // As soon as we know we'll use a post-processing program, make sure we create the default\n        // framebuffer/texture for rendering models into.\n        if (!this.modelsFramebuffer) {\n          this.createNewFramebufferAndTexture(gl, MODELS_FRAMEBUFFER_ID, true);\n        }\n      } else {\n        // Post-processing programs are not used for rendering individual models.\n        cacheInfo.drawFrameHandlers = new Set();\n      }\n\n      // Store the program cache info in both a map and a list that is sorted by render priority.\n      cache[params.id] = cacheInfo;\n      sortedList.push(cacheInfo);\n      sortedList.sort(_compareProgramCacheInfo);\n    }\n\n    return cacheInfo.promise;\n  }\n\n  /**\n   * Registers the given draw-frame event handler for the given program.\n   *\n   * This method is idempotent; draw-frame handlers are stored in a set, so duplicate additions will\n   * overwrite previous additions.\n   *\n   * @param {string} id\n   * @param {Function} drawFrameHandler\n   */\n  registerDrawFrameHandler(id, drawFrameHandler) {\n    const programCacheInfo = this._modelProgramCache[id];\n\n    if (!programCacheInfo) {\n      if (this._postProcessingProgramCache[id]) {\n        // The program is not set up for rendering individual models.\n        throw new Error(`Cannot register a draw-frame handler for a program that is not set up for \n                         rendering individual models registered: ${id}`);\n      } else {\n        // The program has not been registered.\n        throw new Error(`Cannot register a draw-frame handler for a program that has not yet been \n                         registered: ${id}`);\n      }\n    }\n\n    // Store the draw-frame handler.\n    programCacheInfo.drawFrameHandlers.add(drawFrameHandler);\n  }\n\n  /**\n   * WARNING: This will remove the program from the store even if there are still other components\n   * depending on this program or its draw-frame handlers.\n   *\n   * @param {string} id\n   */\n  deleteProgramWrapper(id) {\n    // Determine which collections we're removing the program from.\n    let sortedPrograms;\n    let programCache;\n    if (this._modelProgramCache[id]) {\n      sortedPrograms = this._sortedModelPrograms;\n      programCache = this._modelProgramCache;\n    } else {\n      sortedPrograms = this._sortedPostProcessingPrograms;\n      programCache = this._postProcessingProgramCache;\n    }\n    const programCacheInfo = programCache[id];\n\n    // Remove the program.\n    sortedPrograms.splice(sortedPrograms.indexOf(programCacheInfo), 1);\n    delete programCache[id];\n  }\n\n  // TODO: Don't forget to unregister draw-frame handlers when destroying models (asteroids, UFOs,\n  // etc.)\n  /**\n   * @param {string} id\n   * @param {Function} drawFrameHandler\n   */\n  unregisterDrawFrameHandler(id, drawFrameHandler) {\n    this._modelProgramCache[id].drawFrameHandlers.delete(drawFrameHandler);\n  }\n\n  /**\n   * @param {string} id\n   * @returns {Promise}\n   * @throws If there is no program registered with the given ID.\n   */\n  getProgramWrapperPromise(id) {\n    const cacheInfo = this._modelProgramCache[id] || this._postProcessingProgramCache[id];\n    return cacheInfo.promise;\n  }\n\n  /**\n   * @param {string} id\n   * @returns {ProgramWrapper}\n   * @throws If there is no program registered with the given ID.\n   */\n  getProgramWrapper(id) {\n    const cacheInfo = this._modelProgramCache[id] || this._postProcessingProgramCache[id];\n    return cacheInfo.programWrapper;\n  }\n\n  /**\n   * Calls the given callback once for each registered per-model program wrapper.\n   *\n   * The callback is passed two arguments: the program wrapper and the registered draw-frame\n   * handlers.\n   *\n   * @param {Function} callback\n   */\n  forEachModelProgram(callback) {\n    this._sortedModelPrograms.forEach(programCacheInfo =>\n        callback(programCacheInfo.programWrapper, programCacheInfo.drawFrameHandlers));\n  }\n\n  /**\n   * Calls the given callback once for each registered post-processing program wrapper.\n   *\n   * @param {Function} callback\n   */\n  forEachPostProcessingProgram(callback) {\n    this._sortedPostProcessingPrograms.forEach(\n        programCacheInfo => callback(programCacheInfo.programWrapper));\n  }\n\n  /** @returns {boolean} */\n  get isUsingPostProcessingPrograms() {\n    return this._sortedPostProcessingPrograms.length > 0;\n  }\n\n  /**\n   * Creates and stores a framebuffer with a texture.\n   *\n   * Both the framebuffer and texture can be accessed later using the given ID.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @param {string} id\n   * @param {boolean} [shouldStoreDepthInfo=false]\n   */\n  createNewFramebufferAndTexture(gl, id, shouldStoreDepthInfo=false) {\n    let renderBuffer;\n    if (shouldStoreDepthInfo) {\n      renderBuffer = createRenderBuffer(gl);\n      this._renderBuffers[id] = renderBuffer;\n    }\n\n    const texture = createTextureForRendering(gl);\n    this._textures[id] = texture;\n\n    const framebuffer = createFramebuffer(gl, texture, renderBuffer);\n    this._frambuffers[id] = framebuffer;\n  }\n\n  /**\n   * @param {string} id\n   * @returns {?WebGLFramebuffer}\n   */\n  getFramebuffer(id) {\n    return this._frambuffers[id];\n  }\n\n  /**\n   * @param {string} id\n   * @returns {?WebGLTexture}\n   */\n  getTexture(id) {\n    return this._textures[id];\n  }\n\n  /**\n   * If we are using a post-processing program, then this is the default framebuffer for rendering\n   * models into.\n   *\n   * @returns {?WebGLFramebuffer}\n   */\n  get modelsFramebuffer() {\n    return this._frambuffers[MODELS_FRAMEBUFFER_ID];\n  }\n\n  /**\n   * If we are using a post-processing program, then this is the default texture for rendering\n   * models into.\n   *\n   * @returns {?WebGLTexture}\n   */\n  get modelsTexture() {\n    return this._textures[MODELS_FRAMEBUFFER_ID];\n  }\n\n  /**\n   * If we are using a post-processing program, then this is the default depth render buffer for\n   * rendering models.\n   *\n   * @returns {?WebGLRenderBuffer}\n   */\n  get modelsRenderBuffer() {\n    return this._renderBuffers[MODELS_FRAMEBUFFER_ID];\n  }\n}\n\nfunction _compareProgramCacheInfo(a, b) {\n  return a.renderPriority - b.renderPriority;\n}\n\nexport const MODELS_FRAMEBUFFER_ID = 'models';\n\nexport const programWrapperStore = new ProgramWrapperStore();\n\n/**\n * @typedef {Object} ProgramCacheInfo\n * @property {ProgramWrapperConfig} params\n * @property {ProgramWrapper|GroupProgramWrapper} [programWrapper]\n * @property {Set.<Function>} [drawFrameHandlers]\n * @property {Array.<ProgramWrapper>} [childrenProgramWrappers]\n */\n","import {\n  isInDevMode,\n  getViewportHeight,\n  getViewportWidth,\n  loadProgram,\n} from '../../util';\n\nimport {UniformSetter} from './uniform-setter';\n\n/**\n * This class wraps a native WebGLProgram object and provides convenience methods for:\n * - setting the wrapped program for use on the WebGL rendering context,\n * - enabling the attribute variables for the program,\n * - setting the attribute and uniform variables for the program,\n * - drawing shapes with the program and its current configuration.\n */\nclass ProgramWrapper {\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramWrapperConfig} config\n   */\n  constructor(gl, config) {\n    this.config = config;\n    this._program = null;\n    this._uniformSetters = null;\n    this._attributeEnablers = null;\n    this._attributeSetters = null;\n\n    // This is used for assigning different textures to different texture units.\n    this.baseTextureUnitIndex = 0;\n\n    this._buildWebGLProgramPromise = this._buildWebGLProgram(gl, config);\n\n    // TODO: Freeze this object after initializing\n  }\n\n  /** @returns {string} */\n  get programId() {\n    return this.config.id;\n  }\n\n  /** @returns {Promise} */\n  getIsReady() {\n    return this._buildWebGLProgramPromise;\n  }\n\n  /**\n   * Sets this program to use for rendering on the given WebGL context.\n   *\n   * This also enables all relevant attribute variables for this program.\n   *\n   * @param {WebGLRenderingContext} gl\n   */\n  setProgram(gl) {\n    gl.useProgram(this._program);\n    this._enableAttributes();\n    if (this.config.webGLStateSetter) this.config.webGLStateSetter(gl);\n  }\n\n  /**\n   * Renders shapes using this program with the given variables configuration.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramVariablesConfig} [programVariablesConfig]\n   * @param {number} [offset=0] Offset into the element array buffer to render from.\n   * @param {number} [count=programVariablesConfig.elementCount] The number of elements to render.\n   */\n  draw(gl, programVariablesConfig, offset, count) {\n    programVariablesConfig = programVariablesConfig || this.config.getProgramVariablesConfig(gl);\n    this._setVariables(gl, programVariablesConfig);\n    this._draw(gl, programVariablesConfig, offset, count);\n  }\n\n  /**\n   * Sets up this WebGL rendering program to draw shapes with the given program variables\n   * configuration and the attribute/uniform setters that have been set up for this program.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramVariablesConfig} programVariablesConfig\n   * @private\n   */\n  _setVariables(gl, programVariablesConfig) {\n    this._setAttributes(programVariablesConfig.attributes);\n    this._setUniforms(programVariablesConfig.uniforms);\n\n    // Check whether we are set up to draw using gl.drawElements rather than gl.drawArrays.\n    if (programVariablesConfig.vertexIndices) {\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, programVariablesConfig.vertexIndices);\n    }\n  }\n\n  /**\n   * Renders shapes according to this program's current configuration.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramVariablesConfig} programVariablesConfig\n   * @param {number} [offset=0] Offset into the element array buffer to render from.\n   * @param {number} [count=programVariablesConfig.elementCount] The number of elements to render.\n   * @private\n   */\n  _draw(gl, programVariablesConfig, offset, count) {\n    offset = typeof offset === 'number' ? offset : 0;\n    count = typeof count === 'number' ? count : programVariablesConfig.elementCount;\n\n    if (isInDevMode) {\n      this._checkThatGivenVariablesMatchProgram(programVariablesConfig);\n    }\n\n    // Check whether we are set up to draw using gl.drawElements or gl.drawArrays.\n    if (programVariablesConfig.vertexIndices) {\n      gl.drawElements(programVariablesConfig.mode, count, gl.UNSIGNED_SHORT, offset);\n    } else {\n      gl.drawArrays(programVariablesConfig.mode, offset, count);\n    }\n  }\n\n  /**\n   * Checks whether the attribute and uniform variables specified in the given config match those\n   * defined in this program.\n   *\n   * @param {ProgramVariablesConfig} programVariablesConfig\n   * @private\n   */\n  _checkThatGivenVariablesMatchProgram(programVariablesConfig) {\n    if (Object.keys(programVariablesConfig.attributes).length !==\n            Object.keys(this._attributeSetters).length ||\n        Object.keys(programVariablesConfig.uniforms).length !==\n            Object.keys(this._uniformSetters).length) {\n      console.warn('The attribute/uniform variables in the ProgramVariablesConfig do not match ' +\n          'those specified in the shaders.', programVariablesConfig, this);\n    }\n  }\n\n  /**\n   * Sets the uniform values for this program.\n   *\n   * Specifically, this calls `gl.uniform<...>(location, value)` for each\n   * variable-name/variable-value key-value pair in the given map. As part of the setup process, the\n   * uniform variable locations are stored in a map from their corresponding variable names. So only\n   * the variable names are needed in order to call this function at render time.\n   *\n   * @param {Object.<String, UniformData>} uniformValues\n   */\n  _setUniforms(uniformValues) {\n    Object.keys(uniformValues).forEach(uniformName => {\n      const uniformSetter = this._uniformSetters[uniformName];\n      const uniformValue = uniformValues[uniformName];\n      uniformSetter.setUniform(uniformValue);\n    });\n  }\n\n  /**\n   * Sets the attribute buffers for this program.\n   *\n   * Specifically, this calls `gl.bindBuffer(...)` and `gl.vertexAttribPointer(...)` for each\n   * variable-name/variable-value pair in the given attribute-info map. As part of the setup\n   * process, the uniform variable locations are stored in a map from their corresponding variable\n   * names. So only the variable names are needed in order to call this function at render time.\n   *\n   * @param {Object.<String, AttributeConfig>} attributeConfigs\n   */\n  _setAttributes(attributeConfigs) {\n    Object.keys(attributeConfigs).forEach(attributeName => {\n      const attributeSetter = this._attributeSetters[attributeName];\n      const attributeConfig = attributeConfigs[attributeName];\n      attributeSetter(attributeConfig);\n    });\n  }\n\n  /**\n   * @private\n   */\n  _enableAttributes() {\n    this._attributeEnablers.forEach(attributeEnabler => attributeEnabler());\n  }\n\n  /**\n   * Creates uniform setters for this program and saves them in the _uniformSetters property.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @private\n   */\n  _createUniformSetters(gl) {\n    const uniformCount = gl.getProgramParameter(this._program, gl.ACTIVE_UNIFORMS);\n\n    this._uniformSetters = {};\n\n    for (let index = 0; index < uniformCount; index++) {\n      const uniformInfo = gl.getActiveUniform(this._program, index);\n      let uniformName = uniformInfo.name;\n\n      // Remove any array suffix.\n      // TODO: Is this removal redundant with the isArray check below??\n      if (uniformName.substr(-3) === '[0]') {\n        uniformName = uniformName.substr(0, uniformName.length - 3);\n      }\n\n      this._uniformSetters[uniformName] = new UniformSetter(gl, this._program, uniformInfo, this);\n    }\n  }\n\n  /**\n   * Creates attribute enablers and setters for this program and saves them in the\n   * _attributeEnablers and _attributeSetters properties, respectively.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @private\n   */\n  _createAttributeEnablersAndSetters(gl) {\n    this._attributeEnablers = [];\n    this._attributeSetters = {};\n\n    const attributeCount = gl.getProgramParameter(this._program, gl.ACTIVE_ATTRIBUTES);\n\n    for (let index = 0; index < attributeCount; index++) {\n      const attributeName = gl.getActiveAttrib(this._program, index).name;\n      const location = gl.getAttribLocation(this._program, attributeName);\n\n      this._attributeEnablers.push(ProgramWrapper._createAttributeEnabler(gl, location));\n      this._attributeSetters[attributeName] = ProgramWrapper._createAttributeSetter(gl, location);\n    }\n  }\n\n  /**\n   * Loads the shader source code from the given URLs, compiles the shader source code, and creates\n   * a program from the resulting shaders.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramWrapperConfig} config\n   * @returns {Promise}\n   * @private\n   */\n  _buildWebGLProgram(gl, config) {\n    return loadProgram(gl, config.vertexShaderPath, config.fragmentShaderPath)\n        .then(webGLProgram => {\n          this._program = webGLProgram;\n          this._createUniformSetters(gl);\n          this._createAttributeEnablersAndSetters(gl);\n          if (config.initialize) config.initialize(gl);\n        })\n        .then(() => console.info(`Program loaded: ${config.id}`));\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {number} location\n   * @returns {Function}\n   * @private\n   */\n  static _createAttributeEnabler(gl, location) {\n    return () => gl.enableVertexAttribArray(location);\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {number} location\n   * @returns {Function.<AttributeConfig>}\n   * @private\n   */\n  static _createAttributeSetter(gl, location) {\n    return attributeConfig => {\n      gl.bindBuffer(gl.ARRAY_BUFFER, attributeConfig.buffer);\n      gl.vertexAttribPointer(\n          location,\n          attributeConfig.size,\n          typeof attributeConfig.type !== 'undefined' ? attributeConfig.type : gl.FLOAT,\n          typeof attributeConfig.normalized !== 'undefined' ? attributeConfig.normalized : false,\n          typeof attributeConfig.stride !== 'undefined' ? attributeConfig.stride : 0,\n          typeof attributeConfig.offset !== 'undefined' ? attributeConfig.offset : 0);\n    };\n  }\n}\n\nexport {ProgramWrapper};\n\n/**\n * @typedef {Object} ProgramWrapperConfig\n * @property {string} id\n * @property {Function} [initialize] A method for one-time initialization of the GL state for this\n * program.\n * @property {Function} [webGLStateSetter] A method for setting up the GL state for this program\n * wrapper in preparation for the current draw call.\n * @property {number} [renderPriority] Programs with lower priority will render first. This does not\n * need to be present for ProgramWrappers that are children of a GroupProgramWrapper.\n * @property {string} [vertexShaderPath] This will be present on configs for non-group\n * ProgramWrappers.\n * @property {string} [fragmentShaderPath] This will be present on configs for non-group\n * ProgramWrappers.\n * @property {boolean} [isAPostProcessor=false] A post-processing program is used for manipulating\n * the entire frame after all the models have rendered.\n * @property {boolean} [childrenProgramConfigs] A grouping program consists of multiple child\n * programs that are all rendered in sequence for a related purpose.\n * @property {Array.<ChildProgramAndFramebufferIds>} [childrenProgramsToDraw] The IDs for the\n * sequence of children ProgramWrappers to draw, as well as the IDs for the input and output\n * framebuffers/textures to use. This will be present on configs for GroupProgramWrappers.\n * @property {Array.<string>} [childrenFramebufferIds] The IDs of all the framebuffers/textures that\n * will need to be created for this program. This will be present on configs for\n * GroupProgramWrappers.\n * @property {Function} [getProgramVariablesConfig] A method for getting the variables needed for\n * drawing this program. This will be present on configs of programs that are children of a\n * GroupProgramWrapper.\n */\n\n/**\n * @typedef {Object} ChildProgramAndFramebufferIds\n * @property {string} programId The ID of the program to draw with.\n * @property {Array.<string>} inputFramebufferIds The IDs of framebuffers whose textures will be\n * used as inputs for this program's shaders.\n * @property {string} outputFramebufferId Provide null in order to render to the canvas.\n */\n\n/**\n * @typedef {Object} ProgramVariablesConfig\n * @property {Object.<String, AttributeConfig>} attributes A mapping from attribute names to\n * attribute info.\n * @property {Object.<String, UniformData>} uniforms A mapping from uniform names to uniform info.\n * @property {number} mode Specifies the type of primitives to render; one of:\n *   - gl.POINTS,\n *   - gl.LINES,\n *   - gl.LINE_STRIP,\n *   - gl.LINE_LOOP,\n *   - gl.TRIANGLES,\n *   - gl.TRIANGLE_STRIP,\n *   - gl.TRIANGLE_FAN.\n * @property {WebGLBuffer} [vertexIndices] The indices to use for retrieving the vertex info from\n * each of the other attribute variable buffers. If this property is present, then the rendering\n * pipeline will be set up to use gl.drawElements (with gl.ELEMENT_ARRAY_BUFFER) instead of\n * gl.drawArrays.\n * @property {number} elementCount The number of elements/vertices to render for this variables\n * configuration.\n */\n\n/**\n * @typedef {Object} AttributeConfig\n * @property {WebGLBuffer} buffer The buffer containing this attribute's data.\n * @property {number} index Index of target attribute in the buffer bound to gl.ARRAY_BUFFER.\n * @property {number} size The number of components per attribute. Must be 1,2,3,or 4.\n * @property {number} type Specifies the data type of each component in the array. Use either\n * gl.FLOAT or gl.FIXED.\n * @property {boolean} normalized If true, then values will be normalized to a range of -1 or 0 to\n * 1.\n * @property {number} stride Specifies the offset in bytes between the beginning of consecutive\n * vertex attributes. Default value is 0, maximum is 255. Must be a multiple of type.\n * @property {number} offset Specifies an offset in bytes of the first component of the first\n * vertex attribute in the array. Default is 0 which means that vertex attributes are tightly\n * packed. Must be a multiple of type.\n */\n\n/** @typedef {*} UniformData */\n","import {loadImageSrc} from '../../util';\n\n/**\n * This class loads, sets up, and stores WebGL texture objects.\n *\n * NOTE: Only textures whose side lengths are powers of two are supported.\n */\nclass TextureStore {\n  constructor() {\n    this.textureCache = {};\n  }\n\n  /**\n   * @param {string} texturePath\n   * @returns {WebGLTexture}\n   */\n  getTexture(texturePath) {\n    return this.textureCache[texturePath].texture;\n  }\n\n  /**\n   * Loads the texture image at the given path, creates a texture object from it, caches the\n   * texture, and returns a promise for the texture.\n   *\n   * This method is idempotent; a given texture will only be loaded once.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @param {string} texturePath\n   * @returns {Promise.<WebGLTexture, Error>}\n   */\n  loadTexture(gl, texturePath) {\n    let textureCacheInfo = this.textureCache[texturePath];\n\n    // Load, create, and cache the texture if it has not been previously registered.\n    if (!textureCacheInfo) {\n      textureCacheInfo = {\n        texturePromise: null,\n        texture: null,\n        image: new Image()\n      };\n      this.textureCache[texturePath] = textureCacheInfo;\n      textureCacheInfo.texturePromise = loadImageSrc(textureCacheInfo.image, texturePath)\n          .then(_ => this._createTexture(gl, textureCacheInfo));\n    }\n\n    return textureCacheInfo.texturePromise;\n  }\n\n  // TODO: Make this more general/configurable by creating a new TextureConfig typedef with most of\n  // the gl.xxx params included below (like the AttributeConfig typedef}, passing a textureConfig in\n  // the register method, and saving it on the textureCacheInfo object.\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {TextureCacheInfo} textureCacheInfo\n   * @returns {WebGLTexture}\n   * @private\n   */\n  _createTexture(gl, textureCacheInfo) {\n    console.info(`Texture loaded: ${textureCacheInfo.image.src}`);\n\n    textureCacheInfo.texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, textureCacheInfo.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureCacheInfo.image);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);\n    gl.generateMipmap(gl.TEXTURE_2D);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n\n    return textureCacheInfo.texture;\n  }\n\n  /**\n   * WARNING: This will remove the texture from the store even if there are still other components\n   * depending on this texture.\n   *\n   * @param {string} texturePath\n   */\n  deleteTexture(texturePath) {\n    delete this.textureCache[texturePath];\n  }\n}\n\nexport const textureStore = new TextureStore();\n\n/**\n * @typedef {Object} TextureCacheInfo\n * @property {Promise.<WebGLTexture, Error>} texturePromise\n * @property {WebGLTexture} [texture]\n * @property {HTMLImageElement} [image]\n */\n","/**\n * This class stores a function for setting a value to a WebGL uniform variable.\n *\n * This is intended for use as a helper for the ProgramWrapper class.\n */\n// TODO: Write tests for this class.\nclass UniformSetter {\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {WebGLProgram} program\n   * @param {WebGLActiveInfo} uniformInfo\n   * @param {ProgramWrapper} programWrapper\n   * @throws If the given uniformInfo specifies an unexpected uniform-value type.\n   */\n  constructor(gl, program, uniformInfo, programWrapper) {\n    this._location = gl.getUniformLocation(program, uniformInfo.name);\n    this._setter = this._getSetter(gl, uniformInfo, programWrapper);\n\n    // TODO: Freeze this object after initializing\n  }\n\n  /**\n   * @param {UniformData} uniformValue\n   */\n  setUniform(uniformValue) {\n    uniformValue = uniformValue instanceof Array ? new Float32Array(uniformValue) : uniformValue;\n    this._setter(uniformValue);\n  }\n\n  /** @returns {WebGLUniformLocation} */\n  get location() {\n    return this._location;\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {WebGLActiveInfo} uniformInfo\n   * @param {ProgramWrapper} programWrapper\n   * @returns {Function.<*>}\n   * @throws If the given uniformInfo specifies an unexpected uniform-value type.\n   * @private\n   */\n  _getSetter(gl, uniformInfo, programWrapper) {\n    const isArray = uniformInfo.size > 1 && uniformInfo.name.substr(-3) === '[0]';\n    const setterMap = isArray ? {\n      [gl.FLOAT]: value => gl.uniform1fv(this._location, value),\n      [gl.INT]: value => gl.uniform1iv(this._location, value),\n      [gl.SAMPLER_2D]: this._getUniformTextureArraySetter(gl, gl.TEXTURE_2D, uniformInfo.size,\n          programWrapper),\n      [gl.SAMPLER_CUBE]: this._getUniformTextureArraySetter(gl, gl.TEXTURE_CUBE_MAP,\n          uniformInfo.size, programWrapper),\n    } : {\n      [gl.FLOAT]: value => gl.uniform1f(this._location, value),\n      [gl.FLOAT_VEC2]: value => gl.uniform2fv(this._location, value),\n      [gl.FLOAT_VEC3]: value => gl.uniform3fv(this._location, value),\n      [gl.FLOAT_VEC4]: value => gl.uniform4fv(this._location, value),\n      [gl.INT]: value => gl.uniform1i(this._location, value),\n      [gl.INT_VEC2]: value => gl.uniform2iv(this._location, value),\n      [gl.INT_VEC3]: value => gl.uniform3iv(this._location, value),\n      [gl.INT_VEC4]: value => gl.uniform4iv(this._location, value),\n      [gl.BOOL]: value => gl.uniform1i(this._location, value),\n      [gl.BOOL_VEC2]: value => gl.uniform2iv(this._location, value),\n      [gl.BOOL_VEC3]: value => gl.uniform3iv(this._location, value),\n      [gl.BOOL_VEC4]: value => gl.uniform4iv(this._location, value),\n      [gl.FLOAT_MAT2]: value => gl.uniformMatrix2fv(this._location, false, value),\n      [gl.FLOAT_MAT3]: value => gl.uniformMatrix3fv(this._location, false, value),\n      [gl.FLOAT_MAT4]: value => gl.uniformMatrix4fv(this._location, false, value),\n      [gl.SAMPLER_2D]: this._getUniformTextureSetter(gl, gl.TEXTURE_2D,\n          programWrapper.baseTextureUnitIndex++),\n      [gl.SAMPLER_CUBE]: this._getUniformTextureSetter(gl, gl.TEXTURE_CUBE_MAP,\n          programWrapper.baseTextureUnitIndex++),\n    };\n    return setterMap[uniformInfo.type];\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {number} target An enum describing the type of this buffer; one of:\n   *   - gl.TEXTURE_2D,\n   *   - gl.TEXTURE_CUBE_MAP.\n   * @param {number} uniformSize\n   * @param {ProgramWrapper} programWrapper\n   * @returns {Function.<*>}\n   * @private\n   */\n  _getUniformTextureArraySetter(gl, target, uniformSize, programWrapper) {\n    const textureUnitIndices =\n        Array.from({length: uniformSize}, _ => programWrapper.baseTextureUnitIndex++);\n\n    return textures => {\n      textures.forEach((texture, index) => {\n        gl.activeTexture(gl.TEXTURE0 + textureUnitIndices[index]);\n        gl.bindTexture(target, texture);\n      });\n      gl.uniform1iv(this._location, textureUnitIndices);\n    };\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {number} target An enum describing the type of this buffer; one of:\n   *   - gl.TEXTURE_2D,\n   *   - gl.TEXTURE_CUBE_MAP.\n   * @param {number} textureUnitIndex\n   * @returns {Function.<*>}\n   * @private\n   */\n  _getUniformTextureSetter(gl, target, textureUnitIndex) {\n    return texture => {\n      gl.activeTexture(gl.TEXTURE0 + textureUnitIndex);\n      gl.bindTexture(target, texture);\n      gl.uniform1i(this._location, textureUnitIndex);\n    };\n  }\n}\n\nexport {UniformSetter};\n","import {renderableShapeFactory} from './src/renderable-shape-factory';\n\nimport {capsuleRenderableShapeFactory} from './src/shape-configs/capsule-renderable-shape';\nimport {cubeRenderableShapeFactory} from './src/shape-configs/cube-renderable-shape';\nimport {icosahedronRenderableShapeFactory} from './src/shape-configs/icosahedron-renderable-shape';\nimport {icosphereRenderableShapeFactory} from './src/shape-configs/icosphere-renderable-shape';\nimport {latLongSphereRenderableShapeFactory} from './src/shape-configs/lat-long-sphere-renderable-shape';\nimport {tetrahedronRenderableShapeFactory} from './src/shape-configs/tetrahedron-renderable-shape';\n\n[\n  capsuleRenderableShapeFactory,\n  cubeRenderableShapeFactory,\n  icosahedronRenderableShapeFactory,\n  icosphereRenderableShapeFactory,\n  latLongSphereRenderableShapeFactory,\n  tetrahedronRenderableShapeFactory\n].forEach(renderableShapeFactory.registerRenderableShapeFactory);\n\nexport * from './src/shape-configs/capsule-renderable-shape';\nexport * from './src/shape-configs/cube-renderable-shape';\nexport * from './src/shape-configs/icosahedron-renderable-shape';\nexport * from './src/shape-configs/icosphere-renderable-shape';\nexport * from './src/shape-configs/lat-long-sphere-renderable-shape';\nexport * from './src/shape-configs/tetrahedron-renderable-shape';\n\nexport * from './src/renderable-shape-factory';\nexport * from './src/renderable-shape-store';\n","import {DefaultModel} from '../../models';\nimport {renderableShapeStore} from './renderable-shape-store';\n\n/**\n * This module defines a factory for DefaultRigidModal instances that are based on the various\n * pre-defined renderable shapes in this directory.\n */\n\nconst renderableShapeFactory = {\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {RenderableShapeConfig} params\n   * @returns {DefaultModel}\n   */\n  createModel: (gl, params) => {\n    const shapeConfig = renderableShapeFactory.getRenderableShape(params);\n    return new DefaultModel(gl, shapeConfig);\n  },\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {RenderableShape}\n   */\n  getRenderableShape: params => {\n    params.isUsingSphericalNormals = params.isUsingSphericalNormals || false;\n    params.divisionsCount = typeof params.divisionsCount === 'number' ? params.divisionsCount : 0;\n\n    let shapeConfig = renderableShapeStore.getShape(params);\n    if (!shapeConfig) {\n      shapeConfig = _shapeIdsToRenderableShapeFactories[params.shapeId].getRenderableShape(params);\n      _updateTextureCoordinatesSpan(shapeConfig, params.textureSpan);\n      renderableShapeStore.registerShape(shapeConfig, params);\n    }\n    return shapeConfig;\n  },\n\n  /**\n   * @param {RenderableShapeFactory} shapeConfigFactory\n   */\n  registerRenderableShapeFactory: shapeConfigFactory => {\n    _shapeIdsToRenderableShapeFactories[shapeConfigFactory.shapeId] = shapeConfigFactory;\n    renderableShapeStore.registerRenderableShapeFactory(shapeConfigFactory);\n  }\n};\n\nconst _shapeIdsToRenderableShapeFactories = {};\n\n/**\n * @param {RenderableShape} shapeConfig\n * @param {TextureSpan} textureSpan\n * @private\n */\nfunction _updateTextureCoordinatesSpan(shapeConfig, textureSpan) {\n  if (!textureSpan) return;\n\n  const minX = textureSpan.minX;\n  const minY = textureSpan.minY;\n  const rangeX = textureSpan.maxX - textureSpan.minX;\n  const rangeY = textureSpan.maxY - textureSpan.minY;\n\n  const textureCoordinates = shapeConfig.textureCoordinates.slice();\n  shapeConfig.textureCoordinates = textureCoordinates;\n\n  for (let i = 0, count = textureCoordinates.length; i < count; i += 2) {\n    textureCoordinates[i] = minX + rangeX * textureCoordinates[i];\n    textureCoordinates[i + 1] = minY + rangeY * textureCoordinates[i + 1];\n  }\n}\n\nexport {renderableShapeFactory};\n\n/**\n * @typedef {Object} RenderableShapeFactory\n * @property {string} shapeId\n * @property {Function.<RenderableShape>} getRenderableShape\n * @property {Function.<String>} getCacheId\n */\n\n/**\n * @typedef {Object} RenderableShape\n * @property {Array.<Number>} vertexPositions\n * @property {Array.<Number>} vertexNormals\n * @property {Array.<Number>} textureCoordinates\n * @property {Array.<Number>} [vertexIndices]\n * @property {number} elementCount\n */\n\n/**\n * @typedef {Object} TextureSpan\n * @property {number} minX\n * @property {number} minY\n * @property {number} maxX\n * @property {number} maxY\n */\n\n/**\n * @typedef {Object} RenderableShapeConfig\n * @property {string} shapeId The ID of the type of renderable shape.\n * @property {boolean} [isUsingSphericalNormals=false] Whether light reflections should show sharp\n * edges.\n * @property {TextureSpan} [textureSpan] For indicating how much a texture should repeat in both axes.\n * A range of 0-0.5 should show half the texture. A range of 0-2 would show the texture twice. The\n * default is 0-1 in both directions.\n * @property {vec3} [scale]\n */\n\n/**\n * @typedef {RenderableShapeConfig} SphericalRenderableShapeParams\n * @property {number} divisionsCount How many times to sub-divide the sphere.\n */\n","/**\n * This class caches renderable shape data.\n */\nclass RenderableShapeStore {\n  constructor() {\n    this._shapeCache = new Map();\n  }\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {RenderableShape}\n   */\n  getShape(params) {\n    const key = _shapeIdsToCacheKeyCalculators[params.shapeId](params);\n    return this._shapeCache.get(key);\n  }\n\n  /**\n   * Caches the given shape info.\n   *\n   * @param {RenderableShape} shapeConfig\n   * @param {RenderableShapeConfig} params\n   */\n  registerShape(shapeConfig, params) {\n    const key = _shapeIdsToCacheKeyCalculators[params.shapeId](params);\n    this._shapeCache.set(key, shapeConfig);\n  }\n\n  /**\n   * @param {RenderableShapeFactory} shapeConfigFactory\n   */\n  registerRenderableShapeFactory(shapeConfigFactory) {\n    _shapeIdsToCacheKeyCalculators[shapeConfigFactory.shapeId] = shapeConfigFactory.getCacheId;\n  }\n\n  // TODO: Add support for un-registering shapes.\n}\n\n/**\n * @param {RenderableShapeConfig} params\n * @returns {string}\n */\nfunction getCacheKey(params) {\n  const textureSpanStr = params.textureSpan\n      ? `:${params.textureSpan.minX},${params.textureSpan.minY},${params.textureSpan.maxX},` +\n  `${params.textureSpan.maxY}`\n      : '';\n\n  return `${params.shapeId}:${params.isUsingSphericalNormals}${textureSpanStr}`;\n}\n\nconst _shapeIdsToCacheKeyCalculators = {};\n\nconst renderableShapeStore = new RenderableShapeStore();\nexport {renderableShapeStore, getCacheKey};\n","/**\n * This module defines a configuration factory for a capsule shape.\n *\n * The shape is centered around the origin with the poles aligned with the z-axis.\n */\n\nimport {\n  calculateSphericalSection,\n  calculateOrthogonalVertexNormals,\n  dedupVertexArrayWithPositionsAndIndicesArrays,\n  calculateLatLongTextureCoordinates,\n  calculateCylindricalSection,\n  calculateCylindricalTextureCoordinates,\n  TWO_PI,\n} from '../../../util';\nimport {getCacheKey} from '../renderable-shape-store';\n\n// TODO: Once I have a better camera in place, test that these texture coordinate calculations are\n// correct.\n\n/**\n * @param {CapsuleRenderableShapeParams} params\n * @returns {RenderableShape}\n */\nfunction _calculateCapsuleTopShape(params) {\n  // Calculate the positions.\n  // TODO: This uses lat-long spheres for the ends of the capsule. Use icospheres instead.\n  const individualVertexPositions = calculateSphericalSection(\n      0, params.divisionsCount / 2, Math.PI / params.divisionsCount,\n      0, params.divisionsCount, TWO_PI / params.divisionsCount);\n\n  // Calculate the indices and normals.\n  let vertexPositions;\n  let vertexIndices;\n  let vertexNormals;\n  if (!params.isUsingSphericalNormals) {\n    // If we use orthogonal normals, then we cannot use vertexIndices.\n    vertexPositions = individualVertexPositions;\n    vertexIndices = null;\n    vertexNormals = calculateOrthogonalVertexNormals(vertexPositions);\n  } else {\n    ({vertexPositions, vertexIndices} = dedupVertexArrayWithPositionsAndIndicesArrays(\n        individualVertexPositions));\n    vertexNormals = vertexPositions;\n  }\n\n  const textureCoordinates = calculateLatLongTextureCoordinates(vertexPositions);\n\n  let scale;\n  let translation;\n\n  // Scale and translate the positions.\n  scale = params.radius;\n  translation = params.capsuleEndPointsDistance / 2;\n  for (let i = 0, count = vertexPositions.length; i < count; i += 3) {\n    vertexPositions[i] *= scale;\n    vertexPositions[i + 1] *= scale;\n    vertexPositions[i + 2] = vertexPositions[i + 2] * scale + translation;\n  }\n\n  // Scale and translate the texture coordinates.\n  scale = params.radius / (params.radius + params.capsuleEndPointsDistance);\n  translation = 1 - scale;\n  for (let i = 1, count = textureCoordinates.length; i < count; i += 2) {\n    textureCoordinates[i] = textureCoordinates[i] * scale + translation;\n  }\n\n  const elementCount = vertexIndices ? vertexIndices.length : vertexPositions.length / 3;\n\n  return {\n    vertexPositions: vertexPositions,\n    vertexNormals: vertexNormals,\n    textureCoordinates: textureCoordinates,\n    vertexIndices: vertexIndices,\n    elementCount: elementCount\n  };\n}\n\n/**\n * @param {CapsuleRenderableShapeParams} params\n * @returns {RenderableShape}\n */\nfunction _calculateCapsuleBottomShape(params) {\n  // Calculate the positions.\n  // TODO: This uses lat-long spheres for the ends of the capsule. Use icospheres instead.\n  const individualVertexPositions = calculateSphericalSection(\n      params.divisionsCount / 2, params.divisionsCount, Math.PI / params.divisionsCount,\n      0, params.divisionsCount, TWO_PI / params.divisionsCount);\n\n  // Calculate the indices and normals.\n  let vertexPositions;\n  let vertexIndices;\n  let vertexNormals;\n  if (!params.isUsingSphericalNormals) {\n    // If we use orthogonal normals, then we cannot use vertexIndices.\n    vertexPositions = individualVertexPositions;\n    vertexIndices = null;\n    vertexNormals = calculateOrthogonalVertexNormals(vertexPositions);\n  } else {\n    const positionsAndIndices = dedupVertexArrayWithPositionsAndIndicesArrays(\n        individualVertexPositions);\n    vertexPositions = positionsAndIndices.vertexPositions;\n    vertexIndices = positionsAndIndices.vertexIndices;\n    vertexNormals = vertexPositions;\n  }\n\n  const textureCoordinates = calculateLatLongTextureCoordinates(vertexPositions);\n\n  let scale;\n  let translation;\n\n  // Scale and translate the positions.\n  scale = params.radius;\n  translation = -params.capsuleEndPointsDistance / 2;\n  for (let i = 0, count = vertexPositions.length; i < count; i += 3) {\n    vertexPositions[i] *= scale;\n    vertexPositions[i + 1] *= scale;\n    vertexPositions[i + 2] = vertexPositions[i + 2] * scale + translation;\n  }\n\n  // Scale and translate the texture coordinates.\n  scale = params.radius / (params.radius + params.capsuleEndPointsDistance);\n  translation = 0;\n  for (let i = 1, count = textureCoordinates.length; i < count; i += 2) {\n    textureCoordinates[i] = textureCoordinates[i] * scale + translation;\n  }\n\n  const elementCount = vertexIndices ? vertexIndices.length : vertexPositions.length / 3;\n\n  return {\n    vertexPositions: vertexPositions,\n    vertexNormals: vertexNormals,\n    textureCoordinates: textureCoordinates,\n    vertexIndices: vertexIndices,\n    elementCount: elementCount\n  };\n}\n\n/**\n * @param {CapsuleRenderableShapeParams} params\n * @returns {RenderableShape}\n */\nfunction _calculateCapsuleMiddleShape(params) {\n  let scale;\n  let translation;\n\n  // Calculate the positions.\n  translation = params.capsuleEndPointsDistance / 2;\n  const individualVertexPositions = calculateCylindricalSection(\n      -translation, translation, 0, params.divisionsCount, TWO_PI / params.divisionsCount);\n\n  let vertexPositions;\n  let vertexIndices;\n  let vertexNormals;\n\n  // Calculate the vertex indices and normals.\n  if (!params.isUsingSphericalNormals) {\n    // If we use orthogonal normals, then we cannot use vertexIndices.\n    vertexPositions = individualVertexPositions;\n    vertexIndices = null;\n    vertexNormals = calculateOrthogonalVertexNormals(vertexPositions);\n  } else {\n    const positionsAndIndices = dedupVertexArrayWithPositionsAndIndicesArrays(\n        individualVertexPositions);\n    vertexPositions = positionsAndIndices.vertexPositions;\n    vertexIndices = positionsAndIndices.vertexIndices;\n\n    // Calculate the vertex normals.\n    vertexNormals = vertexPositions.map((coord, index) => index % 3 === 2 ? 0 : coord);\n  }\n\n  // Calculate the texture coordinates.\n  const textureCoordinates = calculateCylindricalTextureCoordinates(vertexPositions);\n\n  // Scale the x and y position coordinates.\n  scale = params.radius;\n  for (let i = 0, count = vertexPositions.length; i < count; i += 3) {\n    vertexPositions[i] *= scale;\n    vertexPositions[i + 1] *= scale;\n  }\n\n  // Scale and translate the texture coordinates.\n  scale = params.capsuleEndPointsDistance / (params.radius + params.capsuleEndPointsDistance);\n  translation = (1 - scale) / 2;\n  for (let i = 1, count = textureCoordinates.length; i < count; i += 2) {\n    textureCoordinates[i] = textureCoordinates[i] * scale + translation;\n  }\n\n  const elementCount = vertexIndices ? vertexIndices.length : vertexPositions.length / 3;\n\n  return {\n    vertexPositions: vertexPositions,\n    vertexNormals: vertexNormals,\n    textureCoordinates: textureCoordinates,\n    vertexIndices: vertexIndices,\n    elementCount: elementCount\n  };\n}\n\nconst capsuleRenderableShapeFactory = {\n  shapeId: 'CAPSULE',\n\n  /**\n   * @param {CapsuleRenderableShapeParams} params\n   * @returns {RenderableShape}\n   */\n  getRenderableShape: (params) => {\n    // Ensure the divisions count is even.\n    if (params.divisionsCount % 2 === 1) {\n      params.divisionsCount++;\n    }\n\n    // The capsule's sub-shapes.\n    const topShape = _calculateCapsuleTopShape(params);\n    const bottomShape = _calculateCapsuleBottomShape(params);\n    const middleShape = _calculateCapsuleMiddleShape(params);\n\n    // Concatenate positions, normals, texture coordinates, and indices.\n    const vertexPositions = topShape.vertexPositions.concat(middleShape.vertexPositions, \n        bottomShape.vertexPositions);\n    const vertexNormals = topShape.vertexNormals.concat(middleShape.vertexNormals,\n        bottomShape.vertexNormals);\n    const textureCoordinates = topShape.textureCoordinates.concat(middleShape.textureCoordinates,\n        bottomShape.textureCoordinates);\n    const vertexIndices = topShape.vertexIndices\n        ? topShape.vertexIndices.concat(middleShape.vertexIndices, bottomShape.vertexIndices)\n        : null;\n    const elementCount = topShape.elementCount + middleShape.elementCount + bottomShape.elementCount;\n\n    return {\n      vertexPositions: vertexPositions,\n      vertexNormals: vertexNormals,\n      textureCoordinates: textureCoordinates,\n      vertexIndices: vertexIndices,\n      elementCount: elementCount\n    };\n  },\n\n  /**\n   * @param {CapsuleRenderableShapeParams} params\n   * @returns {string}\n   */\n  getCacheId(params) {\n    return `${getCacheKey(params)}:${params.divisionsCount}`;\n  }\n};\n\nexport {capsuleRenderableShapeFactory};\n\n/**\n * @typedef {SphericalRenderableShapeParams} CapsuleRenderableShapeParams\n * @property {number} radius\n * @property {number} capsuleEndPointsDistance The distance between the centers of the spheres on\n * either end of the capsule.\n */\n","/**\n * This model defines a shape configuration factory for a cube.\n *\n * This cube is one unit long on each side.\n */\n\nimport {getCacheKey} from '../renderable-shape-store';\n\nconst VERTEX_COORDINATE = 0.5;\n\nconst vertexPositions = [\n  // Front face\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  // Back face\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  -VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  -VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  // Top face\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  -VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  -VERTEX_COORDINATE,\n  // Bottom face\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  // Right face\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  -VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  // Left face\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  -VERTEX_COORDINATE\n];\n\nconst orthogonalVertexNormals = [\n  // Front face\n  0, 0, 1,\n  0, 0, 1,\n  0, 0, 1,\n  0, 0, 1,\n  // Back face\n  0, 0, -1,\n  0, 0, -1,\n  0, 0, -1,\n  0, 0, -1,\n  // Top face\n  0, 1, 0,\n  0, 1, 0,\n  0, 1, 0,\n  0, 1, 0,\n  // Bottom face\n  0, -1, 0,\n  0, -1, 0,\n  0, -1, 0,\n  0, -1, 0,\n  // Right face\n  1, 0, 0,\n  1, 0, 0,\n  1, 0, 0,\n  1, 0, 0,\n  // Left face\n  -1, 0, 0,\n  -1, 0, 0,\n  -1, 0, 0,\n  -1, 0, 0\n];\n\nconst textureCoordinates = [\n  // Front face\n  1, 0,\n  0, 0,\n  0, 1,\n  1, 1,\n  // Back face\n  1, 0,\n  0, 0,\n  0, 1,\n  1, 1,\n  // Top face\n  1, 0,\n  0, 0,\n  0, 1,\n  1, 1,\n  // Bottom face\n  1, 0,\n  0, 0,\n  0, 1,\n  1, 1,\n  // Right face\n  1, 0,\n  0, 0,\n  0, 1,\n  1, 1,\n  // Left face\n  1, 0,\n  0, 0,\n  0, 1,\n  1, 1\n];\n\n// This array defines each face as two triangles, using the indices into the vertex array\n// to specify each triangle's position.\nconst vertexIndices = [\n  // Front face\n  0,  1,  2,\n  0,  2,  3,\n  // Back face\n  4,  5,  6,\n  4,  6,  7,\n  // Top face\n  8,  9,  10,\n  8,  10, 11,\n  // Bottom face\n  12, 13, 14,\n  12, 14, 15,\n  // Right face\n  16, 17, 18,\n  16, 18, 19,\n  // Left face\n  20, 21, 22,\n  20, 22, 23\n];\n\nconst cubeRenderableShapeFactory = {\n  shapeId: 'CUBE',\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {RenderableShape}\n   */\n  getRenderableShape: params => {\n    const vertexNormals = params.isUsingSphericalNormals ? vertexPositions : orthogonalVertexNormals;\n\n    return {\n      vertexPositions: vertexPositions,\n      vertexNormals: vertexNormals,\n      textureCoordinates: textureCoordinates,\n      vertexIndices: vertexIndices,\n      elementCount: vertexIndices.length\n    };\n  },\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {string}\n   */\n  getCacheId(params) {\n    return getCacheKey(params);\n  }\n};\n\nexport {cubeRenderableShapeFactory};\n","/**\n * This model defines a shape configuration factory for a regular icosahedron.\n *\n * The shape is centered around the origin.\n */\n\nimport {\n  calculateLatLongTextureCoordinates,\n  calculateOrthogonalVertexNormals,\n  expandVertexIndicesAroundLongitudeSeam,\n  expandVertexIndicesToDuplicatePositions,\n} from '../../../util';\nimport {getCacheKey} from '../renderable-shape-store';\n\n// The corners of a unit icosahedron with vertices aligned with the y-axis.\nconst individualVertexPositions = [\n  -0.525731086730957, -0.7236068248748779, 0.4472135901451111,\n  0.525731086730957, -0.7236068248748779, 0.4472135901451111,\n  -0.525731086730957, 0.7236068248748779, -0.4472135901451111,\n  0.525731086730957, 0.7236068248748779, -0.4472135901451111,\n  0, 0, 1,\n  0, 0.8944271802902222, 0.44721361994743347,\n  0, -0.8944271802902222, -0.44721361994743347,\n  0, 0, -1,\n  0.8506508469581604, 0.27639320492744446, 0.4472135901451111,\n  -0.8506508469581604, 0.27639320492744446, 0.4472135901451111,\n  0.8506508469581604, -0.27639320492744446, -0.4472135901451111,\n  -0.8506508469581604, -0.27639320492744446, -0.4472135901451111\n];\n\nconst individualVertexIndices = [\n  1,  4,  0,\n  4,  9,  0,\n  4,  5,  9,\n  8,  5,  4,\n  1,  8,  4,\n  1,  10, 8,\n  10, 3,  8,\n  8,  3,  5,\n  3,  2,  5,\n  3,  7,  2,\n  3,  10, 7,\n  10, 6,  7,\n  6,  11, 7,\n  6,  0,  11,\n  6,  1,  0,\n  10, 1,  6,\n  11, 0,  9,\n  2,  11, 9,\n  5,  2,  9,\n  11, 2,  7\n];\n\nlet vertexPositionsExpandedAroundSeam = null;\nlet vertexIndicesExpandedAroundSeam = null;\nlet textureCoordinates = null;\n\nconst icosahedronRenderableShapeFactory = {\n  shapeId: 'ICOSAHEDRON',\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {RenderableShape}\n   */\n  getRenderableShape: params => {\n    let vertexPositions;\n    let vertexIndices;\n\n    if (!vertexPositionsExpandedAroundSeam) {\n      // Calculate the modified positions and indices.\n      const positionsAndIndices = expandVertexIndicesAroundLongitudeSeam(\n          individualVertexPositions, individualVertexIndices);\n      vertexPositionsExpandedAroundSeam = positionsAndIndices.vertexPositions;\n      vertexIndicesExpandedAroundSeam = positionsAndIndices.vertexIndices;\n    }\n\n    vertexPositions = vertexPositionsExpandedAroundSeam;\n    vertexIndices = vertexIndicesExpandedAroundSeam;\n\n    let vertexNormals;\n    // If we use orthogonal normals, then we cannot use vertexIndices.\n    if (!params.isUsingSphericalNormals) {\n      vertexPositions = expandVertexIndicesToDuplicatePositions(vertexPositions,\n          vertexIndices);\n      vertexIndices = null;\n      vertexNormals = calculateOrthogonalVertexNormals(vertexPositions);\n    } else {\n      vertexNormals = vertexPositions;\n    }\n\n    textureCoordinates = textureCoordinates\n        ? textureCoordinates\n        : calculateLatLongTextureCoordinates(vertexPositions);\n\n    const elementCount = vertexIndices ? vertexIndices.length : vertexPositions.length / 3;\n\n    return {\n      vertexPositions: vertexPositions,\n      vertexNormals: vertexNormals,\n      textureCoordinates: textureCoordinates,\n      vertexIndices: vertexIndices,\n      elementCount: elementCount\n    };\n  },\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {string}\n   */\n  getCacheId(params) {\n    return getCacheKey(params);\n  }\n};\n\nexport {icosahedronRenderableShapeFactory};\n","/**\n * This module defines logic that creates a spherical shape configuration by taking a shape,\n * sub-dividing each of its triangles, and projecting each new vertex onto the edge of a sphere.\n *\n * This is technically only an \"icosphere\" if the starting shape is an icosahedron.\n *\n * This shape also is known as a \"geosphere\".\n *\n * The shape is centered around the origin.\n */\n\nimport {\n  deepCopy,\n  calculateLatLongTextureCoordinates,\n  calculateOrthogonalVertexNormals,\n  expandVertexIndicesAroundLongitudeSeam,\n  expandVertexIndicesToDuplicatePositions,\n  tesselateSphere,\n} from '../../../util';\nimport {getCacheKey} from '../renderable-shape-store';\nimport {renderableShapeFactory} from '../renderable-shape-factory';\n\nconst icosphereRenderableShapeFactory = {\n  shapeId: 'ICOSPHERE',\n\n  /**\n   * @param {IcosphereRenderableShapeParams} params\n   * @returns {RenderableShape}\n   */\n  getRenderableShape: params => {\n    params.divisionsCount = Math.max(params.divisionsCount, 1);\n\n    const copyParams = deepCopy(params);\n    copyParams.shapeId = params.baseShapeId || 'ICOSAHEDRON';\n    const baseRenderableShape = renderableShapeFactory.getRenderableShape(copyParams);\n\n    // Calculate the positions and indices.\n    let {vertexPositions, vertexIndices} = tesselateSphere(params.divisionsCount,\n        baseRenderableShape.vertexPositions, baseRenderableShape.vertexIndices);\n    ({vertexPositions, vertexIndices} = expandVertexIndicesAroundLongitudeSeam(\n        vertexPositions, vertexIndices));\n\n    let vertexNormals;\n    // If we use orthogonal normals, then we cannot use vertexIndices.\n    if (!params.isUsingSphericalNormals) {\n      vertexPositions = expandVertexIndicesToDuplicatePositions(vertexPositions,\n          vertexIndices);\n      vertexIndices = null;\n      vertexNormals = calculateOrthogonalVertexNormals(vertexPositions);\n    } else {\n      vertexNormals = vertexPositions;\n    }\n\n    const textureCoordinates = calculateLatLongTextureCoordinates(vertexPositions);\n\n    const elementCount = vertexIndices ? vertexIndices.length : vertexPositions.length / 3;\n\n    return {\n      vertexPositions: vertexPositions,\n      vertexNormals: vertexNormals,\n      textureCoordinates: textureCoordinates,\n      vertexIndices: vertexIndices,\n      elementCount: elementCount\n    };\n  },\n\n  /**\n   * @param {IcosphereRenderableShapeParams} params\n   * @returns {string}\n   */\n  getCacheId(params) {\n    return `${getCacheKey(params)}:${params.divisionsCount}`;\n  }\n};\n\nexport {icosphereRenderableShapeFactory};\n\n/**\n * @typedef {SphericalRenderableShapeParams} IcosphereRenderableShapeParams\n * @property {string} baseShapeId The ID of the base renderable shape that will be sub-divided to\n * create this icosphere shape.\n */\n","import {\n  calculateLatLongTextureCoordinates,\n  calculateOrthogonalVertexNormals,\n  calculateSphericalSection,\n  dedupVertexArrayWithPositionsAndIndicesArrays,\n  TWO_PI,\n} from '../../../util';\nimport {getCacheKey} from '../renderable-shape-store';\n\n/**\n * This module defines a configuration factory for a spherical shape whose vertices lie along\n * latitude and longitude lines.\n *\n * This shape also is known as a \"UV sphere\".\n *\n * The shape is centered around the origin with the poles aligned with the z-axis.\n */\n\n/**\n * @param {number} divisionsCount\n * @returns {Array.<Number>}\n * @private\n */\nfunction _calculateLatLongSpherePositions(divisionsCount) {\n  const deltaPitch = Math.PI / divisionsCount;\n  const deltaAzimuth = TWO_PI / divisionsCount;\n\n  return calculateSphericalSection(\n      0, divisionsCount, deltaPitch,\n      0, divisionsCount, deltaAzimuth);\n}\n\nconst latLongSphereRenderableShapeFactory = {\n  shapeId: 'LAT_LONG_SPHERE',\n\n  /**\n   * @param {SphericalRenderableShapeParams} params\n   * @returns {RenderableShape}\n   */\n  getRenderableShape: params => {\n    // Calculate the positions.\n    const individualVertexPositions = _calculateLatLongSpherePositions(params.divisionsCount);\n\n    // Calculate the indices and normals.\n    let vertexPositions;\n    let vertexIndices;\n    let vertexNormals;\n    if (!params.isUsingSphericalNormals) {\n      // If we use orthogonal normals, then we cannot use vertexIndices.\n      vertexPositions = individualVertexPositions;\n      vertexIndices = null;\n      vertexNormals = calculateOrthogonalVertexNormals(vertexPositions);\n    } else {\n      ({vertexPositions, vertexIndices} = dedupVertexArrayWithPositionsAndIndicesArrays(\n          individualVertexPositions));\n      vertexNormals = vertexPositions;\n    }\n\n    const textureCoordinates = calculateLatLongTextureCoordinates(vertexPositions);\n\n    const elementCount = vertexIndices ? vertexIndices.length : vertexPositions.length / 3;\n\n    return {\n      vertexPositions: vertexPositions,\n      vertexNormals: vertexNormals,\n      textureCoordinates: textureCoordinates,\n      vertexIndices: vertexIndices,\n      elementCount: elementCount\n    };\n  },\n\n  /**\n   * @param {SphericalRenderableShapeParams} params\n   * @returns {string}\n   */\n  getCacheId(params) {\n    return `${getCacheKey(params)}:${params.divisionsCount}`;\n  }\n};\n\nexport {latLongSphereRenderableShapeFactory};\n","import {calculateOrthogonalVertexNormals} from '../../../util';\nimport {getCacheKey} from '../renderable-shape-store';\n\n/**\n * This model defines a shape configuration factory for a regular tetrahedron.\n *\n * The shape is centered around the origin.\n */\n\n// ||(VERTEX_COORDINATE, VERTEX_COORDINATE, VERTEX_COORDINATE)|| = 1\nconst VERTEX_COORDINATE = 0.5773502588272095;\n\nconst vertexPositions = [\n  // Left-top-near face\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  -VERTEX_COORDINATE,\n\n  // Right-top-far face\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  -VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n\n  // Right-bottom-near face\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, VERTEX_COORDINATE,\n\n  // Left-bottom-far face\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  VERTEX_COORDINATE, -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE, -VERTEX_COORDINATE\n];\n\n// 1 - Math.sqrt(3) / 2\nconst TEXTURE_BASE_COORDINATE = 0.13397459621;\n\nconst textureCoordinates = [\n  // Left-top-near face\n  0, TEXTURE_BASE_COORDINATE,\n  0.5, 1,\n  1, TEXTURE_BASE_COORDINATE,\n\n  // Right-top-far face\n  0, TEXTURE_BASE_COORDINATE,\n  0.5, 1,\n  1, TEXTURE_BASE_COORDINATE,\n\n  // Right-bottom-near face\n  0, TEXTURE_BASE_COORDINATE,\n  0.5, 1,\n  1, TEXTURE_BASE_COORDINATE,\n\n  // Left-bottom-far face\n  0, TEXTURE_BASE_COORDINATE,\n  0.5, 1,\n  1, TEXTURE_BASE_COORDINATE\n];\n\nconst tetrahedronRenderableShapeFactory = {\n  shapeId: 'TETRAHEDRON',\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {RenderableShape}\n   */\n  getRenderableShape: params => {\n    const vertexNormals = params.isUsingSphericalNormals\n        ? vertexPositions\n        : calculateOrthogonalVertexNormals(vertexPositions);\n\n    return {\n      vertexPositions: vertexPositions,\n      vertexNormals: vertexNormals,\n      textureCoordinates: textureCoordinates,\n      vertexIndices: null,\n      elementCount: vertexPositions.length / 3\n    };\n  },\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {string}\n   */\n  getCacheId(params) {\n    return getCacheKey(params);\n  }\n};\n\nexport {tetrahedronRenderableShapeFactory};\n","import {\n  animator,\n  PersistentAnimationJob\n}\nfrom 'lsl-animatex';\nimport { PhysicsEngine } from 'lsl-physx';\nimport {\n  ProgramWrapper,\n  programWrapperStore,\n  textureStore\n}\nfrom '../program-wrapper';\nimport {\n  bindFramebuffer,\n  bindGLContextToViewportDimensions,\n  getWebGLContext,\n  getViewportHeight,\n  getViewportWidth,\n}\nfrom '../util';\n\n/**\n * This top-level Controller class initializes and runs the rest of the app.\n */\nclass GrafxController extends PersistentAnimationJob {\n  constructor() {\n    super();\n\n    this._canvas = null;\n    this._gl = null;\n    this._scene = null;\n    this._currentProgramWrapper = null;\n  }\n\n  /**\n   * Initializes the app. After this completes successfully, call run to actually start the app.\n   *\n   * @param {HTMLCanvasElement} canvas\n   * @param {Array.<ProgramWrapperConfig>} programConfigs Configurations for program wrappers that\n   * should be pre-cached before starting the rest of the app.\n   * @param {Array.<String>} texturePaths Texture images that should be pre-cached before\n   * starting the rest of the app.\n   * @param {Function.<Scene>} sceneFactory\n   * @returns {Promise}\n   */\n  initialize(canvas, programConfigs, texturePaths, sceneFactory) {\n    this._canvas = canvas;\n\n    return Promise.resolve()\n      .then(() => this._setUpWebGLContext())\n      .then(() => Promise.all([\n        this._preCachePrograms(programConfigs),\n        this._preCacheTextures(texturePaths)\n      ]))\n      .then(() => this._setUpScene(sceneFactory));\n  }\n\n  destroy() {}\n\n  reset() {\n    // FIXME: Will it be easier to replace this with initialize?\n    this._scene.reset();\n  }\n\n  /**\n   * Runs the app. This should be called after initialize.\n   *\n   * A few things happen if this is run in dev mode:\n   * - The draw and update steps of each frame are wrapped in a try/catch block.\n   * - This method returns a Promise that rejects if an error is throw during any update or draw\n   *   step and resolves when this controller has finished (currently never)\n   */\n  run() {\n    this._startAnimator();\n  }\n\n  _startAnimator() { // FIXME: Decouple physx\n    animator.startJob(PhysicsEngine.instance);\n    animator.startJob(this);\n  }\n\n  /**\n   * Updates the scene.\n   *\n   * This updates all of the current parameters for each component in the scene for the current\n   * frame. However, this does not render anything. Rendering is done by a following call to the\n   * draw function.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  update(currentTime, deltaTime) {\n    this._scene.updateSelfAndChildren(currentTime, deltaTime);\n  }\n\n  /**\n   * Draws the scene.\n   *\n   * This renders the current frame for all components in the scene. This assumes that all relevant\n   * parameter updates for this frame have already been computed by a previous call to _updateScene.\n   */\n  draw() {\n    // Clear the canvas before we start drawing on it.\n    this._gl.clear(this._gl.COLOR_BUFFER_BIT | this._gl.DEPTH_BUFFER_BIT);\n\n    // If we are using a post-processing program, then we need to render models to a framebuffer\n    // rather than directly to the canvas.\n    if (programWrapperStore.isUsingPostProcessingPrograms) {\n      bindFramebuffer(this._gl, programWrapperStore.modelsFramebuffer);\n      this._gl.clear(this._gl.COLOR_BUFFER_BIT | this._gl.DEPTH_BUFFER_BIT);\n    }\n\n    // Draw each program separately. This minimizes how many times we need to switch programs by\n    // grouping all of the draw calls for models that use the same program/shaders.\n    programWrapperStore.forEachModelProgram((programWrapper, drawFrameHandlers) =>\n      this._drawModelProgram(programWrapper, drawFrameHandlers));\n    programWrapperStore.forEachPostProcessingProgram(\n      (programWrapper) => this._drawPostProcessingProgram(programWrapper));\n  }\n\n  /**\n   * For the given program key, this binds the registered shader program to the GL rendering context\n   * and calls each of the registered draw-frame handlers.\n   *\n   * @param {ProgramWrapper|GroupProgramWrapper} programWrapper\n   * @param {Set.<Function>} [drawFrameHandlers]\n   * @private\n   */\n  _drawModelProgram(programWrapper, drawFrameHandlers) {\n    // Check whether we need to switch programs (always true if there is more than one program\n    // registered).\n    if (this._currentProgramWrapper !== programWrapper) {\n      programWrapper.setProgram(this._gl);\n      this._currentProgramWrapper = programWrapper;\n    }\n\n    // Call each of the draw-frame handlers that use the current rendering program.\n    drawFrameHandlers.forEach(drawFrameHandler => drawFrameHandler());\n  }\n\n  /**\n   * For the given program key, this binds the registered shader program to the GL rendering context\n   * and calls each of the registered draw-frame handlers.\n   *\n   * @param {ProgramWrapper|GroupProgramWrapper} programWrapper\n   * @private\n   */\n  _drawPostProcessingProgram(programWrapper) {\n    this._currentProgramWrapper = programWrapper;\n    programWrapper.draw(this._gl);\n  }\n\n  /**\n   * Initializes the WebGL rendering context.\n   *\n   * @private\n   */\n  _setUpWebGLContext() {\n    // Get the WebGL rendering context.\n    try {\n      this._gl = getWebGLContext(this._canvas);\n    }\n    catch (e) {\n      alert('WebGL is not supported by your browser! :(');\n      throw e;\n    }\n\n    // Have the canvas context match the resolution of the window's viewport.\n    bindGLContextToViewportDimensions(this._canvas, this._gl, () => this._updateAspectRatio());\n\n    // Clear everything to black.\n    this._gl.clearColor(0, 0, 0, 1);\n    this._gl.clearDepth(1);\n\n    // Enable depth testing.\n    this._gl.enable(this._gl.DEPTH_TEST);\n    this._gl.depthFunc(this._gl.LEQUAL);\n  }\n\n  /**\n   * Loads, compiles, caches, and initializes some rendering programs.\n   *\n   * @param {Array.<ProgramWrapperConfig>} programConfigs\n   * @returns {Promise}\n   * @private\n   */\n  _preCachePrograms(programConfigs) {\n    const promises =\n      programConfigs.map(config => programWrapperStore.loadProgramWrapper(this._gl, config));\n    return Promise.all(promises);\n  }\n\n  /**\n   * Loads, compiles, and caches some textures.\n   *\n   * @param {Array.<String>} texturePaths\n   * @returns {Promise}\n   * @private\n   */\n  _preCacheTextures(texturePaths) {\n    return Promise.all(texturePaths\n      .map(texturePath => textureStore.loadTexture(this._gl, texturePath)));\n  }\n\n  /**\n   * Initializes the scene.\n   *\n   * @param {Function.<Scene>} sceneFactory\n   * @returns {Promise}\n   * @abstract\n   * @protected\n   */\n  _setUpScene(sceneFactory) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * @protected\n   */\n  _updateAspectRatio() {\n    this._scene.camera.aspectRatio = getViewportWidth() / getViewportHeight();\n    _resizeFramebuffersToMatchViewportSize(this._gl);\n  }\n\n  /**\n   * @returns {mat4}\n   * @protected\n   */\n  _getViewMatrix() {\n    return this._scene.camera.viewMatrix;\n  }\n\n  /**\n   * @returns {mat4}\n   * @protected\n   */\n  _getProjectionMatrix() {\n    return this._scene.camera.projectionMatrix;\n  }\n}\n\n/**\n * @param {WebGLRenderingContext} gl\n * @private\n */\nfunction _resizeFramebuffersToMatchViewportSize(gl) {\n  if (programWrapperStore.isUsingPostProcessingPrograms) {\n    const width = getViewportWidth();\n    const height = getViewportHeight();\n\n    // Update the per-model framebuffer texture.\n    const texture = programWrapperStore.modelsTexture;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n    // Update the per-model framebuffer depth render buffer.\n    const renderBuffer = programWrapperStore.modelsRenderBuffer;\n    gl.bindRenderbuffer(gl.RENDERBUFFER, renderBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);\n\n    // Update the post-processing framebuffer textures.\n    programWrapperStore.forEachPostProcessingProgram(programWrapper => {\n      programWrapper.config.childrenFramebufferIds.forEach(id => {\n        const texture = programWrapperStore.getTexture(id);\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n      });\n    });\n  }\n}\n\nexport { GrafxController };\n","/**\n * This class defines a light source.\n */\nclass Light {\n  constructor() {\n    // TODO\n  }\n\n  // TODO: Implement this.\n}\n\nexport {Light};\n","import { ModelGroupController } from '../models';\n\n/**\n * This class handles the overall scene.\n */\nclass Scene extends ModelGroupController {\n  /**\n   * @param {ModelGroupControllerConfig} modelControllerParams\n   */\n  constructor(modelControllerParams) {\n    super(modelControllerParams);\n\n    // Scene is an abstract class. It should not be instantiated directly.\n    if (new.target === Scene) {\n      throw new TypeError('Cannot construct Scene instances directly');\n    }\n\n    this._getWorldTransform = () => this.worldTransform;\n    this._lights = [];\n    this._camera = null;\n  }\n\n  reset() {\n    super.reset();\n    this._lights.forEach(light => light.reset());\n    this._camera.reset();\n  }\n\n  /**\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  updateChildren(currentTime, deltaTime) {\n    super.updateChildren(currentTime, deltaTime);\n    this._camera.update(currentTime, deltaTime);\n  }\n\n  /** @returns {Camera} */\n  get camera() {\n    return this._camera;\n  }\n}\n\nexport { Scene };\n","export * from './src/geometry';\nexport * from './src/gl-util';\nexport * from './src/hash-map';\nexport * from './src/util';\n","/**\n * This module defines a collection of static geometry utility functions.\n */\n\nimport {randomFloatInRange} from './util';\n\nconst EPSILON = 0.0000001;\nconst DEG_TO_RAD_RATIO = Math.PI / 180;\nconst RAD_TO_DEG_RATIO = 180 / Math.PI;\nconst HALF_PI = Math.PI / 2;\nconst TWO_PI = Math.PI * 2;\n\n/**\n * @param {number} deg\n * @returns {number}\n */\nfunction degToRad(deg) {\n  return deg * DEG_TO_RAD_RATIO;\n}\n\n/**\n * @param {number} rad\n * @returns {number}\n */\nfunction radToDeg(rad) {\n  return rad * RAD_TO_DEG_RATIO;\n}\n\n/**\n * This checks whether two floating-point numbers are close enough that they could be equal if not\n * for round-off errors.\n *\n * @param {number} a\n * @param {number} b\n * @returns {boolean}\n */\nfunction areClose(a, b) {\n  const diff = a - b;\n  return (diff > 0 ? diff : -diff) < EPSILON;\n}\n\n/**\n * @param {vec3} a\n * @param {vec3} b\n * @returns {boolean}\n */\nfunction areVec3sEqual(a, b) {\n  return a[0] === b[0] &&\n      a[1] === b[1] &&\n      a[2] === b[2];\n}\n\n/**\n * @param {vec3} v\n * @returns {string}\n */\nfunction vec3ToString(v) {\n  return `(${v[0]},${v[1]},${v[2]})`;\n}\n\n/**\n * TODO: This finds a random point with uniform probability within a cubic area, which biases the resulting vector toward the corners of this cubic area. Re-write this to produce an unbiased vector.\n *\n * @param {number} [scale=1]\n * @returns {vec3}\n */\nfunction createRandomVec3(scale = 1) {\n  const v = vec3.create();\n  return setRandomVec3(v, scale);\n}\n\n/**\n * TODO: This finds a random point with uniform probability within a cubic area, which biases the resulting vector toward the corners of this cubic area. Re-write this to produce an unbiased vector.\n *\n * @param {vec3} v\n * @param {number} [scale=1]\n * @returns {vec3}\n */\nfunction setRandomVec3(v, scale = 1) {\n  vec3.set(v, Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5);\n  vec3.normalize(v, v);\n  vec3.scale(v, v, scale);\n  return v;\n}\n\n/**\n * Calculates a vector that is orthogonal to the given vector.\n *\n * TODO: This finds a random point with uniform probability within a cubic area, which biases the resulting vector toward the corners of this cubic area. Re-write this to produce an unbiased vector.\n *\n * @param {vec3} basis\n * @param {number} [scale=1]\n * @returns {vec3}\n */\nfunction createRandomOrthogonalVec3(basis, scale = 1) {\n  const result = vec3.create();\n  return setRandomOrthogonalVec3(result, basis, scale);\n}\n\n/**\n * Calculates a vector that is orthogonal to the given vector.\n *\n * TODO: This finds a random point with uniform probability within a cubic area, which biases the resulting vector toward the corners of this cubic area. Re-write this to produce an unbiased vector.\n *\n * @param {vec3} result\n * @param {vec3} basis\n * @param {number} [scale=1]\n * @returns {vec3}\n */\nfunction setRandomOrthogonalVec3(result, basis, scale = 1) {\n  setRandomVec3(result);\n  // This is based on the dot and cross products and the fact that the dot product for two\n  // orthogonal vectors is zero.\n  result[2] = -(basis[0] * result[0] + basis[1] * result[1]) / basis[2];\n  vec3.normalize(result, result);\n  vec3.scale(result, result, scale);\n  return result;\n}\n\n/**\n * @param {vec3} avg\n * @param {vec3} range\n * @returns {vec3}\n * @private\n */\nfunction randomVec3InRange(avg, range) {\n  const position = vec3.create();\n  for (let i = 0; i < 3; i++) {\n    const min = avg[i] - range[i] / 2;\n    const max = avg[i] + range[i] / 2;\n    position[i] = randomFloatInRange(min, max);\n  }\n  return position;\n}\n\n/**\n * Rotates the given vector around a random orthogonal axis by a random angle within the given angle\n * bounds.\n *\n * @param {vec3} v\n * @param {number} minRotationAngle\n * @param {number} maxRotationAngle\n */\nfunction addRandomRotationToVector(v, minRotationAngle, maxRotationAngle) {\n  // Create a random orthogonal axis.\n  const rotationAxis = createRandomVec3();\n  vec3.cross(rotationAxis, rotationAxis, v);\n  vec3.normalize(rotationAxis, rotationAxis);\n\n  // Create a random angle.\n  const rotationAngle = randomFloatInRange(minRotationAngle, maxRotationAngle);\n\n  // Create a rotation quaternion.\n  const rotation = quat.create();\n  quat.setAxisAngle(rotation, rotationAxis, rotationAngle);\n\n  // Apply the rotation to the vector.\n  vec3.transformQuat(v, v, rotation);\n}\n\n/**\n * @param {quat} out\n * @param {quat} a\n * @param {quat} b\n * @param {number} scale\n * @returns {quat}\n */\nfunction scaleAndAddQuat(out, a, b, scale) {\n  return quat.set(out,\n      a[0] + b[0] * scale,\n      a[1] + b[1] * scale,\n      a[2] + b[2] * scale,\n      a[3] + b[3] * scale);\n}\n\n/**\n * @param {vec3} v\n * @returns {number}\n */\nfunction getMaxVec3Dimension(v) {\n  let max = v[0] > v[1] ? v[0] : v[1];\n  max = max > v[2] ? max : v[2];\n  return max;\n}\n\nexport {\n  EPSILON,\n  HALF_PI,\n  TWO_PI,\n  degToRad,\n  radToDeg,\n  areClose,\n  areVec3sEqual,\n  vec3ToString,\n  createRandomVec3,\n  setRandomVec3,\n  createRandomOrthogonalVec3,\n  setRandomOrthogonalVec3,\n  randomVec3InRange,\n  addRandomRotationToVector,\n  scaleAndAddQuat,\n  getMaxVec3Dimension,\n};\n","/**\n * This module defines a collection of static general utility functions for WebGL.\n */\n\nimport {HashMap} from './hash-map';\nimport {HALF_PI, TWO_PI} from './geometry';\nimport {debounce, isInDevMode, loadText} from './util';\nimport {programWrapperStore} from '../../program-wrapper/src/program-wrapper-store';\n\nlet viewportWidth = 10;\nlet viewportHeight = 10;\n\n/**\n * @param {HTMLCanvasElement} canvas\n * @returns {?WebGLRenderingContext}\n * @throws If unable to get a WebGL context.\n */\nfunction getWebGLContext(canvas) {\n  const params = {alpha: false};\n  // Try to grab the standard context. If it fails, fallback to the experimental context.\n  return canvas.getContext('webgl', params) || canvas.getContext('experimental-webgl', params);\n}\n\n/**\n * @param {WebGLRenderingContext} gl\n * @returns {?WebGLBuffer}\n * @throws If unable to create a buffer object.\n */\nfunction createBuffer(gl) {\n  const buffer = gl.createBuffer();\n  if (!buffer) {\n    throw new Error('An error occurred creating the buffer object');\n  }\n  return buffer;\n}\n// TODO: use all this helper stuff in the programWrapper logic?\n/**\n * @param {WebGLRenderingContext} gl\n * @param {WebGLProgram} program\n * @param {string} locationName\n * @returns {number}\n * @throws If unable to get an attribute location for the given name.\n */\nfunction getAttribLocation(gl, program, locationName) {\n  const attribLocation = gl.getAttribLocation(program, locationName);\n  if (attribLocation < 0) {\n    throw new Error(`An error occurred getting the attribute location: ${locationName}`);\n  }\n  return attribLocation;\n}\n\n/**\n * @param {WebGLRenderingContext} gl\n * @param {WebGLShader} vertexShader\n * @param {WebGLShader} fragmentShader\n * @returns {WebGLProgram}\n * @throws If unable to link the program.\n */\nfunction buildProgram(gl, vertexShader, fragmentShader) {\n  const program = gl.createProgram();\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, fragmentShader);\n  gl.linkProgram(program);\n\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    const infoLog = gl.getProgramInfoLog(program);\n    console.error('An error occurred linking the shader program', infoLog);\n    throw new Error('An error occurred linking the shader program');\n  }\n\n  return program;\n}\n\n/**\n * @param {WebGLRenderingContext} gl\n * @param {string} shaderSource\n * @param {boolean} isFragmentShader\n * @returns {WebGLShader}\n * @throws If unable to compile the shader.\n */\nfunction buildShader(gl, shaderSource, isFragmentShader) {\n  const shaderType = isFragmentShader ? gl.FRAGMENT_SHADER : gl.VERTEX_SHADER;\n  const shader = gl.createShader(shaderType);\n  gl.shaderSource(shader, shaderSource);\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    const infoLog = gl.getShaderInfoLog(shader);\n    console.error('An error occurred compiling the shader', infoLog);\n    throw new Error('An error occurred compiling the shader');\n  }\n\n  return shader;\n}\n\n/**\n * Loads a shader program by scouring the current document, looking for a script with the specified\n * ID.\n *\n * @param {WebGLRenderingContext} gl\n * @param {string} url\n * @returns {Promise.<WebGLShader, Error>}\n */\nfunction loadShader(gl, url) {\n  return loadText(url)\n      .then(shaderSource => buildShader(gl, shaderSource, url.endsWith('.frag')));\n}\n\n/**\n * Loads the shader source code from the given URLs, compiles the shader source code, and creates\n * a program from the resulting shaders.\n *\n * @param {WebGLRenderingContext} gl\n * @param {string} vertexShaderUrl\n * @param {string} fragmentShaderUrl\n * @returns {Promise.<WebGLProgram, Error>}\n * @throws If any error occurs while loading and building the shaders and program.\n */\nfunction loadProgram(gl, vertexShaderUrl, fragmentShaderUrl) {\n  return Promise.all([\n        vertexShaderUrl,\n        fragmentShaderUrl\n      ].map(url => loadShader(gl, url)))\n      .then(shaders => {\n        const vertexShader = shaders[0];\n        const fragmentShader = shaders[1];\n\n        return buildProgram(gl, vertexShader, fragmentShader);\n      });\n}\n\n/**\n * Create, bind, and move the given raw data into a WebGL buffer.\n *\n * @param {WebGLRenderingContext} gl\n * @param {Array.<Number>} rawData A plain, flat array containing the data to bind to a buffer.\n * @param {number} [target=gl.ARRAY_BUFFER] An enum describing the type of this buffer; one of:\n *   - gl.ARRAY_BUFFER,\n *   - gl.ELEMENT_ARRAY_BUFFER.\n * @param {number} [usage=gl.STATIC_DRAW] An enum describing how this buffer is going to be used;\n * one of:\n *   - gl.STATIC_DRAW,\n *   - gl.DYNAMIC_DRAW,\n *   - gl.STREAM_DRAW.\n * @returns {WebGLBuffer}\n */\nfunction createBufferFromData(gl, rawData, target, usage) {\n  target = target || gl.ARRAY_BUFFER;\n  usage = usage || gl.STATIC_DRAW;\n  const typedArray = target === gl.ARRAY_BUFFER ? new Float32Array(rawData) : new Uint16Array(rawData);\n\n  const buffer = gl.createBuffer();\n  gl.bindBuffer(target, buffer);\n  gl.bufferData(target, typedArray, usage);\n\n  // Making the original data visible on the buffer object is helpful for debugging.\n  if (isInDevMode) {\n    buffer.rawData = typedArray;\n  }\n\n  return buffer;\n}\n\n/**\n * Adjusts the dimensions of the given element to match those of the viewport. Also, when the\n * viewport is resized, the given element will also be resized to match.\n *\n * @param {HTMLCanvasElement} canvas\n * @param {WebGLRenderingContext} gl\n * @param {Function} onGLResized\n * @param {?Number} [updateInterval=150]\n */\nfunction bindGLContextToViewportDimensions(canvas, gl, onGLResized, updateInterval = 150) {\n  _resizeGLContextToMatchViewportDimensions(canvas, gl);\n  const debouncedResize =\n      debounce(_ => {\n        _resizeGLContextToMatchViewportDimensions(canvas, gl);\n        onGLResized();\n      }, updateInterval);\n  window.addEventListener('resize', debouncedResize);\n}\n\n/**\n * Resizes the given element to match the dimensions of the viewport components.\n *\n * @param {HTMLCanvasElement} canvas\n * @param {WebGLRenderingContext} gl\n * @private\n */\nfunction _resizeGLContextToMatchViewportDimensions(canvas, gl) {\n  // Account for high-definition DPI displays.\n  const devicePixelToCssPixelRatio = window.devicePixelRatio || 1;\n  viewportWidth = Math.floor(canvas.clientWidth * devicePixelToCssPixelRatio);\n  viewportHeight = Math.floor(canvas.clientHeight * devicePixelToCssPixelRatio);\n  canvas.width = viewportWidth;\n  canvas.height = viewportHeight;\n  gl.viewport(0, 0, viewportWidth, viewportHeight);\n}\n\n/**\n * @returns {number}\n */\nfunction getViewportWidth() {\n  return viewportWidth;\n}\n\n/**\n * @returns {number}\n */\nfunction getViewportHeight() {\n  return viewportHeight;\n}\n\n/**\n * Binds a framebuffer to the GL context.\n *\n * @param {WebGLRenderingContext} gl\n * @param {WebGLFramebuffer} framebuffer\n */\nfunction bindFramebuffer(gl, framebuffer, width, height) {\n  // FIXME: Remove or add back in?\n  // width = width || getViewportWidth();\n  // height = height || getViewportHeight();\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n  // FIXME: Remove or add back in?\n  // gl.viewport(0, 0, width, height);\n}\n\n/**\n * Creates a framebuffer and attaches a texture to the framebuffer.\n *\n * This means that when we bind to the framebuffer, draw calls will render to the given texture.\n *\n * @param {WebGLRenderingContext} gl\n * @param {WebGLTexture} texture\n * @param {WebGLRenderBuffer} [renderBuffer]\n * @returns {WebGLFramebuffer}\n */\nfunction createFramebuffer(gl, texture, renderBuffer) {\n  const framebuffer = gl.createFramebuffer();\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  if (renderBuffer) {\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderBuffer);\n  }\n\n  return framebuffer;\n}\n\n/**\n * Creates a texture for rendering to.\n *\n * @param {WebGLRenderingContext} gl\n * @param {number} [width] Defaults to the viewport width stored in gl-util.\n * @param {number} [height] Defaults to the viewport height stored in gl-util.\n * @returns {WebGLTexture}\n */\nfunction createTextureForRendering(gl, width, height) {\n  width = width || getViewportWidth();\n  height = height || getViewportHeight();\n\n  // TODO: Double-check these params\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n  return texture;\n}\n\n/**\n * Creates a render buffer.\n *\n * @param {WebGLRenderingContext} gl\n * @param {number} [width] Defaults to the viewport width stored in gl-util.\n * @param {number} [height] Defaults to the viewport height stored in gl-util.\n * @returns {WebGLRenderBuffer}\n */\nfunction createRenderBuffer(gl, width, height) {\n  width = width || getViewportWidth();\n  height = height || getViewportHeight();\n\n  const renderBuffer = gl.createRenderbuffer();\n  gl.bindRenderbuffer(gl.RENDERBUFFER, renderBuffer);\n  gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);\n\n  return renderBuffer;\n}\n\nconst _SQUARE_COORDINATES_2D = [\n  0, 0,\n  1, 0,\n  0, 1,\n\n  1, 0,\n  1, 1,\n  0, 1,\n];\n\n/**\n * @param {WebGLRenderingContext} gl\n * @returns {AttributeConfig}\n */\nfunction create2DSquarePositionsConfig(gl) {\n  const positionsBuffer = createBufferFromData(gl, _SQUARE_COORDINATES_2D);\n  return {\n    buffer: positionsBuffer,\n    size: 2,\n    type: gl.FLOAT,\n    normalized: false,\n    stride: 0,\n    offset: 0\n  };\n}\n\n//\n// Geometrical calculations.\n//\n\n/**\n * Given an array of individual vertex positions and an array of vertex indices, creates an expanded\n * array of the positions grouped by the triangles they form.\n *\n * @param {Array.<Number>} individualVertexPositions\n * @param {Array.<Number>} vertexIndices\n * @returns {Array.<Number>}\n */\nfunction expandVertexIndicesToDuplicatePositions(individualVertexPositions, vertexIndices) {\n  const expandedVertexPositions = [];\n\n  for (let i = 0, j = 0, k = 0, count = vertexIndices.length; i < count; i++, k += 3) {\n    j = vertexIndices[i] * 3;\n\n    expandedVertexPositions[k] = individualVertexPositions[j];\n    expandedVertexPositions[k + 1] = individualVertexPositions[j + 1];\n    expandedVertexPositions[k + 2] = individualVertexPositions[j + 2];\n  }\n\n  return expandedVertexPositions;\n}\n\n/**\n * Computes normal vectors that are each orthogonal to the triangles they are a part of.\n *\n * The given vertices should represent individual triangles whose vertices are defined in clockwise\n * order (as seen when looking at the exterior side).\n *\n * @param {Array.<Number>} vertices\n * @returns {Array.<Number>}\n */\nfunction calculateOrthogonalVertexNormals(vertices) {\n  const vertex1 = vec3.create();\n  const vertex2 = vec3.create();\n  const vertex3 = vec3.create();\n  const vectorA = vec3.create();\n  const vectorB = vec3.create();\n  const normal1 = vec3.create();\n  const normal2 = vec3.create();\n  const normal3 = vec3.create();\n\n  const normals = [];\n\n  // Loop over each triangle in the flattened vertex array.\n  for (let i = 0, count = vertices.length; i < count; i += 9) {\n    // Get the vertices of the current triangle from the flattened array.\n    vec3.set(vertex1, vertices[i + 0], vertices[i + 1], vertices[i + 2]);\n    vec3.set(vertex2, vertices[i + 3], vertices[i + 4], vertices[i + 5]);\n    vec3.set(vertex3, vertices[i + 6], vertices[i + 7], vertices[i + 8]);\n\n    // Compute the normals.\n    vec3.subtract(vectorA, vertex3, vertex1);\n    vec3.subtract(vectorB, vertex2, vertex1);\n    vec3.cross(normal1, vectorA, vectorB);\n    vec3.normalize(normal1, normal1);\n\n    vec3.subtract(vectorA, vertex1, vertex2);\n    vec3.subtract(vectorB, vertex3, vertex2);\n    vec3.cross(normal2, vectorA, vectorB);\n    vec3.normalize(normal2, normal2);\n\n    vec3.subtract(vectorA, vertex2, vertex3);\n    vec3.subtract(vectorB, vertex1, vertex3);\n    vec3.cross(normal3, vectorA, vectorB);\n    vec3.normalize(normal3, normal3);\n\n    // Save the normal vectors in a flattened array.\n    normals[i + 0] = normal1[0];\n    normals[i + 1] = normal1[1];\n    normals[i + 2] = normal1[2];\n    normals[i + 3] = normal2[0];\n    normals[i + 4] = normal2[1];\n    normals[i + 5] = normal2[2];\n    normals[i + 6] = normal3[0];\n    normals[i + 7] = normal3[1];\n    normals[i + 8] = normal3[2];\n  }\n\n  return normals;\n}\n\nconst MAX_TEXTURE_V_COORDINATE_DELTA = 0.5;\n\n/**\n * Calculates lat-long texture coordinates for the given vertex positions.\n *\n * @param {Array.<Number>} vertexPositions\n * @returns {Array.<Number>}\n * @private\n */\nfunction calculateLatLongTextureCoordinates(vertexPositions) {\n  const currentVertexPosition = vec3.create();\n  const currentTextureCoordinates = vec2.create();\n  const textureCoordinates = [];\n\n  // Calculate the texture coordinates of each vertex.\n  for (let i = 0, j = 0, count = vertexPositions.length; i < count; i += 3, j += 2) {\n    vec3.set(currentVertexPosition,\n        vertexPositions[i], vertexPositions[i + 1], vertexPositions[i + 2]);\n    _getTextureCoordinatesOfLatLongPosition(currentTextureCoordinates, currentVertexPosition);\n    textureCoordinates[j] = currentTextureCoordinates[0];\n    textureCoordinates[j + 1] = currentTextureCoordinates[1];\n  }\n\n  _correctTextureForTrianglesAroundSeam(textureCoordinates);\n\n  return textureCoordinates;\n}\n\n/**\n * Calculates cylindrical texture coordinates for the given vertex positions.\n *\n * This assumes the cylinder is aligned with the z-axis and centered at the origin.\n *\n * @param {Array.<Number>} vertexPositions\n * @returns {Array.<Number>}\n * @private\n */\nfunction calculateCylindricalTextureCoordinates(vertexPositions) {\n  const currentVertexPosition = vec3.create();\n  const currentTextureCoordinates = vec2.create();\n  const textureCoordinates = [];\n\n  // Calculate the texture coordinates of each vertex.\n  for (let i = 0, j = 0, count = vertexPositions.length; i < count; i += 3, j += 2) {\n    vec3.set(currentVertexPosition,\n        vertexPositions[i], vertexPositions[i + 1], vertexPositions[i + 2]);\n    _getTextureCoordinatesOfCylindricalPosition(currentTextureCoordinates, currentVertexPosition);\n    textureCoordinates[j] = currentTextureCoordinates[0];\n    textureCoordinates[j + 1] = currentTextureCoordinates[1];\n  }\n\n  _correctTextureForTrianglesAroundSeam(textureCoordinates);\n\n  return textureCoordinates;\n}\n\n/**\n * @param {Array.<Number>} textureCoordinates\n */\nfunction _correctTextureForTrianglesAroundSeam(textureCoordinates) {\n  let v1;\n  let v2;\n  let v3;\n\n  // Determine which triangles span the seam across 0/2PI, and correct their textures.\n  for (let i = 0, count = textureCoordinates.length; i < count; i += 6) {\n    v1 = textureCoordinates[i];\n    v2 = textureCoordinates[i + 2];\n    v3 = textureCoordinates[i + 4];\n\n    if (v3 - v1 > MAX_TEXTURE_V_COORDINATE_DELTA || v2 - v1 > MAX_TEXTURE_V_COORDINATE_DELTA) {\n      textureCoordinates[i]++;\n    }\n    if (v3 - v2 > MAX_TEXTURE_V_COORDINATE_DELTA || v1 - v2 > MAX_TEXTURE_V_COORDINATE_DELTA) {\n      textureCoordinates[i + 2]++;\n    }\n    if (v2 - v3 > MAX_TEXTURE_V_COORDINATE_DELTA || v1 - v3 > MAX_TEXTURE_V_COORDINATE_DELTA) {\n      textureCoordinates[i + 4]++;\n    }\n  }\n}\n\n/**\n * Calculate the texture coordinates for a normalized point on a globe.\n *\n * @param {vec2} textureCoordinates Output parameter.\n * @param {vec3} vertexPosition Input parameter.\n * @private\n */\nfunction _getTextureCoordinatesOfLatLongPosition(textureCoordinates, vertexPosition) {\n  const x = vertexPosition[0];\n  const y = vertexPosition[1];\n  const z = vertexPosition[2];\n\n  let longitude;\n  if (y !== 0) {\n    longitude = Math.atan2(x, y);\n  } else if (x > 0) {\n    longitude = HALF_PI;\n  } else {\n    longitude = -HALF_PI;\n  }\n\n  const u = (longitude + Math.PI) / TWO_PI;\n\n  // TODO: Should I instead be calculating the v value from wrapping the texture around the globe\n  // curvature rather than simply projecting it directly?\n\n  // This assumes that the texture has been vertically distorted so that it can be directly\n  // projected onto the curvature of the globe.\n  const v = (z + 1) * 0.5;\n\n  textureCoordinates[0] = u;\n  textureCoordinates[1] = v;\n}\n\n/**\n * Calculate the texture coordinates for a normalized point on a cylinder.\n *\n * This assumes the cylinder is aligned with the z-axis and centered at the origin.\n *\n * @param {vec2} textureCoordinates Output parameter.\n * @param {vec3} vertexPosition Input parameter.\n * @private\n */\nfunction _getTextureCoordinatesOfCylindricalPosition(textureCoordinates, vertexPosition) {\n  const x = vertexPosition[0];\n  const y = vertexPosition[1];\n  const z = vertexPosition[2];\n\n  let longitude;\n  if (y !== 0) {\n    longitude = Math.atan2(x, y);\n  } else if (x > 0) {\n    longitude = HALF_PI;\n  } else {\n    longitude = -HALF_PI;\n  }\n\n  const u = (longitude + Math.PI) / TWO_PI;\n\n  const v = z > 0 ? 1 : 0;\n\n  textureCoordinates[0] = u;\n  textureCoordinates[1] = v;\n}\n\n/**\n * Expands the given vertices around the seam where longitude switches from 0 to 2PI.\n *\n * This is useful because, when applying a spherical texture using lat-long coordinates, any\n * triangle that spans the seam (from longitude 2PI to 0) would otherwise show the wrong result.\n *\n * @param {Array.<Number>} oldVertexPositions\n * @param {Array.<Number>} oldVertexIndices\n * @returns {{vertexPositions: Array.<Number>, vertexIndices: Array.<Number>}}\n */\nfunction expandVertexIndicesAroundLongitudeSeam(oldVertexPositions, oldVertexIndices) {\n  // const newVertexPositions = [];\n  // const newVertexIndices = [];\n  //\n  // ****\n  // // TODO: loop over triangles, use _getTextureCoordinatesOfLatLongPosition on each vertex,\n  // // check if two vertices in a triangle span the seam; to check the span, just check if both are\n  // // within a distance from the seam, but on opposite ends;\n  //\n  // return {\n  //   vertexPositions: newVertexPositions,\n  //   vertexIndices: newVertexIndices\n  // };\n\n  return {\n    vertexPositions: oldVertexPositions,\n    vertexIndices: oldVertexIndices\n  };\n}\n\n/**\n * Subdivides the triangles of a shape and projects all resulting vertices to a radius of one.\n *\n * @param {number} divisionFactor\n * @param {Array.<Number>} oldPositions\n * @param {Array.<Number>} [oldIndices]\n * @returns {{vertexPositions: Array.<Number>, vertexIndices: Array.<Number>}}\n */\nfunction tesselateSphere(divisionFactor, oldPositions, oldIndices) {\n  const newPositions = _expandAndTesselateTriangles(divisionFactor, oldPositions, oldIndices);\n\n  // Convert the expanded positions array into a unique positions array with a corresponding indices\n  // array.\n  const positionsAndIndices = dedupVertexArrayWithPositionsAndIndicesArrays(newPositions);\n\n  // Project the given positions to a distance of one.\n  _normalizePositions(positionsAndIndices.vertexPositions, positionsAndIndices.vertexPositions);\n\n  return positionsAndIndices;\n}\n\n/**\n * Subdivides triangles.\n *\n * This has the side-effect of flattening the given vertices into an expanded list that can contain\n * duplicate positions.\n *\n * @param {number} divisionFactor\n * @param {Array.<Number>} oldPositions\n * @param {Array.<Number>} [oldIndices]\n * @returns {Array.<Number>}\n * @private\n */\nfunction _expandAndTesselateTriangles(divisionFactor, oldPositions, oldIndices) {\n  const expandedOldPositions = oldIndices\n      ? expandVertexIndicesToDuplicatePositions(oldPositions, oldIndices)\n      : oldPositions;\n\n  const newPositions = [];\n  const a = vec3.create();\n  const b = vec3.create();\n  const c = vec3.create();\n  const aToB = vec3.create();\n  const aToC = vec3.create();\n  const bToC = vec3.create();\n  const rowDelta = vec3.create();\n  const columnDelta = vec3.create();\n  const backwardsDelta = vec3.create();\n  const rowStartPoint = vec3.create();\n  const rowColumnStartPoint = vec3.create();\n  const tempVec = vec3.create();\n\n  let oldIndex;\n  let count;\n  let newIndex;\n  let rowIndex;\n  let columnIndex;\n\n  //\n  // The basic tesselation algorithm:\n  // - Iterate across the original triangles that we are sub-dividing.\n  // - A, B, and C are the vertices of the current, original triangle.\n  // - Consider \"rows\" to iterate across the a-to-b direction and \"columns\" to iterate across the\n  //   a-to-c direction.\n  // - First calculate the distance between one row and one column.\n  // - Then loop over the rows and columns and create a the new triangle for each \"cell\".\n  //\n  //                   /\\\n  //                 B   \\--- A \"column\"\n  //                 o    \\\n  //                / \\   /\n  //               /   \\             rowDelta:      columnDelta:     backwardsDelta:\n  //              o-----o                 o             o\n  //             / \\   / \\               /               \\              o-----o\n  //            /   \\ /   \\             /                 \\\n  //           o-----o-----o           o                   o\n  //          / \\   / \\   / \\\n  //         /   \\ /   \\ /   \\\n  //        o-----o-----o-----o\n  //       / \\   / \\   / \\   / \\\n  //      /   \\ /   \\ /   \\ /   \\\n  //  A  o-----o-----o-----o-----o  C\n  //\n  //       \\_____\\\n  //           \\\n  //         A \"row\"\n  //\n\n  // Loop over the old triangles.\n  for (oldIndex = 0, newIndex = 0, count = expandedOldPositions.length;\n       oldIndex < count;\n       oldIndex += 9) {\n    // Pull out the three vertices of the current triangle.\n    vec3.set(a,\n        expandedOldPositions[oldIndex],\n        expandedOldPositions[oldIndex + 1],\n        expandedOldPositions[oldIndex + 2]);\n    vec3.set(b,\n        expandedOldPositions[oldIndex + 3],\n        expandedOldPositions[oldIndex + 4],\n        expandedOldPositions[oldIndex + 5]);\n    vec3.set(c,\n        expandedOldPositions[oldIndex + 6],\n        expandedOldPositions[oldIndex + 7],\n        expandedOldPositions[oldIndex + 8]);\n\n    vec3.subtract(aToB, b, a);\n    vec3.subtract(bToC, c, b);\n    vec3.subtract(aToC, c, a);\n\n    vec3.scale(rowDelta, aToB, 1 / divisionFactor);\n    vec3.scale(columnDelta, bToC, 1 / divisionFactor);\n    vec3.scale(backwardsDelta, aToC, 1 / divisionFactor);\n\n    // Loop over each new division (row) for the current triangle.\n    for (rowIndex = 0; rowIndex < divisionFactor; rowIndex++) {\n      vec3.scaleAndAdd(rowStartPoint, a, rowDelta, rowIndex);\n\n      // Create the first triangle in the row (address the fence-post problem).\n      newPositions[newIndex++] = rowStartPoint[0];\n      newPositions[newIndex++] = rowStartPoint[1];\n      newPositions[newIndex++] = rowStartPoint[2];\n      vec3.add(tempVec, rowStartPoint, rowDelta);\n      newPositions[newIndex++] = tempVec[0];\n      newPositions[newIndex++] = tempVec[1];\n      newPositions[newIndex++] = tempVec[2];\n      vec3.add(tempVec, rowStartPoint, backwardsDelta);\n      newPositions[newIndex++] = tempVec[0];\n      newPositions[newIndex++] = tempVec[1];\n      newPositions[newIndex++] = tempVec[2];\n\n      // Loop over the new triangles in the current division.\n      for (columnIndex = 1; columnIndex <= rowIndex; columnIndex++) {\n        vec3.scaleAndAdd(rowColumnStartPoint, rowStartPoint, columnDelta, columnIndex);\n\n        newPositions[newIndex++] = rowColumnStartPoint[0];\n        newPositions[newIndex++] = rowColumnStartPoint[1];\n        newPositions[newIndex++] = rowColumnStartPoint[2];\n        vec3.subtract(tempVec, rowColumnStartPoint, columnDelta);\n        newPositions[newIndex++] = tempVec[0];\n        newPositions[newIndex++] = tempVec[1];\n        newPositions[newIndex++] = tempVec[2];\n        vec3.add(tempVec, rowColumnStartPoint, rowDelta);\n        newPositions[newIndex++] = tempVec[0];\n        newPositions[newIndex++] = tempVec[1];\n        newPositions[newIndex++] = tempVec[2];\n\n        newPositions[newIndex++] = rowColumnStartPoint[0];\n        newPositions[newIndex++] = rowColumnStartPoint[1];\n        newPositions[newIndex++] = rowColumnStartPoint[2];\n        vec3.add(tempVec, rowColumnStartPoint, rowDelta);\n        newPositions[newIndex++] = tempVec[0];\n        newPositions[newIndex++] = tempVec[1];\n        newPositions[newIndex++] = tempVec[2];\n        vec3.add(tempVec, rowColumnStartPoint, backwardsDelta);\n        newPositions[newIndex++] = tempVec[0];\n        newPositions[newIndex++] = tempVec[1];\n        newPositions[newIndex++] = tempVec[2];\n      }\n    }\n  }\n\n  return newPositions;\n}\n\n/**\n * Projects the given positions to a distance of one.\n *\n * @param {Array.<Number>} out\n * @param {Array.<Number>} positions\n * @private\n */\nfunction _normalizePositions(out, positions) {\n  const tempVec = vec3.create();\n\n  for (let i = 0, count = positions.length; i < count; i += 3) {\n    vec3.set(tempVec, positions[i], positions[i + 1], positions[i + 2]);\n\n    vec3.normalize(tempVec, tempVec);\n\n    out[i] = tempVec[0];\n    out[i + 1] = tempVec[1];\n    out[i + 2] = tempVec[2];\n  }\n}\n\n/**\n * Given a collection of vertices that possibly contains duplicates, creates an array of the unique\n * vertex positions and an array of the indices of the original, duplicated vertices in the unique\n * array.\n *\n * This is useful for rendering using gl.drawElements (with gl.ELEMENT_ARRAY_BUFFER) instead of\n * gl.drawArrays.\n *\n * NOTE: Although this function does partially address floating-point round-off errors within the\n * given positions, it does not guarantee correctness.\n *\n * @param {Array.<Number>} oldVertexPositions\n * @returns {{vertexPositions: Array.<Number>, vertexIndices: Array.<Number>}}\n */\nfunction dedupVertexArrayWithPositionsAndIndicesArrays(oldVertexPositions) {\n  const vertexPositions = [];\n  const vertexIndices = [];\n\n  const vertexToIndexMap = new HashMap(_vertexHashFunction);\n  const vertex = vec3.create();\n  let oldCoordinateIndex;\n  let oldCoordinateCount;\n  let newVertexIndex;\n\n  // Loop over the original, duplicated vertex positions.\n  for (oldCoordinateIndex = 0, oldCoordinateCount = oldVertexPositions.length;\n       oldCoordinateIndex < oldCoordinateCount;\n       oldCoordinateIndex += 3) {\n    vec3.set(vertex,\n        oldVertexPositions[oldCoordinateIndex],\n        oldVertexPositions[oldCoordinateIndex + 1],\n        oldVertexPositions[oldCoordinateIndex + 2]);\n\n    // Has this position already been recorded?\n    if (!vertexToIndexMap.has(vertex)) {\n      // Record the index of the unique vertex position.\n      newVertexIndex = vertexPositions.length / 3;\n      vertexToIndexMap.set(vertex, newVertexIndex);\n\n      // Record the unique vertex position.\n      vertexPositions.push(vertex[0]);\n      vertexPositions.push(vertex[1]);\n      vertexPositions.push(vertex[2]);\n    }\n\n    newVertexIndex = vertexToIndexMap.get(vertex);\n\n    // Record the index of the unique position.\n    vertexIndices.push(newVertexIndex);\n  }\n\n  return {\n    vertexPositions: vertexPositions,\n    vertexIndices: vertexIndices\n  };\n}\n\nconst _VERTEX_COORDINATE_BUCKET_SIZE_DIGITS = 4;\n\n// This offset is important for preventing bucket-aligned numbers from being placed in inconsistent\n// buckets. For example, whole integer values could easily be placed in lower or higher buckets\n// depending on round-off error.\nconst _OFFSET = Math.random();\n\n/**\n * Calculates a hash code for the given vertex.\n *\n * NOTE: This does not guarantee correct results. Due to round-off error, \"equal\" coordinates could\n * be calculated is being in different buckets. Larger bucket sizes might reduce the rate of false\n * negatives, but with the trade-off of potentially introducing false positives.\n *\n * @param {vec3} vertex\n * @returns {string}\n * @private\n */\nfunction _vertexHashFunction(vertex) {\n  return `${(vertex[0] + _OFFSET).toFixed(_VERTEX_COORDINATE_BUCKET_SIZE_DIGITS)},` +\n      `${(vertex[1] + _OFFSET).toFixed(_VERTEX_COORDINATE_BUCKET_SIZE_DIGITS)},` +\n      `${(vertex[2] + _OFFSET).toFixed(_VERTEX_COORDINATE_BUCKET_SIZE_DIGITS)}`;\n}\n\n/**\n * Calculate the vertex positions for a section of a sphere.\n *\n * - These points will lie along latitude-longitude lines.\n * - The shape is centered around the origin with the poles aligned with the z-axis.\n * - The radius of the circle will be one.\n *\n * @param {number} startPitchIndex\n * @param {number} endPitchIndex\n * @param {number} deltaPitch\n * @param {number} startAzimuthIndex\n * @param {number} endAzimuthIndex\n * @param {number} deltaAzimuth\n * @return {Array.<Number>}\n * @private\n */\nfunction calculateSphericalSection(startPitchIndex, endPitchIndex, deltaPitch,\n                                   startAzimuthIndex, endAzimuthIndex, deltaAzimuth) {\n  const vertexPositions = [];\n  let vertexPositionsIndex = 0;\n\n  let pitchIndex;\n  let azimuthIndex;\n  let lowerPitch;\n  let upperPitch;\n  let lowerAzimuth;\n  let upperAzimuth;\n  let x1;\n  let y1;\n  let z1;\n  let x2;\n  let y2;\n  let z2;\n  let x3;\n  let y3;\n  let z3;\n  let x4;\n  let y4;\n  let z4;\n\n  // TODO: This implementation calculates all coordinates multiple times. Refactor it to be more\n  // efficient.\n\n  // Loop over each latitudinal strip.\n  for (pitchIndex = startPitchIndex; pitchIndex < endPitchIndex; pitchIndex++) {\n    lowerPitch = deltaPitch * pitchIndex;\n    upperPitch = deltaPitch + lowerPitch;\n\n    // Create the triangles for the strip at the current pitch.\n    for (azimuthIndex = startAzimuthIndex; azimuthIndex < endAzimuthIndex; azimuthIndex++) {\n      lowerAzimuth = deltaAzimuth * azimuthIndex;\n      upperAzimuth = deltaAzimuth + lowerAzimuth;\n\n      // The corners of the current square.\n\n      x1 = Math.sin(lowerPitch) * Math.cos(lowerAzimuth);\n      y1 = Math.sin(lowerPitch) * Math.sin(lowerAzimuth);\n      z1 = Math.cos(lowerPitch);\n\n      x2 = Math.sin(upperPitch) * Math.cos(lowerAzimuth);\n      y2 = Math.sin(upperPitch) * Math.sin(lowerAzimuth);\n      z2 = Math.cos(upperPitch);\n\n      x3 = Math.sin(lowerPitch) * Math.cos(upperAzimuth);\n      y3 = Math.sin(lowerPitch) * Math.sin(upperAzimuth);\n      z3 = Math.cos(lowerPitch);\n\n      x4 = Math.sin(upperPitch) * Math.cos(upperAzimuth);\n      y4 = Math.sin(upperPitch) * Math.sin(upperAzimuth);\n      z4 = Math.cos(upperPitch);\n\n      // The first triangle.\n\n      vertexPositions[vertexPositionsIndex] = x1;\n      vertexPositions[vertexPositionsIndex + 1] = y1;\n      vertexPositions[vertexPositionsIndex + 2] = z1;\n      vertexPositions[vertexPositionsIndex + 3] = x2;\n      vertexPositions[vertexPositionsIndex + 4] = y2;\n      vertexPositions[vertexPositionsIndex + 5] = z2;\n      vertexPositions[vertexPositionsIndex + 6] = x3;\n      vertexPositions[vertexPositionsIndex + 7] = y3;\n      vertexPositions[vertexPositionsIndex + 8] = z3;\n\n      // The second triangle.\n\n      vertexPositions[vertexPositionsIndex + 9] = x4;\n      vertexPositions[vertexPositionsIndex + 10] = y4;\n      vertexPositions[vertexPositionsIndex + 11] = z4;\n      vertexPositions[vertexPositionsIndex + 12] = x3;\n      vertexPositions[vertexPositionsIndex + 13] = y3;\n      vertexPositions[vertexPositionsIndex + 14] = z3;\n      vertexPositions[vertexPositionsIndex + 15] = x2;\n      vertexPositions[vertexPositionsIndex + 16] = y2;\n      vertexPositions[vertexPositionsIndex + 17] = z2;\n\n      vertexPositionsIndex += 18;\n    }\n  }\n\n  return vertexPositions;\n}\n\n/**\n * Calculate the vertex positions for a section of a cylinder.\n *\n * The shape is centered around the origin with the poles aligned with the z-axis.\n *\n * @param {number} cylinderBottom\n * @param {number} cylinderTop\n * @param {number} startIndex\n * @param {number} endIndex\n * @param {number} delta\n * @returns {Array.<Number>}\n * @private\n */\nfunction calculateCylindricalSection(cylinderBottom, cylinderTop, startIndex, endIndex, delta) {\n  const vertexPositions = [];\n  let vertexPositionsIndex = 0;\n\n  let index;\n  let lowerAzimuth;\n  let upperAzimuth;\n  let x1;\n  let y1;\n  let z1;\n  let x2;\n  let y2;\n  let z2;\n  let x3;\n  let y3;\n  let z3;\n  let x4;\n  let y4;\n  let z4;\n\n  // Create the triangles for the cylindrical strip.\n  for (index = startIndex; index < endIndex; index++) {\n    lowerAzimuth = delta * index;\n    upperAzimuth = delta + lowerAzimuth;\n\n    // The corners of the current square.\n\n    x1 = Math.cos(lowerAzimuth);\n    y1 = Math.sin(lowerAzimuth);\n    z1 = cylinderBottom;\n\n    x2 = Math.cos(lowerAzimuth);\n    y2 = Math.sin(lowerAzimuth);\n    z2 = cylinderTop;\n\n    x3 = Math.cos(upperAzimuth);\n    y3 = Math.sin(upperAzimuth);\n    z3 = cylinderBottom;\n\n    x4 = Math.cos(upperAzimuth);\n    y4 = Math.sin(upperAzimuth);\n    z4 = cylinderTop;\n\n    // The first triangle.\n\n    vertexPositions[vertexPositionsIndex] = x1;\n    vertexPositions[vertexPositionsIndex + 1] = y1;\n    vertexPositions[vertexPositionsIndex + 2] = z1;\n    vertexPositions[vertexPositionsIndex + 3] = x2;\n    vertexPositions[vertexPositionsIndex + 4] = y2;\n    vertexPositions[vertexPositionsIndex + 5] = z2;\n    vertexPositions[vertexPositionsIndex + 6] = x3;\n    vertexPositions[vertexPositionsIndex + 7] = y3;\n    vertexPositions[vertexPositionsIndex + 8] = z3;\n\n    // The second triangle.\n\n    vertexPositions[vertexPositionsIndex + 9] = x4;\n    vertexPositions[vertexPositionsIndex + 10] = y4;\n    vertexPositions[vertexPositionsIndex + 11] = z4;\n    vertexPositions[vertexPositionsIndex + 12] = x3;\n    vertexPositions[vertexPositionsIndex + 13] = y3;\n    vertexPositions[vertexPositionsIndex + 14] = z3;\n    vertexPositions[vertexPositionsIndex + 15] = x2;\n    vertexPositions[vertexPositionsIndex + 16] = y2;\n    vertexPositions[vertexPositionsIndex + 17] = z2;\n\n    vertexPositionsIndex += 18;\n  }\n\n  return vertexPositions;\n}\n\n/**\n * Scale and then translate the 3-dimensional positions in the given flattened array.\n *\n * The shape is centered around the origin with the poles aligned with the z-axis.\n *\n * @param {Array.<Number>} vertexPositions Output.\n * @param {number} startIndex\n * @param {number} endIndex\n * @param {vec3} scale\n * @param {vec3} translate\n * @private\n */\nfunction scaleThenTranslatePositions(vertexPositions, startIndex, endIndex, scale, translate) {\n  const scaleX = scale[0];\n  const scaleY = scale[1];\n  const scaleZ = scale[2];\n  const translateX = translate[0];\n  const translateY = translate[1];\n  const translateZ = translate[2];\n\n  for (let i = startIndex; i < endIndex; i += 3) {\n    vertexPositions[i] = vertexPositions[i] * scaleX + translateX;\n    vertexPositions[i + 1] = vertexPositions[i + 1] * scaleY + translateY;\n    vertexPositions[i + 2] = vertexPositions[i + 2] * scaleZ + translateZ;\n  }\n}\n\n// Export this module's logic\n\nexport {\n  getViewportWidth,\n  getViewportHeight,\n  getWebGLContext,\n  createBuffer,\n  getAttribLocation,\n  buildProgram,\n  buildShader,\n  loadShader,\n  loadProgram,\n  createBufferFromData,\n  bindGLContextToViewportDimensions,\n  bindFramebuffer,\n  createFramebuffer,\n  createTextureForRendering,\n  createRenderBuffer,\n  create2DSquarePositionsConfig,\n\n  expandVertexIndicesToDuplicatePositions,\n  calculateOrthogonalVertexNormals,\n  calculateLatLongTextureCoordinates,\n  calculateCylindricalTextureCoordinates,\n  expandVertexIndicesAroundLongitudeSeam,\n  tesselateSphere,\n  dedupVertexArrayWithPositionsAndIndicesArrays,\n  calculateSphericalSection,\n  calculateCylindricalSection,\n  scaleThenTranslatePositions,\n};\n\n// Some type defs to make my editor's auto-complete happy.\n\n/** @typedef {Object} WebGLProgram */\n/** @typedef {Object} WebGLShader */\n/** @typedef {Object} WebGLBuffer */\n/** @typedef {Object} WebGLTexture */\n/** @typedef {Float32Array|Array.<Number>} mat3 */\n/** @typedef {Float32Array|Array.<Number>} mat4 */\n/** @typedef {Float32Array|Array.<Number>} quat */\n/** @typedef {Float32Array|Array.<Number>} vec2 */\n/** @typedef {Float32Array|Array.<Number>} vec3 */\n/** @typedef {Float32Array|Array.<Number>} vec4 */\n","/**\n * A hash map that uses a custom hash function.\n */\nclass HashMap {\n  /**\n   * @param {Function} hashFunction\n   */\n  constructor(hashFunction) {\n    this._hashFunction = hashFunction;\n    this._map = new Map();\n  }\n\n  /**\n   * @param {Object} key\n   * @param {Object} value\n   */\n  set(key, value) {\n    const hashCode = this._hashFunction(key);\n    this._map.set(hashCode, value);\n  }\n\n  /**\n   * @param {Object} key\n   * @returns {Object}\n   */\n  get(key) {\n    const hashCode = this._hashFunction(key);\n    return this._map.get(hashCode);\n  }\n\n  /**\n   * @param {Object} key\n   * @returns {boolean}\n   */\n  has(key) {\n    const hashCode = this._hashFunction(key);\n    return this._map.has(hashCode);\n  }\n\n  /**\n   * @param {Object} item\n   * @returns {boolean}\n   */\n  remove(item) {\n    return this._map.delete(item);\n  }\n\n  /**\n   * @param {Function} callback\n   */\n  forEach(callback) {\n    this._map.forEach(callback);\n  }\n\n  clear() {\n    this._map.clear();\n  }\n\n  /**\n   * @returns {number}\n   */\n  get size() {\n    return this._map.size;\n  }\n}\n\nexport {HashMap};\n","/**\n * This module defines a collection of static general utility functions.\n */\n\n// TODO: This should be set from somewhere else (probably as a param to controller like before; but then I need to make this updatable)\nconst isInDevMode = true;\n\n/**\n * Adds an event listener for each of the given events to each of the given elements.\n *\n * @param {Array.<HTMLElement>} elements The elements to add event listeners to.\n * @param {Array.<String>} events The event listeners to add to the elements.\n * @param {Function} callback The single callback for handling the events.\n */\nfunction listenToMultipleForMultiple(elements, events, callback) {\n  elements.forEach(element => {\n    events.forEach(event => {\n      element.addEventListener(event, callback, false);\n    });\n  });\n}\n\n/**\n * Creates a DOM element with the given tag name, appends it to the given parent element, and\n * gives it the given id and classes.\n *\n * @param {string} tagName The tag name to give the new element.\n * @param {HTMLElement} [parent] The parent element to append the new element to.\n * @param {string} [id] The id to give the new element.\n * @param {Array.<String>} [classes] The classes to give the new element.\n * @returns {HTMLElement} The new element.\n */\nfunction createElement(tagName, parent, id, classes) {\n  const element = document.createElement(tagName);\n  if (parent) {\n    parent.appendChild(element);\n  }\n  if (id) {\n    element.id = id;\n  }\n  if (classes) {\n    classes.forEach(className => addClass(element, className));\n  }\n  return element;\n}\n\n/**\n * Determines whether the given element contains the given class.\n *\n * @param {HTMLElement} element The element to check.\n * @param {string} className The class to check for.\n * @returns {boolean} True if the element does contain the class.\n */\nfunction containsClass(element, className) {\n  let startIndex;\n  let indexAfterEnd;\n  startIndex = element.className.indexOf(className);\n  if (startIndex >= 0) {\n    if (startIndex === 0 || element.className[startIndex - 1] === ' ') {\n      indexAfterEnd = startIndex + className.length;\n      if (indexAfterEnd === element.className.length ||\n        element.className[indexAfterEnd] === ' ') {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/**\n * Toggles whether the given element has the given class. If the enabled argument is given, then\n * the inclusion of the class will be forced. That is, if enabled=true, then this will ensure the\n * element has the class; if enabled=false, then this will ensure the element does NOT have the\n * class; if enabled=undefined, then this will simply toggle whether the element has the class.\n *\n * @param {HTMLElement} element The element to add the class to or remove the class from.\n * @param {string} className The class to add or remove.\n * @param {boolean} [enabled] If given, then the inclusion of the class will be forced.\n */\nfunction toggleClass(element, className, enabled) {\n  if (typeof enabled === 'undefined') {\n    if (containsClass(element, className)) {\n      removeClass(element, className);\n    }\n    else {\n      addClass(element, className);\n    }\n  }\n  else if (enabled) {\n    addClass(element, className);\n  }\n  else {\n    removeClass(element, className);\n  }\n}\n\n/**\n * Gets the coordinates of the element relative to the top-left corner of the page.\n *\n * @param {HTMLElement} element The element to get the coordinates of.\n * @returns {{x: Number, y: Number}} The coordinates of the element relative to the top-left\n * corner of the page.\n */\nfunction getPageOffset(element) {\n  let x = 0;\n  let y = 0;\n  while (element) {\n    x += element.offsetLeft;\n    y += element.offsetTop;\n    element = element.offsetParent;\n  }\n  x -= document.documentElement.scrollLeft;\n  y -= document.documentElement.scrollTop;\n  return { x: x, y: y };\n}\n\n/**\n * Gets the dimensions of the viewport.\n *\n * @returns {{w: Number, h: Number}} The dimensions of the viewport.\n */\nfunction getViewportSize() {\n  let w;\n  let h;\n  if (typeof window.innerWidth !== 'undefined') {\n    // Good browsers\n    w = window.innerWidth;\n    h = window.innerHeight;\n  }\n  else if (typeof document.documentElement !== 'undefined' &&\n    typeof document.documentElement.clientWidth !== 'undefined' &&\n    document.documentElement.clientWidth !== 0) {\n    // IE6 in standards compliant mode\n    w = document.documentElement.clientWidth;\n    h = document.documentElement.clientHeight;\n  }\n  else {\n    // Older versions of IE\n    w = document.getElementsByTagName('body')[0].clientWidth;\n    h = document.getElementsByTagName('body')[0].clientHeight;\n  }\n  return { w: w, h: h };\n}\n\n/**\n * Removes the given child element from the given parent element if the child does indeed belong\n * to the parent.\n *\n * @param {HTMLElement} parent The parent to remove the child from.\n * @param {HTMLElement} child The child to remove.\n * @returns {boolean} True if the child did indeed belong to the parent.\n */\nfunction removeChildIfPresent(parent, child) {\n  if (child && child.parentNode === parent) {\n    parent.removeChild(child);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Adds the given class to the given element.\n *\n * @param {HTMLElement} element The element to add the class to.\n * @param {string} className The class to add.\n */\nfunction addClass(element, className) {\n  element.setAttribute('class', element.className + ' ' + className);\n}\n\n/**\n * Removes the given class from the given element.\n *\n * @param {HTMLElement} element The element to remove the class from.\n * @param {string} className The class to remove.\n */\nfunction removeClass(element, className) {\n  element.setAttribute('class',\n    element.className\n    .split(' ')\n    .filter(value => value !== className)\n    .join(' '));\n}\n\n/**\n * Removes all classes from the given element.\n *\n * @param {HTMLElement} element The element to remove all classes from.\n */\nfunction clearClasses(element) {\n  element.className = '';\n}\n\n/**\n * Calculates the width that the DOM would give to a div with the given text. The given tag\n * name, parent, id, and classes allow the width to be affected by various CSS rules.\n *\n * @param {string} text The text to determine the width of.\n * @param {string} tagName The tag name this text would supposedly have.\n * @param {HTMLElement} [parent] The parent this text would supposedly be a child of; defaults\n * to the document body.\n * @param {string} [id] The id this text would supposedly have.\n * @param {Array.<String>} [classes] The classes this text would supposedly have.\n * @returns {number} The width of the text under these conditions.\n */\nfunction getTextWidth(text, tagName, parent, id, classes) {\n  let tmpElement;\n  let width;\n  parent = parent || document.getElementsByTagName('body')[0];\n  tmpElement = createElement(tagName, null, id, classes);\n  tmpElement.style.position = 'absolute';\n  tmpElement.style.visibility = 'hidden';\n  tmpElement.style.whiteSpace = 'nowrap';\n  parent.appendChild(tmpElement);\n  tmpElement.innerHTML = text;\n  width = tmpElement.clientWidth;\n  parent.removeChild(tmpElement);\n  return width;\n}\n\n/**\n * Encodes and concatenates the given URL parameters into a single query string.\n *\n * @param {Object} rawParams An object whose properties represent the URL query string\n * parameters.\n * @returns {string} The query string.\n */\nfunction encodeQueryString(rawParams) {\n  let parameter;\n  let encodedParams;\n  encodedParams = [];\n  for (parameter in rawParams) {\n    if (rawParams.hasOwnProperty(parameter)) {\n      encodedParams.push(encodeURIComponent(parameter) + '=' +\n        encodeURIComponent(rawParams[parameter]));\n    }\n  }\n  return '?' + encodedParams.join('&');\n}\n\n/**\n * Retrieves the value corresponding to the given name from the given query string.\n *\n * (borrowed from http://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript)\n *\n * @param {string} queryString The query string containing the parameter.\n * @param {string} name The (non-encoded) name of the parameter value to retrieve.\n * @returns {string} The query string parameter value, or null if the parameter was not found.\n */\nfunction getQueryStringParameterValue(queryString, name) {\n  let regex;\n  let results;\n  name = encodeURIComponent(name);\n  name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n  regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)', 'i');\n  results = regex.exec(queryString);\n  return results === null ? null : decodeURIComponent(results[1].replace(/\\+/g, ' '));\n}\n\n/**\n * Sets the CSS transition style of the given element.\n *\n * @param {HTMLElement} element The element.\n * @param {number} value The transition string.\n */\nfunction setTransition(element, value) {\n  element.style.transition = value;\n  element.style.WebkitTransition = value;\n  element.style.MozTransition = value;\n  element.style.msTransition = value;\n  element.style.OTransition = value;\n}\n\n/**\n * Sets the CSS transition duration style of the given element.\n *\n * @param {HTMLElement} element The element.\n * @param {number} value The duration.\n */\nfunction setTransitionDurationSeconds(element, value) {\n  element.style.transitionDuration = value + 's';\n  element.style.WebkitTransitionDuration = value + 's';\n  element.style.MozTransitionDuration = value + 's';\n  element.style.msTransitionDuration = value + 's';\n  element.style.OTransitionDuration = value + 's';\n}\n\n/**\n * Sets the CSS transition delay style of the given element.\n *\n * @param {HTMLElement} element The element.\n * @param {number} value The delay.\n */\nfunction setTransitionDelaySeconds(element, value) {\n  element.style.transitionDelay = value + 's';\n  element.style.WebkitTransitionDelay = value + 's';\n  element.style.MozTransitionDelay = value + 's';\n  element.style.msTransitionDelay = value + 's';\n  element.style.OTransitionDelay = value + 's';\n}\n\n/**\n * Sets the userSelect style of the given element to 'none'.\n *\n * @param {HTMLElement} element\n */\nfunction setUserSelectNone(element) {\n  element.style.userSelect = 'none';\n  element.style.webkitUserSelect = 'none';\n  element.style.MozUserSelect = 'none';\n  element.style.msUserSelect = 'none';\n}\n\n/**\n * Removes any children elements from the given parent that have the given class.\n *\n * @param {HTMLElement} parent The parent to remove children from.\n * @param {string} className The class to match.\n */\nfunction removeChildrenWithClass(parent, className) {\n  let matchingChildren = parent.querySelectorAll('.' + className);\n\n  for (let i = 0, count = matchingChildren.length; i < count; i++) {\n    parent.removeChild(matchingChildren[i]);\n  }\n}\n\n/**\n * Sets the CSS transition-timing-function style of the given element with the given cubic-\n * bezier points.\n *\n * @param {HTMLElement} element The element.\n * @param {{p1x: Number, p1y: Number, p2x: Number, p2y: Number}} bezierPts The cubic-bezier\n * points to use for this timing function.\n */\nfunction setTransitionCubicBezierTimingFunction(element, bezierPts) {\n  const value = 'cubic-bezier(' + bezierPts.p1x + ',' + bezierPts.p1y + ',' + bezierPts.p2x + ',' +\n    bezierPts.p2y + ')';\n  element.style.transitionTimingFunction = value;\n  element.style.WebkitTransitionTimingFunction = value;\n  element.style.MozTransitionTimingFunction = value;\n  element.style.msTransitionTimingFunction = value;\n  element.style.OTransitionTimingFunction = value;\n}\n\n// A collection of different types of easing functions.\nconst easingFunctions = {\n  linear: t => t,\n  easeInQuad: t => t * t,\n  easeOutQuad: t => t * (2 - t),\n  easeInOutQuad: t => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t,\n  easeInCubic: t => t * t * t,\n  easeOutCubic: t => 1 + --t * t * t,\n  easeInOutCubic: t => t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,\n  easeInQuart: t => t * t * t * t,\n  easeOutQuart: t => 1 - --t * t * t * t,\n  easeInOutQuart: t => t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t,\n  easeInQuint: t => t * t * t * t * t,\n  easeOutQuint: t => 1 + --t * t * t * t * t,\n  easeInOutQuint: t => t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t\n};\n\n// A collection of the inverses of different types of easing functions.\nconst inverseEasingFunctions = {\n  linear: t => t,\n  easeInQuad: t => Math.sqrt(t),\n  easeOutQuad: t => 1 - Math.sqrt(1 - t),\n  easeInOutQuad: t => t < 0.5 ? Math.sqrt(t * 0.5) : 1 - 0.70710678 * Math.sqrt(1 - t)\n};\n\n/**\n * Calculates the x and y coordinates represented by the given Bezier curve at the given\n * percentage.\n *\n * @param {number} percent Expressed as a number between 0 and 1.\n * @param {Array.<{x:Number,y:Number}>} controlPoints\n * @returns {{x:Number,y:Number}}\n */\nfunction getXYFromPercentWithBezier(percent, controlPoints) {\n  let x;\n  let y;\n  let oneMinusPercent;\n  let tmp1;\n  let tmp2;\n  let tmp3;\n  let tmp4;\n\n  oneMinusPercent = 1 - percent;\n  tmp1 = oneMinusPercent * oneMinusPercent * oneMinusPercent;\n  tmp2 = 3 * percent * oneMinusPercent * oneMinusPercent;\n  tmp3 = 3 * percent * percent * oneMinusPercent;\n  tmp4 = percent * percent * percent;\n\n  x = controlPoints[0].x * tmp1 +\n    controlPoints[1].x * tmp2 +\n    controlPoints[2].x * tmp3 +\n    controlPoints[3].x * tmp4;\n  y = controlPoints[0].y * tmp1 +\n    controlPoints[1].y * tmp2 +\n    controlPoints[2].y * tmp3 +\n    controlPoints[3].y * tmp4;\n\n  return { x: x, y: y };\n}\n\n/**\n * Applies the given transform to the given element as a CSS style in a cross-browser compatible\n * manner.\n *\n * @param {HTMLElement} element\n * @param {string} transform\n */\nfunction setTransform(element, transform) {\n  element.style.webkitTransform = transform;\n  element.style.MozTransform = transform;\n  element.style.msTransform = transform;\n  element.style.OTransform = transform;\n  element.style.transform = transform;\n}\n\n/**\n * Returns a copy of the given array with its contents re-arranged in a random order.\n *\n * The original array is left in its original order.\n *\n * @param {Array} array\n * @returns {Array}\n */\nfunction shuffle(array) {\n  let i;\n  let j;\n  let count;\n  let temp;\n\n  for (i = 0, count = array.length; i < count; i++) {\n    j = parseInt(Math.random() * count);\n    temp = array[j];\n    array[j] = array[i];\n    array[i] = temp;\n  }\n\n  return array;\n}\n\n/**\n * Performs a shallow copy of the given object.\n *\n * This only copies enumerable properties.\n *\n * @param {Object} object\n * @returns {Object}\n */\nfunction shallowCopy(object) {\n  if (typeof object === 'object') {\n    const cloneObject = {};\n\n    Object.keys(object)\n      .forEach(key => cloneObject[key] = object[key]);\n\n    return cloneObject;\n  }\n  else {\n    return object;\n  }\n}\n\n/**\n * Performs a deep copy of the given object.\n *\n * This only copies enumerable properties.\n *\n * @param {Object} object\n * @returns {Object}\n */\nfunction deepCopy(object) {\n  if (typeof object === 'object') {\n    // Hack: Not a robust copy policy\n    let cloneObject;\n    if (object instanceof Array) {\n      cloneObject = [];\n    }\n    else {\n      cloneObject = {};\n    }\n\n    Object.keys(object)\n      .forEach(key => cloneObject[key] = deepCopy(object[key]));\n\n    return cloneObject;\n  }\n  else {\n    return object;\n  }\n}\n\n/**\n * Converts the given HSL color values to HSV color values.\n *\n * Given and returned values will be in the range of [0, 1].\n *\n * @param {HslColor} hsl\n * @returns {{h:Number,s:Number,v:Number}}\n */\nfunction hslToHsv(hsl) {\n  const temp = hsl.s * (hsl.l < 0.5 ? hsl.l : 1 - hsl.l);\n  return {\n    h: hsl.h,\n    s: 2 * temp / (hsl.l + temp),\n    v: hsl.l + temp\n  };\n}\n\n/**\n * Converts the given HSV color values to HSL color values.\n *\n * Given and returned values will be in the range of [0, 1].\n *\n * @param {{h:Number,s:Number,v:Number}} hsv\n * @returns {HslColor}\n */\nfunction hsvToHsl(hsv) {\n  const temp = (2 - hsv.s) * hsv.v;\n  return {\n    h: hsv.h,\n    s: hsv.s * hsv.v / (temp < 1 ? temp : 2.00000001 - temp),\n    l: temp * 0.5\n  };\n}\n\n/**\n * Converts the given HSL color values to RGB color values.\n *\n * Given and returned values will be in the range of [0, 1].\n *\n * Originally adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n *\n * @param {HslColor} hsl\n * @returns {RgbColor} rgb\n */\nfunction hslToRgb(hsl) {\n  let r;\n  let g;\n  let b;\n\n  if (hsl.s === 0) {\n    // Achromatic.\n    r = hsl.l;\n    g = hsl.l;\n    b = hsl.l;\n  }\n  else {\n    const q = hsl.l < 0.5 ?\n      hsl.l * (1 + hsl.s) :\n      hsl.l + hsl.s - hsl.l * hsl.s;\n    const p = 2 * hsl.l - q;\n\n    r = _hue2Rgb(p, q, hsl.h + 1 / 3);\n    g = _hue2Rgb(p, q, hsl.h);\n    b = _hue2Rgb(p, q, hsl.h - 1 / 3);\n  }\n\n  return {\n    r: r,\n    g: g,\n    b: b\n  };\n}\n\nfunction _hue2Rgb(p, q, t) {\n  if (t < 0) {\n    t++;\n  }\n  else if (t > 1) {\n    t--;\n  }\n\n  if (t < 1 / 6) {\n    return p + (q - p) * 6 * t;\n  }\n  else if (t < 1 / 2) {\n    return q;\n  }\n  else if (t < 2 / 3) {\n    return p + (q - p) * (2 / 3 - t) * 6;\n  }\n  else {\n    return p;\n  }\n}\n\n/**\n * Converts the given RGB color values to HSL color values.\n *\n * Given and returned values will be in the range of [0, 1].\n *\n * Originally adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n *\n * @param {{r:Number,g:Number,b:Number}} rgb\n * @returns {HslColor} hsl\n */\nfunction rgbToHsl(rgb) {\n  const max = Math.max(rgb.r, rgb.g, rgb.b);\n  const min = Math.min(rgb.r, rgb.g, rgb.b);\n  let h;\n  let s;\n  const l = (max + min) / 2;\n\n  if (max === min) {\n    // Achromatic.\n    h = 0;\n    s = 0;\n  }\n  else {\n    const d = max - min;\n    s = l > 0.5 ?\n      d / (2 - max - min) :\n      d / (max + min);\n\n    switch (max) {\n      case rgb.r:\n        h = (rgb.g - rgb.b) / d + (rgb.g < rgb.b ? 6 : 0);\n        break;\n      case rgb.g:\n        h = (rgb.b - rgb.r) / d + 2;\n        break;\n      case rgb.b:\n        h = (rgb.r - rgb.g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return {\n    h: h,\n    s: s,\n    l: l\n  };\n}\n\n/**\n * Creates a valid color string to assign to a CSS property from the given h/s/l color values.\n *\n * Given values should be in the range of [0,1].\n *\n * @param {HslColor} hsl\n * @returns {string}\n */\nfunction createHslColorString(hsl) {\n  return typeof hsl.a !== 'undefined' ?\n    `hsla(${hsl.h * 360},${hsl.s * 100}%,${hsl.l * 100}%,${hsl.a})` :\n    `hsl(${hsl.h * 360},${hsl.s * 100}%,${hsl.l * 100}%)`;\n}\n\n/**\n * Checks the given element and all of its ancestors, and returns the first that contains the\n * given class.\n *\n * @param {?HTMLElement} element\n * @param {string} className\n * @returns {?HTMLElement}\n */\nfunction findClassInSelfOrAncestors(element, className) {\n  while (element) {\n    if (containsClass(element, className)) {\n      return element;\n    }\n  }\n\n  return null;\n}\n\nlet utilStyleSheet;\n\n/**\n * Adds the given style rule to a style sheet for the current document.\n *\n * @param {string} styleRule\n */\nfunction addRuleToStyleSheet(styleRule) {\n  // Create the custom style sheet if it doesn't already exist\n  if (!utilStyleSheet) {\n    utilStyleSheet = document.createElement('style');\n    document.getElementsByTagName('head')[0].appendChild(utilStyleSheet);\n  }\n\n  // Add the given rule to the custom style sheet\n  if (utilStyleSheet.styleSheet) {\n    utilStyleSheet.styleSheet.cssText = styleRule;\n  }\n  else {\n    utilStyleSheet.appendChild(document.createTextNode(styleRule));\n  }\n}\n\nfunction checkForSafari() {\n  return /Safari/i.test(window.navigator.userAgent) && !/Chrome/i.test(window.navigator.userAgent);\n}\n\nfunction checkForIos() {\n  return /iPhone|iPod|iPad/i.test(window.navigator.userAgent);\n}\n\n/**\n * Returns a debounced version of the given function.\n *\n * Even if the debounced function is invoked many times, the wrapped function will only be invoked\n * after the given delay has ellapsed since the last invocation.\n *\n * If isInvokedImmediately is true, then the wrapped function will be triggered at the start of the\n * invocation group rather than at the end.\n *\n * @param {Function} wrappedFunction\n * @param {number} delay In milliseconds.\n * @param {boolean} [isInvokedImmediately=false]\n * @returns {Function}\n */\nfunction debounce(wrappedFunction, delay, isInvokedImmediately = false) {\n  let timeoutId;\n\n  return () => {\n    // Save the context and arguments passed from the client (this will use the values from the\n    // first invocation of the invocation group.\n    const context = this;\n    const args = arguments;\n\n    // Invoke immediately only if this is the first invocation of a group.\n    if (isInvokedImmediately && !timeoutId) {\n      wrappedFunction.apply(context, args);\n    }\n\n    // Reset the delay.\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => {\n      // The invocation group has ended.\n      timeoutId = null;\n      if (!isInvokedImmediately) {\n        wrappedFunction.apply(context, args);\n      }\n    }, delay);\n  };\n}\n\n/**\n * Returns a throttled version of the given function.\n *\n * Even if the throttled function is invoked many times, the wrapped function will only be invoked\n * at each interval of the given delay. After the throttled function stops being invoked, then\n * wrapped function will also stop being invoked.\n *\n * If isInvokedImmediately is true, then the wrapped function will be triggered at the start of the\n * invocation delay rather than at the end.\n *\n * @param {Function} wrappedFunction\n * @param {number} delay In milliseconds.\n * @param {boolean} [isInvokedImmediately=false]\n * @returns {Function}\n */\nfunction throttle(wrappedFunction, delay, isInvokedImmediately = false) {\n  let timeoutId;\n\n  return () => {\n    // Save the context and arguments passed from the client (this will use the values from the\n    // first invocation of the invocation group.\n    const context = this;\n    const args = arguments;\n\n    // Only trigger a new invocation group if we are not already/still waiting on the delay from a\n    // previous invocation.\n    if (!timeoutId) {\n      if (isInvokedImmediately) {\n        wrappedFunction.apply(context, args);\n      }\n\n      // Start the delay.\n      timeoutId = setTimeout(() => {\n        // The invocation group has ended.\n        timeoutId = null;\n        if (!isInvokedImmediately) {\n          wrappedFunction.apply(context, args);\n        }\n      }, delay);\n    }\n  };\n}\n\n/**\n * @param {Array.<*>|String} array\n * @param {*} delimiter\n * @returns {Array.<*>}\n * @private\n */\nfunction _interleave(array, delimiter) {\n  const result = new Array(array.length * 2 - 1);\n  if (array.length) {\n    result.push(array[0]);\n  }\n  for (let i = 1, count = array.length; i < count; i++) {\n    result.push(delimiter);\n    result.push(array[i]);\n  }\n  return result;\n}\n\n/**\n * Loads the given src for the given image.\n *\n * @param {HTMLImageElement} image\n * @param {string} src\n * @returns {Promise.<HTMLImageElement, Error>}\n */\nfunction loadImageSrc(image, src) {\n  return new Promise((resolve, reject) => {\n    console.debug(`Loading image: ${src}`);\n\n    image.addEventListener('load', _ => resolve(image));\n    image.addEventListener('error', reject);\n    image.addEventListener('abort', reject);\n\n    image.src = src;\n  });\n}\n\n/**\n * Loads text from the given URL.\n *\n * @param {string} url\n * @returns {Promise.<String, Error>}\n */\nfunction loadText(url) {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n\n    xhr.addEventListener('load', _ => resolve(xhr.response));\n    xhr.addEventListener('error', reject);\n    xhr.addEventListener('abort', reject);\n\n    console.debug(`Loading text: ${url}`);\n\n    xhr.open('GET', url);\n    xhr.send();\n  });\n}\n\n/**\n * Loads a JSON object from the given URL.\n *\n * @param {string} url\n * @returns {Promise.<Object, Error>}\n */\nfunction loadJson(url) {\n  return loadText(url).then(jsonText => JSON.parse(jsonText));\n}\n\n/**\n * Gets the current stack trace.\n *\n * @returns {string}\n */\nfunction getStackTrace() {\n  return new Error().stack;\n}\n\n/**\n * Freezes the given object and recursively freezes all of its properties.\n *\n * @param {Object} object\n */\nfunction deepFreeze(object) {\n  if (typeof object === 'object') {\n    Object.freeze(object);\n    Object.keys(object).forEach(key => deepFreeze(object[key]));\n  }\n}\n\n/**\n * Creates a GUID.\n *\n * GUID specification: http://www.ietf.org/rfc/rfc4122.txt\n *\n * Logic adopted from http://stackoverflow.com/a/2117523/489568.\n *\n * @returns {string}\n */\nfunction createGuid() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\n/**\n * -11 % 3 === -2\n * mod(-11, 3) === 1\n *\n * @param {number} n\n * @param {number} m\n * @returns {number}\n */\nfunction mod(n, m) {\n  return ((n % m) + m) % m;\n}\n\n/**\n * @param {number} min\n * @param {number} max\n * @returns {number}\n */\nfunction randomFloatInRange(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\n/**\n * @param {number} min Inclusive\n * @param {number} max Exclusive\n * @returns {number}\n */\nfunction randomIntInRange(min, max) {\n  return parseInt(Math.random() * (max - min) + min);\n}\n\n/**\n * @param {Array} list\n * @returns {*}\n */\nfunction pickRandom(list) {\n  return list[randomIntInRange(0, list.length)];\n}\n\n/**\n * Triggers the given callback when either the current tab or the browser window loses/gains focus.\n *\n * @param {Function} focusChangeHandler\n */\nfunction handlePageFocusChange(focusChangeHandler) {\n  // Pause/unpause the app when the tab loses/gains focus.\n  document.addEventListener('visibilitychange', () => focusChangeHandler(!document.hidden));\n  // Pause/unpause the app when the browser window loses/gains focus.\n  window.addEventListener('blur', () => focusChangeHandler(false));\n  window.addEventListener('focus', () => focusChangeHandler(true));\n}\n\n/**\n * Creates an array with all the consecutive numbers from start (inclusive) to end (exclusive).\n *\n * @param {number} start\n * @param {number} end\n * @returns {Array.<Number>}\n */\nfunction range(start, end) {\n  const r = [];\n  for (let i = 0, j = start; j < end; i++, j++) {\n    r[i] = j;\n  }\n  return r;\n}\n\n/**\n * @param {*} value\n * @returns {boolean}\n */\nfunction isInt(value) {\n  return typeof value === 'number' &&\n    isFinite(value) &&\n    parseInt(value) === value;\n}\n\n/**\n * Find the first value in a list that satisfies a predicate.\n *\n * @param {Array} list\n * @param {Function} predicate\n * @returns {*}\n */\nfunction find(list, predicate) {\n  for (var i = 0, count = list.length; i < count; i++) {\n    const value = list[i];\n    if (predicate.call(null, value, i, list)) {\n      return value;\n    }\n  }\n  return null;\n}\n\nconst keyCodes = {\n  'a': 65,\n  'b': 66,\n  'c': 67,\n  'd': 68,\n  'e': 69,\n  'f': 70,\n  'g': 71,\n  'h': 72,\n  'i': 73,\n  'j': 74,\n  'k': 75,\n  'l': 76,\n  'm': 77,\n  'n': 78,\n  'o': 79,\n  'p': 80,\n  'q': 81,\n  'r': 82,\n  's': 83,\n  't': 84,\n  'u': 85,\n  'v': 86,\n  'w': 87,\n  'x': 88,\n  'y': 89,\n  'z': 90,\n  '0': 48,\n  '1': 49,\n  '2': 50,\n  '3': 51,\n  '4': 52,\n  '5': 53,\n  '6': 54,\n  '7': 55,\n  '8': 56,\n  '9': 57,\n  'SPACE': 32,\n  'ENTER': 13,\n  'ESCAPE': 27,\n  'LEFT': 37,\n  'UP': 38,\n  'RIGHT': 39,\n  'DOWN': 40\n};\n\nconst svgNamespace = 'http://www.w3.org/2000/svg';\nconst xlinkNamespace = 'http://www.w3.org/1999/xlink';\n\nexport {\n  isInDevMode,\n  listenToMultipleForMultiple,\n  createElement,\n  containsClass,\n  toggleClass,\n  getPageOffset,\n  getViewportSize,\n  removeChildIfPresent,\n  addClass,\n  removeClass,\n  clearClasses,\n  getTextWidth,\n  encodeQueryString,\n  getQueryStringParameterValue,\n  setTransition,\n  setTransitionDurationSeconds,\n  setTransitionDelaySeconds,\n  setUserSelectNone,\n  removeChildrenWithClass,\n  setTransitionCubicBezierTimingFunction,\n  easingFunctions,\n  inverseEasingFunctions,\n  getXYFromPercentWithBezier,\n  setTransform,\n  shuffle,\n  shallowCopy,\n  deepCopy,\n  hsvToHsl,\n  hslToHsv,\n  hslToRgb,\n  rgbToHsl,\n  createHslColorString,\n  findClassInSelfOrAncestors,\n  addRuleToStyleSheet,\n  checkForSafari,\n  checkForIos,\n  debounce,\n  throttle,\n  loadImageSrc,\n  loadText,\n  loadJson,\n  getStackTrace,\n  deepFreeze,\n  createGuid,\n  mod,\n  randomFloatInRange,\n  randomIntInRange,\n  pickRandom,\n  handlePageFocusChange,\n  range,\n  isInt,\n  find,\n  keyCodes,\n  svgNamespace,\n  xlinkNamespace,\n};\n\n/**\n * @typedef {Object} HslColor\n * @property {Number} h In the range of [0, 1].\n * @property {Number} s In the range of [0, 1].\n * @property {Number} l In the range of [0, 1].\n * @property {Number} [a] In the range of [0, 1].\n */\n\n/**\n * @typedef {Object} RgbColor\n * @property {Number} r In the range of [0, 1].\n * @property {Number} g In the range of [0, 1].\n * @property {Number} b In the range of [0, 1].\n * @property {Number} [a] In the range of [0, 1].\n */\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}