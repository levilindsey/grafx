{"version":3,"sources":["node_modules/browser-pack/_prelude.js","../animatex/index.js","../animatex/src/animation-job.js","../animatex/src/animator.js","../animatex/src/frame-latency-profiler.js","../animatex/src/index.js","../animatex/src/persistent-animation-job.js","../animatex/src/transient-animation-job.js","../animatex/src/util.js","node_modules/lsl-animatex/index.js","node_modules/lsl-animatex/src/animation-job.js","node_modules/lsl-animatex/src/animator.js","node_modules/lsl-animatex/src/frame-latency-profiler.js","node_modules/lsl-animatex/src/index.js","node_modules/lsl-animatex/src/persistent-animation-job.js","node_modules/lsl-animatex/src/transient-animation-job.js","node_modules/lsl-animatex/src/util.js","node_modules/lsl-physx/src/collisions/collidables/index.js","node_modules/lsl-physx/src/collisions/collidables/src/aabb-collidable.js","node_modules/lsl-physx/src/collisions/collidables/src/capsule-collidable.js","node_modules/lsl-physx/src/collisions/collidables/src/collidable.js","node_modules/lsl-physx/src/collisions/collidables/src/line-segment.js","node_modules/lsl-physx/src/collisions/collidables/src/obb-collidable.js","node_modules/lsl-physx/src/collisions/collidables/src/sphere-collidable.js","node_modules/lsl-physx/src/collisions/collision-detection/index.js","node_modules/lsl-physx/src/collisions/collision-detection/src/aabb-collision-detection.js","node_modules/lsl-physx/src/collisions/collision-detection/src/capsule-collision-detection.js","node_modules/lsl-physx/src/collisions/collision-detection/src/obb-collision-detection.js","node_modules/lsl-physx/src/collisions/collision-detection/src/sphere-collision-detection.js","node_modules/lsl-physx/src/collisions/contact-calculation/index.js","node_modules/lsl-physx/src/collisions/contact-calculation/src/aabb-contact-calculation.js","node_modules/lsl-physx/src/collisions/contact-calculation/src/capsule-contact-calculation.js","node_modules/lsl-physx/src/collisions/contact-calculation/src/obb-contact-calculation.js","node_modules/lsl-physx/src/collisions/contact-calculation/src/sphere-contact-calculation.js","node_modules/lsl-physx/src/collisions/index.js","node_modules/lsl-physx/src/collisions/src/collidable-factories.js","node_modules/lsl-physx/src/collisions/src/collidable-physics-job.js","node_modules/lsl-physx/src/collisions/src/collidable-store.js","node_modules/lsl-physx/src/collisions/src/collision-handler.js","node_modules/lsl-physx/src/collisions/src/collision-utils.js","node_modules/lsl-physx/src/index.js","node_modules/lsl-physx/src/integrator/index.js","node_modules/lsl-physx/src/integrator/src/integrator.js","node_modules/lsl-physx/src/integrator/src/rk4-integrator.js","node_modules/lsl-physx/src/src/physics-engine.js","node_modules/lsl-physx/src/src/physics-job.js","node_modules/lsl-physx/src/src/physics-state.js","node_modules/lsl-physx/src/util/index.js","node_modules/lsl-physx/src/util/src/force-utils.js","node_modules/lsl-physx/src/util/src/geometry.js","node_modules/lsl-physx/src/util/src/inertia-tensor-utils.js","node_modules/lsl-physx/src/util/src/util.js","src/cameras/index.js","src/cameras/src/camera.js","src/cameras/src/first-person-camera.js","src/cameras/src/fixed-camera.js","src/cameras/src/fixed-follow-camera.js","src/cameras/src/follow-camera.js","src/cameras/src/overhead-camera.js","src/cameras/src/third-person-camera.js","src/index.js","src/models/index.js","src/models/src/default-model.js","src/models/src/invisible-model-controller.js","src/models/src/model-controller.js","src/models/src/model-group-controller.js","src/models/src/model.js","src/models/src/standard-model-controller.js","src/program-wrapper/index.js","src/program-wrapper/src/group-program-wrapper.js","src/program-wrapper/src/program-wrapper-store.js","src/program-wrapper/src/program-wrapper.js","src/program-wrapper/src/texture-store.js","src/program-wrapper/src/uniform-setter.js","src/renderable-shapes/index.js","src/renderable-shapes/src/renderable-shape-factory.js","src/renderable-shapes/src/renderable-shape-store.js","src/renderable-shapes/src/shape-configs/capsule-renderable-shape.js","src/renderable-shapes/src/shape-configs/cube-renderable-shape.js","src/renderable-shapes/src/shape-configs/icosahedron-renderable-shape.js","src/renderable-shapes/src/shape-configs/icosphere-renderable-shape.js","src/renderable-shapes/src/shape-configs/lat-long-sphere-renderable-shape.js","src/renderable-shapes/src/shape-configs/tetrahedron-renderable-shape.js","src/src/grafx-controller.js","src/src/light.js","src/src/scene.js","src/util/index.js","src/util/src/geometry.js","src/util/src/gl-util.js","src/util/src/hash-map.js","src/util/src/util.js"],"names":[],"mappings":"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","file":"grafx.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export * from './src';\n","/**\n * An AnimationJob is used with the animator controller to update and re-draw something each frame.\n *\n * @abstract\n */\nclass AnimationJob {\n  /**\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(onComplete) {\n    // AnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === AnimationJob) {\n      throw new TypeError('Cannot construct AnimationJob instances directly');\n    }\n\n    this._startTime = 0;\n    this._isComplete = true;\n    this._onComplete = onComplete;\n  }\n\n  /**\n   * Indicates whether this AnimationJob is complete.\n   *\n   * @return {boolean}\n   */\n  get isComplete() {\n    return this._isComplete;\n  }\n\n  /**\n   * Sets this AnimationJob as started.\n   *\n   * @param {DOMHighResTimeStamp} startTime\n   */\n  start(startTime) {\n    this._startTime = startTime;\n    this._isComplete = false;\n  }\n\n  /**\n   * Updates the animation progress of this AnimationJob to match the given time.\n   *\n   * This is called from the overall animation loop.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @abstract\n   */\n  update(currentTime, deltaTime) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * Draws the current state of this AnimationJob.\n   *\n   * This is called from the overall animation loop.\n   *\n   * @abstract\n   */\n  draw() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * Handles any necessary state for this AnimationJob being finished.\n   *\n   * @param {boolean} isCancelled\n   */\n  finish(isCancelled) {\n    console.log(`${this.constructor.name} ${isCancelled ? 'cancelled' : 'completed'}`);\n\n    this._isComplete = true;\n\n    if (this._onComplete) {\n      this._onComplete();\n    }\n  }\n}\n\nexport {AnimationJob};\n","import {FrameLatencyProfiler} from './frame-latency-profiler';\nimport {PersistentAnimationJob} from './persistent-animation-job';\nimport {TransientAnimationJob} from './transient-animation-job';\n\nconst _DELTA_TIME_UPPER_THRESHOLD = 200;\nconst _FRAME_DURATION_WARNING_THRESHOLD = 1000 / 30;\nconst _FRAME_LATENCY_LOG_PERIOD = 5000;\nconst _LATENCY_LOG_LABEL = 'Animation frame period';\n\n/**\n * This class handles the animation loop.\n *\n * This class's responsibilities include:\n * - updating modules for the current frame,\n * - drawing renderables for the current frame,\n * - starting and stopping transient animation jobs,\n * - capping time step durations at a max threshold.\n */\nclass Animator {\n  constructor() {\n    this._jobs = [];\n    this._previousTime = null;\n    this._isPaused = true;\n    this._requestAnimationFrameId = null;\n    this._totalUnpausedRunTime = 0;\n    this._lastUnpauseTime = null;\n    this._latencyProfiler = new FrameLatencyProfiler(_FRAME_LATENCY_LOG_PERIOD,\n        _FRAME_DURATION_WARNING_THRESHOLD, _LATENCY_LOG_LABEL);\n  }\n\n  /**\n   * Starts the given AnimationJob.\n   *\n   * @param {AnimationJob} job\n   */\n  startJob(job) {\n    // Is this a restart?\n    if (!job.isComplete) {\n      console.debug(`Restarting AnimationJob: ${job.constructor.name}`);\n\n      if (job instanceof PersistentAnimationJob) {\n        job.reset();\n      } else {\n        job.finish(true);\n        job.start(window.performance.now());\n      }\n    } else {\n      console.debug(`Starting AnimationJob: ${job.constructor.name}`);\n\n      job.start(this._previousTime);\n      this._jobs.push(job);\n    }\n\n    this._startAnimationLoop();\n  }\n\n  /**\n   * Cancels the given AnimationJob.\n   *\n   * @param {AnimationJob} job\n   */\n  cancelJob(job) {\n    console.debug(`Cancelling AnimationJob: ${job.constructor.name}`);\n    job.finish(true);\n  }\n\n  /**\n   * Cancels all running AnimationJobs.\n   */\n  cancelAll() {\n    while (this._jobs.length) {\n      this.cancelJob(this._jobs[0]);\n    }\n  }\n\n  /** @returns {DOMHighResTimeStamp} */\n  get currentTime() {\n    return this._previousTime;\n  }\n\n  /** @returns {boolean} */\n  get isPaused() {\n    return this._isPaused;\n  }\n\n  pause() {\n    this._stopAnimationLoop();\n    console.debug('Animator paused');\n  }\n\n  unpause() {\n    this._startAnimationLoop();\n    console.debug('Animator unpaused');\n  }\n\n  /**\n   * This is the animation loop that drives all of the animation.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @private\n   */\n  _animationLoop(currentTime) {\n    // When pausing and restarting, it's possible for the previous time to be slightly inconsistent\n    // with the animationFrame time.\n    if (currentTime < this._previousTime) {\n      this._previousTime = currentTime - 1;\n    }\n\n    let deltaTime = currentTime - this._previousTime;\n    this._previousTime = currentTime;\n\n    this._latencyProfiler.recordFrameLatency(deltaTime);\n\n    // Large delays between frames can cause lead to instability in the system, so this caps them to\n    // a max threshold.\n    deltaTime = deltaTime > _DELTA_TIME_UPPER_THRESHOLD ?\n        _DELTA_TIME_UPPER_THRESHOLD : deltaTime;\n\n    if (!this._isPaused) {\n      this._requestAnimationFrameId =\n          window.requestAnimationFrame(currentTime => this._animationLoop(currentTime));\n      this._updateJobs(currentTime, deltaTime);\n      this._drawJobs();\n    }\n  }\n\n  /**\n   * Updates all of the active AnimationJobs.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @private\n   */\n  _updateJobs(currentTime, deltaTime) {\n    for (let i = 0, count = this._jobs.length; i < count; i++) {\n      let job = this._jobs[i];\n\n      // Remove jobs from the list after they are complete.\n      if (job.isComplete) {\n        this._removeJob(job, i);\n        i--;\n        count--;\n        continue;\n      }\n\n      // Check whether the job is transient and has reached its end.\n      if (job instanceof TransientAnimationJob && job.endTime < currentTime) {\n        job.finish(false);\n      } else {\n        job.update(currentTime, deltaTime);\n      }\n    }\n  }\n\n  /**\n   * Removes the given job from the collection of active, animating jobs.\n   *\n   * @param {AnimationJob} job\n   * @param {number} [index=-1]\n   * @private\n   */\n  _removeJob(job, index = -1) {\n    console.debug(`Removing AnimationJob: ${job.constructor.name}`);\n\n    if (index >= 0) {\n      this._jobs.splice(index, 1);\n    } else {\n      const count = this._jobs.length;\n      for (index = 0; index < count; index++) {\n        if (this._jobs[index] === job) {\n          this._jobs.splice(index, 1);\n          break;\n        }\n      }\n    }\n\n    // Stop the animation loop when there are no more jobs to animate.\n    if (this._jobs.length === 0) {\n      this._stopAnimationLoop();\n    }\n  }\n\n  /**\n   * Draws all of the active AnimationJobs.\n   *\n   * @private\n   */\n  _drawJobs() {\n    for (let i = 0, count = this._jobs.length; i < count; i++) {\n      this._jobs[i].draw();\n    }\n  }\n\n  /**\n   * Starts the animation loop if it is not already running.\n   *\n   * This method is idempotent.\n   *\n   * @private\n   */\n  _startAnimationLoop() {\n    if (this._isPaused) {\n      this._lastUnpauseTime = window.performance.now();\n    }\n    this._isPaused = false;\n\n    // Only actually start the loop if it isn't already running and the page has focus.\n    if (!this._requestAnimationFrameId && !document.hidden) {\n      this._latencyProfiler.start();\n      this._previousTime = window.performance.now();\n      this._requestAnimationFrameId =\n          window.requestAnimationFrame(time => this._animationLoop(time));\n    }\n  }\n\n  /**\n   * Stops the animation loop.\n   *\n   * @private\n   */\n  _stopAnimationLoop() {\n    if (!this._isPaused) {\n      this._totalUnpausedRunTime += this._timeSinceLastPaused;\n    }\n    this._isPaused = true;\n    window.cancelAnimationFrame(this._requestAnimationFrameId);\n    this._requestAnimationFrameId = null;\n    this._latencyProfiler.stop();\n  }\n\n  /**\n   * Creates a promise that will resolve on the next animation loop.\n   *\n   * @returns {Promise}\n   */\n  resolveOnNextFrame() {\n    return new Promise(window.requestAnimationFrame);\n  }\n\n  /**\n   * Gets the total amount of time the animator has been running while not paused.\n   *\n   * @returns {DOMHighResTimeStamp}\n   */\n  get totalRunTime() {\n    return this._isPaused\n        ? this._totalUnpausedRunTime\n        : this._totalUnpausedRunTime + this._timeSinceLastPaused;\n  }\n\n  /**\n   * @returns {DOMHighResTimeStamp}\n   */\n  get _timeSinceLastPaused() {\n    return window.performance.now() - this._lastUnpauseTime;\n  }\n}\n\nconst animator = new Animator();\n\nexport {animator};\n\n/**\n * @typedef {number} DOMHighResTimeStamp A number of milliseconds, accurate to one thousandth of a\n * millisecond.\n */\n\n","/**\n * This class keeps track of avg/min/max frame latencies over the last logging time period and\n * periodically logs these values.\n */\nclass FrameLatencyProfiler {\n  /**\n   * @param {number} logPeriod The period at which to print latency log messages. In milliseconds.\n   * @param {number} latencyWarningThreshold If the average latency exceeds this threshold, then the\n   * log message is shown as a warning. In milliseconds.\n   * @param {string} logLabel A label to show for each latency log message.\n   */\n  constructor(logPeriod, latencyWarningThreshold, logLabel) {\n    this._logPeriod = logPeriod;\n    this._latencyWarningThreshold = latencyWarningThreshold;\n    this._logLabel = logLabel;\n\n    this._frameCount = null;\n    this._maxFrameLatency = null;\n    this._minFrameLatency = null;\n    this._avgFrameLatency = null;\n\n    this._intervalId = null;\n  }\n\n  start() {\n    this.stop();\n    this.reset();\n\n    this._intervalId = setInterval(() => {\n      this.logFrameLatency();\n      this.reset();\n    }, this._logPeriod);\n  }\n\n  stop() {\n    clearInterval(this._intervalId);\n  }\n\n  reset() {\n    this._frameCount = 0;\n    this._maxFrameLatency = Number.MIN_VALUE;\n    this._minFrameLatency = Number.MAX_VALUE;\n    this._avgFrameLatency = 0;\n  }\n\n  /**\n   * Keeps track of a running average, min value, and max value for the frame latencies.\n   *\n   * @param {DOMHighResTimeStamp} frameLatency\n   */\n  recordFrameLatency(frameLatency) {\n    this._frameCount++;\n    this._maxFrameLatency =\n        this._maxFrameLatency < frameLatency ? frameLatency : this._maxFrameLatency;\n    this._minFrameLatency =\n        this._minFrameLatency > frameLatency ? frameLatency : this._minFrameLatency;\n    this._avgFrameLatency =\n        this._avgFrameLatency + (frameLatency - this._avgFrameLatency) / this._frameCount;\n  }\n\n  logFrameLatency() {\n    if (this._frameCount > 0) {\n      const message = `${this._logLabel}:  AVG=${this._avgFrameLatency.toFixed(3)}  ` +\n          `(MAX=${this._maxFrameLatency.toFixed(3)}; MIN=${this._minFrameLatency.toFixed(3)})`;\n      if (this._maxFrameLatency >= this._latencyWarningThreshold) {\n        console.warn(message);\n      } else {\n        console.debug(message);\n      }\n    }\n  }\n}\n\nexport {FrameLatencyProfiler};\n","export * from './animation-job';\nexport * from './animator';\nexport * from './frame-latency-profiler';\nexport * from './persistent-animation-job';\nexport * from './transient-animation-job';\n","import {AnimationJob} from './animation-job';\n\n/**\n * A PersistentAnimationJob recurs or has an indefinite duration.\n *\n * @abstract\n */\nclass PersistentAnimationJob extends AnimationJob {\n  /**\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(onComplete) {\n    super(onComplete);\n\n    // PersistentAnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === PersistentAnimationJob) {\n      throw new TypeError('Cannot construct PersistentAnimationJob instances directly');\n    }\n  }\n\n  /**\n   * @abstract\n   */\n  reset() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n}\n\nexport {PersistentAnimationJob};\n","import {_util} from './util';\n\nimport {AnimationJob} from './animation-job';\n\n/**\n * A TransientAnimationJob is temporary and has a definite beginning and end.\n *\n * @abstract\n */\nclass TransientAnimationJob extends AnimationJob {\n  /**\n   * @param {number} duration\n   * @param {number} delay\n   * @param {Function|String} easingFunction\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(duration, delay, easingFunction, onComplete) {\n    super(onComplete);\n\n    // TransientAnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === TransientAnimationJob) {\n      throw new TypeError('Cannot construct TransientAnimationJob instances directly');\n    }\n\n    this._duration = duration;\n    this._delay = delay;\n    this._easingFunction = typeof easingFunction === 'function'\n        ? easingFunction\n        : _util.easingFunctions[easingFunction];\n  }\n\n  /**\n   * @returns {number}\n   */\n  get endTime() {\n    return this._startTime + this._duration + this._delay;\n  }\n}\n\nexport {TransientAnimationJob};\n","/**\n * This module defines a collection of static utility functions.\n */\n\n// A collection of different types of easing functions.\nconst easingFunctions = {\n  linear: t => t,\n  easeInQuad: t => t * t,\n  easeOutQuad: t => t * (2 - t),\n  easeInOutQuad: t => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t,\n  easeInCubic: t => t * t * t,\n  easeOutCubic: t => 1 + --t * t * t,\n  easeInOutCubic: t => t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,\n  easeInQuart: t => t * t * t * t,\n  easeOutQuart: t => 1 - --t * t * t * t,\n  easeInOutQuart: t => t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t,\n  easeInQuint: t => t * t * t * t * t,\n  easeOutQuint: t => 1 + --t * t * t * t * t,\n  easeInOutQuint: t => t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t\n};\n\nconst _util = {\n  easingFunctions,\n};\n\nexport {\n  _util,\n};\n","export * from './src';\n","/**\n * An AnimationJob is used with the animator controller to update and re-draw something each frame.\n *\n * @abstract\n */\nclass AnimationJob {\n  /**\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(onComplete) {\n    // AnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === AnimationJob) {\n      throw new TypeError('Cannot construct AnimationJob instances directly');\n    }\n\n    this._startTime = 0;\n    this._isComplete = true;\n    this._onComplete = onComplete;\n  }\n\n  /**\n   * Indicates whether this AnimationJob is complete.\n   *\n   * @return {boolean}\n   */\n  get isComplete() {\n    return this._isComplete;\n  }\n\n  /**\n   * Sets this AnimationJob as started.\n   *\n   * @param {DOMHighResTimeStamp} startTime\n   */\n  start(startTime) {\n    this._startTime = startTime;\n    this._isComplete = false;\n  }\n\n  /**\n   * Updates the animation progress of this AnimationJob to match the given time.\n   *\n   * This is called from the overall animation loop.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @abstract\n   */\n  update(currentTime, deltaTime) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * Draws the current state of this AnimationJob.\n   *\n   * This is called from the overall animation loop.\n   *\n   * @abstract\n   */\n  draw() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * Handles any necessary state for this AnimationJob being finished.\n   *\n   * @param {boolean} isCancelled\n   */\n  finish(isCancelled) {\n    console.log(`${this.constructor.name} ${isCancelled ? 'cancelled' : 'completed'}`);\n\n    this._isComplete = true;\n\n    if (this._onComplete) {\n      this._onComplete();\n    }\n  }\n}\n\nexport {AnimationJob};\n","import {FrameLatencyProfiler} from './frame-latency-profiler';\nimport {PersistentAnimationJob} from './persistent-animation-job';\nimport {TransientAnimationJob} from './transient-animation-job';\n\nconst _DELTA_TIME_UPPER_THRESHOLD = 200;\nconst _FRAME_DURATION_WARNING_THRESHOLD = 1000 / 30;\nconst _FRAME_LATENCY_LOG_PERIOD = 5000;\nconst _LATENCY_LOG_LABEL = 'Animation frame period';\n\n/**\n * This class handles the animation loop.\n *\n * This class's responsibilities include:\n * - updating modules for the current frame,\n * - drawing renderables for the current frame,\n * - starting and stopping transient animation jobs,\n * - capping time step durations at a max threshold.\n */\nclass Animator {\n  constructor() {\n    this._jobs = [];\n    this._previousTime = null;\n    this._isPaused = true;\n    this._requestAnimationFrameId = null;\n    this._totalUnpausedRunTime = 0;\n    this._lastUnpauseTime = null;\n    this._latencyProfiler = new FrameLatencyProfiler(_FRAME_LATENCY_LOG_PERIOD,\n        _FRAME_DURATION_WARNING_THRESHOLD, _LATENCY_LOG_LABEL);\n  }\n\n  /**\n   * Starts the given AnimationJob.\n   *\n   * @param {AnimationJob} job\n   */\n  startJob(job) {\n    // Is this a restart?\n    if (!job.isComplete) {\n      console.debug(`Restarting AnimationJob: ${job.constructor.name}`);\n\n      if (job instanceof PersistentAnimationJob) {\n        job.reset();\n      } else {\n        job.finish(true);\n        job.start(window.performance.now());\n      }\n    } else {\n      console.debug(`Starting AnimationJob: ${job.constructor.name}`);\n\n      job.start(this._previousTime);\n      this._jobs.push(job);\n    }\n\n    this._startAnimationLoop();\n  }\n\n  /**\n   * Cancels the given AnimationJob.\n   *\n   * @param {AnimationJob} job\n   */\n  cancelJob(job) {\n    console.debug(`Cancelling AnimationJob: ${job.constructor.name}`);\n    job.finish(true);\n  }\n\n  /**\n   * Cancels all running AnimationJobs.\n   */\n  cancelAll() {\n    while (this._jobs.length) {\n      this.cancelJob(this._jobs[0]);\n    }\n  }\n\n  /** @returns {DOMHighResTimeStamp} */\n  get currentTime() {\n    return this._previousTime;\n  }\n\n  /** @returns {boolean} */\n  get isPaused() {\n    return this._isPaused;\n  }\n\n  pause() {\n    this._stopAnimationLoop();\n    console.debug('Animator paused');\n  }\n\n  unpause() {\n    this._startAnimationLoop();\n    console.debug('Animator unpaused');\n  }\n\n  /**\n   * This is the animation loop that drives all of the animation.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @private\n   */\n  _animationLoop(currentTime) {\n    // When pausing and restarting, it's possible for the previous time to be slightly inconsistent\n    // with the animationFrame time.\n    if (currentTime < this._previousTime) {\n      this._previousTime = currentTime - 1;\n    }\n\n    let deltaTime = currentTime - this._previousTime;\n    this._previousTime = currentTime;\n\n    this._latencyProfiler.recordFrameLatency(deltaTime);\n\n    // Large delays between frames can cause lead to instability in the system, so this caps them to\n    // a max threshold.\n    deltaTime = deltaTime > _DELTA_TIME_UPPER_THRESHOLD ?\n        _DELTA_TIME_UPPER_THRESHOLD : deltaTime;\n\n    if (!this._isPaused) {\n      this._requestAnimationFrameId =\n          window.requestAnimationFrame(currentTime => this._animationLoop(currentTime));\n      this._updateJobs(currentTime, deltaTime);\n      this._drawJobs();\n    }\n  }\n\n  /**\n   * Updates all of the active AnimationJobs.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @private\n   */\n  _updateJobs(currentTime, deltaTime) {\n    for (let i = 0, count = this._jobs.length; i < count; i++) {\n      let job = this._jobs[i];\n\n      // Remove jobs from the list after they are complete.\n      if (job.isComplete) {\n        this._removeJob(job, i);\n        i--;\n        count--;\n        continue;\n      }\n\n      // Check whether the job is transient and has reached its end.\n      if (job instanceof TransientAnimationJob && job.endTime < currentTime) {\n        job.finish(false);\n      } else {\n        job.update(currentTime, deltaTime);\n      }\n    }\n  }\n\n  /**\n   * Removes the given job from the collection of active, animating jobs.\n   *\n   * @param {AnimationJob} job\n   * @param {number} [index=-1]\n   * @private\n   */\n  _removeJob(job, index = -1) {\n    console.debug(`Removing AnimationJob: ${job.constructor.name}`);\n\n    if (index >= 0) {\n      this._jobs.splice(index, 1);\n    } else {\n      const count = this._jobs.length;\n      for (index = 0; index < count; index++) {\n        if (this._jobs[index] === job) {\n          this._jobs.splice(index, 1);\n          break;\n        }\n      }\n    }\n\n    // Stop the animation loop when there are no more jobs to animate.\n    if (this._jobs.length === 0) {\n      this._stopAnimationLoop();\n    }\n  }\n\n  /**\n   * Draws all of the active AnimationJobs.\n   *\n   * @private\n   */\n  _drawJobs() {\n    for (let i = 0, count = this._jobs.length; i < count; i++) {\n      this._jobs[i].draw();\n    }\n  }\n\n  /**\n   * Starts the animation loop if it is not already running.\n   *\n   * This method is idempotent.\n   *\n   * @private\n   */\n  _startAnimationLoop() {\n    if (this._isPaused) {\n      this._lastUnpauseTime = window.performance.now();\n    }\n    this._isPaused = false;\n\n    // Only actually start the loop if it isn't already running and the page has focus.\n    if (!this._requestAnimationFrameId && !document.hidden) {\n      this._latencyProfiler.start();\n      this._previousTime = window.performance.now();\n      this._requestAnimationFrameId =\n          window.requestAnimationFrame(time => this._animationLoop(time));\n    }\n  }\n\n  /**\n   * Stops the animation loop.\n   *\n   * @private\n   */\n  _stopAnimationLoop() {\n    if (!this._isPaused) {\n      this._totalUnpausedRunTime += this._timeSinceLastPaused;\n    }\n    this._isPaused = true;\n    window.cancelAnimationFrame(this._requestAnimationFrameId);\n    this._requestAnimationFrameId = null;\n    this._latencyProfiler.stop();\n  }\n\n  /**\n   * Creates a promise that will resolve on the next animation loop.\n   *\n   * @returns {Promise}\n   */\n  resolveOnNextFrame() {\n    return new Promise(window.requestAnimationFrame);\n  }\n\n  /**\n   * Gets the total amount of time the animator has been running while not paused.\n   *\n   * @returns {DOMHighResTimeStamp}\n   */\n  get totalRunTime() {\n    return this._isPaused\n        ? this._totalUnpausedRunTime\n        : this._totalUnpausedRunTime + this._timeSinceLastPaused;\n  }\n\n  /**\n   * @returns {DOMHighResTimeStamp}\n   */\n  get _timeSinceLastPaused() {\n    return window.performance.now() - this._lastUnpauseTime;\n  }\n}\n\nconst animator = new Animator();\n\nexport {animator};\n\n/**\n * @typedef {number} DOMHighResTimeStamp A number of milliseconds, accurate to one thousandth of a\n * millisecond.\n */\n\n","/**\n * This class keeps track of avg/min/max frame latencies over the last logging time period and\n * periodically logs these values.\n */\nclass FrameLatencyProfiler {\n  /**\n   * @param {number} logPeriod The period at which to print latency log messages. In milliseconds.\n   * @param {number} latencyWarningThreshold If the average latency exceeds this threshold, then the\n   * log message is shown as a warning. In milliseconds.\n   * @param {string} logLabel A label to show for each latency log message.\n   */\n  constructor(logPeriod, latencyWarningThreshold, logLabel) {\n    this._logPeriod = logPeriod;\n    this._latencyWarningThreshold = latencyWarningThreshold;\n    this._logLabel = logLabel;\n\n    this._frameCount = null;\n    this._maxFrameLatency = null;\n    this._minFrameLatency = null;\n    this._avgFrameLatency = null;\n\n    this._intervalId = null;\n  }\n\n  start() {\n    this.stop();\n    this.reset();\n\n    this._intervalId = setInterval(() => {\n      this.logFrameLatency();\n      this.reset();\n    }, this._logPeriod);\n  }\n\n  stop() {\n    clearInterval(this._intervalId);\n  }\n\n  reset() {\n    this._frameCount = 0;\n    this._maxFrameLatency = Number.MIN_VALUE;\n    this._minFrameLatency = Number.MAX_VALUE;\n    this._avgFrameLatency = 0;\n  }\n\n  /**\n   * Keeps track of a running average, min value, and max value for the frame latencies.\n   *\n   * @param {DOMHighResTimeStamp} frameLatency\n   */\n  recordFrameLatency(frameLatency) {\n    this._frameCount++;\n    this._maxFrameLatency =\n        this._maxFrameLatency < frameLatency ? frameLatency : this._maxFrameLatency;\n    this._minFrameLatency =\n        this._minFrameLatency > frameLatency ? frameLatency : this._minFrameLatency;\n    this._avgFrameLatency =\n        this._avgFrameLatency + (frameLatency - this._avgFrameLatency) / this._frameCount;\n  }\n\n  logFrameLatency() {\n    if (this._frameCount > 0) {\n      const message = `${this._logLabel}:  AVG=${this._avgFrameLatency.toFixed(3)}  ` +\n          `(MAX=${this._maxFrameLatency.toFixed(3)}; MIN=${this._minFrameLatency.toFixed(3)})`;\n      if (this._maxFrameLatency >= this._latencyWarningThreshold) {\n        console.warn(message);\n      } else {\n        console.debug(message);\n      }\n    }\n  }\n}\n\nexport {FrameLatencyProfiler};\n","export * from './animation-job';\nexport * from './animator';\nexport * from './frame-latency-profiler';\nexport * from './persistent-animation-job';\nexport * from './transient-animation-job';\n","import {AnimationJob} from './animation-job';\n\n/**\n * A PersistentAnimationJob recurs or has an indefinite duration.\n *\n * @abstract\n */\nclass PersistentAnimationJob extends AnimationJob {\n  /**\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(onComplete) {\n    super(onComplete);\n\n    // PersistentAnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === PersistentAnimationJob) {\n      throw new TypeError('Cannot construct PersistentAnimationJob instances directly');\n    }\n  }\n\n  /**\n   * @abstract\n   */\n  reset() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n}\n\nexport {PersistentAnimationJob};\n","import {_util} from './util';\n\nimport {AnimationJob} from './animation-job';\n\n/**\n * A TransientAnimationJob is temporary and has a definite beginning and end.\n *\n * @abstract\n */\nclass TransientAnimationJob extends AnimationJob {\n  /**\n   * @param {number} duration\n   * @param {number} delay\n   * @param {Function|String} easingFunction\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(duration, delay, easingFunction, onComplete) {\n    super(onComplete);\n\n    // TransientAnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === TransientAnimationJob) {\n      throw new TypeError('Cannot construct TransientAnimationJob instances directly');\n    }\n\n    this._duration = duration;\n    this._delay = delay;\n    this._easingFunction = typeof easingFunction === 'function'\n        ? easingFunction\n        : _util.easingFunctions[easingFunction];\n  }\n\n  /**\n   * @returns {number}\n   */\n  get endTime() {\n    return this._startTime + this._duration + this._delay;\n  }\n}\n\nexport {TransientAnimationJob};\n","/**\n * This module defines a collection of static utility functions.\n */\n\n// A collection of different types of easing functions.\nconst easingFunctions = {\n  linear: t => t,\n  easeInQuad: t => t * t,\n  easeOutQuad: t => t * (2 - t),\n  easeInOutQuad: t => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t,\n  easeInCubic: t => t * t * t,\n  easeOutCubic: t => 1 + --t * t * t,\n  easeInOutCubic: t => t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,\n  easeInQuart: t => t * t * t * t,\n  easeOutQuart: t => 1 - --t * t * t * t,\n  easeInOutQuart: t => t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t,\n  easeInQuint: t => t * t * t * t * t,\n  easeOutQuint: t => 1 + --t * t * t * t * t,\n  easeInOutQuint: t => t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t\n};\n\nconst _util = {\n  easingFunctions,\n};\n\nexport {\n  _util,\n};\n","export * from './src/aabb-collidable';\nexport * from './src/capsule-collidable';\nexport * from './src/collidable';\nexport * from './src/line-segment';\nexport * from './src/obb-collidable';\nexport * from './src/sphere-collidable';\n","import {Collidable} from './collidable';\nimport {LineSegment} from './line-segment';\nimport {tmpVec1, tmpVec2} from '../../../util';\n\n/**\n * This class represents an axially-aligned bounding box (AABB).\n *\n * This is primarily useful for collision detection. An AABB is only appropriate for some\n * geometries. For other geometries, an oriented bounding box (OBB) or a bounding sphere may be more\n * appropriate.\n */\nclass Aabb extends Collidable {\n  /**\n   * @param {number} minX\n   * @param {number} minY\n   * @param {number} minZ\n   * @param {number} maxX\n   * @param {number} maxY\n   * @param {number} maxZ\n   * @param {boolean} [isStationary=false]\n   * @param {CollidablePhysicsJob} [physicsJob]\n   */\n  constructor(minX, minY, minZ, maxX, maxY, maxZ, isStationary = false, physicsJob) {\n    super(isStationary, physicsJob);\n    this.minX = minX;\n    this.minY = minY;\n    this.minZ = minZ;\n    this.maxX = maxX;\n    this.maxY = maxY;\n    this.maxZ = maxZ;\n  }\n\n  /**\n   * Creates a new bounding box with the dimensions of an axially-aligned cube centered around the \n   * given center and with the given half-side length.\n   *\n   * @param {vec3} center\n   * @param {number} halfSideLength\n   */\n  static createAsUniformAroundCenter(center, halfSideLength) {\n    const bounds = new Aabb(0, 0, 0, 0, 0, 0);\n    bounds.setAsUniformAroundCenter(center, halfSideLength);\n    return bounds;\n  }\n\n  /**\n   * Updates the dimensions of this bounding box to represent an axially-aligned cube centered\n   * around the given center and with the given half-side length.\n   *\n   * @param {vec3} center\n   * @param {number} halfSideLength\n   */\n  setAsUniformAroundCenter(center, halfSideLength) {\n    this.minX = center[0] - halfSideLength;\n    this.minY = center[1] - halfSideLength;\n    this.minZ = center[2] - halfSideLength;\n    this.maxX = center[0] + halfSideLength;\n    this.maxY = center[1] + halfSideLength;\n    this.maxZ = center[2] + halfSideLength;\n  }\n\n  /** @returns {number} */\n  get rangeX() {\n    return this.maxX - this.minX;\n  }\n  /** @returns {number} */\n  get rangeY() {\n    return this.maxY - this.minY;\n  }\n  /** @returns {number} */\n  get rangeZ() {\n    return this.maxZ - this.minZ;\n  }\n\n  /** @returns {number} */\n  get centerX() {\n    return this.minX + this.rangeX / 2;\n  }\n  /** @returns {number} */\n  get centerY() {\n    return this.minY + this.rangeY / 2;\n  }\n  /** @returns {number} */\n  get centerZ() {\n    return this.minZ + this.rangeZ / 2;\n  }\n\n  /** @returns {number} */\n  get surfaceArea() {\n    const rangeX = this.rangeX;\n    const rangeY = this.rangeY;\n    const rangeZ = this.rangeZ;\n    return 2 * (rangeX * rangeY + rangeX * rangeZ + rangeY * rangeZ);\n  }\n\n  /**\n   * @returns {vec3}\n   * @override\n   */\n  get centerOfVolume() {\n    // Reuse the same object when this is called multiple times.\n    this._centerOfVolume = this._centerOfVolume || vec3.create();\n    vec3.set(this._centerOfVolume, this.centerX, this.centerY, this.centerZ);\n    return this._centerOfVolume;\n  }\n\n  /**\n   * @returns {Collidable}\n   * @override\n   */\n  get boundingVolume() {\n    return this;\n  }\n\n  /**\n   * @param {vec3} value\n   * @override\n   */\n  set position(value) {\n    const rangeX = this.rangeX;\n    const rangeY = this.rangeY;\n    const rangeZ = this.rangeZ;\n    this.minX = value[0] - rangeX / 2;\n    this.minY = value[1] - rangeY / 2;\n    this.minZ = value[2] - rangeZ / 2;\n    this.maxX = value[0] + rangeX / 2;\n    this.maxY = value[1] + rangeY / 2;\n    this.maxZ = value[2] + rangeZ / 2;\n  }\n\n  /**\n   * @param {quat} value\n   * @override\n   */\n  set orientation(value) {\n    // Do nothing.\n  }\n\n  /**\n   * Calls the given callback once for each vertex.\n   *\n   * Stops as soon as the callback returns true for a vertex.\n   *\n   * @param {VertexCallback} callback\n   * @param {vec3} [vertex] Output param.\n   * @returns {boolean} True if one of the callbacks returned true.\n   */\n  someVertex(callback, vertex) {\n    vertex = vertex || tmpVec1;\n\n    vec3.set(vertex, this.minX, this.minY, this.minZ);\n    if (callback(vertex)) return true;\n\n    vec3.set(vertex, this.maxX, this.minY, this.minZ);\n    if (callback(vertex)) return true;\n\n    vec3.set(vertex, this.minX, this.maxY, this.minZ);\n    if (callback(vertex)) return true;\n\n    vec3.set(vertex, this.maxX, this.maxY, this.minZ);\n    if (callback(vertex)) return true;\n\n    vec3.set(vertex, this.minX, this.minY, this.maxZ);\n    if (callback(vertex)) return true;\n\n    vec3.set(vertex, this.maxX, this.minY, this.maxZ);\n    if (callback(vertex)) return true;\n\n    vec3.set(vertex, this.minX, this.maxY, this.maxZ);\n    if (callback(vertex)) return true;\n\n    vec3.set(vertex, this.maxX, this.maxY, this.maxZ);\n    if (callback(vertex)) return true;\n\n    return false;\n  }\n\n  /**\n   * Calls the given callback once for each edge.\n   *\n   * @param {EdgeCallback} callback\n   * @param {LineSegment} [edge] Output param.\n   * @returns {boolean} True if one of the callbacks returned true.\n   */\n  someEdge(callback, edge) {\n    edge = edge || _segment;\n\n    //\n    // Edges along front face.\n    //\n\n    vec3.set(tmpVec1, this.minX, this.minY, this.minZ);\n    vec3.set(tmpVec2, this.maxX, this.minY, this.minZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.minX, this.maxY, this.minZ);\n    vec3.set(tmpVec2, this.maxX, this.maxY, this.minZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.minX, this.minY, this.minZ);\n    vec3.set(tmpVec2, this.minX, this.maxY, this.minZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.maxX, this.minY, this.minZ);\n    vec3.set(tmpVec2, this.maxX, this.maxY, this.minZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    //\n    // Edges along back face.\n    //\n\n    vec3.set(tmpVec1, this.minX, this.minY, this.maxZ);\n    vec3.set(tmpVec2, this.maxX, this.minY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.minX, this.maxY, this.maxZ);\n    vec3.set(tmpVec2, this.maxX, this.maxY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.minX, this.minY, this.maxZ);\n    vec3.set(tmpVec2, this.minX, this.maxY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.maxX, this.minY, this.maxZ);\n    vec3.set(tmpVec2, this.maxX, this.maxY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    //\n    // Edges between front and back faces.\n    //\n\n    vec3.set(tmpVec1, this.minX, this.minY, this.minZ);\n    vec3.set(tmpVec2, this.minX, this.minY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.maxX, this.minY, this.minZ);\n    vec3.set(tmpVec2, this.maxX, this.minY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.minX, this.maxY, this.minZ);\n    vec3.set(tmpVec2, this.minX, this.maxY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.maxX, this.maxY, this.minZ);\n    vec3.set(tmpVec2, this.maxX, this.maxY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    return false;\n  }\n}\n\nconst _segment = new LineSegment(vec3.create(), vec3.create());\n\nexport {Aabb};\n","import {Collidable} from './collidable';\nimport {LineSegment} from './line-segment';\n\n/**\n * This class represents a capsule.\n *\n * - A capsule is a cylinder with semi-spheres on either end.\n * - A capsule can represent a rough approximation of many useful shapes.\n * - A capsule can be used for relatively efficient collision detection.\n */\nclass Capsule extends Collidable {\n  /**\n   * The default orientation of the capsule is along the z-axis.\n   *\n   * @param {number} halfDistance Half the distance from the centers of the capsule end spheres.\n   * @param {number} radius\n   * @param {boolean} [isStationary=false]\n   * @param {CollidablePhysicsJob} [physicsJob]\n   */\n  constructor(halfDistance, radius, isStationary = false, physicsJob) {\n    super(isStationary, physicsJob);\n    this.halfDistance = halfDistance;\n    this.segment = new LineSegment(vec3.fromValues(0, 0, -halfDistance),\n        vec3.fromValues(0, 0, halfDistance));\n    this.radius = radius;\n  }\n\n  /**\n   * @returns {vec3}\n   * @override\n   */\n  get centerOfVolume() {\n    return this.segment.center;\n  }\n\n  /**\n   * @returns {Collidable}\n   * @override\n   */\n  get boundingVolume() {\n    return this;\n  }\n\n  /**\n   * @param {vec3} value\n   * @override\n   */\n  set position(value) {\n    this.segment.center = value;\n  }\n\n  /**\n   * @param {quat} value\n   * @override\n   */\n  set orientation(value) {\n    this.segment.orientation = value;\n  }\n}\n\nexport {Capsule};\n","/**\n * This class represents a 3D collidable rigid object.\n *\n * This is useful for collision detection and response.\n *\n * @abstract\n */\nclass Collidable {\n  /**\n   * @param {boolean} isStationary\n   * @param {CollidablePhysicsJob} [physicsJob]\n   */\n  constructor(isStationary, physicsJob) {\n    // Collidable is an abstract class. It should not be instantiated directly.\n    if (new.target === Collidable) {\n      throw new TypeError('Cannot construct Collidable instances directly');\n    }\n\n    this.isStationary = isStationary;\n    this.physicsJob = physicsJob;\n    this.collisions = [];\n    this.previousCollisions = [];\n  }\n\n  /**\n   * Implementing classes can override this to provide a center of mass that is different than the\n   * center of volume.\n   *\n   * @returns {vec3}\n   */\n  get centerOfMass() {\n    return this.centerOfVolume;\n  }\n\n  /**\n   * @returns {vec3}\n   * @abstract\n   */\n  get centerOfVolume() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * @returns {Collidable}\n   * @abstract\n   */\n  get boundingVolume() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * @param {vec3} value\n   * @abstract\n   */\n  set position(value) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * @param {quat} value\n   * @abstract\n   */\n  set orientation(value) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n}\n\nexport {Collidable};\n","import {tmpVec1, tmpVec2} from '../../../util';\n\n/**\n * This class represents a line segment.\n */\nclass LineSegment {\n  /**\n   * @param {vec3} start\n   * @param {vec3} end\n   */\n  constructor(start, end) {\n    this.start = vec3.create();\n    this.end = vec3.create();\n    this._center = vec3.create();\n    this._originalOrientationStart = vec3.create();\n    this._originalOrientationEnd = vec3.create();\n    this.reset(start, end);\n  }\n\n  /**\n   * @param {vec3} start\n   * @param {vec3} end\n   */\n  reset(start, end) {\n    vec3.copy(this.start, start);\n    vec3.copy(this.end, end);\n    vec3.subtract(this._originalOrientationStart, this.start, this.center);\n    vec3.subtract(this._originalOrientationEnd, this.end, this.center);\n  }\n\n  /** @returns {LineSegment} */\n  clone() {\n    const segment = new LineSegment(this.start, this.end);\n    segment._originalOrientationStart = this._originalOrientationStart;\n    segment._originalOrientationEnd = this._originalOrientationEnd;\n    return segment;\n  }\n\n  /**\n   * The UN-NORMALIZED direction of this segment.\n   *\n   * @returns {vec3}\n   */\n  get dir() {\n    // Reuse the same object when this is called multiple times.\n    this._dir = this._dir || vec3.create();\n    return vec3.subtract(this._dir, this.end, this.start);\n  }\n\n  /** @returns {vec3} */\n  get center() {\n    vec3.lerp(this._center, this.start, this.end, 0.5);\n    return this._center;\n  }\n\n  /** @param {vec3} value */\n  set center(value) {\n    // Reuse the same object when this is called multiple times.\n    this._displacement = this._displacement || vec3.create();\n    vec3.subtract(this._displacement, value, this.center);\n\n    vec3.add(this.start, this.start, this._displacement);\n    vec3.add(this.end, this.end, this._displacement);\n  }\n\n  /** @param {quat} value */\n  set orientation(value) {\n    vec3.transformQuat(tmpVec1, this._originalOrientationStart, value);\n    vec3.transformQuat(tmpVec2, this._originalOrientationEnd, value);\n\n    // We don't want this to be re-calculated between start/end updates.\n    const center = this.center;\n\n    vec3.add(this.start, center, tmpVec1);\n    vec3.add(this.end, center, tmpVec2);\n  }\n}\n\nexport {LineSegment};\n","import {Collidable} from './collidable';\nimport {Sphere} from './sphere-collidable';\nimport {LineSegment} from './line-segment';\n\n/**\n * This class represents an oriented bounding box (OBB).\n *\n * This is useful both for collision detection and for representing any rotated rectangular cuboid.\n * An OBB is only appropriate for some geometries. For other geometries, an axially-aligned bounding\n * box (AABB) or a bounding sphere may be more appropriate.\n */\nclass Obb extends Collidable {\n  /**\n   * Defaults to being centered at the origin with its local axes aligned with the world axes.\n   *\n   * @param {number} halfSideLengthX\n   * @param {number} halfSideLengthY\n   * @param {number} halfSideLengthZ\n   * @param {boolean} [isStationary=false]\n   * @param {CollidablePhysicsJob} [physicsJob]\n   */\n  constructor(halfSideLengthX, halfSideLengthY, halfSideLengthZ, isStationary = false, physicsJob) {\n    super(isStationary, physicsJob);\n    this.extents = [\n      vec3.fromValues(halfSideLengthX, 0, 0),\n      vec3.fromValues(0, halfSideLengthY, 0),\n      vec3.fromValues(0, 0, halfSideLengthZ)\n    ];\n    this.axes = [\n      vec3.fromValues(1, 0, 0),\n      vec3.fromValues(0, 1, 0),\n      vec3.fromValues(0, 0, 1)\n    ];\n    this.halfSideLengths = [\n      halfSideLengthX,\n      halfSideLengthY,\n      halfSideLengthZ\n    ];\n    this._center = vec3.create();\n    this._orientation = quat.create();\n  }\n\n  /**\n   * @returns {vec3}\n   * @override\n   */\n  get centerOfVolume() {\n    return this._center;\n  }\n\n  /**\n   * @returns {Collidable}\n   * @override\n   */\n  get boundingVolume() {\n    // Reuse the same value when this is called multiple times.\n    if (!this._boundingSphere) {\n      const radius = Math.sqrt(this.halfSideLengthX * this.halfSideLengthX +\n          this.halfSideLengthY * this.halfSideLengthY +\n          this.halfSideLengthZ * this.halfSideLengthZ);\n      this._boundingSphere = new Sphere(0, 0, 0, radius, this.isStationary);\n    }\n    this._boundingSphere.position = this._center;\n    return this._boundingSphere;\n  }\n\n  /**\n   * @param {vec3} value\n   * @override\n   */\n  set position(value) {\n    vec3.copy(this._center, value);\n  }\n\n  /**\n   * @param {quat} value\n   * @override\n   */\n  set orientation(value) {\n    quat.copy(this._orientation, value);\n    this._updateExtents();\n  }\n  /** @returns {quat} */\n  get orientation() {\n    return this._orientation;\n  }\n\n  /** @returns {number} */\n  get halfSideLengthX() {\n    return this.halfSideLengths[0];\n  }\n  /** @param {number} value */\n  set halfSideLengthX(value) {\n    this.halfSideLengths[0] = value;\n    this._updateExtents();\n  }\n\n  /** @returns {number} */\n  get halfSideLengthY() {\n    return this.halfSideLengths[1];\n  }\n  /** @param {number} value */\n  set halfSideLengthY(value) {\n    this.halfSideLengths[1] = value;\n    this._updateExtents();\n  }\n\n  /** @returns {number} */\n  get halfSideLengthZ() {\n    return this.halfSideLengths[2];\n  }\n  /** @param {number} value */\n  set halfSideLengthZ(value) {\n    this.halfSideLengths[2] = value;\n    this._updateExtents();\n  }\n\n  /**\n   * Calls the given callback once for each vertex.\n   *\n   * Stops as soon as the callback returns true for a vertex.\n   *\n   * @param {VertexCallback} callback\n   * @param {vec3} [vertex] Output param.\n   * @returns {boolean} True if one of the callbacks returned true.\n   */\n  someVertex(callback, vertex) {\n    vertex = vertex || _vertex1;\n\n    for (let xScale = -1; xScale <= 1; xScale += 2) {\n      for (let yScale = -1; yScale <= 1; yScale += 2) {\n        for (let zScale = -1; zScale <= 1; zScale += 2) {\n          vec3.copy(vertex, this._center);\n          vec3.scaleAndAdd(vertex, vertex, this.extents[0], xScale);\n          vec3.scaleAndAdd(vertex, vertex, this.extents[1], yScale);\n          vec3.scaleAndAdd(vertex, vertex, this.extents[2], zScale);\n          if (callback(vertex)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Calls the given callback once for each edge.\n   *\n   * @param {EdgeCallback} callback\n   * @param {LineSegment} [edge] Output param.\n   * @returns {boolean} True if one of the callbacks returned true.\n   */\n  someEdge(callback, edge) {\n    edge = edge || _segment;\n\n    return _edgeExtentScales.some(edgeExtentScalePair => {\n      const vertex1ExtentScales = edgeExtentScalePair[0];\n      const vertex2ExtentScales = edgeExtentScalePair[1];\n\n      // Calculate the edge's first and second vertex.\n      vec3.copy(_vertex1, this._center);\n      vec3.copy(_vertex2, this._center);\n      for (let i = 0; i < 3; i++) {\n        vec3.scaleAndAdd(_vertex1, _vertex1, this.extents[i], vertex1ExtentScales[i]);\n        vec3.scaleAndAdd(_vertex2, _vertex2, this.extents[i], vertex2ExtentScales[i]);\n      }\n\n      // Call back with the edge.\n      edge.reset(_vertex1, _vertex2);\n      return callback(edge);\n    });\n  }\n\n  /**\n   * Calls the given callback once for each face.\n   *\n   * @param {FaceCallback} callback\n   * @param {Array.<vec3>} [face] Output param.\n   * @returns {boolean} True if one of the callbacks returned true.\n   */\n  someFace(callback, face) {\n    face = face || [];\n\n    return _faceExtentScales.some(faceExtentScales => {\n      const vertex1ExtentScales = faceExtentScales[0];\n      const vertex2ExtentScales = faceExtentScales[1];\n      const vertex3ExtentScales = faceExtentScales[2];\n      const vertex4ExtentScales = faceExtentScales[3];\n\n      // Calculate the face's vertices.\n      vec3.copy(_vertex1, this._center);\n      vec3.copy(_vertex2, this._center);\n      vec3.copy(_vertex3, this._center);\n      vec3.copy(_vertex4, this._center);\n      for (let i = 0; i < 3; i++) {\n        vec3.scaleAndAdd(_vertex1, _vertex1, this.extents[i], vertex1ExtentScales[i]);\n        vec3.scaleAndAdd(_vertex2, _vertex2, this.extents[i], vertex2ExtentScales[i]);\n        vec3.scaleAndAdd(_vertex3, _vertex3, this.extents[i], vertex3ExtentScales[i]);\n        vec3.scaleAndAdd(_vertex4, _vertex4, this.extents[i], vertex4ExtentScales[i]);\n      }\n\n      // Call back with the face.\n      face.splice(0, 4, _vertex1, _vertex2, _vertex3, _vertex4);\n      return callback(face);\n    });\n  }\n\n  /**\n   * Calls the given callback once for each face with a given additional offset from the center\n   * applied to each face.\n   *\n   * @param {FaceCallback} callback\n   * @param {number} radiusOffset\n   * @param {Array.<vec3>} [face] Output param.\n   * @returns {boolean} True if one of the callbacks returned true.\n   */\n  somePushedOutFace(callback, radiusOffset, face) {\n    face = face || [];\n\n    return _faceExtentScales.some((faceExtentScales, index) => {\n      const vertex1ExtentScales = faceExtentScales[0];\n      const vertex2ExtentScales = faceExtentScales[1];\n      const vertex3ExtentScales = faceExtentScales[2];\n      const vertex4ExtentScales = faceExtentScales[3];\n      const directionOffsets = _pushedOutFaceOffsetDirections[index];\n\n      // Calculate the face's vertices.\n      vec3.copy(_vertex1, this._center);\n      vec3.copy(_vertex2, this._center);\n      vec3.copy(_vertex3, this._center);\n      vec3.copy(_vertex4, this._center);\n      for (let i = 0; i < 3; i++) {\n        // Add the offset for the normal vertex position.\n        vec3.scaleAndAdd(_vertex1, _vertex1, this.extents[i], vertex1ExtentScales[i]);\n        vec3.scaleAndAdd(_vertex2, _vertex2, this.extents[i], vertex2ExtentScales[i]);\n        vec3.scaleAndAdd(_vertex3, _vertex3, this.extents[i], vertex3ExtentScales[i]);\n        vec3.scaleAndAdd(_vertex4, _vertex4, this.extents[i], vertex4ExtentScales[i]);\n        // Add the pushed-out offset.\n        vec3.scaleAndAdd(_vertex1, _vertex1, this.extents[i],\n            radiusOffset / this.halfSideLengths[i] * directionOffsets[i]);\n        vec3.scaleAndAdd(_vertex2, _vertex2, this.extents[i],\n            radiusOffset / this.halfSideLengths[i] * directionOffsets[i]);\n        vec3.scaleAndAdd(_vertex3, _vertex3, this.extents[i],\n            radiusOffset / this.halfSideLengths[i] * directionOffsets[i]);\n        vec3.scaleAndAdd(_vertex4, _vertex4, this.extents[i],\n            radiusOffset / this.halfSideLengths[i] * directionOffsets[i]);\n      }\n\n      // Call back with the face.\n      face.splice(0, 4, _vertex1, _vertex2, _vertex3, _vertex4);\n      return callback(face);\n    });\n  }\n\n  _updateExtents() {\n    vec3.set(_vertex1, this.halfSideLengths[0], 0, 0);\n    vec3.transformQuat(this.extents[0], _vertex1, this._orientation);\n    vec3.set(_vertex1, 0, this.halfSideLengths[1], 0);\n    vec3.transformQuat(this.extents[1], _vertex1, this._orientation);\n    vec3.set(_vertex1, 0, 0, this.halfSideLengths[2]);\n    vec3.transformQuat(this.extents[2], _vertex1, this._orientation);\n\n    vec3.set(_vertex1, 1, 0, 0);\n    vec3.transformQuat(this.axes[0], _vertex1, this._orientation);\n    vec3.set(_vertex1, 0, 1, 0);\n    vec3.transformQuat(this.axes[1], _vertex1, this._orientation);\n    vec3.set(_vertex1, 0, 0, 1);\n    vec3.transformQuat(this.axes[2], _vertex1, this._orientation);\n  }\n}\n\nconst _vertex1 = vec3.create();\nconst _vertex2 = vec3.create();\nconst _vertex3 = vec3.create();\nconst _vertex4 = vec3.create();\nconst _segment = new LineSegment(vec3.create(), vec3.create());\n\nconst _edgeExtentScales = [\n  // Front-face edges.\n  [[1, -1, -1], [1, -1, 1]],\n  [[1, -1, -1], [1, 1, -1]],\n  [[1, 1, 1], [1, -1, 1]],\n  [[1, 1, 1], [1, 1, -1]],\n  // Back-face edges.\n  [[-1, -1, -1], [-1, -1, 1]],\n  [[-1, -1, -1], [-1, 1, -1]],\n  [[-1, 1, 1], [-1, -1, 1]],\n  [[-1, 1, 1], [-1, 1, -1]],\n  // Front-to-back edges.\n  [[1, -1, 1], [-1, -1, 1]],\n  [[1, 1, -1], [-1, 1, -1]],\n  [[1, 1, 1], [-1, 1, 1]],\n  [[1, -1, -1], [-1, -1, -1]],\n];\n\nconst _faceExtentScales = [\n  [[1, -1, -1], [1, -1, 1], [1, 1, 1], [1, 1, -1]],\n  [[-1, -1, -1], [-1, -1, 1], [-1, 1, 1], [-1, 1, -1]],\n  [[-1, 1, -1], [1, 1, -1], [1, 1, 1], [-1, 1, 1]],\n  [[-1, -1, -1], [1, -1, -1], [1, -1, 1], [-1, -1, 1]],\n  [[-1, -1, 1], [1, -1, 1], [1, 1, 1], [-1, 1, 1]],\n  [[-1, -1, -1], [1, -1, -1], [1, 1, -1], [-1, 1, -1]],\n];\n\nconst _pushedOutFaceOffsetDirections = [\n  vec3.fromValues(1, 0, 0),\n  vec3.fromValues(-1, 0, 0),\n  vec3.fromValues(0, 1, 0),\n  vec3.fromValues(0, -1, 0),\n  vec3.fromValues(0, 0, 1),\n  vec3.fromValues(0, 0, -1),\n];\n\nexport {Obb};\n\n/**\n * @callback VertexCallback\n * @param {vec3}\n * @returns {boolean} If true, iteration will stop.\n */\n\n/**\n * @callback EdgeCallback\n * @param {LineSegment}\n * @returns {boolean} If true, iteration will stop.\n */\n\n/**\n * @callback FaceCallback\n * @param {Array.<vec3>}\n * @returns {boolean} If true, iteration will stop.\n */\n","import {Collidable} from './collidable';\n\n/**\n * This class represents a bounding sphere.\n *\n * This is primarily useful for collision detection. A bounding sphere is only appropriate for some\n * geometries. For other geometries, an axially-aligned bounding box may be more appropriate. For\n * others still, an oriented bounding box or a more complicated hierarchical model may be more\n * appropriate.\n */\nclass Sphere extends Collidable {\n  /**\n   * @param {number} centerX\n   * @param {number} centerY\n   * @param {number} centerZ\n   * @param {number} radius\n   * @param {boolean} [isStationary=false]\n   * @param {CollidablePhysicsJob} [physicsJob]\n   */\n  constructor(centerX, centerY, centerZ, radius, isStationary = false, physicsJob) {\n    super(isStationary, physicsJob);\n    this.centerX = centerX;\n    this.centerY = centerY;\n    this.centerZ = centerZ;\n    this.radius = radius;\n  }\n\n  /**\n   * @returns {vec3}\n   * @override\n   */\n  get centerOfVolume() {\n    // Reuse the same object when this is called multiple times.\n    this._center = this._center || vec3.create();\n    vec3.set(this._center, this.centerX, this.centerY, this.centerZ);\n    return this._center;\n  }\n\n  /**\n   * @returns {Collidable}\n   * @override\n   */\n  get boundingVolume() {\n    return this;\n  }\n\n  /**\n   * @param {vec3} value\n   * @override\n   */\n  set position(value) {\n    this.centerX = value[0];\n    this.centerY = value[1];\n    this.centerZ = value[2];\n  }\n\n  /**\n   * @param {quat} value\n   * @override\n   */\n  set orientation(value) {\n    // Do nothing.\n  }\n}\n\nexport {Sphere};\n","import * as aabbCollisionDetection from './src/aabb-collision-detection';\nimport * as capsuleCollisionDetection from './src/capsule-collision-detection';\nimport * as obbCollisionDetection from './src/obb-collision-detection';\nimport * as sphereCollisionDetection from './src/sphere-collision-detection';\n\nexport {\n  aabbCollisionDetection,\n  capsuleCollisionDetection,\n  obbCollisionDetection,\n  sphereCollisionDetection,\n};\n","import * as sphereCollisionDetection from './sphere-collision-detection';\nimport * as obbCollisionDetection from './obb-collision-detection';\nimport * as capsuleCollisionDetection from './capsule-collision-detection';\nimport {aabbVsPoint as geometryAabbVsPoint} from '../../../util';\n\n/**\n * This module defines utility methods for detecting whether intersection has occurred between\n * axially-aligned bounding boxes and other shapes.\n */\n\n/**\n * @param {Aabb} aabb\n * @param {vec3} point\n * @returns {boolean}\n */\nfunction aabbVsPoint(aabb, point) {\n  return geometryAabbVsPoint(aabb, point);\n}\n\n/**\n * @param {Aabb} aabb\n * @param {Sphere} sphere\n * @returns {boolean}\n */\nfunction aabbVsSphere(aabb, sphere) {\n  return sphereCollisionDetection.sphereVsAabb(sphere, aabb);\n}\n\n/**\n * @param {Aabb} aabbA\n * @param {Aabb} aabbB\n * @returns {boolean}\n */\nfunction aabbVsAabb(aabbA, aabbB) {\n  return aabbA.maxX >= aabbB.minX && aabbA.minX <= aabbB.maxX &&\n      aabbA.maxY >= aabbB.minY && aabbA.minY <= aabbB.maxY &&\n      aabbA.maxZ >= aabbB.minZ && aabbA.minZ <= aabbB.maxZ;\n}\n\n/**\n * @param {Aabb} aabb\n * @param {Obb} obb\n * @returns {boolean}\n */\nfunction aabbVsObb(aabb, obb) {\n  return obbCollisionDetection.obbVsAabb(obb, aabb);\n}\n\n/**\n * @param {Aabb} aabb\n * @param {Capsule} capsule\n * @returns {boolean}\n */\nfunction aabbVsCapsule(aabb, capsule) {\n  return capsuleCollisionDetection.capsuleVsAabb(capsule, aabb);\n}\n\nexport {\n  aabbVsPoint,\n  aabbVsSphere,\n  aabbVsAabb,\n  aabbVsObb,\n  aabbVsCapsule,\n};\n","/**\n * This module defines utility methods for detecting whether intersection has occurred between\n * capsules and other shapes.\n */\n\nimport {\n  findClosestPointFromAabbToPoint,\n  findSquaredDistanceBetweenSegments,\n  findSquaredDistanceFromSegmentToPoint,\n  tmpVec1\n} from '../../../util';\nimport * as obbCollisionDetection from './obb-collision-detection';\n\n/**\n * @param {Capsule} capsule\n * @param {vec3} point\n * @returns {boolean}\n */\nfunction capsuleVsPoint(capsule, point) {\n  return findSquaredDistanceFromSegmentToPoint(capsule.segment, point) <=\n      capsule.radius * capsule.radius;\n}\n\n/**\n * @param {Capsule} capsule\n * @param {Sphere} sphere\n * @returns {boolean}\n */\nfunction capsuleVsSphere(capsule, sphere) {\n  const sumOfRadii = capsule.radius + sphere.radius;\n  return findSquaredDistanceFromSegmentToPoint(capsule.segment, sphere.centerOfVolume) <=\n      sumOfRadii * sumOfRadii;\n}\n\n/**\n * NOTE: This implementation cheats by checking whether vertices from one shape lie within the\n * other. Due to the tunnelling problem, it is possible that intersection occurs without any\n * vertices lying within the other shape. However, (A) this is unlikely, and (B) we are ignoring the\n * tunnelling problem for the rest of this collision system anyway.\n *\n * @param {Capsule} capsule\n * @param {Aabb} aabb\n * @returns {boolean}\n */\nfunction capsuleVsAabb(capsule, aabb) {\n  const squaredRadius = capsule.radius * capsule.radius;\n\n  // Check whether the two capsule ends intersect the AABB (sphere vs AABB) (addresses the\n  // capsule-vs-AABB-face case).\n  findClosestPointFromAabbToPoint(tmpVec1, aabb, capsule.segment.start);\n  if (vec3.squaredDistance(tmpVec1, capsule.segment.start) <= squaredRadius) {\n    return true;\n  }\n  findClosestPointFromAabbToPoint(tmpVec1, aabb, capsule.segment.end);\n  if (vec3.squaredDistance(tmpVec1, capsule.segment.end) <= squaredRadius) {\n    return true;\n  }\n\n  // Check whether the capsule intersects with any AABB edge (addresses the capsule-vs-AABB-edge\n  // case).\n  return aabb.someEdge(edge =>\n      findSquaredDistanceBetweenSegments(capsule.segment, edge) <= squaredRadius);\n\n  // (The capsule-vs-AABB-vertex case is covered by the capsule-vs-AABB-edge case).\n}\n\n/**\n * @param {Capsule} capsule\n * @param {Obb} obb\n * @returns {boolean}\n */\nfunction capsuleVsObb(capsule, obb) {\n  return obbCollisionDetection.obbVsCapsule(obb, capsule);\n}\n\n/**\n * @param {Capsule} capsuleA\n * @param {Capsule} capsuleB\n * @returns {boolean}\n */\nfunction capsuleVsCapsule(capsuleA, capsuleB) {\n  const sumOfRadii = capsuleA.radius + capsuleB.radius;\n  return findSquaredDistanceBetweenSegments(capsuleA.segment, capsuleB.segment) <=\n      sumOfRadii * sumOfRadii;\n}\n\nexport {\n  capsuleVsPoint,\n  capsuleVsSphere,\n  capsuleVsAabb,\n  capsuleVsObb,\n  capsuleVsCapsule,\n};\n","/**\n * This module defines utility methods for detecting whether intersection has occurred between\n * oriented bounding boxes and other shapes.\n */\n\nimport {\n  findClosestPointFromObbToPoint,\n  findPoiBetweenSegmentAndPlaneRegion,\n  findSquaredDistanceBetweenSegments,\n  tmpVec1,\n  tmpVec2,\n  tmpVec3,\n  tmpVec4\n} from '../../../util';\nimport * as aabbCollisionDetection from './aabb-collision-detection';\nimport * as capsuleCollisionDetection from './capsule-collision-detection';\n\n// TODO: Refactor these to not actually calculate the point of intersection. These checks can\n// instead be done more efficiently using SAT.\n\n/**\n * @param {Obb} obb\n * @param {vec3} point\n * @returns {boolean}\n */\nfunction obbVsPoint(obb, point) {\n  vec3.subtract(tmpVec4, point, obb.centerOfVolume);\n\n  vec3.set(tmpVec1, 1, 0, 0);\n  vec3.transformQuat(tmpVec1, tmpVec1, obb.orientation);\n  const axis1Distance = vec3.dot(tmpVec4, tmpVec1);\n\n  if (axis1Distance >= -obb.halfSideLengthX && axis1Distance <= obb.halfSideLengthX) {\n    vec3.set(tmpVec2, 0, 1, 0);\n    vec3.transformQuat(tmpVec2, tmpVec2, obb.orientation);\n    const axis2Distance = vec3.dot(tmpVec4, tmpVec2);\n\n    if (axis2Distance >= -obb.halfSideLengthY && axis2Distance <= obb.halfSideLengthY) {\n      vec3.set(tmpVec3, 0, 0, 1);\n      vec3.transformQuat(tmpVec3, tmpVec3, obb.orientation);\n      const axis3Distance = vec3.dot(tmpVec4, tmpVec3);\n\n      return axis3Distance >= -obb.halfSideLengthZ && axis3Distance <= obb.halfSideLengthZ;\n    }\n  }\n\n  return false;\n}\n\n/**\n * @param {Obb} obb\n * @param {Sphere} sphere\n * @returns {boolean}\n */\nfunction obbVsSphere(obb, sphere) {\n  findClosestPointFromObbToPoint(tmpVec1, obb, sphere.centerOfVolume);\n  return vec3.squaredDistance(tmpVec1, sphere.centerOfVolume) <=\n      sphere.radius * sphere.radius;\n}\n\n/**\n * NOTE: This implementation cheats by checking whether vertices from one shape lie within the\n * other. Due to the tunnelling problem, it is possible that intersection occurs without any\n * vertices lying within the other shape. However, (A) this is unlikely, and (B) we are ignoring the\n * tunnelling problem for the rest of this collision system anyway.\n *\n * @param {Obb} obb\n * @param {Aabb} aabb\n * @returns {boolean}\n */\nfunction obbVsAabb(obb, aabb) {\n  return _obbVsBoxHelper(obb, aabb, aabbCollisionDetection.aabbVsPoint);\n}\n\n/**\n * NOTE: This implementation cheats by checking whether vertices from one shape lie within the\n * other. Due to the tunnelling problem, it is possible that intersection occurs without any\n * vertices lying within the other shape. However, (A) this is unlikely, and (B) we are ignoring the\n * tunnelling problem for the rest of this collision system anyway.\n *\n * @param {Obb} obbA\n * @param {Obb} obbB\n * @returns {boolean}\n */\nfunction obbVsObb(obbA, obbB) {\n  return _obbVsBoxHelper(obbA, obbB, obbVsPoint);\n}\n\n/**\n * @param {Obb} obb\n * @param {Obb|Aabb} other\n * @param {Function} otherVsPointCallback\n * @returns {boolean}\n * @private\n */\nfunction _obbVsBoxHelper(obb, other, otherVsPointCallback) {\n  // Check whether any vertices from A lie within B's bounds.\n  if (obb.someVertex(vertex => otherVsPointCallback(other, vertex))) return true;\n\n  // Check whether any vertices from B lie within A's bounds.\n  if (other.someVertex(vertex => obbVsPoint(obb, vertex))) return true;\n\n  // We assume that a vertex-to-face collision would have been detected by one of the two above\n  // checks. Any edge-to-edge collision must involve both an edge from A through a face of B and\n  // vice versa. So it is sufficient to only check the edges of one and the faces of the other.\n  if (other.someEdge(edge =>\n          obb.someFace(face =>\n              findPoiBetweenSegmentAndPlaneRegion(tmpVec1, edge, ...face))))\n    return true;\n\n  return false;\n}\n\n/**\n * @param {Obb} obb\n * @param {Capsule} capsule\n * @returns {boolean}\n */\nfunction obbVsCapsule(obb, capsule) {\n  // Check the edges.\n  const squaredRadius = capsule.radius * capsule.radius;\n  let areIntersecting = obb.someEdge(edge =>\n      findSquaredDistanceBetweenSegments(capsule.segment, edge) < squaredRadius);\n\n  if (areIntersecting) return true;\n\n  // Check the faces.\n  areIntersecting = obb.somePushedOutFace(face =>\n          findPoiBetweenSegmentAndPlaneRegion(tmpVec1, capsule.segment, ...face), capsule.radius);\n\n  // Check for inclusion of one shape inside the other.\n  areIntersecting = areIntersecting || obbVsPoint(obb, capsule.centerOfVolume);\n  areIntersecting = areIntersecting || capsuleCollisionDetection.capsuleVsPoint(capsule,\n      obb.centerOfVolume);\n\n  return areIntersecting;\n}\n\nexport {\n  obbVsPoint,\n  obbVsSphere,\n  obbVsAabb,\n  obbVsObb,\n  obbVsCapsule,\n};\n","import {findClosestPointFromAabbToPoint, tmpVec1} from '../../../util';\nimport * as obbCollisionDetection from './obb-collision-detection';\nimport * as capsuleCollisionDetection from './capsule-collision-detection';\n\n/**\n * This module defines utility methods for detecting whether intersection has occurred between\n * spheres and other shapes.\n */\n\n/**\n * @param {Sphere} sphere\n * @param {vec3} point\n * @returns {boolean}\n */\nfunction sphereVsPoint(sphere, point) {\n  return vec3.squaredDistance(point, sphere.centerOfVolume) <= sphere.radius * sphere.radius;\n}\n\n/**\n * @param {Sphere} sphereA\n * @param {Sphere} sphereB\n * @returns {boolean}\n */\nfunction sphereVsSphere(sphereA, sphereB) {\n  const sumOfRadii = sphereA.radius + sphereB.radius;\n  return vec3.squaredDistance(sphereA.centerOfVolume, sphereB.centerOfVolume) <=\n      sumOfRadii * sumOfRadii;\n}\n\n/**\n * @param {Sphere} sphere\n * @param {Aabb} aabb\n * @returns {boolean}\n */\nfunction sphereVsAabb(sphere, aabb) {\n  findClosestPointFromAabbToPoint(tmpVec1, aabb, sphere.centerOfVolume);\n  return vec3.squaredDistance(tmpVec1, sphere.centerOfVolume) <= sphere.radius * sphere.radius;\n}\n\n/**\n * @param {Sphere} sphere\n * @param {Obb} obb\n * @returns {boolean}\n */\nfunction sphereVsObb(sphere, obb) {\n  return obbCollisionDetection.obbVsSphere(obb, sphere);\n}\n\n/**\n * @param {Sphere} sphere\n * @param {Capsule} capsule\n * @returns {boolean}\n */\nfunction sphereVsCapsule(sphere, capsule) {\n  return capsuleCollisionDetection.capsuleVsSphere(capsule, sphere);\n}\n\nexport {\n  sphereVsPoint,\n  sphereVsSphere,\n  sphereVsAabb,\n  sphereVsObb,\n  sphereVsCapsule,\n};\n","import * as aabbContactCalculation from './src/aabb-contact-calculation';\nimport * as capsuleContactCalculation from './src/capsule-contact-calculation';\nimport * as obbContactCalculation from './src/obb-contact-calculation';\nimport * as sphereContactCalculation from './src/sphere-contact-calculation';\n\nexport {\n  aabbContactCalculation,\n  capsuleContactCalculation,\n  obbContactCalculation,\n  sphereContactCalculation,\n};\n","/**\n * This module defines utility methods for calculating a contact point between axially-aligned \n * bounding boxes and other shapes.\n *\n * - Each of these functions assumes that the objects are actually colliding.\n * - The resulting contact point may be anywhere within the intersection of the two objects.\n */\n\nimport * as sphereContactCalculation from './sphere-contact-calculation';\nimport * as obbContactCalculation from './obb-contact-calculation';\nimport * as capsuleContactCalculation from './capsule-contact-calculation';\nimport {tmpVec1} from '../../../util';\nimport {aabbCollisionDetection} from '../../collision-detection';\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Aabb} aabb\n * @param {vec3} point\n */\nfunction aabbVsPoint(contactPoint, contactNormal, aabb, point) {\n  vec3.copy(contactPoint, point);\n  findAabbNormalFromContactPoint(contactNormal, contactPoint, aabb);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Aabb} aabb\n * @param {Sphere} sphere\n */\nfunction aabbVsSphere(contactPoint, contactNormal, aabb, sphere) {\n  sphereContactCalculation.sphereVsAabb(contactPoint, contactNormal, sphere, aabb);\n  vec3.negate(contactNormal, contactNormal);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Aabb} aabbA\n * @param {Aabb} aabbB\n */\nfunction aabbVsAabb(contactPoint, contactNormal, aabbA, aabbB) {\n  // Compute the contact normal.\n  vec3.set(contactNormal, 0, 0, 0);\n  const xIntersectionDepth = Math.min(aabbA.maxX - aabbB.minX, aabbB.maxX - aabbA.minX);\n  const yIntersectionDepth = Math.min(aabbA.maxY - aabbB.minY, aabbB.maxY - aabbA.minY);\n  const zIntersectionDepth = Math.min(aabbA.maxZ - aabbB.minZ, aabbB.maxZ - aabbA.minZ);\n  // Assume that the direction of intersection corresponds to whichever axis has the shallowest\n  // intersection.\n  if (xIntersectionDepth <= yIntersectionDepth) {\n    if (xIntersectionDepth <= zIntersectionDepth) {\n      contactNormal[0] = aabbA.maxX - aabbB.minX <= aabbB.maxX - aabbA.minX ? 1 : -1;\n    } else {\n      contactNormal[2] = aabbA.maxZ - aabbB.minZ <= aabbB.maxZ - aabbA.minZ ? 1 : -1;\n    }\n  } else {\n    if (yIntersectionDepth <= zIntersectionDepth) {\n      contactNormal[1] = aabbA.maxY - aabbB.minY <= aabbB.maxY - aabbA.minY ? 1 : -1;\n    } else {\n      contactNormal[2] = aabbA.maxZ - aabbB.minZ <= aabbB.maxZ - aabbA.minZ ? 1 : -1;\n    }\n  }\n\n  // TODO: The two AABBs form a square intersection cross-section region along the direction of the\n  // normal. Calculate the center of that square to use as the point of contact.\n  if (!aabbA.someVertex(vertex => aabbCollisionDetection.aabbVsPoint(aabbB, vertex),\n          contactPoint)) {\n    aabbB.someVertex(vertex => aabbCollisionDetection.aabbVsPoint(aabbA, vertex), contactPoint);\n  }\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Aabb} aabb\n * @param {Obb} obb\n */\nfunction aabbVsObb(contactPoint, contactNormal, aabb, obb) {\n  obbContactCalculation.obbVsAabb(contactPoint, contactNormal, obb, aabb);\n  vec3.negate(contactNormal, contactNormal);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Aabb} aabb\n * @param {Capsule} capsule\n */\nfunction aabbVsCapsule(contactPoint, contactNormal, aabb, capsule) {\n  capsuleContactCalculation.capsuleVsAabb(contactPoint, contactNormal, capsule, aabb);\n  vec3.negate(contactNormal, contactNormal);\n}\n\n/**\n * @param {vec3} contactNormal Output param.\n * @param {vec3} contactPoint\n * @param {Aabb} aabb\n * @private\n */\nfunction findAabbNormalFromContactPoint(contactNormal, contactPoint, aabb) {\n  vec3.set(contactNormal, 0, 0, 0);\n  vec3.subtract(tmpVec1, contactPoint, aabb.centerOfVolume);\n  const xDistanceFromFace = aabb.rangeX / 2 - Math.abs(tmpVec1[0]);\n  const yDistanceFromFace = aabb.rangeY / 2 - Math.abs(tmpVec1[1]);\n  const zDistanceFromFace = aabb.rangeZ / 2 - Math.abs(tmpVec1[2]);\n  // Assume that the point is contacting whichever face it's closest to.\n  if (xDistanceFromFace <= yDistanceFromFace) {\n    if (xDistanceFromFace <= zDistanceFromFace) {\n      contactNormal[0] = tmpVec1[0] > 0 ? 1 : -1;\n    } else {\n      contactNormal[2] = tmpVec1[2] > 0 ? 1 : -1;\n    }\n  } else {\n    if (yDistanceFromFace <= zDistanceFromFace) {\n      contactNormal[1] = tmpVec1[1] > 0 ? 1 : -1;\n    } else {\n      contactNormal[2] = tmpVec1[2] > 0 ? 1 : -1;\n    }\n  }\n}\n\nexport {\n  aabbVsPoint,\n  aabbVsSphere,\n  aabbVsAabb,\n  aabbVsObb,\n  aabbVsCapsule,\n  findAabbNormalFromContactPoint,\n};\n","/**\n * This module defines utility methods for calculating a contact point between capsules and other \n * shapes.\n *\n * - Each of these functions assumes that the objects are actually colliding.\n * - The resulting contact point may be anywhere within the intersection of the two objects.\n */\n\nimport {\n  findClosestPointFromAabbToPoint,\n  findClosestPointOnSegmentToPoint,\n  findClosestPointsFromSegmentToSegment,\n  tmpVec1,\n  tmpVec2\n} from '../../../util';\nimport * as obbContactCalculation from './obb-contact-calculation';\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Capsule} capsule\n * @param {vec3} point\n */\nfunction capsuleVsPoint(contactPoint, contactNormal, capsule, point) {\n  vec3.copy(contactPoint, point);\n  findClosestPointOnSegmentToPoint(contactNormal, capsule.segment, point);\n  vec3.subtract(contactNormal, contactPoint, contactNormal);\n  vec3.normalize(contactNormal, contactNormal);\n}\n\n/**\n * Finds the closest point on the surface of the capsule to the sphere center.\n *\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Capsule} capsule\n * @param {Sphere} sphere\n */\nfunction capsuleVsSphere(contactPoint, contactNormal, capsule, sphere) {\n  const sphereCenter = sphere.centerOfVolume;\n  findClosestPointOnSegmentToPoint(contactPoint, capsule.segment, sphereCenter);\n  vec3.subtract(contactNormal, sphereCenter, contactPoint);\n  vec3.normalize(contactNormal, contactNormal);\n  vec3.scaleAndAdd(contactPoint, contactPoint, contactNormal, capsule.radius);\n}\n\n/**\n * Finds the closest point on the surface of the capsule to the AABB.\n *\n * NOTE: This implementation cheats by checking whether vertices from one shape lie within the\n * other. Due to the tunnelling problem, it is possible that intersection occurs without any\n * vertices lying within the other shape. However, (A) this is unlikely, and (B) we are ignoring the\n * tunnelling problem for the rest of this collision system anyway.\n *\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Capsule} capsule\n * @param {Aabb} aabb\n */\nfunction capsuleVsAabb(contactPoint, contactNormal, capsule, aabb) {\n  // tmpVec1 represents the closest point on the capsule to the AABB. tmpVec2\n  // represents the closest point on the AABB to the capsule.\n\n  //\n  // Check whether the two capsule ends intersect the AABB (sphere vs AABB) (addresses the\n  // capsule-vs-AABB-face case).\n  //\n\n  const squaredRadius = capsule.radius * capsule.radius;\n  let doesAabbIntersectAnEndPoint = false;\n\n  let endPoint = capsule.segment.start;\n  findClosestPointFromAabbToPoint(tmpVec2, aabb, endPoint);\n  if (vec3.squaredDistance(tmpVec2, endPoint) <= squaredRadius) {\n    doesAabbIntersectAnEndPoint = true;\n  } else {\n    endPoint = capsule.segment.end;\n    findClosestPointFromAabbToPoint(tmpVec2, aabb, endPoint);\n    if (vec3.squaredDistance(tmpVec2, endPoint) <= squaredRadius) {\n      doesAabbIntersectAnEndPoint = true;\n    }\n  }\n\n  if (!doesAabbIntersectAnEndPoint) {\n    //\n    // Check whether the capsule intersects with any AABB edge (addresses the capsule-vs-AABB-edge\n    // case).\n    //\n    aabb.someEdge(edge => {\n      findClosestPointsFromSegmentToSegment(tmpVec1, tmpVec2,\n          capsule.segment, edge);\n      const distance = vec3.squaredDistance(tmpVec1, tmpVec2);\n      return distance <= squaredRadius;\n    });\n  }\n\n  // (The capsule-vs-AABB-vertex case is covered by the capsule-vs-AABB-edge case).\n\n  findClosestPointOnSegmentToPoint(tmpVec1, capsule.segment, tmpVec2);\n  vec3.subtract(contactNormal, tmpVec2, tmpVec1);\n  vec3.normalize(contactNormal, contactNormal);\n  vec3.scaleAndAdd(contactPoint, tmpVec1, contactNormal, capsule.radius);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Capsule} capsule\n * @param {Obb} obb\n */\nfunction capsuleVsObb(contactPoint, contactNormal, capsule, obb) {\n  obbContactCalculation.obbVsCapsule(contactPoint, contactNormal, obb, capsule);\n  vec3.negate(contactNormal, contactNormal);\n}\n\n/**\n * Finds the closest point on the surface of capsule A to capsule B.\n *\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Capsule} capsuleA\n * @param {Capsule} capsuleB\n */\nfunction capsuleVsCapsule(contactPoint, contactNormal, capsuleA, capsuleB) {\n  findClosestPointsFromSegmentToSegment(tmpVec1, tmpVec2,\n      capsuleA.segment, capsuleB.segment);\n  vec3.subtract(contactNormal, tmpVec2, tmpVec1);\n  vec3.normalize(contactNormal, contactNormal);\n  vec3.scaleAndAdd(contactPoint, tmpVec1, contactNormal, capsuleA.radius);\n}\n\nexport {\n  capsuleVsPoint,\n  capsuleVsSphere,\n  capsuleVsAabb,\n  capsuleVsObb,\n  capsuleVsCapsule,\n};\n","/**\n * This module defines utility methods for calculating a contact point between oriented bounding\n * boxes and other shapes.\n *\n * - Each of these functions assumes that the objects are actually colliding.\n * - The resulting contact point may be anywhere within the intersection of the two objects.\n */\n\nimport {\n  findPoiBetweenSegmentAndPlaneRegion,\n  findClosestPointFromObbToPoint,\n  findSquaredDistanceBetweenSegments,\n  findClosestPointsFromSegmentToSegment,\n  tmpVec1\n} from '../../../util';\nimport {aabbCollisionDetection, obbCollisionDetection} from '../../collision-detection';\nimport {LineSegment} from '../../collidables';\nimport * as aabbContactCalculation from './aabb-contact-calculation';\n\n// TODO: There are more efficient (but far more complicated) algorithms for finding the point of\n// intersection with OBBs. Port over some other pre-existing solutions for these.\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Obb} obb\n * @param {vec3} point\n */\nfunction obbVsPoint(contactPoint, contactNormal, obb, point) {\n  vec3.copy(contactPoint, point);\n  findObbNormalFromContactPoint(contactNormal, contactPoint, obb);\n}\n\n/**\n * Finds the closest point anywhere inside the OBB to the center of the sphere.\n *\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Obb} obb\n * @param {Sphere} sphere\n */\nfunction obbVsSphere(contactPoint, contactNormal, obb, sphere) {\n  findClosestPointFromObbToPoint(contactPoint, obb, sphere.centerOfVolume);\n  vec3.subtract(contactNormal, sphere.centerOfVolume, contactPoint);\n  vec3.normalize(contactNormal, contactNormal);\n}\n\n/**\n * NOTE: This implementation cheats by checking whether vertices from one shape lie within the\n * other. Due to the tunnelling problem, it is possible that intersection occurs without any\n * vertices lying within the other shape. However, (A) this is unlikely, and (B) we are ignoring the\n * tunnelling problem for the rest of this collision system anyway.\n *\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Obb} obb\n * @param {Aabb} aabb\n */\nfunction obbVsAabb(contactPoint, contactNormal, obb, aabb) {\n  return _obbVsBoxHelper(contactPoint, contactNormal, obb, aabb, aabbCollisionDetection.aabbVsPoint,\n      aabbContactCalculation.findAabbNormalFromContactPoint);\n}\n\n/**\n * NOTE: This implementation cheats by checking whether vertices from one shape lie within the\n * other. Due to the tunnelling problem, it is possible that intersection occurs without any\n * vertices lying within the other shape. However, (A) this is unlikely, and (B) we are ignoring the\n * tunnelling problem for the rest of this collision system anyway.\n *\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Obb} obbA\n * @param {Obb} obbB\n */\nfunction obbVsObb(contactPoint, contactNormal, obbA, obbB) {\n  return _obbVsBoxHelper(contactPoint, contactNormal, obbA, obbB, obbCollisionDetection.obbVsPoint,\n      findObbNormalFromContactPoint);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Obb} obb\n * @param {Obb|Aabb} other\n * @param {Function} otherVsPointCollisionDetectionCallback\n * @param {Function} findOtherNormalFromContactPoint\n * @private\n */\nfunction _obbVsBoxHelper(contactPoint, contactNormal, obb, other,\n                         otherVsPointCollisionDetectionCallback,\n                         findOtherNormalFromContactPoint) {\n  // Check whether any vertices from A lie within B's bounds.\n  if (obb.someVertex(vertex => otherVsPointCollisionDetectionCallback(other, vertex),\n          contactPoint)) {\n    findOtherNormalFromContactPoint(contactNormal, contactPoint, other);\n    vec3.negate(contactNormal, contactNormal);\n    return;\n  }\n\n  // Check whether any vertices from B lie within A's bounds.\n  if (other.someVertex(vertex => obbCollisionDetection.obbVsPoint(obb, vertex), contactPoint)) {\n    findObbNormalFromContactPoint(contactNormal, contactPoint, obb);\n    return;\n  }\n\n  // We assume that a vertex-to-face collision would have been detected by one of the two above\n  // checks. Any edge-to-edge collision must involve both an edge from A through a face of B and\n  // vice versa. So it is sufficient to only check the edges of one and the faces of the other.\n  other.someEdge(edge =>\n      obb.someFace(face => findPoiBetweenSegmentAndPlaneRegion(contactPoint, edge, ...face)));\n  findObbNormalFromContactPoint(contactNormal, contactPoint, obb);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Obb} obb\n * @param {Capsule} capsule\n */\nfunction obbVsCapsule(contactPoint, contactNormal, obb, capsule) {\n  // tmpVec1 is the point on the capsule segment that is closest to the OBB.\n\n  //\n  // Check the edges.\n  //\n\n  const segment = new LineSegment(vec3.create(), vec3.create());\n  const squaredRadius = capsule.radius * capsule.radius;\n  const areIntersecting = obb.someEdge(edge =>\n      findSquaredDistanceBetweenSegments(capsule.segment, edge) < squaredRadius, segment);\n\n  if (areIntersecting) {\n    findClosestPointsFromSegmentToSegment(tmpVec1, contactPoint, capsule.segment, segment);\n    vec3.subtract(contactNormal, tmpVec1, contactPoint);\n    vec3.normalize(contactNormal, contactNormal);\n    return;\n  }\n\n  //\n  // Check the faces.\n  //\n\n  obb.somePushedOutFace(face =>\n      findPoiBetweenSegmentAndPlaneRegion(tmpVec1, capsule.segment, ...face), capsule.radius);\n\n  findObbNormalFromContactPoint(contactNormal, tmpVec1, obb);\n\n  // NOTE: This assumes that the angle between the capsule segment and the face plane is not oblique\n  // and that the depth of penetration is shallow. When both of these conditions are not true, the\n  // contact point will be offset from the intersection point on the pushed-out face.\n  vec3.scaleAndAdd(contactPoint, tmpVec1, contactNormal, -capsule.radius);\n}\n\n/**\n * @param {vec3} contactNormal Output param.\n * @param {vec3} contactPoint\n * @param {Obb} obb\n * @private\n */\nfunction findObbNormalFromContactPoint(contactNormal, contactPoint, obb) {\n  // Calculate the displacement along each axis.\n  const projections = [];\n  vec3.subtract(tmpVec1, contactPoint, obb.centerOfVolume);\n  for (let i = 0; i < 3; i++) {\n    projections[i] = vec3.dot(obb.axes[i], tmpVec1);\n  }\n\n  // Determine which face the normal is pointing away from.\n  vec3.set(contactNormal, 0, 0, 0);\n  const xDistanceFromFace = obb.halfSideLengths[0] - Math.abs(projections[0]);\n  const yDistanceFromFace = obb.halfSideLengths[1] - Math.abs(projections[1]);\n  const zDistanceFromFace = obb.halfSideLengths[2] - Math.abs(projections[2]);\n  // Assume that the point is contacting whichever face it's closest to.\n  if (xDistanceFromFace <= yDistanceFromFace) {\n    if (xDistanceFromFace <= zDistanceFromFace) {\n      contactNormal[0] = projections[0] > 0 ? 1 : -1;\n    } else {\n      contactNormal[2] = projections[2] > 0 ? 1 : -1;\n    }\n  } else {\n    if (yDistanceFromFace <= zDistanceFromFace) {\n      contactNormal[1] = projections[1] > 0 ? 1 : -1;\n    } else {\n      contactNormal[2] = projections[2] > 0 ? 1 : -1;\n    }\n  }\n\n  // Apply the OBB's orientation to the normal.\n  vec3.transformQuat(contactNormal, contactNormal, obb.orientation);\n}\n\nexport {\n  obbVsPoint,\n  obbVsSphere,\n  obbVsAabb,\n  obbVsObb,\n  obbVsCapsule,\n  findObbNormalFromContactPoint,\n};\n","/**\n * This module defines utility methods for calculating a contact point between spheres and other\n * shapes.\n *\n * - Each of these functions assumes that the objects are actually colliding.\n * - The resulting contact point may be anywhere within the intersection of the two objects.\n */\n\nimport {findClosestPointFromAabbSurfaceToPoint} from '../../../util';\nimport {findAabbNormalFromContactPoint} from './aabb-contact-calculation';\nimport * as obbContactCalculation from './obb-contact-calculation';\nimport * as capsuleContactCalculation from './capsule-contact-calculation';\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Sphere} sphere\n * @param {vec3} point\n */\nfunction sphereVsPoint(contactPoint, contactNormal, sphere, point) {\n  vec3.copy(contactPoint, point);\n  // Assume that the point is contacting the closest point on the surface of the sphere.\n  vec3.subtract(contactNormal, point, sphere.centerOfVolume);\n  vec3.normalize(contactNormal, contactNormal);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Sphere} sphereA\n * @param {Sphere} sphereB\n */\nfunction sphereVsSphere(contactPoint, contactNormal, sphereA, sphereB) {\n  vec3.subtract(contactNormal, sphereB.centerOfVolume, sphereA.centerOfVolume);\n  vec3.normalize(contactNormal, contactNormal);\n  // The point on the surface of sphere A that is closest to the center of sphere B.\n  vec3.scaleAndAdd(contactPoint, sphereA.centerOfVolume, contactNormal, sphereA.radius);\n}\n\n/**\n * Finds the closest point on the surface of the AABB to the sphere center.\n *\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Sphere} sphere\n * @param {Aabb} aabb\n */\nfunction sphereVsAabb(contactPoint, contactNormal, sphere, aabb) {\n  findClosestPointFromAabbSurfaceToPoint(contactPoint, aabb, sphere.centerOfVolume);\n  findAabbNormalFromContactPoint(contactNormal, contactPoint, aabb);\n  vec3.negate(contactNormal, contactNormal);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Sphere} sphere\n * @param {Obb} obb\n */\nfunction sphereVsObb(contactPoint, contactNormal, sphere, obb) {\n  obbContactCalculation.obbVsSphere(contactPoint, contactNormal, obb, sphere);\n  vec3.negate(contactNormal, contactNormal);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Sphere} sphere\n * @param {Capsule} capsule\n */\nfunction sphereVsCapsule(contactPoint, contactNormal, sphere, capsule) {\n  capsuleContactCalculation.capsuleVsSphere(contactPoint, contactNormal, capsule, sphere);\n  vec3.negate(contactNormal, contactNormal);\n}\n\nexport {\n  sphereVsPoint,\n  sphereVsSphere,\n  sphereVsAabb,\n  sphereVsObb,\n  sphereVsCapsule,\n};\n","export * from './collidables';\nexport * from './collision-detection';\nexport * from './contact-calculation';\n\nexport * from './src/collidable-factories';\nexport * from './src/collidable-physics-job';\nexport * from './src/collidable-store';\nexport * from './src/collision-handler';\nexport * from './src/collision-utils';\n","/**\n * This module defines a set of factory functions for creating Collidable instances.\n */\n\nimport {\n  Capsule,\n  Obb,\n  Sphere\n} from '../collidables';\nimport {_geometry} from '../../util';\n\n/**\n * @param {CollidableShapeConfig} params\n * @param {CollidablePhysicsJob} [physicsJob]\n * @returns {Collidable}\n */\nfunction createCollidableFromRenderableShape(params, physicsJob) {\n  return _collidableCreators[params.collidableShapeId](params, physicsJob);\n}\n\n/**\n * This assumes the base RenderableShape has a side length of one unit.\n *\n * @param {CollidableShapeConfig} params\n * @param {CollidablePhysicsJob} [physicsJob]\n * @returns {Collidable}\n */\nfunction createObbFromRenderableShape(params, physicsJob) {\n  const halfRangeX = params.scale[0] / 2;\n  const halfRangeY = params.scale[1] / 2;\n  const halfRangeZ = params.scale[2] / 2;\n  return new Obb(halfRangeX, halfRangeY, halfRangeZ, params.isStationary, physicsJob);\n}\n\n/**\n * This assumes the base RenderableShape has a \"radius\" of one unit.\n *\n * @param {CollidableShapeConfig} params\n * @param {CollidablePhysicsJob} [physicsJob]\n * @returns {Collidable}\n */\nfunction createSphereFromRenderableShape(params, physicsJob) {\n  const radius = params.radius || vec3.length(params.scale) / Math.sqrt(3);\n  return new Sphere(0, 0, 0, radius, params.isStationary, physicsJob);\n}\n\n/**\n * The radius of the created capsule will be an average from the two shortest sides.\n *\n * There are two modes: either we use scale, or we use radius and capsuleEndPointsDistance.\n *\n * @param {CollidableShapeConfig} params\n * @param {CollidablePhysicsJob} [physicsJob]\n * @returns {Collidable}\n */\nfunction createCapsuleFromRenderableShape(params, physicsJob) {\n  const scale = params.scale;\n  const capsuleEndPointsDistance = params.capsuleEndPointsDistance;\n  const isStationary = params.isStationary;\n  let radius = params.radius;\n\n  let halfDistance;\n\n  // There are two modes: either we use scale, or we use radius and capsuleEndPointsDistance.\n  if (typeof radius === 'number' && typeof capsuleEndPointsDistance === 'number') {\n    halfDistance = capsuleEndPointsDistance / 2;\n  } else {\n    const copy = vec3.clone(scale);\n    copy.sort();\n\n    const length = copy[2];\n    radius = (copy[0] + copy[1]) / 2;\n    halfDistance = length / 2 - radius;\n  }\n\n  const orientation = quat.create();\n  if (scale[0] > scale[1]) {\n    if (scale[0] > scale[2]) {\n      vec3.rotateY(orientation, orientation, _geometry.HALF_PI);\n    } else {\n      // Do nothing; the capsule defaults to being aligned with the z-axis.\n    }\n  } else {\n    if (scale[1] > scale[2]) {\n      vec3.rotateX(orientation, orientation, -_geometry.HALF_PI);\n    } else {\n      // Do nothing; the capsule defaults to being aligned with the z-axis.\n    }\n  }\n\n  const capsule = new Capsule(halfDistance, radius, isStationary, physicsJob);\n  capsule.orientation = orientation;\n\n  return capsule;\n}\n\n/**\n * @param {CollidableShapeConfig} params\n * @param {CollidablePhysicsJob} [physicsJob]\n * @returns {Collidable}\n */\nfunction createSphereOrCapsuleFromRenderableShape(params, physicsJob) {\n  const scale = params.scale;\n  const radius = params.radius;\n  const capsuleEndPointsDistance = params.capsuleEndPointsDistance;\n\n  const halfLengthX = scale[0] * radius;\n  const halfLengthY = scale[1] * radius;\n  const halfLengthZ = scale[2] * (radius + capsuleEndPointsDistance) / 2;\n\n  const minLength = Math.min(Math.min(halfLengthX, halfLengthY), halfLengthZ);\n  const maxLength = Math.max(Math.max(halfLengthX, halfLengthY), halfLengthZ);\n\n  if (maxLength / minLength >= _SPHERE_VS_CAPSULE_ASPECT_RATIO_THRESHOLD) {\n    return createCapsuleFromRenderableShape(params, physicsJob);\n  } else {\n    return createSphereFromRenderableShape(params, physicsJob);\n  }\n}\n\nconst _SPHERE_VS_CAPSULE_ASPECT_RATIO_THRESHOLD = 2;\n\nconst _collidableCreators = {\n  'CUBE': createObbFromRenderableShape,\n  'SPHERE_OR_CAPSULE': createSphereOrCapsuleFromRenderableShape,\n  'SPHERE': createSphereFromRenderableShape,\n  'CAPSULE': createCapsuleFromRenderableShape,\n};\n\nexport {\n  createCapsuleFromRenderableShape,\n  createCollidableFromRenderableShape,\n  createObbFromRenderableShape,\n  createSphereFromRenderableShape,\n  createSphereOrCapsuleFromRenderableShape,\n};\n\n/**\n * @typedef {Object} CollidableShapeConfig\n * @property {string} collidableShapeId The ID of the type of collidable shape.\n * @property {vec3} [scale]\n * @property {boolean} [isStationary=false] Whether the collidable is fixed in place.\n */\n\n/**\n * @typedef {CollidableShapeConfig} SphericalCollidableShapeParams\n * @property {number} radius\n */\n\n/**\n * @typedef {SphericalCollidableShapeParams} CapsuleCollidableShapeParams\n * @property {number} capsuleEndPointsDistance The distance between the centers of the spheres on either end\n * of the capsule.\n */\n","import {createCollidableFromRenderableShape} from './collidable-factories';\nimport {collidableStore} from './collidable-store';\nimport {PhysicsJob} from '../../src/physics-job';\nimport {createForCollidable} from '../../util';\n\n/**\n * A CollidablePhysicsJob extends the standard PhysicsJob with a collidable geometry.\n */\nclass CollidablePhysicsJob extends PhysicsJob {\n  /**\n   * @param {CollidableShapeConfig} collidableParams\n   * @param {PhysicsState} state\n   * @param {Array.<ForceApplier>} forceAppliers\n   * @param {Object} controller\n   * @param {CollisionHandler} collisionHandler\n   */\n  constructor(collidableParams, state, forceAppliers, controller, collisionHandler) {\n    super(forceAppliers, state);\n\n    collidableParams.scale = collidableParams.scale || vec3.fromValues(1, 1, 1);\n    this.collidable = createCollidableFromRenderableShape(collidableParams, this);\n    this.currentState.unrotatedInertiaTensor =\n        createForCollidable(this.collidable, this.currentState.mass);\n    this.currentState.updateDependentFields();\n    this.isAtRest = false;\n    this.controller = controller;\n    this._collisionHandler = collisionHandler;\n  }\n\n  /**\n   * @param {ForceApplier} forceApplier\n   */\n  addForceApplier(forceApplier) {\n    super.addForceApplier(forceApplier);\n    this.isAtRest = false;\n  }\n\n  /**\n   * @param {ForceApplier} forceApplier\n   */\n  removeForceApplier(forceApplier) {\n    super.removeForceApplier(forceApplier);\n    this.isAtRest = false;\n  }\n\n  /**\n   * This callback is triggered in response to a collision.\n   *\n   * @param {Collision} collision\n   * @returns {boolean} True if this needs the standard collision restitution to proceed.\n   */\n  handleCollision(collision) {\n    return this._collisionHandler(collision);\n  }\n\n  /**\n   * @param {number} [startTime]\n   * @override\n   */\n  start(startTime) {\n    super.start(startTime);\n    collidableStore.registerCollidable(this.collidable);\n  }\n\n  /**\n   * @override\n   */\n  finish() {\n    super.finish();\n    collidableStore.unregisterCollidable(this.collidable);\n  }\n\n  /** @returns {vec3} */\n  get position() {\n    return this.currentState.position;\n  }\n\n  /** @param {vec3} value */\n  set position(value) {\n    this.currentState.position = vec3.clone(value);\n    this.collidable.position = vec3.clone(value);\n  }\n}\n\nexport {CollidablePhysicsJob};\n\n/**\n * @typedef {Function} CollisionHandler\n * @param {Collision} collision\n * @returns {boolean} True if this needs the standard collision restitution to proceed.\n */\n","import {detectBoundingVolumeIntersection} from './collision-utils';\n\n// TODO: Implement some form of bounding volume hierarchy to make searching for potential collisions\n// more efficient.\n\n/**\n * This class registers and retrieves all Collidables within a scene.\n */\nclass CollidableStore {\n  constructor() {\n    this._collidables = [];\n  }\n\n  /**\n   * Caches the given program wrapper.\n   *\n   * This method is idempotent; a given program will only be cached once.\n   *\n   * @param {Collidable} collidable\n   */\n  registerCollidable(collidable) {\n    this._collidables.push(collidable);\n  }\n\n  /**\n   * @param {Collidable} collidable\n   */\n  unregisterCollidable(collidable) {\n    const index = this._collidables.indexOf(collidable);\n    if (index >= 0) {\n      this._collidables.splice(index, 1);\n    }\n  }\n\n  /**\n   * @param {Collidable} collidable\n   * @returns {Array.<Collidable>}\n   */\n  getPossibleCollisionsForCollidable(collidable) {\n    return this._collidables.filter(other =>\n      collidable !== other &&\n      detectBoundingVolumeIntersection(collidable, other));\n  }\n\n  /**\n   * @returns {Array.<Collision>}\n   */\n  getPossibleCollisionsForAllCollidables() {\n    const result = [];\n    for (let i = 0, count = this._collidables.length; i < count; i++) {\n      const collidableA = this._collidables[i];\n      for (let j = i + 1; j < count; j++) {\n        const collidableB = this._collidables[j];\n        if (detectBoundingVolumeIntersection(collidableA, collidableB)) {\n          result.push({collidableA: collidableA, collidableB: collidableB});\n        }\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @param {Function} callback\n   */\n  forEach(callback) {\n    this._collidables.forEach(callback);\n  }\n}\n\nconst collidableStore = new CollidableStore();\nexport {collidableStore};\n\n/**\n * @typedef {Object} Collision\n * @property {Collidable} collidableA\n * @property {Collidable} collidableB\n * @property {vec3} [contactPoint] In world coordinates.\n * @property {vec3} [contactNormal] Points away from body A and toward body B.\n * @property {number} [time]\n */\n","import {\n  areVec3sClose,\n  tmpVec1,\n  tmpVec2,\n  tmpVec3,\n  tmpVec4,\n} from '../../util';\n\nimport {collidableStore} from './collidable-store';\nimport {detectIntersection, calculateContact} from './collision-utils';\n\n/**\n * This module defines a collision pipeline.\n *\n * These functions will detect collisions between collidable bodies and update their momenta in\n * response to the collisions.\n *\n * - Consists of an efficient broad-phase collision detection step followed by a precise\n *   narrow-phase step.\n * - Calculates the position, surface normal, and time of each contact.\n * - Calculates the impulse of a collision and updates the bodies' linear and angular momenta in\n *   response.\n * - Applies Coulomb friction to colliding bodies.\n * - Sub-divides the time step to more precisely determine when and where a collision occurs.\n * - Supports multiple collisions with a single body in a single time step.\n * - Efficiently supports bodies coming to rest against each other.\n * - Bodies will never penetrate one another.\n * - This does not address the tunnelling problem. That is, it is possible for two fast-moving\n *   bodies to pass through each other as long as they did not intersect each other during any time\n *   step.\n * - This only supports collisions between certain types of shapes. Fortunately, this set provides\n *   reasonable approximations for most other shapes. The supported types of shapes are: spheres,\n *   capsules, AABBs, and OBBs.\n *\n * ## Objects that come to rest\n *\n * An important efficiency improvement is to not process objects through the physics engine pipeline\n * after they have come to rest. The isAtRest field indicates when a body has come to rest.\n *\n * isAtRest is set to true after a physics frame is finished if the collisions, forces, position,\n * and orientation of a job have not changed from the previous to the current state.\n *\n * isAtRest is set to false from two possible events: after a physics frame is finished if the\n * collisions have changed from the previous to the current state, or when a force is added to\n * removed from the job.\n *\n * ## Collision calculations do not consider velocity\n *\n * Collision detection works by waiting until two bodies intersect. However, because time frames are\n * not infinitely small, when an intersection is detected, it's already past the exact instance of\n * collision. To alleviate problems from this, the velocity of each body can be considered when\n * calculating the collision time, position, and contact normal. However, taking velocity into\n * account makes the contact calculations much more complex, so we do not consider velocity in our\n * calculations.\n *\n * A notable consequence of this is that the calculated contact normals can be incorrect. Consider\n * the following moving squares. At time t2 they are found to have collided. The calculated contact\n * point will be somewhere within the intersection of the corners. But the calculated contact normal\n * will point upwards, while the true contact normal should point to the right. This is because the\n * contact calculations do not consider velocity and instead only consider the shallowest direction\n * of overlap.\n *\n * // Time t1\n *                    +------------+\n *                    |            |\n *                    |            |\n *                <-- |      B     |\n *                    |            |\n *  +------------+    |            |\n *  |            |    +------------+\n *  |            |\n *  |      A     | -->\n *  |            |\n *  |            |\n *  +------------+\n *\n * // Time t2\n *         +------------+\n *         |            |\n *         |            |\n *         |      B     |\n *         |            |\n *  +------------+      |\n *  |      +-----|------+\n *  |            |\n *  |      A     |\n *  |            |\n *  |            |\n *  +------------+\n */\n\n/**\n * Detect and handle any collisions between a given job and all other collidable bodies.\n *\n * @param {CollidablePhysicsJob} job\n * @param {DOMHighResTimeStamp} elapsedTime\n * @param {PhysicsConfig} physicsParams\n */\nfunction handleCollisionsForJob(job, elapsedTime, physicsParams) {\n  const collidable = job.collidable;\n\n  // Clear any previous collision info.\n  collidable.previousCollisions = collidable.collisions;\n  collidable.collisions = [];\n\n  // Find all colliding collidables.\n  const collidingCollidables = findIntersectingCollidablesForCollidable(collidable);\n\n  // Store the time of collision for each collision.\n  const collisions = _recordCollisions(collidable, collidingCollidables, elapsedTime);\n\n  // Calculate the points of contact for each collision.\n  _calculatePointsOfContact(collisions);\n\n  // Collision resolution.\n  _resolveCollisions(collisions, physicsParams);\n}\n\n/**\n * Finds all other collidables that intersect with the given collidable.\n *\n * @param {Collidable} collidable\n * @returns {Array.<Collidable>}\n */\nfunction findIntersectingCollidablesForCollidable(collidable) {\n  // Broad-phase collision detection (pairs whose bounding volumes intersect).\n  const collidingCollidables = collidableStore.getPossibleCollisionsForCollidable(collidable);\n\n  // Narrow-phase collision detection (pairs that actually intersect).\n  return _detectPreciseCollisionsFromCollidingCollidables(collidable, collidingCollidables);\n}\n\n/**\n * @param {Array.<CollidablePhysicsJob>} jobs\n */\nfunction determineJobsAtRest(jobs) {\n  jobs.forEach(job => job.isAtRest = _isJobAtRest(job));\n}\n\nfunction recordOldCollisionsForDevModeForAllCollidables() {\n  collidableStore.forEach(_recordOldCollisionsForDevModeForCollidable);\n}\n\n/**\n * Logs a warning message for any pair of objects that intersect.\n */\nfunction checkThatNoObjectsCollide() {\n  // Broad-phase collision detection (pairs whose bounding volumes intersect).\n  let collisions = collidableStore.getPossibleCollisionsForAllCollidables();\n\n  // Narrow-phase collision detection (pairs that actually intersect).\n  collisions = _detectPreciseCollisionsFromCollisions(collisions);\n\n  collisions.forEach(collision => {\n    console.warn('Objects still intersect after collision resolution', collision);\n  });\n}\n\n/**\n * Create collision objects that record the time of collision and the collidables in the collision.\n *\n * Also record references to these collisions on the collidables.\n *\n * @param {Collidable} collidable\n * @param {Array.<Collidable>} collidingCollidables\n * @param {DOMHighResTimeStamp} elapsedTime\n * @returns {Array.<Collision>}\n * @private\n */\nfunction _recordCollisions(collidable, collidingCollidables, elapsedTime) {\n  return collidingCollidables.map(other => {\n    const collision = {\n      collidableA: collidable,\n      collidableB: other,\n      time: elapsedTime\n    };\n\n    // Record the fact that these objects collided (the ModelController may want to handle this).\n    collision.collidableA.collisions.push(collision);\n    collision.collidableB.collisions.push(collision);\n\n    return collision;\n  });\n}\n\n/**\n * Narrow-phase collision detection.\n *\n * Given a list of possible collision pairs, filter out which pairs are actually colliding.\n *\n * @param {Array.<Collision>} collisions\n * @returns {Array.<Collision>}\n * @private\n */\nfunction _detectPreciseCollisionsFromCollisions(collisions) {\n  return collisions.filter(collision => {\n    // TODO:\n    // - Use temporal bisection with discrete sub-time steps to find time of collision (use\n    //       x-vs-y-specific intersection detection methods).\n    // - Make sure the collision object is set up with the \"previousState\" from the sub-step\n    //   before collision and the time from the sub-step after collision (determined from the\n    //   previous temporal bisection search...)\n\n    return detectIntersection(collision.collidableA, collision.collidableB);\n  });\n}\n\n/**\n * Narrow-phase collision detection.\n *\n * Given a list of possible collision pairs, filter out which pairs are actually colliding.\n *\n * @param {Collidable} collidable\n * @param {Array.<Collidable>} collidingCollidables\n * @returns {Array.<Collidable>}\n * @private\n */\nfunction _detectPreciseCollisionsFromCollidingCollidables(collidable, collidingCollidables) {\n  return collidingCollidables.filter(other => {\n    // TODO:\n    // - Use temporal bisection with discrete sub-time steps to find time of collision (use\n    //       x-vs-y-specific intersection detection methods).\n    // - Make sure the collision object is set up with the \"previousState\" from the sub-step\n    //   before collision and the time from the sub-step after collision (determined from the\n    //   previous temporal bisection search...)\n\n    return detectIntersection(collidable, other);\n  });\n}\n\n/**\n * Calculate the intersection position and contact normal of each collision.\n *\n * @param {Array.<Collision>} collisions\n * @private\n */\nfunction _calculatePointsOfContact(collisions) {\n  collisions.forEach(calculateContact);\n}\n\n/**\n * Updates the linear and angular momenta of each body in response to its collision.\n *\n * @param {Array.<Collision>} collisions\n * @param {PhysicsConfig} physicsParams\n * @private\n */\nfunction _resolveCollisions(collisions, physicsParams) {\n  collisions.forEach(collision => {\n    // If neither physics job needs the standard collision restitution, then don't do it.\n    if (_notifyPhysicsJobsOfCollision(collision)) {\n      if (collision.collidableA.physicsJob && collision.collidableB.physicsJob) {\n        // Neither of the collidables is stationary.\n        _resolveCollision(collision, physicsParams);\n      } else {\n        // One of the two collidables is stationary.\n        _resolveCollisionWithStationaryObject(collision, physicsParams);\n      }\n    }\n  });\n}\n\n/**\n * @param {Collision} collision\n * @returns {boolean} True if one of the PhysicsJobs need the standard collision restitution to\n * proceed.\n * @private\n */\nfunction _notifyPhysicsJobsOfCollision(collision) {\n  return collision.collidableA.physicsJob.handleCollision(collision) ||\n      collision.collidableB.physicsJob.handleCollision(collision)\n}\n\n/**\n * Resolve a collision between two moving, physics-based objects.\n *\n * This is based on collision-response algorithms from Wikipedia\n * (https://en.wikipedia.org/wiki/Collision_response#Impulse-based_reaction_model).\n *\n * @param {Collision} collision\n * @param {PhysicsConfig} physicsParams\n * @private\n */\nfunction _resolveCollision(collision, physicsParams) {\n  const collidableA = collision.collidableA;\n  const collidableB = collision.collidableB;\n  const previousStateA = collidableA.physicsJob.previousState;\n  const previousStateB = collidableB.physicsJob.previousState;\n  const nextStateA = collidableA.physicsJob.currentState;\n  const nextStateB = collidableB.physicsJob.currentState;\n  const centerA = collidableA.centerOfMass;\n  const centerB = collidableB.centerOfMass;\n  const contactPoint = collision.contactPoint;\n\n  const contactPointOffsetA = tmpVec3;\n  vec3.subtract(contactPointOffsetA, contactPoint, centerA);\n  const contactPointOffsetB = tmpVec4;\n  vec3.subtract(contactPointOffsetB, contactPoint, centerB);\n\n  //\n  // Calculate the relative velocity of the bodies at the point of contact.\n  //\n  // We use the velocity from the previous state, since it is the velocity that led to the\n  // collision.\n  //\n\n  const velocityA = tmpVec1;\n  vec3.cross(tmpVec1, previousStateA.angularVelocity, contactPointOffsetA);\n  vec3.add(velocityA, previousStateA.velocity, tmpVec1);\n\n  const velocityB = tmpVec2;\n  vec3.cross(tmpVec2, previousStateB.angularVelocity, contactPointOffsetB);\n  vec3.add(velocityB, previousStateB.velocity, tmpVec2);\n\n  const relativeVelocity = vec3.create();\n  vec3.subtract(relativeVelocity, velocityB, velocityA);\n\n  if (vec3.dot(relativeVelocity, collision.contactNormal) >= 0) {\n    // If the relative velocity is not pointing against the normal, then the normal was calculated\n    // incorrectly (this is likely due to the time step being too large and the fact that our\n    // contact calculations don't consider velocity). So update the contact normal to be in the\n    // direction of the relative velocity.\n\n    // TODO: Check that this works as expected.\n\n    // console.warn('Non-collision because objects are moving away from each other.');\n\n    vec3.copy(collision.contactNormal, relativeVelocity);\n    vec3.normalize(collision.contactNormal, collision.contactNormal);\n    vec3.negate(collision.contactNormal, collision.contactNormal);\n  }\n\n  _applyImpulseFromCollision(collision, relativeVelocity, contactPointOffsetA,\n      contactPointOffsetB, physicsParams);\n\n  // NOTE: This state reversion is only applied to collidableA. This assumes that only A is moving\n  // during this iteration of the collision pipeline.\n\n  // Revert to the position and orientation from immediately before the collision.\n  vec3.copy(nextStateA.position, previousStateA.position);\n  quat.copy(nextStateA.orientation, previousStateA.orientation);\n\n  // Also revert the collidables' position and orientation.\n  collidableA.position = previousStateA.position;\n  collidableA.orientation = previousStateA.orientation;\n\n  nextStateA.updateDependentFields();\n  nextStateB.updateDependentFields();\n}\n\n/**\n * Resolve a collision between one moving, physics-based object and one stationary object.\n *\n * @param {Collision} collision\n * @param {PhysicsConfig} physicsParams\n * @private\n */\nfunction _resolveCollisionWithStationaryObject(collision, physicsParams) {\n  const contactNormal = collision.contactNormal;\n\n  let physicsCollidable;\n  if (collision.collidableA.physicsJob) {\n    physicsCollidable = collision.collidableA;\n  } else {\n    physicsCollidable = collision.collidableB;\n    vec3.negate(contactNormal, contactNormal);\n  }\n\n  const previousState = physicsCollidable.physicsJob.previousState;\n  const nextState = physicsCollidable.physicsJob.currentState;\n  const center = physicsCollidable.centerOfMass;\n  const contactPoint = collision.contactPoint;\n\n  const contactPointOffset = tmpVec3;\n  vec3.subtract(contactPointOffset, contactPoint, center);\n\n  // Calculate the relative velocity of the bodies at the point of contact. We use the velocity from\n  // the previous state, since it is the velocity that led to the collision.\n  const velocity = vec3.create();\n  vec3.cross(tmpVec1, previousState.angularVelocity, contactPointOffset);\n  vec3.add(velocity, previousState.velocity, tmpVec1);\n\n  if (vec3.dot(velocity, contactNormal) <= 0) {\n    // If the relative velocity is not pointing against the normal, then the normal was calculated\n    // incorrectly (this is likely due to the time step being too large and the fact that our\n    // contact calculations don't consider velocity). So update the contact normal to be in the\n    // direction of the relative velocity.\n\n    // TODO: Check that this works as expected.\n\n    console.warn('Non-collision because object is moving away from stationary object.');\n\n    vec3.copy(collision.contactNormal, velocity);\n    vec3.normalize(collision.contactNormal, collision.contactNormal);\n    vec3.negate(collision.contactNormal, collision.contactNormal);\n  }\n\n  _applyImpulseFromCollisionWithStationaryObject(physicsCollidable, collision, velocity,\n      contactPointOffset, physicsParams);\n\n  // Revert to the position and orientation from immediately before the collision.\n  vec3.copy(nextState.position, previousState.position);\n  quat.copy(nextState.orientation, previousState.orientation);\n\n  // Also revert the collidable's position and orientation.\n  physicsCollidable.position = previousState.position;\n  physicsCollidable.orientation = previousState.orientation;\n\n  nextState.updateDependentFields();\n}\n\n/**\n * This is based on collision-response algorithms from Wikipedia\n * (https://en.wikipedia.org/wiki/Collision_response#Impulse-based_reaction_model). This algorithm\n * has been simplified by assuming the stationary body has infinite mass and zero velocity.\n *\n * @param {Collision} collision\n * @param {vec3} relativeVelocity\n * @param {vec3} contactPointOffsetA\n * @param {vec3} contactPointOffsetB\n * @param {PhysicsConfig} physicsParams\n * @private\n */\nfunction _applyImpulseFromCollision(collision, relativeVelocity, contactPointOffsetA,\n                                    contactPointOffsetB, physicsParams) {\n  const collidableA = collision.collidableA;\n  const collidableB = collision.collidableB;\n\n  const stateA = collidableA.physicsJob.currentState;\n  const stateB = collidableB.physicsJob.currentState;\n\n  const contactNormal = collision.contactNormal;\n\n  //\n  // Calculate and apply the main collision impulse.\n  //\n\n  vec3.scale(tmpVec1, relativeVelocity, -(1 + physicsParams.coefficientOfRestitution));\n  const numerator = vec3.dot(tmpVec1, contactNormal);\n\n  vec3.cross(tmpVec1, contactPointOffsetA, contactNormal);\n  vec3.transformMat3(tmpVec1, tmpVec1, stateA.inverseInertiaTensor);\n  vec3.cross(tmpVec1, tmpVec1, contactPointOffsetA);\n\n  vec3.cross(tmpVec2, contactPointOffsetB, contactNormal);\n  vec3.transformMat3(tmpVec2, tmpVec2, stateB.inverseInertiaTensor);\n  vec3.cross(tmpVec2, tmpVec2, contactPointOffsetB);\n\n  vec3.add(tmpVec1, tmpVec1, tmpVec2);\n  const denominator = vec3.dot(tmpVec1, contactNormal) + stateA.inverseMass + stateB.inverseMass;\n\n  const impulseMagnitude = numerator / denominator;\n\n  _applyImpulse(stateA, -impulseMagnitude, contactNormal, contactPointOffsetA);\n  _applyImpulse(stateB, impulseMagnitude, contactNormal, contactPointOffsetB);\n\n  //\n  // Calculate and apply a dynamic friction impulse.\n  //\n\n  const frictionImpulseMagnitude = impulseMagnitude * physicsParams.coefficientOfFriction;\n\n  const tangent = tmpVec2;\n  vec3.scale(tmpVec1, contactNormal, vec3.dot(relativeVelocity, contactNormal));\n  vec3.subtract(tangent, relativeVelocity, tmpVec1);\n  vec3.normalize(tangent, tangent);\n\n  _applyImpulse(stateA, frictionImpulseMagnitude, tangent, contactPointOffsetA);\n  _applyImpulse(stateB, -frictionImpulseMagnitude, tangent, contactPointOffsetB);\n}\n\n/**\n * This is based on collision-response algorithms from Wikipedia\n * (https://en.wikipedia.org/wiki/Collision_response#Impulse-based_reaction_model). This algorithm\n * has been simplified by assuming the stationary body has infinite mass and zero velocity.\n *\n * @param {Collidable} physicsCollidable\n * @param {Collision} collision\n * @param {vec3} velocity\n * @param {vec3} contactPointOffset\n * @param {PhysicsConfig} physicsParams\n * @private\n */\nfunction _applyImpulseFromCollisionWithStationaryObject(physicsCollidable, collision, velocity,\n                                                        contactPointOffset, physicsParams) {\n  const state = physicsCollidable.physicsJob.currentState;\n  const contactNormal = collision.contactNormal;\n\n  //\n  // Calculate and apply the main collision impulse.\n  //\n\n  vec3.scale(tmpVec1, velocity, -(1 + physicsParams.coefficientOfRestitution));\n  const numerator = vec3.dot(tmpVec1, contactNormal);\n\n  vec3.cross(tmpVec1, contactPointOffset, contactNormal);\n  vec3.transformMat3(tmpVec1, tmpVec1, state.inverseInertiaTensor);\n  vec3.cross(tmpVec1, tmpVec1, contactPointOffset);\n  const denominator = vec3.dot(tmpVec1, contactNormal) + state.inverseMass;\n\n  const impulseMagnitude = numerator / denominator;\n\n  _applyImpulse(state, impulseMagnitude, contactNormal, contactPointOffset);\n\n  //\n  // Calculate and apply a dynamic friction impulse.\n  //\n\n  const frictionImpulseMagnitude = impulseMagnitude * physicsParams.coefficientOfFriction;\n\n  const tangent = tmpVec2;\n  vec3.scale(tmpVec1, contactNormal, vec3.dot(velocity, contactNormal));\n  vec3.subtract(tangent, velocity, tmpVec1);\n  vec3.normalize(tangent, tangent);\n\n  _applyImpulse(state, frictionImpulseMagnitude, tangent, contactPointOffset);\n}\n\n/**\n * @param {PhysicsState} state\n * @param {number} impulseMagnitude\n * @param {vec3} impulseDirection\n * @param {vec3} contactPointOffset\n * @private\n */\nfunction _applyImpulse(state, impulseMagnitude, impulseDirection, contactPointOffset) {\n  // Calculate the updated linear momenta.\n  const finalLinearMomentum = vec3.create();\n  vec3.scaleAndAdd(finalLinearMomentum, state.momentum, impulseDirection, impulseMagnitude);\n\n  // Calculate the updated angular momenta.\n  const finalAngularMomentum = vec3.create();\n  vec3.cross(tmpVec1, contactPointOffset, impulseDirection);\n  vec3.scaleAndAdd(finalAngularMomentum, state.angularMomentum, tmpVec1, impulseMagnitude);\n\n  // Apply the updated momenta.\n  vec3.copy(state.momentum, finalLinearMomentum);\n  vec3.copy(state.angularMomentum, finalAngularMomentum);\n}\n\n/**\n * @param {CollidablePhysicsJob} job\n * @returns {boolean}\n * @private\n */\nfunction _isJobAtRest(job) {\n  return areVec3sClose(job.currentState.position, job.previousState.position) &&\n      areVec3sClose(job.currentState.velocity, job.previousState.velocity) &&\n      areVec3sClose(job.currentState.orientation, job.previousState.orientation) &&\n      _doCollisionsMatch(job.collidable.collisions, job.collidable.previousCollisions);\n}\n\n/**\n * @param {Array.<Collision>} collisionsA\n * @param {Array.<Collision>} collisionsB\n * @returns {boolean}\n * @private\n */\nfunction _doCollisionsMatch(collisionsA, collisionsB) {\n  const count = collisionsA.length;\n\n  if (count !== collisionsB.length) return false;\n\n  for (let i = 0; i < count; i++) {\n    const collisionA = collisionsA[i];\n    const collisionB = collisionsB[i];\n    if (collisionA.collidableA !== collisionB.collidableA ||\n        collisionA.collidableB !== collisionB.collidableB ||\n        !areVec3sClose(collisionA.contactPoint, collisionB.contactPoint) ||\n        !areVec3sClose(collisionA.contactNormal, collisionB.contactNormal)) {\n      return false\n    }\n  }\n\n  return true;\n}\n\n/**\n * @param {Collidable} collidable\n * @private\n */\nfunction _recordOldCollisionsForDevModeForCollidable(collidable) {\n  if (!collidable.extraPreviousCollisions) {\n    collidable.extraPreviousCollisions = [];\n  }\n\n  for (let i = 3; i > 0; i--) {\n    collidable.extraPreviousCollisions[i] = collidable.extraPreviousCollisions[i - 1];\n  }\n  collidable.extraPreviousCollisions[0] = collidable.previousCollisions;\n}\n\n/**\n * @param {Collision} collision\n * @param {Object} thisController\n * @returns {Object}\n */\nfunction getOtherControllerFromCollision(collision, thisController) {\n  const controllerA = collision.collidableA.physicsJob.controller;\n  const controllerB = collision.collidableB.physicsJob.controller;\n  if (controllerA === thisController) {\n    return controllerB;\n  } else if (controllerB === thisController) {\n    return controllerA;\n  } else {\n    throw new Error('Neither collidable corresponds to the given controller');\n  }\n}\n\nexport {\n  handleCollisionsForJob,\n  findIntersectingCollidablesForCollidable,\n  determineJobsAtRest,\n  recordOldCollisionsForDevModeForAllCollidables,\n  checkThatNoObjectsCollide,\n  getOtherControllerFromCollision,\n};\n","import {\n  Aabb,\n  Capsule,\n  Obb,\n  Sphere\n} from '../collidables';\n\nimport {\n  aabbCollisionDetection,\n  capsuleCollisionDetection,\n  obbCollisionDetection,\n  sphereCollisionDetection,\n} from '../collision-detection';\n\nimport {\n  aabbContactCalculation,\n  capsuleContactCalculation,\n  obbContactCalculation,\n  sphereContactCalculation,\n} from '../contact-calculation';\n\n/**\n * This module defines a collection of static utility functions for detecting and responding to\n * collisions.\n */\n\n/**\n * @param {Collidable} a\n * @param {Collidable} b\n * @returns {boolean}\n */\nfunction detectIntersection(a, b) {\n  if (a instanceof Sphere) {\n    if (b instanceof Sphere) {\n      return sphereCollisionDetection.sphereVsSphere(a, b);\n    } else if (b instanceof Aabb) {\n      return sphereCollisionDetection.sphereVsAabb(a, b);\n    } else if (b instanceof Capsule) {\n      return sphereCollisionDetection.sphereVsCapsule(a, b);\n    } else if (b instanceof Obb) {\n      return sphereCollisionDetection.sphereVsObb(a, b);\n    } else {\n      return sphereCollisionDetection.sphereVsPoint(a, b);\n    }\n  } else if (a instanceof Aabb) {\n    if (b instanceof Sphere) {\n      return aabbCollisionDetection.aabbVsSphere(a, b);\n    } else if (b instanceof Aabb) {\n      return aabbCollisionDetection.aabbVsAabb(a, b);\n    } else if (b instanceof Capsule) {\n      return aabbCollisionDetection.aabbVsCapsule(a, b);\n    } else if (b instanceof Obb) {\n      return aabbCollisionDetection.aabbVsObb(a, b);\n    } else {\n      return aabbCollisionDetection.aabbVsPoint(a, b);\n    }\n  } else if (a instanceof Capsule) {\n    if (b instanceof Sphere) {\n      return capsuleCollisionDetection.capsuleVsSphere(a, b);\n    } else if (b instanceof Aabb) {\n      return capsuleCollisionDetection.capsuleVsAabb(a, b);\n    } else if (b instanceof Capsule) {\n      return capsuleCollisionDetection.capsuleVsCapsule(a, b);\n    } else if (b instanceof Obb) {\n      return capsuleCollisionDetection.capsuleVsObb(a, b);\n    } else {\n      return capsuleCollisionDetection.capsuleVsPoint(a, b);\n    }\n  } else if (a instanceof Obb) {\n    if (b instanceof Sphere) {\n      return obbCollisionDetection.obbVsSphere(a, b);\n    } else if (b instanceof Aabb) {\n      return obbCollisionDetection.obbVsAabb(a, b);\n    } else if (b instanceof Capsule) {\n      return obbCollisionDetection.obbVsCapsule(a, b);\n    } else if (b instanceof Obb) {\n      return obbCollisionDetection.obbVsObb(a, b);\n    } else {\n      return obbCollisionDetection.obbVsPoint(a, b);\n    }\n  } else {\n    if (b instanceof Sphere) {\n      return sphereCollisionDetection.sphereVsPoint(b, a);\n    } else if (b instanceof Aabb) {\n      return aabbCollisionDetection.aabbVsPoint(b, a);\n    } else if (b instanceof Capsule) {\n      return capsuleCollisionDetection.capsuleVsPoint(b, a);\n    } else if (b instanceof Obb) {\n      return obbCollisionDetection.obbVsPoint(b, a);\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * @param {Collision} collision\n */\nfunction calculateContact(collision) {\n  const a = collision.collidableA;\n  const b = collision.collidableB;\n  const contactPoint = vec3.create();\n  const contactNormal = vec3.create();\n\n  if (a instanceof Sphere) {\n    if (b instanceof Sphere) {\n      sphereContactCalculation.sphereVsSphere(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Aabb) {\n      sphereContactCalculation.sphereVsAabb(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Capsule) {\n      sphereContactCalculation.sphereVsCapsule(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Obb) {\n      sphereContactCalculation.sphereVsObb(contactPoint, contactNormal, a, b);\n    } else {\n      sphereContactCalculation.sphereVsPoint(contactPoint, contactNormal, a, b);\n    }\n  } else if (a instanceof Aabb) {\n    if (b instanceof Sphere) {\n      aabbContactCalculation.aabbVsSphere(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Aabb) {\n      aabbContactCalculation.aabbVsAabb(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Capsule) {\n      aabbContactCalculation.aabbVsCapsule(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Obb) {\n      aabbContactCalculation.aabbVsObb(contactPoint, contactNormal, a, b);\n    } else {\n      aabbContactCalculation.aabbVsPoint(contactPoint, contactNormal, a, b);\n    }\n  } else if (a instanceof Capsule) {\n    if (b instanceof Sphere) {\n      capsuleContactCalculation.capsuleVsSphere(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Aabb) {\n      capsuleContactCalculation.capsuleVsAabb(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Capsule) {\n      capsuleContactCalculation.capsuleVsCapsule(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Obb) {\n      capsuleContactCalculation.capsuleVsObb(contactPoint, contactNormal, a, b);\n    } else {\n      capsuleContactCalculation.capsuleVsPoint(contactPoint, contactNormal, a, b);\n    }\n  } else if (a instanceof Obb) {\n    if (b instanceof Sphere) {\n      obbContactCalculation.obbVsSphere(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Aabb) {\n      obbContactCalculation.obbVsAabb(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Capsule) {\n      obbContactCalculation.obbVsCapsule(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Obb) {\n      obbContactCalculation.obbVsObb(contactPoint, contactNormal, a, b);\n    } else {\n      obbContactCalculation.obbVsPoint(contactPoint, contactNormal, a, b);\n    }\n  } else {\n    if (b instanceof Sphere) {\n      sphereContactCalculation.sphereVsPoint(contactPoint, contactNormal, b, a);\n    } else if (b instanceof Aabb) {\n      aabbContactCalculation.aabbVsPoint(contactPoint, contactNormal, b, a);\n    } else if (b instanceof Capsule) {\n      capsuleContactCalculation.capsuleVsPoint(contactPoint, contactNormal, b, a);\n    } else if (b instanceof Obb) {\n      obbContactCalculation.obbVsPoint(contactPoint, contactNormal, b, a);\n    } else {}\n    vec3.negate(contactNormal, contactNormal);\n  }\n\n  collision.contactPoint = contactPoint;\n  collision.contactNormal = contactNormal;\n}\n\n/**\n * @param {Collidable} a\n * @param {Collidable} b\n * @returns {boolean}\n */\nfunction detectBoundingVolumeIntersection(a, b) {\n  return detectIntersection(a.boundingVolume, b.boundingVolume);\n}\n\nexport {\n  detectIntersection,\n  calculateContact,\n  detectBoundingVolumeIntersection,\n};\n","/**\n * This module re-exports all of the exports in the grafx framework. This makes the entire framework\n * conveniently accessible via this single module.\n */\n\nexport * from './collisions';\nexport * from './integrator';\nexport * from './util';\n\nexport * from './src/physics-engine';\nexport * from './src/physics-job';\nexport * from './src/physics-state';\n","export * from './src/integrator';\nexport * from './src/rk4-integrator';\n","/**\n * This class numerically integrates the equations of motion. That is, an integrator implements\n * physics simulations by updating position and velocity values for each time step.\n *\n * @abstract\n */\nclass Integrator {\n  constructor() {\n    // Integrator is an abstract class. It should not be instantiated directly.\n    if (new.target === Integrator) {\n      throw new TypeError('Cannot construct Integrator instances directly');\n    }\n  }\n\n  /**\n   * Integrate the state from t to t + dt.\n   *\n   * @param {PhysicsJob} job\n   * @param {number} t Total elapsed time.\n   * @param {number} dt Duration of the current time step.\n   * @abstract\n   */\n  integrate(job, t, dt) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * @returns {PhysicsDerivative}\n   */\n  static createDerivative() {\n    return {\n      velocity: vec3.create(),\n      force: vec3.create(),\n      spin: quat.create(),\n      torque: vec3.create()\n    };\n  }\n}\n\nexport {Integrator};\n\n/**\n * @typedef {Object} PhysicsDerivative\n * @property {vec3} velocity Derivative of position.\n * @property {vec3} force Derivative of momentum.\n * @property {quat} spin Derivative of orientation.\n * @property {vec3} torque Derivative of angular momentum.\n */\n\n/**\n * @typedef {Object} ForceApplierOutput\n * @property {vec3} force\n * @property {vec3} torque\n */\n\n/**\n * @typedef {Object} ForceApplierInput\n * @property {PhysicsState} state\n * @property {number} t\n * @property {number} dt\n */\n","import {_geometry, _util} from '../../util';\nimport {Integrator} from './integrator';\nimport {PhysicsState} from '../../src/physics-state';\n\n// TODO: Account for the fact that collisions take place between time steps; integration should\n// really consider the previous state as being the time and state at the moment of collision.\n\n/**\n * This class numerically integrates the equations of motion. That is, this implements physics\n * simulations by updating position and velocity values for each time step.\n *\n * This integrator is an implementation of the classical Runge-Kutta method (RK4)\n * (https://en.wikipedia.org/wiki/Runge_kutta).\n *\n * This integrator causes energy to be lost at a small rate. This is a common problem for numerical\n * integrators, and is usually negligible.\n */\nclass RK4Integrator extends Integrator {\n  constructor() {\n    super();\n    if (_util.isInDevMode) {\n      this._wrapForDevMode();\n    }\n  }\n\n  /**\n   * Integrate the state from t to t + dt.\n   *\n   * @param {PhysicsJob} job\n   * @param {number} t Total elapsed time.\n   * @param {number} dt Duration of the current time step.\n   */\n  integrate(job, t, dt) {\n    const state = job.currentState;\n    _tempState.copy(state);\n\n    _calculateDerivative(_a, _tempState, job, t, 0, _EMPTY_DERIVATIVE);\n    _calculateDerivative(_b, _tempState, job, t, dt * 0.5, _a);\n    _calculateDerivative(_c, _tempState, job, t, dt * 0.5, _b);\n    _calculateDerivative(_d, _tempState, job, t, dt, _c);\n\n    _calculateVec3DerivativeWeightedSum(\n        _positionDerivative, _a.velocity, _b.velocity, _c.velocity, _d.velocity);\n    _calculateVec3DerivativeWeightedSum(\n        _momentumDerivative, _a.force, _b.force, _c.force, _d.force);\n    _calculateQuatDerivativeWeightedSum(_orientationDerivative, _a.spin, _b.spin, _c.spin, _d.spin);\n    _calculateVec3DerivativeWeightedSum(\n        _angularMomentumDerivative, _a.torque, _b.torque, _c.torque, _d.torque);\n\n    vec3.scaleAndAdd(state.position, state.position, _positionDerivative, dt);\n    vec3.scaleAndAdd(state.momentum, state.momentum, _momentumDerivative, dt);\n    _geometry.scaleAndAddQuat(state.orientation, state.orientation, _orientationDerivative, dt);\n    vec3.scaleAndAdd(state.angularMomentum, state.angularMomentum, _angularMomentumDerivative, dt);\n\n    state.updateDependentFields();\n  }\n\n  /**\n   * Wraps the integrate method and check for NaN values after each integration.\n   *\n   * @private\n   */\n  _wrapForDevMode() {\n    const unguardedIntegrate = this.integrate.bind(this);\n    this.integrate = (job, t, dt) => {\n      unguardedIntegrate(job, t, dt);\n      _checkForStateError(job.currentState);\n    };\n  }\n}\n\n/**\n * Calculate the derivative from the given state with the given time step.\n *\n * @param {PhysicsDerivative} out\n * @param {PhysicsState} state\n * @param {PhysicsJob} job\n * @param {number} t\n * @param {number} dt\n * @param {PhysicsDerivative} d\n * @private\n */\nfunction _calculateDerivative(out, state, job, t, dt, d) {\n  vec3.scaleAndAdd(state.position, state.position, d.velocity, dt);\n  vec3.scaleAndAdd(state.momentum, state.momentum, d.force, dt);\n  _geometry.scaleAndAddQuat(state.orientation, state.orientation, d.spin, dt);\n  vec3.scaleAndAdd(state.angularMomentum, state.angularMomentum, d.torque, dt);\n\n  state.updateDependentFields();\n\n  out.velocity = state.velocity;\n  out.spin = state.spin;\n  vec3.set(out.force, 0, 0, 0);\n  vec3.set(out.torque, 0, 0, 0);\n\n  _forceApplierOutput.force = out.force;\n  _forceApplierOutput.torque = out.torque;\n  _forceApplierInput.state = state;\n  _forceApplierInput.t = t + dt;\n  _forceApplierInput.dt = dt;\n\n  job.applyForces(_forceApplierOutput, _forceApplierInput);\n}\n\nconst _EMPTY_DERIVATIVE = Integrator.createDerivative();\n\nconst _tempState = new PhysicsState();\nconst _a = Integrator.createDerivative();\nconst _b = Integrator.createDerivative();\nconst _c = Integrator.createDerivative();\nconst _d = Integrator.createDerivative();\n\nconst _positionDerivative = vec3.create();\nconst _momentumDerivative = vec3.create();\nconst _orientationDerivative = quat.create();\nconst _angularMomentumDerivative = vec3.create();\n\nconst _forceApplierOutput = {};\nconst _forceApplierInput = {};\n\n/**\n * @param {vec3} out\n * @param {vec3} a\n * @param {vec3} b\n * @param {vec3} c\n * @param {vec3} d\n * @private\n */\nfunction _calculateVec3DerivativeWeightedSum(out, a, b, c, d) {\n  out[0] = 1 / 6 * (a[0] + 2 * (b[0] + c[0]) + d[0]);\n  out[1] = 1 / 6 * (a[1] + 2 * (b[1] + c[1]) + d[1]);\n  out[2] = 1 / 6 * (a[2] + 2 * (b[2] + c[2]) + d[2]);\n}\n\n/**\n * @param {quat} out\n * @param {quat} a\n * @param {quat} b\n * @param {quat} c\n * @param {quat} d\n * @private\n */\nfunction _calculateQuatDerivativeWeightedSum(out, a, b, c, d) {\n  out[0] = 1 / 6 * (a[0] + 2 * (b[0] + c[0]) + d[0]);\n  out[1] = 1 / 6 * (a[1] + 2 * (b[1] + c[1]) + d[1]);\n  out[2] = 1 / 6 * (a[2] + 2 * (b[2] + c[2]) + d[2]);\n  out[3] = 1 / 6 * (a[3] + 2 * (b[3] + c[3]) + d[3]);\n}\n\n/**\n * @param {PhysicsState} state\n * @private\n */\nfunction _checkForStateError(state) {\n  const errorProperties = [\n    'position',\n    'momentum',\n    'orientation',\n    'angularMomentum',\n  ].filter(property => _containsNaN(state[property]));\n  const property = errorProperties[0];\n  if (property) {\n    throw new Error(`${property} contains a NaN value after integrating: ${state[property]}`);\n  }\n}\n\n/**\n * Determines whether the given vector contains a NaN value.\n *\n * @param {vec3} v\n * @private\n */\nfunction _containsNaN(v) {\n  return isNaN(v[0]) || isNaN(v[1]) || isNaN(v[2]);\n}\n\nconst rk4Integrator = new RK4Integrator();\n\nexport {rk4Integrator};\n","import {FrameLatencyProfiler, PersistentAnimationJob} from 'lsl-animatex';\nimport {_util} from '../util';\n\nimport {\n  checkThatNoObjectsCollide,\n  CollidablePhysicsJob,\n  determineJobsAtRest,\n  handleCollisionsForJob,\n  recordOldCollisionsForDevModeForAllCollidables,\n} from '../collisions';\nimport {PhysicsState} from './physics-state';\nimport {rk4Integrator} from '../integrator';\n\nconst _FRAME_LATENCY_LOG_PERIOD = 5000;\nconst _LATENCY_LOG_LABEL = 'Physics frame duration';\n\n/**\n * This physics engine simulates high-performance, three-dimensional rigid-body dynamics.\n *\n * Notable features:\n * - Includes collision detection with impulse-based resolution.\n * - Decouples the physics simulation and animation rendering time steps, and uses a fixed timestep\n * for the physics loop. This gives us numerical stability and precise reproducibility.\n * - Suppresses linear and angular momenta below a certain threshold.\n *\n * The engine consists primarily of a collection of individual physics jobs and an update loop. This\n * update loop is in turn controlled by the animation loop. However, whereas the animation loop\n * renders each job once per frame loop--regardless of how much time actually elapsed since the\n * previous frame--the physics loop updates its jobs at a constant rate. To reconcile these frame\n * rates, the physics loop runs as many times as is needed in order to catch up to the time of the\n * current animation frame. The physics frame rate should be much higher than the animation frame\n * rate.\n *\n * It is VERY IMPORTANT for a PhysicsJob to minimize the runtime of its update step.\n *\n * ## A note on job order\n *\n * The integration+collision pipeline handle one job at a time. A consequence of this design\n * is that half of the collisions technically represent a false interaction between the state of the\n * first object at time t and the state of the second object at time t - 1.\n *\n * This implementation prevents a more problematic issue. If all objects were first integrated, then\n * all objects were checked for collisions, then all collisions were resolved, then the following\n * scenario could arise:\n * - The next position of object A collides with the previous position of object B, but not with the\n *   next position of object B, so object A moves successfully to its new position.\n * - The next position of object B collides with the next position of object C, so objects B and C\n *   are reset to their previous positions.\n * - Object B and C now intersect.\n */\nclass PhysicsEngine extends PersistentAnimationJob {\n  /**\n   * Clients should call PhysicsEngine.create instead of instantiating a PhysicsEngine directly.\n   *\n   * @param {PhysicsConfig} physicsParams\n   */\n  constructor(physicsParams) {\n    super();\n\n    if (_physicsEngine) {\n      throw new Error('Can\\'t instantiate multiple instances of PhysicsEngine.');\n    }\n\n    _physicsEngine = this;\n\n    this._physicsParams = physicsParams;\n    this.integrator = rk4Integrator;\n    this._elapsedTime = 0.0;\n    this._remainingTime = 0.0;\n    this._nonCollidableJobs = [];\n    this._collidableJobs = [];\n\n    if (_util.isInDevMode) {\n      this._setUpForInDevMode();\n    }\n  }\n\n  /**\n   * @param {PhysicsConfig} physicsParams\n   */\n  static create(physicsParams) {\n    new PhysicsEngine(physicsParams);\n  }\n\n  reset() {\n    this._elapsedTime = 0.0;\n    this._remainingTime = 0.0;\n    this._nonCollidableJobs = [];\n    this._collidableJobs = [];\n  }\n\n  /**\n   * Adds the given PhysicsJob.\n   *\n   * @param {PhysicsJob} job\n   */\n  addJob(job) {\n    // console.debug(`Starting PhysicsJob`);\n\n    if (job instanceof CollidablePhysicsJob) {\n      this._collidableJobs.push(job);\n    } else {\n      this._nonCollidableJobs.push(job);\n    }\n  }\n\n  /**\n   * Removes the given PhysicsJob.\n   *\n   * Throws no error if the job is not registered.\n   *\n   * @param {PhysicsJob} job\n   */\n  removeJob(job) {\n    // console.debug(`Cancelling PhysicsJob`);\n    this._removeJob(job);\n  }\n\n  /**\n   * Wraps the draw and update methods in a profiler function that will track the frame latencies.\n   *\n   * @private\n   */\n  _setUpForInDevMode() {\n    const unwrappedUpdate = this.update.bind(this);\n    const latencyProfiler = new FrameLatencyProfiler(_FRAME_LATENCY_LOG_PERIOD, \n        this._physicsParams.timeStepDuration, _LATENCY_LOG_LABEL);\n    latencyProfiler.start();\n\n    this.update = (...args) => {\n      const beforeTime = performance.now();\n      unwrappedUpdate(...args);\n      const deltaTime = performance.now() - beforeTime;\n      latencyProfiler.recordFrameLatency(deltaTime);\n    };\n  }\n\n  /**\n   * Update the physics state for the current animation update frame.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  update(currentTime, deltaTime) {\n    this._remainingTime += deltaTime;\n\n    // Run as many constant-interval physics updates as are needed for the given animation frame\n    // interval.\n    while (this._remainingTime >= this._physicsParams.timeStepDuration) {\n      this._updateToNextPhysicsFrame();\n      this._elapsedTime += this._physicsParams.timeStepDuration;\n      this._remainingTime -= this._physicsParams.timeStepDuration;\n    }\n\n    // Calculate the intermediate physics state to use for rendering the current animation frame.\n    const partialRatio = this._remainingTime / this._physicsParams.timeStepDuration;\n    this._setPartialStateForRenderTimeStepForAllJobs(partialRatio);\n  }\n\n  _updateToNextPhysicsFrame() {\n    if (_util.isInDevMode) {\n      this._recordOldStatesForAllJobsForDevMode();\n      recordOldCollisionsForDevModeForAllCollidables();\n    }\n\n    this._nonCollidableJobs.forEach(this._integratePhysicsStateForJob.bind(this));\n    this._collidableJobs.forEach(job => {\n      if (!job.isAtRest) {\n        this._integratePhysicsStateForCollidableJob(job);\n        handleCollisionsForJob(job, this._elapsedTime, this._physicsParams);\n      }\n    });\n\n    if (_util.isInDevMode) {\n      checkThatNoObjectsCollide();\n    }\n\n    this._suppressLowMomentaForAllJobs();\n\n    determineJobsAtRest(this._collidableJobs);\n  }\n\n  /**\n   * Removes the given job from the collection of active jobs if it exists.\n   *\n   * @param {PhysicsJob} job\n   * @param {number} [index=-1]\n   * @private\n   */\n  _removeJob(job, index = -1) {\n    if (job instanceof CollidablePhysicsJob) {\n      _removeJobFromCollection(job, index, this._collidableJobs);\n    } else {\n      _removeJobFromCollection(job, index, this._nonCollidableJobs);\n    }\n  }\n\n  /**\n   * Update the current physics state for a job for the current physics update frame.\n   *\n   * This includes applying all forces that have been registered with the physics job.\n   *\n   * @param {CollidablePhysicsJob} job\n   * @private\n   */\n  _integratePhysicsStateForCollidableJob(job) {\n    this._integratePhysicsStateForJob(job);\n\n    // Update the collidable's position and orientation.\n    job.collidable.position = job.currentState.position;\n    job.collidable.orientation = job.currentState.orientation;\n  }\n\n  /**\n   * Update the current physics state for a job for the current physics update frame.\n   *\n   * This includes applying all forces that have been registered with the physics job.\n   *\n   * @param {PhysicsJob} job\n   * @private\n   */\n  _integratePhysicsStateForJob(job) {\n    job.previousState.copy(job.currentState);\n    this.integrator.integrate(job, this._elapsedTime, this._physicsParams.timeStepDuration);\n  }\n\n  _suppressLowMomentaForAllJobs() {\n    this._collidableJobs.forEach(job => _suppressLowMomentaForJob(job,\n        this._physicsParams.lowMomentumSuppressionThreshold,\n        this._physicsParams.lowAngularMomentumSuppressionThreshold));\n    this._nonCollidableJobs.forEach(job => _suppressLowMomentaForJob(job,\n        this._physicsParams.lowMomentumSuppressionThreshold,\n        this._physicsParams.lowAngularMomentumSuppressionThreshold));\n  }\n\n  /**\n   * Calculate the intermediate physics state to use for rendering the current animation frame. The\n   * given ratio specifies how far the current render frame is between the previous and current\n   * physics update frames.\n   *\n   * @param {number} partialRatio\n   * @private\n   */\n  _setPartialStateForRenderTimeStepForAllJobs(partialRatio) {\n    this._collidableJobs.forEach(_setPartialStateForRenderTimeStepForJob.bind(null, partialRatio));\n    this._nonCollidableJobs.forEach(_setPartialStateForRenderTimeStepForJob.bind(null, partialRatio));\n  }\n\n  _recordOldStatesForAllJobsForDevMode() {\n    this._collidableJobs.forEach(_recordOldStatesForJob);\n    this._nonCollidableJobs.forEach(_recordOldStatesForJob);\n  }\n\n  draw() {}\n\n  /**\n   * @returns {PhysicsEngine}\n   */\n  static get instance() {\n    if (!_physicsEngine) {\n      throw new Error('Can\\'t access PhysicsEngine.instance before it has been instantiated.');\n    }\n    return _physicsEngine;\n  }\n}\n\n/**\n * @param {PhysicsJob} job\n * @param {number} lowMomentumSuppressionThreshold\n * @param {number} lowAngularMomentumSuppressionThreshold\n * @private\n */\nfunction _suppressLowMomentaForJob(job, lowMomentumSuppressionThreshold,\n                                   lowAngularMomentumSuppressionThreshold) {\n  const currentState = job.currentState;\n\n  if (vec3.squaredLength(currentState.momentum) < lowMomentumSuppressionThreshold) {\n    vec3.set(currentState.momentum, 0, 0, 0);\n  }\n\n  if (vec3.squaredLength(currentState.angularMomentum) < lowAngularMomentumSuppressionThreshold) {\n    vec3.set(currentState.angularMomentum, 0, 0, 0);\n  }\n}\n\n/**\n * @param {PhysicsJob} job\n * @param {number} index\n * @param {Array.<PhysicsJob>} jobs\n * @private\n */\nfunction _removeJobFromCollection(job, index, jobs) {\n  if (index >= 0) {\n    jobs.splice(index, 1);\n  } else {\n    const count = jobs.length;\n    for (index = 0; index < count; index++) {\n      if (jobs[index] === job) {\n        jobs.splice(index, 1);\n        break;\n      }\n    }\n  }\n}\n\n/**\n * @param {number} partialRatio\n * @param {PhysicsJob} job\n * @private\n */\nfunction _setPartialStateForRenderTimeStepForJob(partialRatio, job) {\n  job.renderState.lerp(job.previousState, job.currentState, partialRatio);\n}\n\n/**\n * @param {PhysicsJob} job\n * @private\n */\nfunction _recordOldStatesForJob(job) {\n  if (!job.extraPreviousStates) {\n    job.extraPreviousStates = [];\n    for (let i = 0; i < 4; i++) {\n      job.extraPreviousStates[i] = new PhysicsState();\n    }\n  }\n\n  for (let i = 3; i > 0; i--) {\n    job.extraPreviousStates[i].copy(job.extraPreviousStates[i - 1]);\n  }\n  job.extraPreviousStates[0].copy(job.previousState);\n}\n\nlet _physicsEngine = null;\n\nexport {PhysicsEngine};\n","import {animator} from 'lsl-animatex';\nimport {PhysicsEngine} from './physics-engine';\nimport {PhysicsState} from './physics-state';\nimport {_util} from '../util';\n\n/**\n * A PhysicsJob maintains a current force/momentum state and defines a method for applying forces at\n * a given physics time step.\n */\nclass PhysicsJob {\n  /**\n   * @param {Array.<ForceApplier>} [forceAppliers]\n   * @param {PhysicsState} [state]\n   */\n  constructor(forceAppliers, state) {\n    forceAppliers = forceAppliers || [];\n    state = state || new PhysicsState();\n\n    this.startTime = null;\n    this.currentState = state;\n    this.previousState = null;\n    this.renderState = null;\n    this._forceAppliers = forceAppliers;\n  }\n\n  /**\n   * @param {ForceApplierOutput} outputParams\n   * @param {ForceApplierInput} inputParams\n   */\n  applyForces(outputParams, inputParams) {\n    this._forceAppliers.forEach(forceApplier => forceApplier(outputParams, inputParams));\n  }\n\n  /**\n   * @param {ForceApplier} forceApplier\n   * @param {number} [index=0] The index to add the given force applier in the current list of\n   * appliers.\n   */\n  addForceApplier(forceApplier, index = 0) {\n    this._forceAppliers.splice(index, 0, forceApplier);\n  }\n\n  /**\n   * @param {ForceApplier} forceApplier\n   */\n  removeForceApplier(forceApplier) {\n    this._forceAppliers.splice(this._forceAppliers.indexOf(forceApplier), 1);\n  }\n\n  /**\n   * Registers this PhysicsJob and all of its descendant child jobs with the physics engine.\n   *\n   * @param {number} [startTime]\n   */\n  start(startTime) {\n    this.startTime = startTime || animator.currentTime;\n\n    const previousState = new PhysicsState();\n    previousState.copy(this.currentState);\n    const renderState = new PhysicsState();\n    renderState.copy(this.currentState);\n\n    this.previousState = previousState;\n    this.renderState = renderState;\n\n    if (_util.isInDevMode) {\n      // It is useful for debugging to be able to trace the states back to their jobs.\n      this.currentState.job = this;\n      this.previousState.job = this;\n      this.renderState.job = this;\n    }\n\n    PhysicsEngine.instance.addJob(this);\n  }\n\n  /**\n   * Unregisters this PhysicsJob and all of its descendant child jobs with the physics engine.\n   *\n   * Throws no error if the job is not registered.\n   */\n  finish() {\n    PhysicsEngine.instance.removeJob(this);\n  }\n\n  /**\n   * @param {number} [startTime]\n   */\n  restart(startTime) {\n    this.finish();\n    this.start(startTime);\n  }\n}\n\nexport {PhysicsJob};\n\n/**\n * @typedef {Function} ForceApplier\n * @property {vec3} force Output.\n * @property {vec3} torque Output.\n * @property {PhysicsState} state Input.\n * @property {number} t Input.\n * @property {number} dt Input.\n */\n\n/**\n * @typedef {Object} PhysicsConfig\n * @property {number} timeStepDuration\n * @property {number} gravity\n * @property {vec3} _gravityVec\n * @property {number} linearDragCoefficient\n * @property {number} angularDragCoefficient\n * @property {number} coefficientOfRestitution\n * @property {number} coefficientOfFriction\n * @property {number} lowMomentumSuppressionThreshold\n * @property {number} lowAngularMomentumSuppressionThreshold\n */\n","import {rotateTensor, createBoxInertiaTensor} from '../util';\n\n/**\n * This class represents the state of an object that is needed for a physics simulation (such as\n * position, momentum, and mass).\n */\nclass PhysicsState {\n  /**\n   * @param {DynamicsConfig} [dynamicsParams={}]\n   */\n  constructor(dynamicsParams = {}) {\n    const position = dynamicsParams.position || vec3.create();\n    const momentum = dynamicsParams.momentum || vec3.create();\n    const orientation = dynamicsParams.orientation || quat.create();\n    const angularMomentum = dynamicsParams.angularMomentum || vec3.create();\n    const mass = dynamicsParams.mass || 1;\n    const unrotatedInertiaTensor = dynamicsParams.unrotatedInertiaTensor || createBoxInertiaTensor(1, 1, 1, mass);\n\n    // Constant fields.\n\n    this.mass = mass;\n    this.inverseMass = 1 / mass;\n    this.unrotatedInertiaTensor = unrotatedInertiaTensor;\n\n    // Independent fields.\n\n    this.position = position;\n    this.momentum = momentum;\n    this.orientation = orientation;\n    this.angularMomentum = angularMomentum;\n\n    // Dependent fields.\n\n    // Linear velocity.\n    this.velocity = vec3.create();\n    // Quaternion-based representation of the rate of change in orientation.\n    this.spin = quat.create();\n    // Vector-based representation of the angular velocity.\n    this.angularVelocity = vec3.create();\n    // The inverse inertia tensor rotated to the world coordinate frame.\n    this.inverseInertiaTensor = mat3.create();\n\n    this.updateDependentFields();\n  }\n\n  updateDependentFields() {// TODO: Test this somehow...\n    // Update linear velocity.\n    vec3.scale(this.velocity, this.momentum, this.inverseMass);\n\n    // Update angular velocity.\n    quat.normalize(this.orientation, this.orientation);\n    rotateTensor(this.inverseInertiaTensor, this.unrotatedInertiaTensor, this.orientation);\n    mat3.invert(this.inverseInertiaTensor, this.unrotatedInertiaTensor);\n    vec3.transformMat3(this.angularVelocity, this.angularMomentum, this.inverseInertiaTensor);\n    quat.set(this.spin, this.angularVelocity[0], this.angularVelocity[1],\n        this.angularVelocity[2], 0);\n    quat.scale(this.spin, this.spin, 0.5);\n    quat.multiply(this.spin, this.spin, this.orientation);\n  }\n\n  /**\n   * Perform a deep copy.\n   *\n   * @param {PhysicsState} other\n   */\n  copy(other) {\n    this.mass = other.mass;\n    this.inverseMass = other.inverseMass;\n    mat3.copy(this.unrotatedInertiaTensor, other.unrotatedInertiaTensor);\n    mat3.copy(this.inverseInertiaTensor, other.inverseInertiaTensor);\n    vec3.copy(this.position, other.position);\n    vec3.copy(this.momentum, other.momentum);\n    quat.copy(this.orientation, other.orientation);\n    vec3.copy(this.angularMomentum, other.angularMomentum);\n    vec3.copy(this.velocity, other.velocity);\n    quat.copy(this.spin, other.spin);\n    vec3.copy(this.angularVelocity, other.angularVelocity);\n  }\n\n  /**\n   * @param {PhysicsState} a\n   * @param {PhysicsState} b\n   * @param {number} partialRatio\n   */\n  lerp(a, b, partialRatio) {\n    vec3.lerp(this.position, a.position, b.position, partialRatio);\n    vec3.lerp(this.momentum, a.momentum, b.momentum, partialRatio);\n    quat.slerp(this.orientation, a.orientation, b.orientation, partialRatio);\n    quat.normalize(this.orientation, this.orientation);\n    vec3.lerp(this.angularMomentum, a.angularMomentum, b.angularMomentum, partialRatio);\n    this.updateDependentFields();\n  }\n}\n\nexport {PhysicsState};\n\n/**\n * @typedef {Object} DynamicsConfig\n * @property {vec3} [position]\n * @property {vec3} [momentum]\n * @property {quat} [orientation]\n * @property {vec3} [angularMomentum]\n * @property {number} [mass]\n * @property {mat3} [unrotatedInertiaTensor]\n */\n","export * from './src/force-utils';\nexport * from './src/geometry';\nexport * from './src/inertia-tensor-utils';\nexport * from './src/util';\n","/**\n * This module defines a collection of static general utility functions for calculating forces.\n */\n\n/**\n * @param {GravityApplierConfig} config\n * @param {ForceApplierOutput} output\n * @param {ForceApplierInput} input\n */\nfunction applyGravity(config, output, input) {\n  vec3.scaleAndAdd(output.force, output.force, config._gravityVec, input.state.mass);\n}\n\n/**\n * @param {LinearDragApplierConfig} config\n * @param {ForceApplierOutput} output\n * @param {ForceApplierInput} input\n */\nfunction applyLinearDrag(config, output, input) {\n  const dragMagnitude = -vec3.squaredLength(input.state.velocity) * config.linearDragCoefficient;\n  vec3.normalize(_vec3, input.state.velocity);\n  vec3.scaleAndAdd(output.force, output.force, _vec3, dragMagnitude);\n}\n\n/**\n * @param {AngularDragApplierConfig} config\n * @param {ForceApplierOutput} output\n * @param {ForceApplierInput} input\n */\nfunction applyAngularDrag(config, output, input) {\n  vec3.scaleAndAdd(output.torque, output.torque, input.state.angularVelocity,\n      config.angularDragCoefficient);\n}\n\n/**\n * Applies a simple linear spring force (using Hooke's law).\n *\n * force = displacement * coefficient\n *\n * @param {LinearSpringForceApplierConfig} config\n * @param {ForceApplierOutput} output\n * @param {ForceApplierInput} input\n */\nfunction applyLinearSpringForce(config, output, input) {\n  vec3.subtract(_vec3, config.getIntendedPosition(), input.state.position);\n  vec3.scaleAndAdd(output.force, output.force, _vec3, config.springCoefficient);\n}\n\n/**\n * @param {SpringDampingApplierConfig} config\n * @param {ForceApplierOutput} output\n * @param {ForceApplierInput} input\n */\nfunction applySpringDamping(config, output, input) {\n  vec3.scale(_vec3, input.state.velocity, -config.dampingCoefficient);\n  vec3.add(output.force, output.force, _vec3);\n}\n\nconst _vec3 = vec3.create();\n\nexport {\n  applyAngularDrag,\n  applyGravity,\n  applyLinearDrag,\n  applyLinearSpringForce,\n  applySpringDamping,\n}\n\n/**\n * @typedef {Object} GravityApplierConfig\n * @property {vec3} _gravityVec\n */\n\n/**\n * @typedef {Object} LinearDragApplierConfig\n * @property {number} linearDragCoefficient\n */\n\n/**\n * @typedef {Object} AngularDragApplierConfig\n * @property {number} angularDragCoefficient\n */\n\n/**\n * @typedef {Object} LinearSpringForceApplierConfig\n * @property {number} springCoefficient\n * @property {Function.<vec3>} getIntendedPosition\n */\n\n/**\n * @typedef {Object} SpringDampingApplierConfig\n * @property {number} dampingCoefficient\n */\n","/**\n * This module defines a collection of static geometry utility functions.\n */\n\nconst EPSILON = 0.0000001;\nconst HALF_PI = Math.PI / 2;\nconst TWO_PI = Math.PI * 2;\n\n/**\n * Finds the minimum squared distance between two line segments.\n *\n * @param {LineSegment} segmentA\n * @param {LineSegment} segmentB\n * @returns {number}\n */\nfunction findSquaredDistanceBetweenSegments(segmentA, segmentB) {\n  findClosestPointsFromSegmentToSegment(_segmentDistance_tmpVecA, _segmentDistance_tmpVecB,\n      segmentA, segmentB);\n  return vec3.squaredDistance(_segmentDistance_tmpVecA, _segmentDistance_tmpVecB);\n}\n\n/**\n * Finds the minimum squared distance between a line segment and a point.\n *\n * @param {LineSegment} segment\n * @param {vec3} point\n * @returns {number}\n */\nfunction findSquaredDistanceFromSegmentToPoint(segment, point) {\n  findClosestPointOnSegmentToPoint(_segmentDistance_tmpVecA, segment, point);\n  return vec3.squaredDistance(_segmentDistance_tmpVecA, point);\n}\n\nconst _segmentDistance_tmpVecA = vec3.create();\nconst _segmentDistance_tmpVecB = vec3.create();\n\n/**\n * @param {vec3} outputPoint Output parameter.\n * @param {Aabb} aabb\n * @param {vec3} targetPoint\n */\nfunction findClosestPointFromAabbToPoint(outputPoint, aabb, targetPoint) {\n  outputPoint[0] = aabb.minX > targetPoint[0]\n      ? aabb.minX\n      : aabb.maxX < targetPoint[0]\n          ? aabb.maxX\n          : targetPoint[0];\n  outputPoint[1] = aabb.minY > targetPoint[1]\n      ? aabb.minY\n      : aabb.maxY < targetPoint[1]\n          ? aabb.maxY\n          : targetPoint[1];\n  outputPoint[2] = aabb.minZ > targetPoint[2]\n      ? aabb.minZ\n      : aabb.maxZ < targetPoint[2]\n          ? aabb.maxZ\n          : targetPoint[2];\n}\n\n/**\n * @param {vec3} outputPoint Output parameter.\n * @param {Aabb} aabb\n * @param {vec3} targetPoint\n */\nfunction findClosestPointFromAabbSurfaceToPoint(outputPoint, aabb, targetPoint) {\n  findClosestPointFromAabbToPoint(outputPoint, aabb, targetPoint);\n\n  // If the calculated point lies within the AABB, then we need to adjust one coordinate to lie\n  // along the edge of the AABB.\n  if (aabbVsPoint(aabb, outputPoint)) {\n    // Calculate the closest vertex.\n    _tmpVec1[0] = targetPoint[0] - aabb.minX < aabb.maxX - targetPoint[0]\n        ? aabb.minX\n        : aabb.maxX;\n    _tmpVec1[1] = targetPoint[1] - aabb.minY < aabb.maxY - targetPoint[1]\n        ? aabb.minY\n        : aabb.maxY;\n    _tmpVec1[2] = targetPoint[2] - aabb.minZ < aabb.maxZ - targetPoint[2]\n        ? aabb.minZ\n        : aabb.maxZ;\n\n    // Calculate the distance to the vertex along each dimension.\n    _tmpVec2[0] = _tmpVec1[0] - outputPoint[0];\n    _tmpVec2[0] = _tmpVec2[0] < 0 ? -_tmpVec2[0] : _tmpVec2[0];\n    _tmpVec2[1] = _tmpVec1[1] - outputPoint[1];\n    _tmpVec2[1] = _tmpVec2[1] < 1 ? -_tmpVec2[1] : _tmpVec2[1];\n    _tmpVec2[2] = _tmpVec1[2] - outputPoint[2];\n    _tmpVec2[2] = _tmpVec2[2] < 2 ? -_tmpVec2[2] : _tmpVec2[2];\n\n    // Determine along which dimension the point is closest to the AABB.\n    const index = _tmpVec2[0] < _tmpVec2[1]\n        ? (_tmpVec2[0] < _tmpVec2[2]\n            ? 0\n            : 2)\n        : (_tmpVec2[1] < _tmpVec2[2]\n            ? 1\n            : 2);\n\n    outputPoint[index] = _tmpVec1[index];\n  }\n}\n\n/**\n * Finds the point of intersection between a line segment and a coplanar quadrilateral.\n *\n * This assumes the region is not degenerate (has non-zero side lengths).\n *\n * @param {vec3} poi Output param. Null if there is no intersection.\n * @param {LineSegment} segment\n * @param {vec3} planeVertex1\n * @param {vec3} planeVertex2\n * @param {vec3} planeVertex3\n * @param {vec3} planeVertex4\n * @returns {boolean} True if there is an intersection.\n */\nfunction findPoiBetweenSegmentAndPlaneRegion(poi, segment, planeVertex1, planeVertex2, planeVertex3,\n                                             planeVertex4) {\n  return findPoiBetweenSegmentAndTriangle(poi, segment, planeVertex1, planeVertex2, planeVertex3) ||\n      findPoiBetweenSegmentAndTriangle(poi, segment, planeVertex1, planeVertex3, planeVertex4);\n}\n\n/**\n * Finds the point of intersection between a line segment and a triangle.\n *\n * This assumes the triangle is not degenerate (has non-zero side lengths).\n *\n * ----------------------------------------------------------------------------\n * Originally based on Dan Sunday's algorithms at http://geomalgorithms.com/a06-_intersect-2.html.\n *\n * Copyright 2001 softSurfer, 2012 Dan Sunday\n * This code may be freely used and modified for any purpose\n * providing that this copyright notice is included with it.\n * SoftSurfer makes no warranty for this code, and cannot be held\n * liable for any real or imagined damage resulting from its use.\n * Users of this code must verify correctness for their application.\n * ----------------------------------------------------------------------------\n *\n * @param {vec3} poi Output param. Null if there is no intersection.\n * @param {LineSegment} segment\n * @param {vec3} triangleVertex1\n * @param {vec3} triangleVertex2\n * @param {vec3} triangleVertex3\n * @returns {boolean} True if there is an intersection.\n */\nfunction findPoiBetweenSegmentAndTriangle(poi, segment, triangleVertex1, triangleVertex2,\n                                          triangleVertex3) {\n  //\n  // Find the point of intersection between the segment and the triangle's plane.\n  //\n\n  // First triangle edge.\n  vec3.subtract(_tmpVec1, triangleVertex2, triangleVertex1);\n  // Second triangle edge.\n  vec3.subtract(_tmpVec2, triangleVertex3, triangleVertex1);\n  // Triangle normal.\n  vec3.cross(_tmpVec3, _tmpVec1, _tmpVec2);\n  // Triangle to segment.\n  vec3.subtract(_tmpVec4, segment.start, triangleVertex1);\n\n  const normalToSegmentProj = vec3.dot(_tmpVec3, segment.dir);\n\n  if (normalToSegmentProj < EPSILON && normalToSegmentProj > -EPSILON) {\n    // The line segment is parallel to the triangle.\n    return false;\n  }\n\n  const normalToDiffProj = -vec3.dot(_tmpVec3, _tmpVec4);\n  const segmentNormalizedDistance = normalToDiffProj / normalToSegmentProj;\n\n  if (segmentNormalizedDistance < 0 || segmentNormalizedDistance > 1) {\n    // The line segment ends before intersecting the plane.\n    return false;\n  }\n\n  vec3.scaleAndAdd(poi, segment.start, segment.dir, segmentNormalizedDistance);\n\n  //\n  // Determine whether the point of intersection lies within the triangle.\n  //\n\n  const edge1DotEdge1 = vec3.dot(_tmpVec1, _tmpVec1);\n  const edge1DotEdge2 = vec3.dot(_tmpVec1, _tmpVec2);\n  const edge2DotEdge2 = vec3.dot(_tmpVec2, _tmpVec2);\n  // Triangle to point of intersection.\n  vec3.subtract(_tmpVec3, poi, triangleVertex1);\n  const diffDotEdge1 = vec3.dot(_tmpVec3, _tmpVec1);\n  const diffDotEdge2 = vec3.dot(_tmpVec3, _tmpVec2);\n  const denominator = edge1DotEdge2 * edge1DotEdge2 - edge1DotEdge1 * edge2DotEdge2;\n\n  // Check the triangle's parametric coordinates.\n  const s = (edge1DotEdge2 * diffDotEdge2 - edge2DotEdge2 * diffDotEdge1) / denominator;\n  if (s < 0 || s > 1) {\n    return false;\n  }\n  const t = (edge1DotEdge2 * diffDotEdge1 - edge1DotEdge1 * diffDotEdge2) / denominator;\n  if (t < 0 || s + t > 1) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * ----------------------------------------------------------------------------\n * Originally based on Jukka Jylänki's algorithm at\n * https://github.com/juj/MathGeoLib/blob/1093e39d91def7ff6905fb7489893190d7d81353/src/Geometry/OBB.cpp.\n *\n * Copyright 2011 Jukka Jylänki\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ----------------------------------------------------------------------------\n *\n * @param {vec3} outputPoint Output parameter.\n * @param {Obb} obb\n * @param {vec3} targetPoint\n */\nfunction findClosestPointFromObbToPoint(outputPoint, obb, targetPoint) {\n  vec3.subtract(_tmpVec1, targetPoint, obb.centerOfVolume);\n  vec3.copy(outputPoint, obb.centerOfVolume);\n  for (let i = 0; i < 3; i++) {\n    // Compute the displacement along this axis.\n    let projection = vec3.dot(obb.axes[i], _tmpVec1);\n    projection = projection > obb.halfSideLengths[i] ? obb.halfSideLengths[i] :\n        (projection < -obb.halfSideLengths[i] ? -obb.halfSideLengths[i] : projection);\n    vec3.scaleAndAdd(outputPoint, outputPoint, obb.axes[i], projection);\n  }\n}\n\n/**\n * Finds the closest position on one line segment to the other line segment, and vice versa.\n *\n * ----------------------------------------------------------------------------\n * Originally based on Jukka Jylänki's algorithm at\n * https://github.com/juj/MathGeoLib/blob/ff2d348a167008c831ae304483b824647f71fbf6/src/Geometry/LineSegment.cpp.\n *\n * Copyright 2011 Jukka Jylänki\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ----------------------------------------------------------------------------\n *\n * @param {vec3} closestA Output param.\n * @param {vec3} closestB Output param.\n * @param {LineSegment} segmentA\n * @param {LineSegment} segmentB\n */\nfunction findClosestPointsFromSegmentToSegment(closestA, closestB, segmentA, segmentB) {\n  const {distA, distB} = findClosestPointsFromLineToLine(\n      segmentA.start, segmentA.dir, segmentB.start, segmentB.dir);\n\n  const isDistAInBounds = distA >= 0 && distA <= 1;\n  const isDistBInBounds = distB >= 0 && distB <= 1;\n\n  if (isDistAInBounds) {\n    if (isDistBInBounds) {\n      // The distances along both line segments are within bounds.\n      vec3.scaleAndAdd(closestA, segmentA.start, segmentA.dir, distA);\n      vec3.scaleAndAdd(closestB, segmentB.start, segmentB.dir, distB);\n    } else {\n      // Only the distance along the first line segment is within bounds.\n      if (distB < 0) {\n        vec3.copy(closestB, segmentB.start);\n      } else {\n        vec3.copy(closestB, segmentB.end);\n      }\n      findClosestPointOnSegmentToPoint(closestA, segmentA, closestB);\n    }\n  } else {\n    if (isDistBInBounds) {\n      // Only the distance along the second line segment is within bounds.\n      if (distA < 0) {\n        vec3.copy(closestA, segmentA.start);\n      } else {\n        vec3.copy(closestA, segmentA.end);\n      }\n      findClosestPointOnSegmentToPoint(closestB, segmentB, closestA);\n    } else {\n      // Neither of the distances along either line segment are within bounds.\n      if (distA < 0) {\n        vec3.copy(closestA, segmentA.start);\n      } else {\n        vec3.copy(closestA, segmentA.end);\n      }\n\n      if (distB < 0) {\n        vec3.copy(closestB, segmentB.start);\n      } else {\n        vec3.copy(closestB, segmentB.end);\n      }\n\n      const altClosestA = vec3.create();\n      const altClosestB = vec3.create();\n\n      findClosestPointOnSegmentToPoint(altClosestA, segmentA, closestB);\n      findClosestPointOnSegmentToPoint(altClosestB, segmentB, closestA);\n\n      if (vec3.squaredDistance(altClosestA, closestB) <\n          vec3.squaredDistance(altClosestB, closestA)) {\n        vec3.copy(closestA, altClosestA);\n      } else {\n        vec3.copy(closestB, altClosestB);\n      }\n    }\n  }\n}\n\n/**\n * Finds the closest position on a line segment to a point.\n *\n * ----------------------------------------------------------------------------\n * Originally based on Jukka Jylänki's algorithm at\n * https://github.com/juj/MathGeoLib/blob/ff2d348a167008c831ae304483b824647f71fbf6/src/Geometry/LineSegment.cpp.\n *\n * Copyright 2011 Jukka Jylänki\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ----------------------------------------------------------------------------\n *\n * @param {vec3} closestPoint Output param.\n * @param {LineSegment} segment\n * @param {vec3} point\n * @private\n */\nfunction findClosestPointOnSegmentToPoint(closestPoint, segment, point) {\n  const dirSquaredLength = vec3.squaredLength(segment.dir);\n\n  if (!dirSquaredLength) {\n    // The point is at the segment start.\n    vec3.copy(closestPoint, segment.start);\n  } else {\n    // Calculate the projection of the point onto the line extending through the segment.\n    vec3.subtract(_tmpVec1, point, segment.start);\n    const t = vec3.dot(_tmpVec1, segment.dir) / dirSquaredLength;\n\n    if (t < 0) {\n      // The point projects beyond the segment start.\n      vec3.copy(closestPoint, segment.start);\n    } else if (t > 1) {\n      // The point projects beyond the segment end.\n      vec3.copy(closestPoint, segment.end);\n    } else {\n      // The point projects between the start and end of the segment.\n      vec3.scaleAndAdd(closestPoint, segment.start, segment.dir, t);\n    }\n  }\n}\n\n/**\n * Finds the closest position on one line to the other line, and vice versa.\n *\n * The positions are represented as scalar-value distances from the \"start\" positions of each line.\n * These are scaled according to the given direction vectors.\n *\n * ----------------------------------------------------------------------------\n * Originally based on Jukka Jylänki's algorithm at\n * https://github.com/juj/MathGeoLib/blob/ff2d348a167008c831ae304483b824647f71fbf6/src/Geometry/Line.cpp.\n *\n * Copyright 2011 Jukka Jylänki\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ----------------------------------------------------------------------------\n *\n * @param {vec3} startA The start position of line A.\n * @param {vec3} dirA The (unnormalized) direction of line A. Cannot be zero.\n * @param {vec3} startB The start position of line B.\n * @param {vec3} dirB The (unnormalized) direction of line B. Cannot be zero.\n * @returns {{distA: Number, distB: Number}}\n */\nfunction findClosestPointsFromLineToLine(startA, dirA, startB, dirB) {\n  vec3.subtract(_tmpVec1, startA, startB);\n  const dirBDotDirAToB = vec3.dot(dirB, _tmpVec1);\n  const dirADotDirAToB = vec3.dot(dirA, _tmpVec1);\n\n  const sqrLenDirB = vec3.squaredLength(dirB);\n  const sqrLenDirA = vec3.squaredLength(dirA);\n\n  const dirADotDirB = vec3.dot(dirA, dirB);\n\n  const denominator = sqrLenDirA * sqrLenDirB - dirADotDirB * dirADotDirB;\n\n  const distA = denominator < EPSILON\n      ? 0\n      : (dirADotDirB * dirBDotDirAToB - sqrLenDirB * dirADotDirAToB) / denominator;\n  const distB = (dirBDotDirAToB + dirADotDirB * distA) / sqrLenDirB;\n\n  return {\n    distA: distA,\n    distB: distB\n  };\n}\n\n/**\n * A good description of why we need these special operations for rotating tensors can be found\n * here: http://www.randygaul.net/2014/04/09/transformations-change-of-basis-matrix/.\n *\n * @param {mat3} output Output param.\n * @param {mat3} tensor\n * @param {quat} rotation\n */\nfunction rotateTensor(output, tensor, rotation) {// TODO: Test this somehow...\n  mat3.fromQuat(_tmpMat, rotation);\n  mat3.multiply(output, _tmpMat, tensor);\n  mat3.invert(_tmpMat, _tmpMat);\n  mat3.multiply(output, output, _tmpMat);\n}\n\n/**\n * @param {Aabb} aabb\n * @param {vec3} point\n * @returns {boolean}\n */\nfunction aabbVsPoint(aabb, point) {\n  return point[0] >= aabb.minX && point[0] <= aabb.maxX &&\n      point[1] >= aabb.minY && point[1] <= aabb.maxY &&\n      point[2] >= aabb.minZ && point[2] <= aabb.maxZ\n}\n\n/**\n * @param {quat} out\n * @param {quat} a\n * @param {quat} b\n * @param {number} scale\n * @returns {quat}\n */\nfunction scaleAndAddQuat(out, a, b, scale) {\n  return quat.set(out,\n      a[0] + b[0] * scale,\n      a[1] + b[1] * scale,\n      a[2] + b[2] * scale,\n      a[3] + b[3] * scale);\n}\n\n/**\n * @param {vec3} a\n * @param {vec3} b\n * @returns {boolean}\n */\nfunction areVec3sClose(a, b) {\n  for (let i = 0; i < 3; i++) {\n    if (a[i] - b[i] > EPSILON || b[i] - a[i] > EPSILON) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Re-used across the geometry utility functions, so we don't instantiate as many vec3 objects.\nconst _tmpVec1 = vec3.create();\nconst _tmpVec2 = vec3.create();\nconst _tmpVec3 = vec3.create();\nconst _tmpVec4 = vec3.create();\nconst _tmpMat = mat3.create();\n\n// Exposed to consumers, so they don't have to instantiate as many vec3 objects.\nconst tmpVec1 = vec3.create();\nconst tmpVec2 = vec3.create();\nconst tmpVec3 = vec3.create();\nconst tmpVec4 = vec3.create();\n\nconst _geometry = {\n  EPSILON,\n  HALF_PI,\n  TWO_PI,\n  scaleAndAddQuat,\n};\n\nexport {\n  _geometry,\n  tmpVec1,\n  tmpVec2,\n  tmpVec3,\n  tmpVec4,\n  findSquaredDistanceBetweenSegments,\n  findSquaredDistanceFromSegmentToPoint,\n  findClosestPointFromAabbToPoint,\n  findClosestPointFromAabbSurfaceToPoint,\n  findPoiBetweenSegmentAndTriangle,\n  findPoiBetweenSegmentAndPlaneRegion,\n  findClosestPointFromObbToPoint,\n  findClosestPointsFromSegmentToSegment,\n  findClosestPointOnSegmentToPoint,\n  findClosestPointsFromLineToLine,\n  rotateTensor,\n  aabbVsPoint,\n  areVec3sClose,\n};\n","/**\n * This module defines a collection of static utility functions for calculating inertia tensors.\n */\n\nimport {_geometry, rotateTensor} from './geometry';\n\n/**\n * @param {number} radius\n * @param {number} mass\n * @returns {mat3}\n */\nfunction createSphereInertiaTensor(radius, mass) {// TODO: Test this somehow...\n  const tensor = mat3.create();\n  const moment = 2 / 5 * mass * radius * radius;\n  tensor[0] = moment;\n  tensor[4] = moment;\n  tensor[8] = moment;\n  return tensor;\n}\n\n/**\n * @param {number} rangeX\n * @param {number} rangeY\n * @param {number} rangeZ\n * @param {number} mass\n * @returns {mat3}\n */\nfunction createBoxInertiaTensor(rangeX, rangeY, rangeZ, mass) {// TODO: Test this somehow...\n  const tensor = mat3.create();\n  const tmp = mass / 12;\n  const xRangeSquared = rangeX * rangeX;\n  const yRangeSquared = rangeY * rangeY;\n  const zRangeSquared = rangeZ * rangeZ;\n  tensor[0] = tmp * (yRangeSquared + zRangeSquared);\n  tensor[4] = tmp * (xRangeSquared + yRangeSquared);\n  tensor[8] = tmp * (xRangeSquared + zRangeSquared);\n  return tensor;\n}\n\n/**\n * ----------------------------------------------------------------------------\n * Originally based on Bojan Lovrovic's algorithm at\n * http://www.gamedev.net/page/resources/_/technical/math-and-physics/capsule-inertia-tensor-r3856.\n *\n * Copyright 2014 Bojan Lovrovic\n *\n * GameDev.net Open License\n * (http://www.gamedev.net/page/resources/_/gdnethelp/gamedevnet-open-license-r2956)\n *\n * TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n *\n * 1. Definitions.\n *\n * \"Article\" shall refer to any body of text written by Author which describes and documents the use\n * and/or operation of Source. It specifically does not refer to any accompanying Source either\n * embedded within the body of text or attached to the article as a file.\n *\n * \"Author\" means the individual or entity that offers the Work under the terms of this License.\n *\n * \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined\n * by Sections 1 through 9 of this document.\n *\n * \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is\n * granting the License.\n *\n * \"You\" (or \"Your\") shall mean an individual or entity exercising permissions granted by this\n * License.\n *\n * \"Source\" shall include all software text source code and configuration files used to create\n * executable software\n *\n * \"Object\" shall mean any Source which has been converted into a machine executable software\n *\n * \"Work\" consists of both the Article and Source\n *\n * \"Publisher\" refers to GameDev.net LLC\n *\n * This agreement is between You and Author, the owner and creator of the Work located at\n * Gamedev.net.\n *\n * 2. Fair Dealing Rights.\n *\n * Nothing in this License is intended to reduce, limit, or restrict any uses free from copyright or\n * rights arising from limitations or exceptions that are provided for in connection with the\n * copyright protection under copyright law or other applicable laws.\n *\n * 3. Grant of Copyright License.\n *\n * Subject to the terms and conditions of this License, the Author hereby grants to You a perpetual,\n * worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to the Work\n * under the following stated terms:\n * You may not reproduce the Article on any other website outside of Gamedev.net without express\n * written permission from the Author\n * You may use, copy, link, modify and distribute under Your own terms, binary Object code versions\n * based on the Work in your own software\n * You may reproduce, prepare derivative Works of, publicly display, publicly perform, sublicense,\n * and distribute the Source and such derivative Source in Source form only as part of a larger\n * software distribution and provided that attribution to the original Author is granted.\n * The origin of this Work must not be misrepresented; you must not claim that you wrote the\n * original Source. If you use this Source in a product, an acknowledgment of the Author name would\n * be appreciated but is not required.\n *\n * 4. Restrictions.\n *\n * The license granted in Section 3 above is expressly made subject to and limited by the following\n * restrictions:\n * Altered Source versions must be plainly marked as such, and must not be misrepresented as being\n * the original software.\n * This License must be visibly linked to from any online distribution of the Article by URI and\n * using the descriptive text \"Licensed under the GameDev.net Open License\"\n * Neither the name of the Author of this Work, nor any of their trademarks or service marks, may be\n * used to endorse or promote products derived from this Work without express prior permission of\n * the Author\n * Except as expressly stated herein, nothing in this License grants any license to Author's\n * trademarks, copyrights, patents, trade secrets or any other intellectual property. No license is\n * granted to the trademarks of Author even if such marks are included in the Work. Nothing in this\n * License shall be interpreted to prohibit Author from licensing under terms different from this\n * License any Work that Author otherwise would have a right to license.\n *\n * 5. Grant of Patent License.\n *\n * Subject to the terms and conditions of this License, each Contributor hereby grants to You a\n * perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in\n * this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise\n * transfer the Work, where such license applies only to those patent claims licensable by such\n * Contributor that are necessarily infringed by their Contribution(s) alone or by combination of\n * their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute\n * patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit)\n * alleging that the Work or Source incorporated within the Work constitutes direct or contributory\n * patent infringement, then any patent licenses granted to You under this License for that Work\n * shall terminate as of the date such litigation is filed.\n *\n * 6. Limitation of Liability.\n *\n * In no event and under no legal theory, whether in tort (including negligence), contract, or\n * otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or\n * agreed to in writing, shall any Author or Publisher be liable to You for damages, including any\n * direct, indirect, special, incidental, or consequential damages of any character arising as a\n * result of this License or out of the use or inability to use the Work (including but not limited\n * to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all\n * other commercial damages or losses), even if such Author has been advised of the possibility of\n * such damages.\n *\n * 7. DISCLAIMER OF WARRANTY\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\n * NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * 8. Publisher.\n *\n * The parties hereby confirm that the Publisher shall not, under any circumstances, be responsible\n * for and shall not have any liability in respect of the subject matter of this License. The\n * Publisher makes no warranty whatsoever in connection with the Work and shall not be liable to You\n * or any party on any legal theory for any damages whatsoever, including without limitation any\n * general, special, incidental or consequential damages arising in connection to this license. The\n * Publisher reserves the right to cease making the Work available to You at any time without notice\n *\n * 9. Termination\n *\n * This License and the rights granted hereunder will terminate automatically upon any breach by You\n * of the terms of this License. Individuals or entities who have received Deriviative Works from\n * You under this License, however, will not have their licenses terminated provided such\n * individuals or entities remain in full compliance with those licenses. Sections 1, 2, 6, 7, 8 and\n * 9 will survive any termination of this License.\n * Subject to the above terms and conditions, the license granted here is perpetual (for the\n * duration of the applicable copyright in the Work). Notwithstanding the above, Licensor reserves\n * the right to release the Work under different license terms or to stop distributing the Work at\n * any time; provided, however that any such election will not serve to withdraw this License (or\n * any other license that has been, or is required to be, granted under the terms of this License),\n * and this License will continue in full force and effect unless terminated as stated above.\n * ----------------------------------------------------------------------------\n *\n * @param {number} halfDistance\n * @param {number} radius\n * @param {number} mass\n * @returns {mat3}\n */\nfunction createCapsuleInertiaTensor(halfDistance, radius, mass) {// TODO: Test this somehow...\n  const tensor = mat3.create();\n\n  const cylinderHeight = halfDistance * 2;\n  const radiusSquared = radius * radius;\n  const cylinderVolume = Math.PI * radiusSquared * cylinderHeight;\n  const hemisphereCombinedVolume = 4 / 3 * Math.PI * radiusSquared;\n  const cylinderMass = cylinderVolume / (cylinderVolume * hemisphereCombinedVolume) * mass;\n  const hemisphereMass = (mass - cylinderMass) / 2;\n\n  // Contribution from the cylinder.\n  tensor[4] = radiusSquared * cylinderMass / 2;\n  tensor[0] = tensor[4] / 2 + cylinderMass * cylinderHeight * cylinderHeight / 12;\n  tensor[8] = tensor[0];\n\n  // Contributions from the hemispheres.\n  const tmp1 = hemisphereMass * 2 * radiusSquared / 5;\n  tensor[4] += tmp1 * 2;\n  const tmp2 =\n      (tmp1 + hemisphereMass * (halfDistance * halfDistance + 3 / 8 * cylinderHeight * radius)) * 2;\n  tensor[0] += tmp2;\n  tensor[8] += tmp2;\n\n  // The above calculations assume the capsule is aligned along the y-axis. However, our default\n  // capsule orientation is aligned along the z-axis.\n  const rotation = quat.create();\n  quat.rotateX(rotation, rotation, _geometry.HALF_PI);\n  rotateTensor(tensor, tensor, rotation);\n\n  return tensor;\n}\n\n/**\n * @param {Collidable} collidable\n * @param {number} mass\n * @returns {mat3}\n */\nfunction createForCollidable(collidable, mass) {\n  switch (collidable.constructor.name) {\n    case 'Sphere':\n      return createSphereInertiaTensor(collidable.radius, mass);\n    case 'Aabb':\n      return createBoxInertiaTensor(collidable.rangeX, collidable.rangeY, collidable.rangeZ, mass);\n    case 'Capsule':\n      return createCapsuleInertiaTensor(collidable.halfDistance, collidable.radius, mass);\n    case 'Obb':\n      return createBoxInertiaTensor(collidable.halfSideLengths[0] * 2,\n          collidable.halfSideLengths[1] * 2, collidable.halfSideLengths[2] * 2, mass);\n  }\n}\n\nexport {\n  createSphereInertiaTensor,\n  createBoxInertiaTensor,\n  createCapsuleInertiaTensor,\n  createForCollidable,\n};\n","/**\n * This module defines a collection of static general utility functions.\n */\n\n// TODO: This should be set from somewhere else (probably as a param to controller like before; but then I need to make this updatable)\nconst isInDevMode = true;\n\nconst _util = {\n  isInDevMode: isInDevMode\n};\n\nexport {\n  _util,\n};\n","export * from './src/camera';\nexport * from './src/first-person-camera';\nexport * from './src/fixed-camera';\nexport * from './src/fixed-follow-camera';\nexport * from './src/follow-camera';\nexport * from './src/third-person-camera';\nexport * from './src/overhead-camera';\n","import { PersistentAnimationJob } from 'lsl-animatex';\n\n// TODO: Make the rotation quaternion based with 6DoF.\n\n// TODO: Add support for scripting the camera to follow a curve:\n// (https://msdn.microsoft.com/en-us/library/bb203908(v=xnagamestudio.31).aspx)\n\n/**\n * This class defines common camera logic.\n *\n * @abstract\n */\nclass Camera extends PersistentAnimationJob {\n  /**\n   * If oldCamera is given, then the state of the new camera will be initialized to match that of\n   * the old camera. This enables a smooth transition when changing cameras.\n   *\n   * @param {CameraConfig} cameraParams\n   * @param {Camera} [oldCamera]\n   */\n  constructor(cameraParams, oldCamera) {\n    super();\n\n    // Camera is an abstract class. It should not be instantiated directly.\n    if (new.target === Camera) {\n      throw new TypeError('Cannot construct Camera instances directly');\n    }\n\n    this._cameraParams = cameraParams;\n    this._fovY = null;\n    this._aspectRatio = null;\n    this._zNear = null;\n    this._zFar = null;\n    this._position = vec3.create();\n    this._orientation = quat.create(); // TODO: Use this.\n    this._viewMatrix = mat4.create();\n    this._projectionMatrix = mat4.create();\n    this._viewProjectionMatrix = mat4.create();\n\n    this._matchOldCamera(oldCamera);\n  }\n\n  reset() {\n    this._setPerspective(this._cameraParams.fovY, this._cameraParams.defaultAspectRatio,\n      this._cameraParams.zNear, this._cameraParams.zFar);\n  }\n\n  // TODO: Call this after adding support for dynamically switching cameras.\n  destroy() {}\n\n  /**\n   * Set this camera's orientation and position.\n   *\n   * @param {vec3} eye The camera position.\n   * @param {vec3} target The focal point.\n   * @param {vec3} up The local up direction.\n   * @param {vec3} viewDirection The (normalized) direction the camera is looking.\n   * @protected\n   */\n  _setPositionAndLookAt(eye, target, up, viewDirection) {\n    vec3.copy(this._position, eye);\n    this._setLookAtFromCurrentPosition(target, up, viewDirection);\n  }\n\n  /**\n   * Set this camera's orientation, but do not change its position.\n   *\n   * @param {vec3} target The focal point.\n   * @param {vec3} up The local up direction.\n   * @param {vec3} viewDirection The (normalized) direction the camera is looking.\n   * @protected\n   */\n  _setLookAtFromCurrentPosition(target, up, viewDirection) {\n    mat4.lookAt(this._viewMatrix, this._position, target, up);\n    quat.rotationTo(this._orientation, this._cameraParams._defaultLookAtDirection, viewDirection); // TODO: Check this; might need to swap arguments.\n    this._updateViewProjectionMatrix();\n  }\n\n  /**\n   * Translate this camera by the given amount from its current position.\n   *\n   * @param {vec3} translation\n   * @protected\n   */\n  _translate(translation) {\n    vec3.add(this._position, this._position, translation);\n  }\n\n  /**\n   * Rotate this camera by the given amount from its current orientation.\n   *\n   * @param {quat} rotation\n   * @protected\n   */\n  _rotate(rotation) {\n    // TODO\n  }\n\n  /**\n   * @param {number} fovY In radians.\n   * @param {number} aspectRatio Width / height.\n   * @param {number} zNear\n   * @param {number} zFar\n   * @protected\n   */\n  _setPerspective(fovY, aspectRatio, zNear, zFar) {\n    this._fovY = fovY;\n    this._aspectRatio = aspectRatio;\n    this._zNear = zNear;\n    this._zFar = zFar;\n    this._updateProjectionMatrix();\n  }\n\n  /**\n   * Re-calculates the view-projection matrix. This should be called any time either the view or\n   * projection matrices is updated.\n   *\n   * @protected\n   */\n  _updateProjectionMatrix() {\n    mat4.perspective(\n      this._projectionMatrix, this._fovY, this._aspectRatio, this._zNear, this._zFar);\n    this._updateViewProjectionMatrix();\n  }\n\n  /**\n   * Re-calculates the view-projection matrix. This should be called any time either the view or\n   * projection matrices is updated.\n   *\n   * @protected\n   */\n  _updateViewProjectionMatrix() {\n    mat4.multiply(this._viewProjectionMatrix, this._projectionMatrix, this._viewMatrix);\n  }\n\n  /**\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @abstract\n   */\n  update(currentTime, deltaTime) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  draw() {}\n\n  /**\n   * @param {number} fovY The vertical field of view, in radians.\n   * @protected\n   */\n  set fov(fovY) {\n    this._fovY = fovY;\n    this._updateProjectionMatrix();\n  }\n\n  /**\n   * @param {number} aspectRatio Width / height.\n   */\n  set aspectRatio(aspectRatio) {\n    this._setPerspective(this._cameraParams.fovY, aspectRatio, this._cameraParams.zNear,\n      this._cameraParams.zFar);\n  }\n\n  /** @returns {vec3} */\n  get position() {\n    return this._position;\n  }\n  /** @returns {quat} */\n  get orientation() {\n    return this._orientation;\n  }\n  /** @returns {mat4} */\n  get viewMatrix() {\n    return this._viewMatrix;\n  }\n  /** @returns {mat4} */\n  get projectionMatrix() {\n    return this._projectionMatrix;\n  }\n  /** @returns {mat4} */\n  get viewProjectionMatrix() { // TODO: Stop using the above two getters and use this instead?\n    return this._viewProjectionMatrix;\n  }\n\n  /**\n   * Update this camera's state to match the given old camera.\n   *\n   * @param {Camera} oldCamera\n   * @protected\n   */\n  _matchOldCamera(oldCamera) {\n    if (!oldCamera) {\n      return;\n    }\n    this._fovY = oldCamera._fovY;\n    this._aspectRatio = oldCamera._aspectRatio;\n    this._zNear = oldCamera._zNear;\n    this._zFar = oldCamera._zFar;\n    vec3.copy(this._position, oldCamera._position);\n    vec3.copy(this._orientation, oldCamera._orientation);\n    mat4.copy(this._viewMatrix, oldCamera._viewMatrix);\n    mat4.copy(this._projectionMatrix, oldCamera._projectionMatrix);\n    mat4.copy(this._viewProjectionMatrix, oldCamera._viewProjectionMatrix);\n  }\n}\n\nexport { Camera };\n\n/**\n * @typedef {Function} CameraConfig\n * @property {number} fovY\n * @property {number} zNear\n * @property {number} zFar\n * @property {number} defaultAspectRatio\n * @property {vec3} _defaultLookAtDirection\n */\n\n/**\n * @typedef {Object} FollowCameraConfig\n * @property {number} springCoefficient\n * @property {number} dampingCoefficient\n * @property {number} intendedDistanceFromTarget\n * @property {number} intendedRotationAngleFromTarget\n * @property {vec3} intendedRotationAxisFromTarget\n * @property {vec3} _intendedTranslationFromTarget\n */\n\n/**\n * @typedef {Object} FirstPersonCameraConfig\n * @property {vec3} intendedDisplacementFromTarget\n * @property {vec3} viewDirection\n * @property {number} targetDistance\n */\n\n/**\n * @typedef {Object} FixedCameraConfig\n * @property {vec3} position\n * @property {vec3} viewDirection\n * @property {vec3} _up\n */\n","import { Camera } from './camera';\n\n/**\n * This class defines a first-person camera.\n *\n * A first-person camera is positioned at a character and moves and rotates with the character.\n */\nclass FirstPersonCamera extends Camera {\n  /**\n   * @param {CameraTarget} cameraTarget\n   * @param {FirstPersonCameraConfig} firstPersonCameraParams\n   * @param {CameraConfig} cameraParams\n   * @param {Camera} [oldCamera]\n   */\n  constructor(cameraTarget, firstPersonCameraParams, cameraParams, oldCamera) {\n    super(cameraParams, oldCamera);\n    this._cameraTarget = cameraTarget;\n    this._firstPersonCameraParams = firstPersonCameraParams;\n    this._cameraTarget = cameraTarget;\n  }\n\n  /**\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  update(currentTime, deltaTime) {\n    this._updatePosition();\n    this._updateOrientation();\n  }\n\n  /**\n   * @private\n   */\n  _updatePosition() {\n    const intendedPosition = this._getIntendedPosition();\n    vec3.copy(this._position, intendedPosition);\n  }\n\n  /**\n   * Update the camera's orientation using the \"look at\" method according to its position and the\n   * position of its target.\n   *\n   * @protected\n   */\n  _updateOrientation() {\n    // Get the view direction, and transform it to align with the target's orientation.\n    const viewDirection = vec3.create();\n    vec3.copy(viewDirection, this._firstPersonCameraParams.viewDirection);\n    vec3.transformQuat(viewDirection, viewDirection, this._cameraTarget.orientation);\n\n    const target = vec3.create();\n    vec3.scaleAndAdd(target, this._position, viewDirection,\n      this._firstPersonCameraParams.targetDistance);\n\n    // Initialize \"up\" as the world z-axis.\n    const up = vec3.fromValues(0, 1, 0);\n\n    // Transform \"up\" to align with the camera target's local z-axis.\n    vec3.transformQuat(up, up, this._cameraTarget.orientation);\n\n    const right = vec3.create();\n    vec3.cross(right, viewDirection, up);\n\n    // Transform \"up\" to align with the camera's local z-axis.\n    vec3.cross(up, right, viewDirection);\n\n    this._setPositionAndLookAt(this._position, target, up, viewDirection);\n  }\n\n  /**\n   * The intended position for this camera to be in according to the position and orientation of the\n   * camera target.\n   *\n   * @returns {vec3}\n   * @protected\n   * @abstract\n   */\n  _getIntendedPosition() {\n    const intendedPosition = vec3.create();\n    vec3.transformMat4(\n      intendedPosition,\n      this._firstPersonCameraParams.intendedDisplacementFromTarget,\n      this._cameraTarget.worldTransform);\n    return intendedPosition;\n  }\n}\n\nexport { FirstPersonCamera };\n","import {Camera} from './camera';\n\n/**\n * This class defines a fixed camera.\n *\n * A fixed camera's position and orientation are updated manually and remain fixed until a later\n * update.\n */\nclass FixedCamera extends Camera {\n  /**\n   * If oldCamera is given, then the state of the new camera will be initialized to match that of\n   * the old camera. This enables a smooth transition when changing cameras.\n   *\n   * @param {FixedCameraConfig} fixedCameraParams\n   * @param {CameraConfig} cameraParams\n   * @param {Camera} [oldCamera]\n   */\n  constructor(fixedCameraParams, cameraParams, oldCamera) {\n    super(cameraParams, oldCamera);\n\n    this._position = fixedCameraParams.position;\n    this._viewDirection = fixedCameraParams.viewDirection;\n    this._up = fixedCameraParams._up;\n    this.__target = vec3.create();\n  }\n\n  reset() {\n    super.reset();\n    this._update();\n  }\n\n  /**\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  update(currentTime, deltaTime) {}\n\n  _update() {\n    vec3.normalize(this._viewDirection, this._viewDirection);\n    vec3.normalize(this._up, this._up);\n\n    // Transform \"up\" to align with the camera's local z-axis.\n    const right = vec3.create();\n    vec3.cross(right, this._viewDirection, this._up);\n    vec3.cross(this._up, right, this._viewDirection);\n\n    this._setPositionAndLookAt(this._position, this._target, this._up, this._viewDirection);\n  }\n\n  /** @param {vec3} newDirection */\n  set viewDirection(newDirection) {\n    vec3.copy(this._viewDirection, newDirection);\n    this._update();\n  }\n\n  /** @param {vec3} newUp */\n  set up(newUp) {\n    vec3.copy(this._up, newUp);\n    this._update();\n  }\n\n  /** @param {vec3} newPosition */\n  set position(newPosition) {\n    vec3.copy(this._position, newPosition);\n    this._update();\n  }\n\n  /** @returns {vec3} */\n  // TODO: Look into whatever bug prevents the parent-class getter from working.\n  get position() {\n    return this._position;\n  }\n\n  /** @returns {vec3} */\n  get viewDirection() {\n    return this._viewDirection;\n  }\n  /** @returns {vec3} */\n  get up() {\n    return this._up;\n  }\n  /**\n   * @returns {vec3}\n   * @private\n   */\n  get _target() {\n    return vec3.add(this.__target, this._position, this._viewDirection);\n  }\n\n  /**\n   * @param {Camera} oldCamera\n   * @protected\n   */\n  _matchOldCamera(oldCamera) {\n    super._matchOldCamera(oldCamera);\n    if (oldCamera instanceof FixedCamera) {\n      vec3.copy(this._viewDirection, oldCamera._viewDirection);\n      vec3.copy(this._up, oldCamera._up);\n    }\n  }\n}\n\nexport {FixedCamera};\n","import {FollowCamera} from './follow-camera';\n\n/**\n * This class defines a fixed-offset follow camera.\n *\n * This camera is positioned at a relative, fixed distance and rotation from the observed target\n * and follows the target's position and orientation at this fixed distance.\n *\n * A follow camera rotates in all three dimensions; it does not have a fixed roll.\n */\nclass FixedFollowCamera extends FollowCamera {\n  /**\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  update(currentTime, deltaTime) {\n    this._updatePosition();\n    this._updateOrientation();\n  }\n\n  /**\n   * @private\n   */\n  _updatePosition() {\n    const intendedPosition = this._getIntendedPosition();\n    vec3.copy(this._position, intendedPosition);\n  }\n}\n\nexport {FixedFollowCamera};\n","import {ThirdPersonCamera} from './third-person-camera';\n\n/**\n * This class defines an abstract follow camera.\n *\n * This is a third-person type of camera whose roll always matches that of the target.\n */\nclass FollowCamera extends ThirdPersonCamera {\n  /**\n   * Update the camera's orientation using the \"look at\" method according to its position and the\n   * position of its target.\n   *\n   * @protected\n   */\n  _updateOrientation() {\n    const target = this._cameraTarget.position;\n\n    const viewDirection = vec3.create();\n    vec3.subtract(viewDirection, target, this._position);\n    vec3.normalize(viewDirection, viewDirection);\n\n    // Initialize \"up\" as the world z-axis.\n    const up = vec3.fromValues(0, 1, 0);\n\n    // Transform \"up\" to align with the camera target's local z-axis.\n    vec3.transformQuat(up, up, this._cameraTarget.orientation);\n\n    const right = vec3.create();\n    vec3.cross(right, viewDirection, up);\n\n    // Transform \"up\" to align with the camera's local z-axis.\n    vec3.cross(up, right, viewDirection);\n\n    this._setPositionAndLookAt(this._position, target, up, viewDirection);\n  }\n}\n\nexport {FollowCamera};\n","import {ThirdPersonCamera} from './third-person-camera';\n\n/**\n * This class defines an overhead camera.\n *\n * An overhead camera sits above the observed character and moves relative to the character without\n * rotating.\n *\n * An overhead camera's rotation with the character includes only yaw; it has a fixed pitch and\n * roll.\n */\nclass OverheadCamera extends ThirdPersonCamera {\n  /**\n   * If oldCamera is given, then the state of the new camera will be initialized to match that of\n   * the old camera. This enables a smooth transition when changing cameras.\n   *\n   * @param {CameraTarget} cameraTarget\n   * @param {FollowCameraConfig} followCameraParams\n   * @param {CameraConfig} cameraParams\n   * @param {Camera} [oldCamera]\n   */\n  constructor(cameraTarget, followCameraParams, cameraParams, oldCamera) {\n    super(cameraTarget, followCameraParams, cameraParams, oldCamera);\n\n    this.reset();\n  }\n\n  reset() {\n    super.reset();\n  }\n\n  // TODO: Implement this!\n}\n\nexport {OverheadCamera};\n","import {Camera} from './camera';\n\n/**\n * This class defines an abstract third-person camera.\n *\n * A third-person camera follows a target from a distance.\n *\n * @abstract\n */\nclass ThirdPersonCamera extends Camera {\n  /**\n   * If oldCamera is given, then the state of the new camera will be initialized to match that of\n   * the old camera. This enables a smooth transition when changing cameras.\n   *\n   * @param {CameraTarget} cameraTarget\n   * @param {FollowCameraConfig} followCameraParams\n   * @param {CameraConfig} cameraParams\n   * @param {Camera} [oldCamera]\n   */\n  constructor(cameraTarget, followCameraParams, cameraParams, oldCamera) {\n    super(cameraParams, oldCamera);\n\n    // ThirdPersonCamera is an abstract class. It should not be instantiated directly.\n    if (new.target === ThirdPersonCamera) {\n      throw new TypeError('Cannot construct ThirdPersonCamera instances directly');\n    }\n\n    this._followCameraParams = followCameraParams;\n    this._cameraTarget = cameraTarget;\n  }\n\n  /**\n   * The intended position for this camera to be in according to the position and orientation of the\n   * camera target.\n   *\n   * @returns {vec3}\n   * @protected\n   * @abstract\n   */\n  _getIntendedPosition() {\n    const intendedPosition = vec3.create();\n    vec3.transformMat4(\n        intendedPosition,\n        this._followCameraParams._intendedTranslationFromTarget,\n        this._cameraTarget.worldTransform);\n    return intendedPosition;\n  }\n\n  /** @param {CameraTarget} cameraTarget */\n  set cameraTarget(cameraTarget) {\n    this._cameraTarget = cameraTarget;\n  }\n}\n\nexport {ThirdPersonCamera};\n\n/**\n * @typedef {Object} CameraTarget\n * @property {vec3} position In world coordinates.\n * @property {quat} orientation Relative to the world axes.\n * @property {mat4} worldTransform The model transform matrix, in world coordinates.\n */\n","/**\n * This module re-exports all of the exports in the grafx framework. This makes the entire framework\n * conveniently accessible via this single module.\n */\n\nexport * from './cameras';\nexport * from './models';\nexport * from './program-wrapper';\nexport * from './renderable-shapes';\nexport * from './util';\n\nexport * from './src/grafx-controller';\nexport * from './src/light';\nexport * from './src/scene';\n","export * from './src/default-model';\nexport * from './src/invisible-model-controller';\nexport * from './src/model';\nexport * from './src/model-controller';\nexport * from './src/model-group-controller';\nexport * from './src/standard-model-controller';\n","import {createBufferFromData} from '../../util';\nimport {Model} from './model';\n\n/**\n * This class defines a default implementation of the rigid model.\n *\n * This implementation accepts a RenderableShape and applies standard OpenGL binding logic on top\n * of it.\n */\nclass DefaultModel extends Model {\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {RenderableShape} shapeConfig\n   */\n  constructor(gl, shapeConfig) {\n    super(gl);\n    this._shapeConfig = shapeConfig;\n    this._initializeBuffers();\n    this._initializeConfigs();\n  }\n\n  _initializeBuffers() {\n    // Create, bind, and move data into buffers for the vertex positions, normals, texture\n    // coordinates, and element array.\n    this._vertexPositionsBuffer = createBufferFromData(this._gl, this._shapeConfig.vertexPositions);\n    this._vertexNormalsBuffer = createBufferFromData(this._gl, this._shapeConfig.vertexNormals);\n    this._textureCoordinatesBuffer =\n        createBufferFromData(this._gl, this._shapeConfig.textureCoordinates);\n    if (this._shapeConfig.vertexIndices) {\n      this._vertexIndicesBuffer = createBufferFromData(this._gl, this._shapeConfig.vertexIndices,\n          this._gl.ELEMENT_ARRAY_BUFFER);\n    }\n  }\n\n  _initializeConfigs() {\n    this._vertexPositionsConfig = {\n      buffer: this._vertexPositionsBuffer,\n      size: 3,\n      type: this._gl.FLOAT,\n      normalized: false,\n      stride: 0,\n      offset: 0\n    };\n    this._textureCoordinatesConfig = {\n      buffer: this._textureCoordinatesBuffer,\n      size: 2,\n      type: this._gl.FLOAT,\n      normalized: false,\n      stride: 0,\n      offset: 0\n    };\n    this._vertexNormalsConfig = {\n      buffer: this._vertexNormalsBuffer,\n      size: 3,\n      type: this._gl.FLOAT,\n      normalized: false,\n      stride: 0,\n      offset: 0\n    };\n  }\n\n  /** @returns {number} */\n  get elementCount() {\n    return this._shapeConfig.elementCount;\n  }\n\n  /** @returns {number} */\n  get mode() {\n    return this._gl.TRIANGLES;\n    //return this._gl.LINE_STRIP;// TODO: REMOVE ME\n  }\n}\n\nexport {DefaultModel};\n","import {ModelController} from './model-controller';\n\n/**\n * This class defines an extension of the model-controller class that will maintain state but will\n * never render anything.\n */\nclass InvisibleModelController extends ModelController {\n  /**\n   * @param {ModelControllerConfig} params\n   */\n  constructor(params) {\n    super(params);\n  }\n\n  destroy() {}\n\n  update(currentTime, deltaTime) {}\n\n  draw() {}\n\n  /**\n   * Initializes the program variables configuration.\n   *\n   * @protected\n   */\n  _setUpProgramVariablesConfig() {\n    this._programVariablesConfig = {};\n  }\n\n  /**\n   * Overrides the default method to instead do nothing.\n   *\n   * @param {string} id\n   * @returns {Promise}\n   */\n  _setUpProgramWrapper(id) {\n    this._programWrapperId = id;\n    this._programWrapperPromise = Promise.resolve(null);\n    return this._programWrapperPromise;\n  }\n}\n\nexport {InvisibleModelController};\n","import {PersistentAnimationJob} from 'lsl-animatex';\nimport {\n  programWrapperStore,\n  textureStore,\n} from '../../program-wrapper';\n\n/**\n * This class defines a model-controller class.\n *\n * This should be extended by all components that handle models--i.e., anything that will be\n * rendering shapes.\n *\n * @implements {ModelControllerInterface}\n * @abstract\n */\nclass ModelController extends PersistentAnimationJob {\n  /**\n   * PRECONDITION: The ProgramWrapper referenced by the given params must have already been\n   * registered.\n   *\n   * @param {ModelControllerConfig} params\n   */\n  constructor(params) {\n    super();\n\n    // ModelController is an abstract class. It should not be instantiated directly.\n    if (new.target === ModelController) {\n      throw new TypeError('Cannot construct ModelController instances directly');\n    }\n\n    this._gl = params.gl;\n    this._getViewMatrix = params.getViewMatrix;\n    this._getProjectionMatrix = params.getProjectionMatrix;\n    this._getParentWorldTransform = params.getParentWorldTransform;\n    this._localTransform = mat4.create();\n    this._worldTransform = mat4.create();\n    this._texture = null;\n    this._programWrapper = null;\n    this._programWrapperId = null;\n    this._drawFrameHandler = () => this.draw();\n    this._programVariablesConfig = null;\n\n    this.position = vec3.create();\n    this.scale = vec3.fromValues(1, 1, 1);\n\n    this._setUpTexture(params.texturePath);\n    this._setUpProgramWrapper(params.programWrapperId);\n\n    this._isReadyPromise = Promise.all([\n      this._texturePromise,\n      this._programWrapperPromise,\n    ]);\n  }\n\n  reset() {}\n\n  /**\n   * Called when this is done being used, and is being destroyed from memory.\n   */\n  destroy() {\n    programWrapperStore.unregisterDrawFrameHandler(this._programWrapperId, this._drawFrameHandler);\n  }\n\n  /**\n   * Calls update, updateTransforms, and updateChildren.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  updateSelfAndChildren(currentTime, deltaTime) {\n    this.update(currentTime, deltaTime);\n    this.updateTransforms();\n    this.updateChildren(currentTime, deltaTime);\n  }\n\n  /**\n   * Updates relevant state for the sub-class.\n   *\n   * - This does not recursively update descendant model controllers; that's handled by\n   *   updateChildren.\n   * - This does not update the local or world-coordinate transforms; that's handled by\n   *   updateTransforms.\n   * - This is called before updateLocalTransform and updateChildren.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  update(currentTime, deltaTime) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * Updates the world-coordinate and local-coordinate model matrices.\n   *\n   * This is called after update and before updateChildren.\n   *\n   * NOTE: All overrides of this method should update [this._localTransform].\n   */\n  updateTransforms() {\n    mat4.multiply(this._worldTransform, this._getParentWorldTransform(), this._localTransform);\n  }\n\n  /**\n   * Updates relevant state for any children model controllers.\n   *\n   * This is called after update and updateLocalTransform.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  updateChildren(currentTime, deltaTime) {}\n\n  /**\n   * @abstract\n   */\n  draw() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * Gets the model transform matrix, in local coordinates.\n   *\n   * @returns {mat4}\n   */\n  get localTransform() {\n    return this._localTransform;\n  }\n\n  /**\n   * Gets the model transform matrix, in world coordinates.\n   *\n   * @returns {mat4}\n   */\n  get worldTransform() {\n    return this._worldTransform;\n  }\n\n  /**\n   * Returns a promise that resolves when this model controller is ready for the app to run.\n   *\n   * @returns {Promise}\n   */\n  getIsReady() {\n    return this._isReadyPromise;\n  }\n\n  /** @param {string} id */\n  set programWrapperId(id) {\n    programWrapperStore.unregisterDrawFrameHandler(this._programWrapperId, this._drawFrameHandler);\n    this._setUpProgramWrapper(id);\n  }\n\n  /** @param {string} value */\n  set texturePath(value) {\n    this._setUpTexture(value);\n  }\n\n  /**\n   * Initializes the program variables configuration.\n   *\n   * @protected\n   * @abstract\n   */\n  _setUpProgramVariablesConfig() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * @param {string} [texturePath]\n   * @returns {Promise}\n   * @private\n   */\n  _setUpTexture(texturePath) {\n    this._texturePromise = texturePath\n        ? textureStore.loadTexture(this._gl, texturePath)\n        : Promise.resolve(null);\n\n    // Assign the actual texture.\n    this._texturePromise = this._texturePromise\n        .then(texture => this._texture = texture)\n        .then(() => this._setUpProgramVariablesConfig());\n\n    return this._texturePromise;\n  }\n\n  /**\n   * @param {string} id\n   * @returns {Promise}\n   * @private\n   */\n  _setUpProgramWrapper(id) {\n    this._programWrapperId = id;\n    this._programWrapperPromise = programWrapperStore.getProgramWrapperPromise(id)\n        .then(programWrapper => this._programWrapper = programWrapper);\n    Promise.all([this._programWrapperPromise, this._texturePromise])\n        .then(() => programWrapperStore.registerDrawFrameHandler(id, this._drawFrameHandler));\n    return this._programWrapperPromise;\n  }\n}\n\nexport {ModelController};\n\n/**\n * @typedef {Object} ModelControllerInterface\n * @property {Function.<Promise>} getIsReady\n * @property {Function} reset\n * @property {Function} destroy\n * @property {mat4} localTransform\n * @property {mat4} worldTransform\n * @property {vec3} position\n */\n\n/**\n * @typedef {Object} ModelControllerConfig\n * @property {WebGLRenderingContext} gl\n * @property {Function.<mat4>} getViewMatrix\n * @property {Function.<mat4>} getProjectionMatrix\n * @property {Function.<mat4>} getParentWorldTransform\n * @property {string} programWrapperId\n * @property {string} [texturePath]\n */\n\n/**\n * @typedef {Object} ModelGroupControllerConfig\n * @property {WebGLRenderingContext} gl\n * @property {Function.<mat4>} getViewMatrix\n * @property {Function.<mat4>} getProjectionMatrix\n * @property {Function.<mat4>} getParentWorldTransform\n */\n","import { PersistentAnimationJob } from 'lsl-animatex';\n\n/**\n * This class controls groups of models.\n *\n * This is useful for higher-level controllers that control other models and also transform them.\n *\n * @implements {ModelControllerInterface}\n * @abstract\n */\nclass ModelGroupController extends PersistentAnimationJob {\n  /**\n   * If either of the shader paths are omitted, then this model controller will not create a\n   * rendering program configuration.\n   *\n   * @param {ModelGroupControllerConfig} params\n   */\n  constructor(params) {\n    super();\n\n    // ModelGroupController is an abstract class. It should not be instantiated directly.\n    if (new.target === ModelGroupController) {\n      throw new TypeError('Cannot construct ModelGroupController instances directly');\n    }\n\n    this._gl = params.gl;\n    this._getViewMatrix = params.getViewMatrix;\n    this._getProjectionMatrix = params.getProjectionMatrix;\n    this._getParentWorldTransform = params.getParentWorldTransform || (() => mat4.create());\n    this._localTransform = mat4.create();\n    this._worldTransform = mat4.create();\n    this._modelCtrls = [];\n  }\n\n  destroy() {\n    this.clearModelControllers();\n  }\n\n  reset() {\n    this._triggerOnAllModelControllers('reset');\n  }\n\n  clearModelControllers() {\n    this._triggerOnAllModelControllers('destroy');\n    this._modelCtrls = [];\n  }\n\n  /**\n   * Calls update, updateTransforms, and updateChildren.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  updateSelfAndChildren(currentTime, deltaTime) {\n    this.update(currentTime, deltaTime);\n    this.updateTransforms();\n    this.updateChildren(currentTime, deltaTime);\n  }\n\n  /**\n   * Updates relevant state for the sub-class.\n   *\n   * - This does not recursively update descendant model controllers; that's handled by\n   *   updateChildren.\n   * - This does not update the local or world-coordinate transforms; that's handled by\n   *   updateTransforms.\n   * - This is called before updateLocalTransform and updateChildren.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  update(currentTime, deltaTime) {}\n\n  /**\n   * Updates the world-coordinate and local-coordinate model matrices.\n   *\n   * This is called after update and before updateChildren.\n   *\n   * NOTE: All implementations of this method should update [this._localTransform].\n   */\n  updateTransforms() {\n    mat4.multiply(this._worldTransform, this._getParentWorldTransform(), this._localTransform);\n  }\n\n  /**\n   * Updates relevant state for any children model controllers.\n   *\n   * This is called after update and updateLocalTransform.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  updateChildren(currentTime, deltaTime) {\n    this._triggerOnAllModelControllers('updateSelfAndChildren', [currentTime, deltaTime]);\n  }\n\n  draw() {\n    // We don't call draw on the children model controllers, because they register themselves to be\n    // drawn with their given shader program.\n  }\n\n  /**\n   * @param {ModelControllerInterface} modelCtrl\n   * @returns {Promise.<ModelControllerInterface>}\n   * @protected\n   */\n  _startModelController(modelCtrl) {\n    return modelCtrl.getIsReady().then(() => {\n      modelCtrl.reset();\n      this._modelCtrls.push(modelCtrl);\n      return modelCtrl;\n    });\n  }\n\n  /**\n   * @param {ModelControllerInterface} modelCtrl\n   * @protected\n   */\n  _onModelControllerDestroyed(modelCtrl) {\n    const index = this._modelCtrls.indexOf(modelCtrl);\n    this._modelCtrls.splice(index, 1);\n    modelCtrl.destroy();\n  }\n\n  /**\n   * @param {vec3} targetPosition\n   * @param {number} maxSquaredDistance\n   * @protected\n   */\n  _removeDistantModelControllers(targetPosition, maxSquaredDistance) {\n    this._modelCtrls\n      // Get the ModelControllers that are too far away.\n      .filter(modelCtrl =>\n        vec3.squaredDistance(modelCtrl.position, targetPosition) > maxSquaredDistance)\n      // Remove the far-away ModelControllers.\n      .forEach(modelCtrl => this._onModelControllerDestroyed(modelCtrl));\n  }\n\n  /**\n   * Gets the model transform matrix, in local coordinates.\n   *\n   * @returns {mat4}\n   */\n  get localTransform() {\n    return this._localTransform;\n  }\n\n  /**\n   * Gets the model transform matrix, in world coordinates.\n   *\n   * @returns {mat4}\n   */\n  get worldTransform() {\n    return this._worldTransform;\n  }\n\n  /**\n   * Returns a promise that resolves when this model controller is ready for the app to run.\n   *\n   * @returns {Promise}\n   */\n  getIsReady() {\n    return Promise.all(this._modelCtrls.map(controller => controller.getIsReady()));\n  }\n\n  /**\n   * @param {string} methodName\n   * @param {Array.<*>} [args]\n   * @protected\n   */\n  _triggerOnAllModelControllers(methodName, args = []) {\n    //this._demoObject[methodName](...args);\n    this._modelCtrls.forEach(object => object[methodName](...args));\n  }\n}\n\nexport { ModelGroupController };\n","/**\n * This class defines a top-level model.\n *\n * @abstract\n */\nclass Model {\n  /**\n   * @param {WebGLRenderingContext} gl\n   */\n  constructor(gl) {\n    // Model is an abstract class. It should not be instantiated directly.\n    if (new.target === Model) {\n      throw new TypeError('Cannot construct Model instances directly');\n    }\n\n    this._gl = gl;\n    this.bounds = null;\n\n    this._vertexPositionsBuffer = null;\n    this._vertexNormalsBuffer = null;\n    this._textureCoordinatesBuffer = null;\n\n    this._vertexPositionsConfig = null;\n    this._textureCoordinatesConfig = null;\n    this._vertexNormalsConfig = null;\n\n    // If this is kept null, then gl.drawArrays will be used (with gl.ARRAY_BUFFER) instead of\n    // gl.drawElements (with gl.ELEMENT_ARRAY_BUFFER).\n    this._vertexIndicesBuffer = null;\n  }\n\n  /**\n   * Updates the normals on this shape to either be spherical (point outwards from the center) or\n   * orthogonal to the faces of their triangles.\n   *\n   * @param {boolean} isUsingSphericalNormals\n   * @protected\n   * @abstract\n   */\n  _setNormals(isUsingSphericalNormals) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /** @returns {?AttributeConfig} */\n  get vertexPositionsConfig() {\n    return this._vertexPositionsConfig;\n  }\n\n  /** @returns {?AttributeConfig} */\n  get textureCoordinatesConfig() {\n    return this._textureCoordinatesConfig;\n  }\n\n  /** @returns {?AttributeConfig} */\n  get vertexNormalsConfig() {\n    return this._vertexNormalsConfig;\n  }\n\n  /** @returns {?WebGLBuffer} */\n  get vertexIndicesBuffer() {\n    return this._vertexIndicesBuffer;\n  }\n\n  /**\n   * @returns {number}\n   * @abstract\n   */\n  get elementCount() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * @returns {number}\n   * @abstract\n   */\n  get mode() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n}\n\nexport {Model};\n","import {renderableShapeFactory} from '../../renderable-shapes';\n\nimport {ModelController} from './model-controller';\n\n/**\n * This class defines an extension of the model-controller class that uses a common set of program\n * variables and transformation matrices.\n */\nclass StandardModelController extends ModelController {\n  /**\n   * @param {ModelControllerConfig} params\n   * @param {RenderableShapeConfig} shapeParams\n   */\n  constructor(params, shapeParams) {\n    super(params);\n\n    this.scale = shapeParams.scale || vec3.fromValues(1, 1, 1);\n    this._mvMatrix = mat4.create();\n    this._normalMatrix = mat4.create();\n    this._model = renderableShapeFactory.createModel(this._gl, shapeParams);\n  }\n\n  update(currentTime, deltaTime) {}\n\n  draw() {\n    // Update the model-view matrix.\n    mat4.multiply(this._mvMatrix, this._getViewMatrix(), this._worldTransform);\n\n    // Update the normal matrix.\n    mat4.invert(this._normalMatrix, this._mvMatrix);\n    mat4.transpose(this._normalMatrix, this._normalMatrix);\n\n    // Update the uniform variables.\n    this._programVariablesConfig.uniforms['uPMatrix'] = this._getProjectionMatrix();\n    this._programVariablesConfig.uniforms['uMVMatrix'] = this._mvMatrix;\n    this._programVariablesConfig.uniforms['uNormalMatrix'] = this._normalMatrix;\n\n    // Draw shapes using the current variables configuration.\n    this._programWrapper.draw(this._gl, this._programVariablesConfig, 0, this._model.elementCount);\n  }\n\n  /**\n   * Initializes the program variables configuration.\n   *\n   * @protected\n   */\n  _setUpProgramVariablesConfig() {\n    this._programVariablesConfig = {\n      attributes: {\n        aVertexPosition: this._model.vertexPositionsConfig,\n        aTextureCoord: this._model.textureCoordinatesConfig,\n        aVertexNormal: this._model.vertexNormalsConfig,\n      },\n      uniforms: {\n        uPMatrix: this._getProjectionMatrix(),\n        uMVMatrix: this._mvMatrix,\n        uNormalMatrix: this._normalMatrix,\n        uSampler: this._texture,\n      },\n      mode: this._model.mode,\n      vertexIndices: this._model.vertexIndicesBuffer,\n      elementCount: this._model.elementCount,\n    };\n  }\n}\n\nexport {StandardModelController};\n","export * from './src/program-wrapper';\nexport * from './src/program-wrapper-store';\nexport * from './src/texture-store';\nexport * from './src/uniform-setter';\n","import {bindFramebuffer} from '../../util';\n\nimport {programWrapperStore} from './program-wrapper-store';\n\n/**\n * This class wraps a collection of ProgramWrappers and supports drawing them as a group.\n */\nclass GroupProgramWrapper {\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramWrapperConfig} config\n   */\n  constructor(gl, config) {\n    this.config = config;\n    this._childrenProgramWrappers = [];\n    this._isReady = null;\n\n    this._loadChildren(gl, config).then(() => {\n      if (config.initialize) config.initialize(gl);\n      if (config.isAPostProcessor) {\n        _createChildrenFramebuffersAndTextures(gl, config);\n      }\n    });\n  }\n\n  /** @returns {string} */\n  get programId() {\n    return this.config.id;\n  }\n\n  /** @returns {Promise} */\n  getIsReady() {\n    return this._isReady;\n  }\n\n  /**\n   * Renders shapes using this program.\n   *\n   * @param {WebGLRenderingContext} gl\n   */\n  draw(gl) {\n    if (this.config.webGLStateSetter) this.config.webGLStateSetter(gl);\n    this.config.childrenFramebufferIds.forEach(_clearFramebuffer.bind(this, gl));\n    this.config.childrenProgramsToDraw.forEach(_drawChildProgramWrapper.bind(this, gl));\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramWrapperConfig} config\n   * @private\n   */\n  _loadChildren(gl, config) {\n    this._isReady = Promise.all(\n        config.childrenProgramConfigs.map(config =>\n            programWrapperStore.loadProgramWrapper(gl, config)\n                .then(programWrapper => this._childrenProgramWrappers.push(programWrapper))));\n    return this._isReady;\n  }\n}\n\n/**\n * @param {WebGLRenderingContext} gl\n * @param {string} id\n * @private\n */\nfunction _clearFramebuffer(gl, id) {\n  const framebuffer = programWrapperStore.getFramebuffer(id);\n  bindFramebuffer(gl, framebuffer);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n}\n\n/**\n * @param {WebGLRenderingContext} gl\n * @param {ProgramWrapperConfig} config\n * @private\n */\nfunction _createChildrenFramebuffersAndTextures(gl, config) {\n  config.childrenFramebufferIds.forEach(id =>\n      programWrapperStore.createNewFramebufferAndTexture(gl, id, false));\n}\n\n/**\n * @param {WebGLRenderingContext} gl\n * @param {ChildProgramAndFramebufferIds} childProgramAndFramebufferIds\n * @private\n */\nfunction _drawChildProgramWrapper(gl, childProgramAndFramebufferIds) {\n  const {programId, inputFramebufferIds, outputFramebufferId} = childProgramAndFramebufferIds;\n\n  const framebuffer = outputFramebufferId ?\n      programWrapperStore.getFramebuffer(outputFramebufferId) : null;\n  const programWrapper = programWrapperStore.getProgramWrapper(programId);\n  const programVariablesConfig =\n      programWrapper.config.getProgramVariablesConfig(gl, inputFramebufferIds);\n\n  bindFramebuffer(gl, framebuffer);\n  programWrapper.setProgram(gl);\n  programWrapper.draw(gl, programVariablesConfig);\n}\n\nexport {GroupProgramWrapper};\n","import {createFramebuffer, createRenderBuffer, createTextureForRendering} from '../../util';\n\nimport {GroupProgramWrapper} from './group-program-wrapper';\nimport {ProgramWrapper} from './program-wrapper';\n\n/**\n * This class loads, compiles, and stores WebGL rendering programs.\n *\n * Also, this stores draw-frame handlers for a given program. This makes it easy for a top-level\n * controller to group together draw calls for a given program and therefore minimize program\n * switches.\n *\n * Also, this distinguishes between rendering programs that are used for rendering individual models\n * and post-processing programs that are used for manipulating the entire frame after all the models\n * have rendered.\n *\n * This also allows for grouping programs, which consist of multiple child programs that are all\n * rendered in sequence for a related purpose.\n */\nclass ProgramWrapperStore {\n  constructor() {\n    this._modelProgramCache = {};\n    this._sortedModelPrograms = [];\n    this._postProcessingProgramCache = {};\n    this._sortedPostProcessingPrograms = [];\n    this._frambuffers = {};\n    this._textures = {};\n    this._renderBuffers = {};\n  }\n\n  /**\n   * Loads and caches a program wrapper using the given configuration.\n   *\n   * This method is idempotent; a given program will only be cached once.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramWrapperConfig} params\n   * @returns {Promise.<ProgramWrapper|GroupProgramWrapper, Error>}\n   * @private\n   */\n  loadProgramWrapper(gl, params) {\n    let cache;\n    let sortedList;\n    if (params.isAPostProcessor) {\n      cache = this._postProcessingProgramCache;\n      sortedList = this._sortedPostProcessingPrograms;\n    } else {\n      cache = this._modelProgramCache;\n      sortedList = this._sortedModelPrograms;\n    }\n    let cacheInfo = cache[params.id];\n\n    // Cache the program if it has not been previously registered.\n    if (!cacheInfo) {\n      cacheInfo = {};\n\n      cacheInfo.params = params;\n      cacheInfo.renderPriority = params.renderPriority;\n\n      let programWrapper = params.childrenProgramConfigs ?\n          new GroupProgramWrapper(gl, params) : new ProgramWrapper(gl, params);\n\n      cacheInfo.programWrapper = programWrapper;\n      cacheInfo.promise = programWrapper.getIsReady().then(() => cacheInfo.programWrapper);\n\n      if (params.isAPostProcessor) {\n        // As soon as we know we'll use a post-processing program, make sure we create the default\n        // framebuffer/texture for rendering models into.\n        if (!this.modelsFramebuffer) {\n          this.createNewFramebufferAndTexture(gl, MODELS_FRAMEBUFFER_ID, true);\n        }\n      } else {\n        // Post-processing programs are not used for rendering individual models.\n        cacheInfo.drawFrameHandlers = new Set();\n      }\n\n      // Store the program cache info in both a map and a list that is sorted by render priority.\n      cache[params.id] = cacheInfo;\n      sortedList.push(cacheInfo);\n      sortedList.sort(_compareProgramCacheInfo);\n    }\n\n    return cacheInfo.promise;\n  }\n\n  /**\n   * Registers the given draw-frame event handler for the given program.\n   *\n   * This method is idempotent; draw-frame handlers are stored in a set, so duplicate additions will\n   * overwrite previous additions.\n   *\n   * @param {string} id\n   * @param {Function} drawFrameHandler\n   */\n  registerDrawFrameHandler(id, drawFrameHandler) {\n    const programCacheInfo = this._modelProgramCache[id];\n\n    if (!programCacheInfo) {\n      if (this._postProcessingProgramCache[id]) {\n        // The program is not set up for rendering individual models.\n        throw new Error(`Cannot register a draw-frame handler for a program that is not set up for \n                         rendering individual models registered: ${id}`);\n      } else {\n        // The program has not been registered.\n        throw new Error(`Cannot register a draw-frame handler for a program that has not yet been \n                         registered: ${id}`);\n      }\n    }\n\n    // Store the draw-frame handler.\n    programCacheInfo.drawFrameHandlers.add(drawFrameHandler);\n  }\n\n  /**\n   * WARNING: This will remove the program from the store even if there are still other components\n   * depending on this program or its draw-frame handlers.\n   *\n   * @param {string} id\n   */\n  deleteProgramWrapper(id) {\n    // Determine which collections we're removing the program from.\n    let sortedPrograms;\n    let programCache;\n    if (this._modelProgramCache[id]) {\n      sortedPrograms = this._sortedModelPrograms;\n      programCache = this._modelProgramCache;\n    } else {\n      sortedPrograms = this._sortedPostProcessingPrograms;\n      programCache = this._postProcessingProgramCache;\n    }\n    const programCacheInfo = programCache[id];\n\n    // Remove the program.\n    sortedPrograms.splice(sortedPrograms.indexOf(programCacheInfo), 1);\n    delete programCache[id];\n  }\n\n  // TODO: Don't forget to unregister draw-frame handlers when destroying models (asteroids, UFOs,\n  // etc.)\n  /**\n   * @param {string} id\n   * @param {Function} drawFrameHandler\n   */\n  unregisterDrawFrameHandler(id, drawFrameHandler) {\n    this._modelProgramCache[id].drawFrameHandlers.delete(drawFrameHandler);\n  }\n\n  /**\n   * @param {string} id\n   * @returns {Promise}\n   * @throws If there is no program registered with the given ID.\n   */\n  getProgramWrapperPromise(id) {\n    const cacheInfo = this._modelProgramCache[id] || this._postProcessingProgramCache[id];\n    return cacheInfo.promise;\n  }\n\n  /**\n   * @param {string} id\n   * @returns {ProgramWrapper}\n   * @throws If there is no program registered with the given ID.\n   */\n  getProgramWrapper(id) {\n    const cacheInfo = this._modelProgramCache[id] || this._postProcessingProgramCache[id];\n    return cacheInfo.programWrapper;\n  }\n\n  /**\n   * Calls the given callback once for each registered per-model program wrapper.\n   *\n   * The callback is passed two arguments: the program wrapper and the registered draw-frame\n   * handlers.\n   *\n   * @param {Function} callback\n   */\n  forEachModelProgram(callback) {\n    this._sortedModelPrograms.forEach(programCacheInfo =>\n        callback(programCacheInfo.programWrapper, programCacheInfo.drawFrameHandlers));\n  }\n\n  /**\n   * Calls the given callback once for each registered post-processing program wrapper.\n   *\n   * @param {Function} callback\n   */\n  forEachPostProcessingProgram(callback) {\n    this._sortedPostProcessingPrograms.forEach(\n        programCacheInfo => callback(programCacheInfo.programWrapper));\n  }\n\n  /** @returns {boolean} */\n  get isUsingPostProcessingPrograms() {\n    return this._sortedPostProcessingPrograms.length > 0;\n  }\n\n  /**\n   * Creates and stores a framebuffer with a texture.\n   *\n   * Both the framebuffer and texture can be accessed later using the given ID.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @param {string} id\n   * @param {boolean} [shouldStoreDepthInfo=false]\n   */\n  createNewFramebufferAndTexture(gl, id, shouldStoreDepthInfo=false) {\n    let renderBuffer;\n    if (shouldStoreDepthInfo) {\n      renderBuffer = createRenderBuffer(gl);\n      this._renderBuffers[id] = renderBuffer;\n    }\n\n    const texture = createTextureForRendering(gl);\n    this._textures[id] = texture;\n\n    const framebuffer = createFramebuffer(gl, texture, renderBuffer);\n    this._frambuffers[id] = framebuffer;\n  }\n\n  /**\n   * @param {string} id\n   * @returns {?WebGLFramebuffer}\n   */\n  getFramebuffer(id) {\n    return this._frambuffers[id];\n  }\n\n  /**\n   * @param {string} id\n   * @returns {?WebGLTexture}\n   */\n  getTexture(id) {\n    return this._textures[id];\n  }\n\n  /**\n   * If we are using a post-processing program, then this is the default framebuffer for rendering\n   * models into.\n   *\n   * @returns {?WebGLFramebuffer}\n   */\n  get modelsFramebuffer() {\n    return this._frambuffers[MODELS_FRAMEBUFFER_ID];\n  }\n\n  /**\n   * If we are using a post-processing program, then this is the default texture for rendering\n   * models into.\n   *\n   * @returns {?WebGLTexture}\n   */\n  get modelsTexture() {\n    return this._textures[MODELS_FRAMEBUFFER_ID];\n  }\n\n  /**\n   * If we are using a post-processing program, then this is the default depth render buffer for\n   * rendering models.\n   *\n   * @returns {?WebGLRenderBuffer}\n   */\n  get modelsRenderBuffer() {\n    return this._renderBuffers[MODELS_FRAMEBUFFER_ID];\n  }\n}\n\nfunction _compareProgramCacheInfo(a, b) {\n  return a.renderPriority - b.renderPriority;\n}\n\nexport const MODELS_FRAMEBUFFER_ID = 'models';\n\nexport const programWrapperStore = new ProgramWrapperStore();\n\n/**\n * @typedef {Object} ProgramCacheInfo\n * @property {ProgramWrapperConfig} params\n * @property {ProgramWrapper|GroupProgramWrapper} [programWrapper]\n * @property {Set.<Function>} [drawFrameHandlers]\n * @property {Array.<ProgramWrapper>} [childrenProgramWrappers]\n */\n","import {\n  isInDevMode,\n  getViewportHeight,\n  getViewportWidth,\n  loadProgram,\n} from '../../util';\n\nimport {UniformSetter} from './uniform-setter';\n\n/**\n * This class wraps a native WebGLProgram object and provides convenience methods for:\n * - setting the wrapped program for use on the WebGL rendering context,\n * - enabling the attribute variables for the program,\n * - setting the attribute and uniform variables for the program,\n * - drawing shapes with the program and its current configuration.\n */\nclass ProgramWrapper {\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramWrapperConfig} config\n   */\n  constructor(gl, config) {\n    this.config = config;\n    this._program = null;\n    this._uniformSetters = null;\n    this._attributeEnablers = null;\n    this._attributeSetters = null;\n\n    // This is used for assigning different textures to different texture units.\n    this.baseTextureUnitIndex = 0;\n\n    this._buildWebGLProgramPromise = this._buildWebGLProgram(gl, config);\n\n    // TODO: Freeze this object after initializing\n  }\n\n  /** @returns {string} */\n  get programId() {\n    return this.config.id;\n  }\n\n  /** @returns {Promise} */\n  getIsReady() {\n    return this._buildWebGLProgramPromise;\n  }\n\n  /**\n   * Sets this program to use for rendering on the given WebGL context.\n   *\n   * This also enables all relevant attribute variables for this program.\n   *\n   * @param {WebGLRenderingContext} gl\n   */\n  setProgram(gl) {\n    gl.useProgram(this._program);\n    this._enableAttributes();\n    if (this.config.webGLStateSetter) this.config.webGLStateSetter(gl);\n  }\n\n  /**\n   * Renders shapes using this program with the given variables configuration.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramVariablesConfig} [programVariablesConfig]\n   * @param {number} [offset=0] Offset into the element array buffer to render from.\n   * @param {number} [count=programVariablesConfig.elementCount] The number of elements to render.\n   */\n  draw(gl, programVariablesConfig, offset, count) {\n    programVariablesConfig = programVariablesConfig || this.config.getProgramVariablesConfig(gl);\n    this._setVariables(gl, programVariablesConfig);\n    this._draw(gl, programVariablesConfig, offset, count);\n  }\n\n  /**\n   * Sets up this WebGL rendering program to draw shapes with the given program variables\n   * configuration and the attribute/uniform setters that have been set up for this program.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramVariablesConfig} programVariablesConfig\n   * @private\n   */\n  _setVariables(gl, programVariablesConfig) {\n    this._setAttributes(programVariablesConfig.attributes);\n    this._setUniforms(programVariablesConfig.uniforms);\n\n    // Check whether we are set up to draw using gl.drawElements rather than gl.drawArrays.\n    if (programVariablesConfig.vertexIndices) {\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, programVariablesConfig.vertexIndices);\n    }\n  }\n\n  /**\n   * Renders shapes according to this program's current configuration.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramVariablesConfig} programVariablesConfig\n   * @param {number} [offset=0] Offset into the element array buffer to render from.\n   * @param {number} [count=programVariablesConfig.elementCount] The number of elements to render.\n   * @private\n   */\n  _draw(gl, programVariablesConfig, offset, count) {\n    offset = typeof offset === 'number' ? offset : 0;\n    count = typeof count === 'number' ? count : programVariablesConfig.elementCount;\n\n    if (isInDevMode) {\n      this._checkThatGivenVariablesMatchProgram(programVariablesConfig);\n    }\n\n    // Check whether we are set up to draw using gl.drawElements or gl.drawArrays.\n    if (programVariablesConfig.vertexIndices) {\n      gl.drawElements(programVariablesConfig.mode, count, gl.UNSIGNED_SHORT, offset);\n    } else {\n      gl.drawArrays(programVariablesConfig.mode, offset, count);\n    }\n  }\n\n  /**\n   * Checks whether the attribute and uniform variables specified in the given config match those\n   * defined in this program.\n   *\n   * @param {ProgramVariablesConfig} programVariablesConfig\n   * @private\n   */\n  _checkThatGivenVariablesMatchProgram(programVariablesConfig) {\n    if (Object.keys(programVariablesConfig.attributes).length !==\n            Object.keys(this._attributeSetters).length ||\n        Object.keys(programVariablesConfig.uniforms).length !==\n            Object.keys(this._uniformSetters).length) {\n      console.warn('The attribute/uniform variables in the ProgramVariablesConfig do not match ' +\n          'those specified in the shaders.', programVariablesConfig, this);\n    }\n  }\n\n  /**\n   * Sets the uniform values for this program.\n   *\n   * Specifically, this calls `gl.uniform<...>(location, value)` for each\n   * variable-name/variable-value key-value pair in the given map. As part of the setup process, the\n   * uniform variable locations are stored in a map from their corresponding variable names. So only\n   * the variable names are needed in order to call this function at render time.\n   *\n   * @param {Object.<String, UniformData>} uniformValues\n   */\n  _setUniforms(uniformValues) {\n    Object.keys(uniformValues).forEach(uniformName => {\n      const uniformSetter = this._uniformSetters[uniformName];\n      const uniformValue = uniformValues[uniformName];\n      uniformSetter.setUniform(uniformValue);\n    });\n  }\n\n  /**\n   * Sets the attribute buffers for this program.\n   *\n   * Specifically, this calls `gl.bindBuffer(...)` and `gl.vertexAttribPointer(...)` for each\n   * variable-name/variable-value pair in the given attribute-info map. As part of the setup\n   * process, the uniform variable locations are stored in a map from their corresponding variable\n   * names. So only the variable names are needed in order to call this function at render time.\n   *\n   * @param {Object.<String, AttributeConfig>} attributeConfigs\n   */\n  _setAttributes(attributeConfigs) {\n    Object.keys(attributeConfigs).forEach(attributeName => {\n      const attributeSetter = this._attributeSetters[attributeName];\n      const attributeConfig = attributeConfigs[attributeName];\n      attributeSetter(attributeConfig);\n    });\n  }\n\n  /**\n   * @private\n   */\n  _enableAttributes() {\n    this._attributeEnablers.forEach(attributeEnabler => attributeEnabler());\n  }\n\n  /**\n   * Creates uniform setters for this program and saves them in the _uniformSetters property.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @private\n   */\n  _createUniformSetters(gl) {\n    const uniformCount = gl.getProgramParameter(this._program, gl.ACTIVE_UNIFORMS);\n\n    this._uniformSetters = {};\n\n    for (let index = 0; index < uniformCount; index++) {\n      const uniformInfo = gl.getActiveUniform(this._program, index);\n      let uniformName = uniformInfo.name;\n\n      // Remove any array suffix.\n      // TODO: Is this removal redundant with the isArray check below??\n      if (uniformName.substr(-3) === '[0]') {\n        uniformName = uniformName.substr(0, uniformName.length - 3);\n      }\n\n      this._uniformSetters[uniformName] = new UniformSetter(gl, this._program, uniformInfo, this);\n    }\n  }\n\n  /**\n   * Creates attribute enablers and setters for this program and saves them in the\n   * _attributeEnablers and _attributeSetters properties, respectively.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @private\n   */\n  _createAttributeEnablersAndSetters(gl) {\n    this._attributeEnablers = [];\n    this._attributeSetters = {};\n\n    const attributeCount = gl.getProgramParameter(this._program, gl.ACTIVE_ATTRIBUTES);\n\n    for (let index = 0; index < attributeCount; index++) {\n      const attributeName = gl.getActiveAttrib(this._program, index).name;\n      const location = gl.getAttribLocation(this._program, attributeName);\n\n      this._attributeEnablers.push(ProgramWrapper._createAttributeEnabler(gl, location));\n      this._attributeSetters[attributeName] = ProgramWrapper._createAttributeSetter(gl, location);\n    }\n  }\n\n  /**\n   * Loads the shader source code from the given URLs, compiles the shader source code, and creates\n   * a program from the resulting shaders.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramWrapperConfig} config\n   * @returns {Promise}\n   * @private\n   */\n  _buildWebGLProgram(gl, config) {\n    return loadProgram(gl, config.vertexShaderPath, config.fragmentShaderPath)\n        .then(webGLProgram => {\n          this._program = webGLProgram;\n          this._createUniformSetters(gl);\n          this._createAttributeEnablersAndSetters(gl);\n          if (config.initialize) config.initialize(gl);\n        })\n        .then(() => console.info(`Program loaded: ${config.id}`));\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {number} location\n   * @returns {Function}\n   * @private\n   */\n  static _createAttributeEnabler(gl, location) {\n    return () => gl.enableVertexAttribArray(location);\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {number} location\n   * @returns {Function.<AttributeConfig>}\n   * @private\n   */\n  static _createAttributeSetter(gl, location) {\n    return attributeConfig => {\n      gl.bindBuffer(gl.ARRAY_BUFFER, attributeConfig.buffer);\n      gl.vertexAttribPointer(\n          location,\n          attributeConfig.size,\n          typeof attributeConfig.type !== 'undefined' ? attributeConfig.type : gl.FLOAT,\n          typeof attributeConfig.normalized !== 'undefined' ? attributeConfig.normalized : false,\n          typeof attributeConfig.stride !== 'undefined' ? attributeConfig.stride : 0,\n          typeof attributeConfig.offset !== 'undefined' ? attributeConfig.offset : 0);\n    };\n  }\n}\n\nexport {ProgramWrapper};\n\n/**\n * @typedef {Object} ProgramWrapperConfig\n * @property {string} id\n * @property {Function} [initialize] A method for one-time initialization of the GL state for this\n * program.\n * @property {Function} [webGLStateSetter] A method for setting up the GL state for this program\n * wrapper in preparation for the current draw call.\n * @property {number} [renderPriority] Programs with lower priority will render first. This does not\n * need to be present for ProgramWrappers that are children of a GroupProgramWrapper.\n * @property {string} [vertexShaderPath] This will be present on configs for non-group\n * ProgramWrappers.\n * @property {string} [fragmentShaderPath] This will be present on configs for non-group\n * ProgramWrappers.\n * @property {boolean} [isAPostProcessor=false] A post-processing program is used for manipulating\n * the entire frame after all the models have rendered.\n * @property {boolean} [childrenProgramConfigs] A grouping program consists of multiple child\n * programs that are all rendered in sequence for a related purpose.\n * @property {Array.<ChildProgramAndFramebufferIds>} [childrenProgramsToDraw] The IDs for the\n * sequence of children ProgramWrappers to draw, as well as the IDs for the input and output\n * framebuffers/textures to use. This will be present on configs for GroupProgramWrappers.\n * @property {Array.<string>} [childrenFramebufferIds] The IDs of all the framebuffers/textures that\n * will need to be created for this program. This will be present on configs for\n * GroupProgramWrappers.\n * @property {Function} [getProgramVariablesConfig] A method for getting the variables needed for\n * drawing this program. This will be present on configs of programs that are children of a\n * GroupProgramWrapper.\n */\n\n/**\n * @typedef {Object} ChildProgramAndFramebufferIds\n * @property {string} programId The ID of the program to draw with.\n * @property {Array.<string>} inputFramebufferIds The IDs of framebuffers whose textures will be\n * used as inputs for this program's shaders.\n * @property {string} outputFramebufferId Provide null in order to render to the canvas.\n */\n\n/**\n * @typedef {Object} ProgramVariablesConfig\n * @property {Object.<String, AttributeConfig>} attributes A mapping from attribute names to\n * attribute info.\n * @property {Object.<String, UniformData>} uniforms A mapping from uniform names to uniform info.\n * @property {number} mode Specifies the type of primitives to render; one of:\n *   - gl.POINTS,\n *   - gl.LINES,\n *   - gl.LINE_STRIP,\n *   - gl.LINE_LOOP,\n *   - gl.TRIANGLES,\n *   - gl.TRIANGLE_STRIP,\n *   - gl.TRIANGLE_FAN.\n * @property {WebGLBuffer} [vertexIndices] The indices to use for retrieving the vertex info from\n * each of the other attribute variable buffers. If this property is present, then the rendering\n * pipeline will be set up to use gl.drawElements (with gl.ELEMENT_ARRAY_BUFFER) instead of\n * gl.drawArrays.\n * @property {number} elementCount The number of elements/vertices to render for this variables\n * configuration.\n */\n\n/**\n * @typedef {Object} AttributeConfig\n * @property {WebGLBuffer} buffer The buffer containing this attribute's data.\n * @property {number} index Index of target attribute in the buffer bound to gl.ARRAY_BUFFER.\n * @property {number} size The number of components per attribute. Must be 1,2,3,or 4.\n * @property {number} type Specifies the data type of each component in the array. Use either\n * gl.FLOAT or gl.FIXED.\n * @property {boolean} normalized If true, then values will be normalized to a range of -1 or 0 to\n * 1.\n * @property {number} stride Specifies the offset in bytes between the beginning of consecutive\n * vertex attributes. Default value is 0, maximum is 255. Must be a multiple of type.\n * @property {number} offset Specifies an offset in bytes of the first component of the first\n * vertex attribute in the array. Default is 0 which means that vertex attributes are tightly\n * packed. Must be a multiple of type.\n */\n\n/** @typedef {*} UniformData */\n","import {loadImageSrc} from '../../util';\n\n/**\n * This class loads, sets up, and stores WebGL texture objects.\n *\n * NOTE: Only textures whose side lengths are powers of two are supported.\n */\nclass TextureStore {\n  constructor() {\n    this.textureCache = {};\n  }\n\n  /**\n   * @param {string} texturePath\n   * @returns {WebGLTexture}\n   */\n  getTexture(texturePath) {\n    return this.textureCache[texturePath].texture;\n  }\n\n  /**\n   * Loads the texture image at the given path, creates a texture object from it, caches the\n   * texture, and returns a promise for the texture.\n   *\n   * This method is idempotent; a given texture will only be loaded once.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @param {string} texturePath\n   * @returns {Promise.<WebGLTexture, Error>}\n   */\n  loadTexture(gl, texturePath) {\n    let textureCacheInfo = this.textureCache[texturePath];\n\n    // Load, create, and cache the texture if it has not been previously registered.\n    if (!textureCacheInfo) {\n      textureCacheInfo = {\n        texturePromise: null,\n        texture: null,\n        image: new Image()\n      };\n      this.textureCache[texturePath] = textureCacheInfo;\n      textureCacheInfo.texturePromise = loadImageSrc(textureCacheInfo.image, texturePath)\n          .then(_ => this._createTexture(gl, textureCacheInfo));\n    }\n\n    return textureCacheInfo.texturePromise;\n  }\n\n  // TODO: Make this more general/configurable by creating a new TextureConfig typedef with most of\n  // the gl.xxx params included below (like the AttributeConfig typedef}, passing a textureConfig in\n  // the register method, and saving it on the textureCacheInfo object.\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {TextureCacheInfo} textureCacheInfo\n   * @returns {WebGLTexture}\n   * @private\n   */\n  _createTexture(gl, textureCacheInfo) {\n    console.info(`Texture loaded: ${textureCacheInfo.image.src}`);\n\n    textureCacheInfo.texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, textureCacheInfo.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureCacheInfo.image);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);\n    gl.generateMipmap(gl.TEXTURE_2D);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n\n    return textureCacheInfo.texture;\n  }\n\n  /**\n   * WARNING: This will remove the texture from the store even if there are still other components\n   * depending on this texture.\n   *\n   * @param {string} texturePath\n   */\n  deleteTexture(texturePath) {\n    delete this.textureCache[texturePath];\n  }\n}\n\nexport const textureStore = new TextureStore();\n\n/**\n * @typedef {Object} TextureCacheInfo\n * @property {Promise.<WebGLTexture, Error>} texturePromise\n * @property {WebGLTexture} [texture]\n * @property {HTMLImageElement} [image]\n */\n","/**\n * This class stores a function for setting a value to a WebGL uniform variable.\n *\n * This is intended for use as a helper for the ProgramWrapper class.\n */\n// TODO: Write tests for this class.\nclass UniformSetter {\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {WebGLProgram} program\n   * @param {WebGLActiveInfo} uniformInfo\n   * @param {ProgramWrapper} programWrapper\n   * @throws If the given uniformInfo specifies an unexpected uniform-value type.\n   */\n  constructor(gl, program, uniformInfo, programWrapper) {\n    this._location = gl.getUniformLocation(program, uniformInfo.name);\n    this._setter = this._getSetter(gl, uniformInfo, programWrapper);\n\n    // TODO: Freeze this object after initializing\n  }\n\n  /**\n   * @param {UniformData} uniformValue\n   */\n  setUniform(uniformValue) {\n    uniformValue = uniformValue instanceof Array ? new Float32Array(uniformValue) : uniformValue;\n    this._setter(uniformValue);\n  }\n\n  /** @returns {WebGLUniformLocation} */\n  get location() {\n    return this._location;\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {WebGLActiveInfo} uniformInfo\n   * @param {ProgramWrapper} programWrapper\n   * @returns {Function.<*>}\n   * @throws If the given uniformInfo specifies an unexpected uniform-value type.\n   * @private\n   */\n  _getSetter(gl, uniformInfo, programWrapper) {\n    const isArray = uniformInfo.size > 1 && uniformInfo.name.substr(-3) === '[0]';\n    const setterMap = isArray ? {\n      [gl.FLOAT]: value => gl.uniform1fv(this._location, value),\n      [gl.INT]: value => gl.uniform1iv(this._location, value),\n      [gl.SAMPLER_2D]: this._getUniformTextureArraySetter(gl, gl.TEXTURE_2D, uniformInfo.size,\n          programWrapper),\n      [gl.SAMPLER_CUBE]: this._getUniformTextureArraySetter(gl, gl.TEXTURE_CUBE_MAP,\n          uniformInfo.size, programWrapper),\n    } : {\n      [gl.FLOAT]: value => gl.uniform1f(this._location, value),\n      [gl.FLOAT_VEC2]: value => gl.uniform2fv(this._location, value),\n      [gl.FLOAT_VEC3]: value => gl.uniform3fv(this._location, value),\n      [gl.FLOAT_VEC4]: value => gl.uniform4fv(this._location, value),\n      [gl.INT]: value => gl.uniform1i(this._location, value),\n      [gl.INT_VEC2]: value => gl.uniform2iv(this._location, value),\n      [gl.INT_VEC3]: value => gl.uniform3iv(this._location, value),\n      [gl.INT_VEC4]: value => gl.uniform4iv(this._location, value),\n      [gl.BOOL]: value => gl.uniform1i(this._location, value),\n      [gl.BOOL_VEC2]: value => gl.uniform2iv(this._location, value),\n      [gl.BOOL_VEC3]: value => gl.uniform3iv(this._location, value),\n      [gl.BOOL_VEC4]: value => gl.uniform4iv(this._location, value),\n      [gl.FLOAT_MAT2]: value => gl.uniformMatrix2fv(this._location, false, value),\n      [gl.FLOAT_MAT3]: value => gl.uniformMatrix3fv(this._location, false, value),\n      [gl.FLOAT_MAT4]: value => gl.uniformMatrix4fv(this._location, false, value),\n      [gl.SAMPLER_2D]: this._getUniformTextureSetter(gl, gl.TEXTURE_2D,\n          programWrapper.baseTextureUnitIndex++),\n      [gl.SAMPLER_CUBE]: this._getUniformTextureSetter(gl, gl.TEXTURE_CUBE_MAP,\n          programWrapper.baseTextureUnitIndex++),\n    };\n    return setterMap[uniformInfo.type];\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {number} target An enum describing the type of this buffer; one of:\n   *   - gl.TEXTURE_2D,\n   *   - gl.TEXTURE_CUBE_MAP.\n   * @param {number} uniformSize\n   * @param {ProgramWrapper} programWrapper\n   * @returns {Function.<*>}\n   * @private\n   */\n  _getUniformTextureArraySetter(gl, target, uniformSize, programWrapper) {\n    const textureUnitIndices =\n        Array.from({length: uniformSize}, _ => programWrapper.baseTextureUnitIndex++);\n\n    return textures => {\n      textures.forEach((texture, index) => {\n        gl.activeTexture(gl.TEXTURE0 + textureUnitIndices[index]);\n        gl.bindTexture(target, texture);\n      });\n      gl.uniform1iv(this._location, textureUnitIndices);\n    };\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {number} target An enum describing the type of this buffer; one of:\n   *   - gl.TEXTURE_2D,\n   *   - gl.TEXTURE_CUBE_MAP.\n   * @param {number} textureUnitIndex\n   * @returns {Function.<*>}\n   * @private\n   */\n  _getUniformTextureSetter(gl, target, textureUnitIndex) {\n    return texture => {\n      gl.activeTexture(gl.TEXTURE0 + textureUnitIndex);\n      gl.bindTexture(target, texture);\n      gl.uniform1i(this._location, textureUnitIndex);\n    };\n  }\n}\n\nexport {UniformSetter};\n","import {renderableShapeFactory} from './src/renderable-shape-factory';\n\nimport {capsuleRenderableShapeFactory} from './src/shape-configs/capsule-renderable-shape';\nimport {cubeRenderableShapeFactory} from './src/shape-configs/cube-renderable-shape';\nimport {icosahedronRenderableShapeFactory} from './src/shape-configs/icosahedron-renderable-shape';\nimport {icosphereRenderableShapeFactory} from './src/shape-configs/icosphere-renderable-shape';\nimport {latLongSphereRenderableShapeFactory} from './src/shape-configs/lat-long-sphere-renderable-shape';\nimport {tetrahedronRenderableShapeFactory} from './src/shape-configs/tetrahedron-renderable-shape';\n\n[\n  capsuleRenderableShapeFactory,\n  cubeRenderableShapeFactory,\n  icosahedronRenderableShapeFactory,\n  icosphereRenderableShapeFactory,\n  latLongSphereRenderableShapeFactory,\n  tetrahedronRenderableShapeFactory\n].forEach(renderableShapeFactory.registerRenderableShapeFactory);\n\nexport * from './src/shape-configs/capsule-renderable-shape';\nexport * from './src/shape-configs/cube-renderable-shape';\nexport * from './src/shape-configs/icosahedron-renderable-shape';\nexport * from './src/shape-configs/icosphere-renderable-shape';\nexport * from './src/shape-configs/lat-long-sphere-renderable-shape';\nexport * from './src/shape-configs/tetrahedron-renderable-shape';\n\nexport * from './src/renderable-shape-factory';\nexport * from './src/renderable-shape-store';\n","import {DefaultModel} from '../../models';\nimport {renderableShapeStore} from './renderable-shape-store';\n\n/**\n * This module defines a factory for DefaultRigidModal instances that are based on the various\n * pre-defined renderable shapes in this directory.\n */\n\nconst renderableShapeFactory = {\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {RenderableShapeConfig} params\n   * @returns {DefaultModel}\n   */\n  createModel: (gl, params) => {\n    const shapeConfig = renderableShapeFactory.getRenderableShape(params);\n    return new DefaultModel(gl, shapeConfig);\n  },\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {RenderableShape}\n   */\n  getRenderableShape: params => {\n    params.isUsingSphericalNormals = params.isUsingSphericalNormals || false;\n    params.divisionsCount = typeof params.divisionsCount === 'number' ? params.divisionsCount : 0;\n\n    let shapeConfig = renderableShapeStore.getShape(params);\n    if (!shapeConfig) {\n      shapeConfig = _shapeIdsToRenderableShapeFactories[params.shapeId].getRenderableShape(params);\n      _updateTextureCoordinatesSpan(shapeConfig, params.textureSpan);\n      renderableShapeStore.registerShape(shapeConfig, params);\n    }\n    return shapeConfig;\n  },\n\n  /**\n   * @param {RenderableShapeFactory} shapeConfigFactory\n   */\n  registerRenderableShapeFactory: shapeConfigFactory => {\n    _shapeIdsToRenderableShapeFactories[shapeConfigFactory.shapeId] = shapeConfigFactory;\n    renderableShapeStore.registerRenderableShapeFactory(shapeConfigFactory);\n  }\n};\n\nconst _shapeIdsToRenderableShapeFactories = {};\n\n/**\n * @param {RenderableShape} shapeConfig\n * @param {TextureSpan} textureSpan\n * @private\n */\nfunction _updateTextureCoordinatesSpan(shapeConfig, textureSpan) {\n  if (!textureSpan) return;\n\n  const minX = textureSpan.minX;\n  const minY = textureSpan.minY;\n  const rangeX = textureSpan.maxX - textureSpan.minX;\n  const rangeY = textureSpan.maxY - textureSpan.minY;\n\n  const textureCoordinates = shapeConfig.textureCoordinates.slice();\n  shapeConfig.textureCoordinates = textureCoordinates;\n\n  for (let i = 0, count = textureCoordinates.length; i < count; i += 2) {\n    textureCoordinates[i] = minX + rangeX * textureCoordinates[i];\n    textureCoordinates[i + 1] = minY + rangeY * textureCoordinates[i + 1];\n  }\n}\n\nexport {renderableShapeFactory};\n\n/**\n * @typedef {Object} RenderableShapeFactory\n * @property {string} shapeId\n * @property {Function.<RenderableShape>} getRenderableShape\n * @property {Function.<String>} getCacheId\n */\n\n/**\n * @typedef {Object} RenderableShape\n * @property {Array.<Number>} vertexPositions\n * @property {Array.<Number>} vertexNormals\n * @property {Array.<Number>} textureCoordinates\n * @property {Array.<Number>} [vertexIndices]\n * @property {number} elementCount\n */\n\n/**\n * @typedef {Object} TextureSpan\n * @property {number} minX\n * @property {number} minY\n * @property {number} maxX\n * @property {number} maxY\n */\n\n/**\n * @typedef {Object} RenderableShapeConfig\n * @property {string} shapeId The ID of the type of renderable shape.\n * @property {boolean} [isUsingSphericalNormals=false] Whether light reflections should show sharp\n * edges.\n * @property {TextureSpan} [textureSpan] For indicating how much a texture should repeat in both axes.\n * A range of 0-0.5 should show half the texture. A range of 0-2 would show the texture twice. The\n * default is 0-1 in both directions.\n * @property {vec3} [scale]\n */\n\n/**\n * @typedef {RenderableShapeConfig} SphericalRenderableShapeParams\n * @property {number} divisionsCount How many times to sub-divide the sphere.\n */\n","/**\n * This class caches renderable shape data.\n */\nclass RenderableShapeStore {\n  constructor() {\n    this._shapeCache = new Map();\n  }\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {RenderableShape}\n   */\n  getShape(params) {\n    const key = _shapeIdsToCacheKeyCalculators[params.shapeId](params);\n    return this._shapeCache.get(key);\n  }\n\n  /**\n   * Caches the given shape info.\n   *\n   * @param {RenderableShape} shapeConfig\n   * @param {RenderableShapeConfig} params\n   */\n  registerShape(shapeConfig, params) {\n    const key = _shapeIdsToCacheKeyCalculators[params.shapeId](params);\n    this._shapeCache.set(key, shapeConfig);\n  }\n\n  /**\n   * @param {RenderableShapeFactory} shapeConfigFactory\n   */\n  registerRenderableShapeFactory(shapeConfigFactory) {\n    _shapeIdsToCacheKeyCalculators[shapeConfigFactory.shapeId] = shapeConfigFactory.getCacheId;\n  }\n\n  // TODO: Add support for un-registering shapes.\n}\n\n/**\n * @param {RenderableShapeConfig} params\n * @returns {string}\n */\nfunction getCacheKey(params) {\n  const textureSpanStr = params.textureSpan\n      ? `:${params.textureSpan.minX},${params.textureSpan.minY},${params.textureSpan.maxX},` +\n  `${params.textureSpan.maxY}`\n      : '';\n\n  return `${params.shapeId}:${params.isUsingSphericalNormals}${textureSpanStr}`;\n}\n\nconst _shapeIdsToCacheKeyCalculators = {};\n\nconst renderableShapeStore = new RenderableShapeStore();\nexport {renderableShapeStore, getCacheKey};\n","/**\n * This module defines a configuration factory for a capsule shape.\n *\n * The shape is centered around the origin with the poles aligned with the z-axis.\n */\n\nimport {\n  calculateSphericalSection,\n  calculateOrthogonalVertexNormals,\n  dedupVertexArrayWithPositionsAndIndicesArrays,\n  calculateLatLongTextureCoordinates,\n  calculateCylindricalSection,\n  calculateCylindricalTextureCoordinates,\n  TWO_PI,\n} from '../../../util';\nimport {getCacheKey} from '../renderable-shape-store';\n\n// TODO: Once I have a better camera in place, test that these texture coordinate calculations are\n// correct.\n\n/**\n * @param {CapsuleRenderableShapeParams} params\n * @returns {RenderableShape}\n */\nfunction _calculateCapsuleTopShape(params) {\n  // Calculate the positions.\n  // TODO: This uses lat-long spheres for the ends of the capsule. Use icospheres instead.\n  const individualVertexPositions = calculateSphericalSection(\n      0, params.divisionsCount / 2, Math.PI / params.divisionsCount,\n      0, params.divisionsCount, TWO_PI / params.divisionsCount);\n\n  // Calculate the indices and normals.\n  let vertexPositions;\n  let vertexIndices;\n  let vertexNormals;\n  if (!params.isUsingSphericalNormals) {\n    // If we use orthogonal normals, then we cannot use vertexIndices.\n    vertexPositions = individualVertexPositions;\n    vertexIndices = null;\n    vertexNormals = calculateOrthogonalVertexNormals(vertexPositions);\n  } else {\n    ({vertexPositions, vertexIndices} = dedupVertexArrayWithPositionsAndIndicesArrays(\n        individualVertexPositions));\n    vertexNormals = vertexPositions;\n  }\n\n  const textureCoordinates = calculateLatLongTextureCoordinates(vertexPositions);\n\n  let scale;\n  let translation;\n\n  // Scale and translate the positions.\n  scale = params.radius;\n  translation = params.capsuleEndPointsDistance / 2;\n  for (let i = 0, count = vertexPositions.length; i < count; i += 3) {\n    vertexPositions[i] *= scale;\n    vertexPositions[i + 1] *= scale;\n    vertexPositions[i + 2] = vertexPositions[i + 2] * scale + translation;\n  }\n\n  // Scale and translate the texture coordinates.\n  scale = params.radius / (params.radius + params.capsuleEndPointsDistance);\n  translation = 1 - scale;\n  for (let i = 1, count = textureCoordinates.length; i < count; i += 2) {\n    textureCoordinates[i] = textureCoordinates[i] * scale + translation;\n  }\n\n  const elementCount = vertexIndices ? vertexIndices.length : vertexPositions.length / 3;\n\n  return {\n    vertexPositions: vertexPositions,\n    vertexNormals: vertexNormals,\n    textureCoordinates: textureCoordinates,\n    vertexIndices: vertexIndices,\n    elementCount: elementCount\n  };\n}\n\n/**\n * @param {CapsuleRenderableShapeParams} params\n * @returns {RenderableShape}\n */\nfunction _calculateCapsuleBottomShape(params) {\n  // Calculate the positions.\n  // TODO: This uses lat-long spheres for the ends of the capsule. Use icospheres instead.\n  const individualVertexPositions = calculateSphericalSection(\n      params.divisionsCount / 2, params.divisionsCount, Math.PI / params.divisionsCount,\n      0, params.divisionsCount, TWO_PI / params.divisionsCount);\n\n  // Calculate the indices and normals.\n  let vertexPositions;\n  let vertexIndices;\n  let vertexNormals;\n  if (!params.isUsingSphericalNormals) {\n    // If we use orthogonal normals, then we cannot use vertexIndices.\n    vertexPositions = individualVertexPositions;\n    vertexIndices = null;\n    vertexNormals = calculateOrthogonalVertexNormals(vertexPositions);\n  } else {\n    const positionsAndIndices = dedupVertexArrayWithPositionsAndIndicesArrays(\n        individualVertexPositions);\n    vertexPositions = positionsAndIndices.vertexPositions;\n    vertexIndices = positionsAndIndices.vertexIndices;\n    vertexNormals = vertexPositions;\n  }\n\n  const textureCoordinates = calculateLatLongTextureCoordinates(vertexPositions);\n\n  let scale;\n  let translation;\n\n  // Scale and translate the positions.\n  scale = params.radius;\n  translation = -params.capsuleEndPointsDistance / 2;\n  for (let i = 0, count = vertexPositions.length; i < count; i += 3) {\n    vertexPositions[i] *= scale;\n    vertexPositions[i + 1] *= scale;\n    vertexPositions[i + 2] = vertexPositions[i + 2] * scale + translation;\n  }\n\n  // Scale and translate the texture coordinates.\n  scale = params.radius / (params.radius + params.capsuleEndPointsDistance);\n  translation = 0;\n  for (let i = 1, count = textureCoordinates.length; i < count; i += 2) {\n    textureCoordinates[i] = textureCoordinates[i] * scale + translation;\n  }\n\n  const elementCount = vertexIndices ? vertexIndices.length : vertexPositions.length / 3;\n\n  return {\n    vertexPositions: vertexPositions,\n    vertexNormals: vertexNormals,\n    textureCoordinates: textureCoordinates,\n    vertexIndices: vertexIndices,\n    elementCount: elementCount\n  };\n}\n\n/**\n * @param {CapsuleRenderableShapeParams} params\n * @returns {RenderableShape}\n */\nfunction _calculateCapsuleMiddleShape(params) {\n  let scale;\n  let translation;\n\n  // Calculate the positions.\n  translation = params.capsuleEndPointsDistance / 2;\n  const individualVertexPositions = calculateCylindricalSection(\n      -translation, translation, 0, params.divisionsCount, TWO_PI / params.divisionsCount);\n\n  let vertexPositions;\n  let vertexIndices;\n  let vertexNormals;\n\n  // Calculate the vertex indices and normals.\n  if (!params.isUsingSphericalNormals) {\n    // If we use orthogonal normals, then we cannot use vertexIndices.\n    vertexPositions = individualVertexPositions;\n    vertexIndices = null;\n    vertexNormals = calculateOrthogonalVertexNormals(vertexPositions);\n  } else {\n    const positionsAndIndices = dedupVertexArrayWithPositionsAndIndicesArrays(\n        individualVertexPositions);\n    vertexPositions = positionsAndIndices.vertexPositions;\n    vertexIndices = positionsAndIndices.vertexIndices;\n\n    // Calculate the vertex normals.\n    vertexNormals = vertexPositions.map((coord, index) => index % 3 === 2 ? 0 : coord);\n  }\n\n  // Calculate the texture coordinates.\n  const textureCoordinates = calculateCylindricalTextureCoordinates(vertexPositions);\n\n  // Scale the x and y position coordinates.\n  scale = params.radius;\n  for (let i = 0, count = vertexPositions.length; i < count; i += 3) {\n    vertexPositions[i] *= scale;\n    vertexPositions[i + 1] *= scale;\n  }\n\n  // Scale and translate the texture coordinates.\n  scale = params.capsuleEndPointsDistance / (params.radius + params.capsuleEndPointsDistance);\n  translation = (1 - scale) / 2;\n  for (let i = 1, count = textureCoordinates.length; i < count; i += 2) {\n    textureCoordinates[i] = textureCoordinates[i] * scale + translation;\n  }\n\n  const elementCount = vertexIndices ? vertexIndices.length : vertexPositions.length / 3;\n\n  return {\n    vertexPositions: vertexPositions,\n    vertexNormals: vertexNormals,\n    textureCoordinates: textureCoordinates,\n    vertexIndices: vertexIndices,\n    elementCount: elementCount\n  };\n}\n\nconst capsuleRenderableShapeFactory = {\n  shapeId: 'CAPSULE',\n\n  /**\n   * @param {CapsuleRenderableShapeParams} params\n   * @returns {RenderableShape}\n   */\n  getRenderableShape: (params) => {\n    // Ensure the divisions count is even.\n    if (params.divisionsCount % 2 === 1) {\n      params.divisionsCount++;\n    }\n\n    // The capsule's sub-shapes.\n    const topShape = _calculateCapsuleTopShape(params);\n    const bottomShape = _calculateCapsuleBottomShape(params);\n    const middleShape = _calculateCapsuleMiddleShape(params);\n\n    // Concatenate positions, normals, texture coordinates, and indices.\n    const vertexPositions = topShape.vertexPositions.concat(middleShape.vertexPositions, \n        bottomShape.vertexPositions);\n    const vertexNormals = topShape.vertexNormals.concat(middleShape.vertexNormals,\n        bottomShape.vertexNormals);\n    const textureCoordinates = topShape.textureCoordinates.concat(middleShape.textureCoordinates,\n        bottomShape.textureCoordinates);\n    const vertexIndices = topShape.vertexIndices\n        ? topShape.vertexIndices.concat(middleShape.vertexIndices, bottomShape.vertexIndices)\n        : null;\n    const elementCount = topShape.elementCount + middleShape.elementCount + bottomShape.elementCount;\n\n    return {\n      vertexPositions: vertexPositions,\n      vertexNormals: vertexNormals,\n      textureCoordinates: textureCoordinates,\n      vertexIndices: vertexIndices,\n      elementCount: elementCount\n    };\n  },\n\n  /**\n   * @param {CapsuleRenderableShapeParams} params\n   * @returns {string}\n   */\n  getCacheId(params) {\n    return `${getCacheKey(params)}:${params.divisionsCount}`;\n  }\n};\n\nexport {capsuleRenderableShapeFactory};\n\n/**\n * @typedef {SphericalRenderableShapeParams} CapsuleRenderableShapeParams\n * @property {number} radius\n * @property {number} capsuleEndPointsDistance The distance between the centers of the spheres on\n * either end of the capsule.\n */\n","/**\n * This model defines a shape configuration factory for a cube.\n *\n * This cube is one unit long on each side.\n */\n\nimport {getCacheKey} from '../renderable-shape-store';\n\nconst VERTEX_COORDINATE = 0.5;\n\nconst vertexPositions = [\n  // Front face\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  // Back face\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  -VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  -VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  // Top face\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  -VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  -VERTEX_COORDINATE,\n  // Bottom face\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  // Right face\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  -VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  // Left face\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  -VERTEX_COORDINATE\n];\n\nconst orthogonalVertexNormals = [\n  // Front face\n  0, 0, 1,\n  0, 0, 1,\n  0, 0, 1,\n  0, 0, 1,\n  // Back face\n  0, 0, -1,\n  0, 0, -1,\n  0, 0, -1,\n  0, 0, -1,\n  // Top face\n  0, 1, 0,\n  0, 1, 0,\n  0, 1, 0,\n  0, 1, 0,\n  // Bottom face\n  0, -1, 0,\n  0, -1, 0,\n  0, -1, 0,\n  0, -1, 0,\n  // Right face\n  1, 0, 0,\n  1, 0, 0,\n  1, 0, 0,\n  1, 0, 0,\n  // Left face\n  -1, 0, 0,\n  -1, 0, 0,\n  -1, 0, 0,\n  -1, 0, 0\n];\n\nconst textureCoordinates = [\n  // Front face\n  1, 0,\n  0, 0,\n  0, 1,\n  1, 1,\n  // Back face\n  1, 0,\n  0, 0,\n  0, 1,\n  1, 1,\n  // Top face\n  1, 0,\n  0, 0,\n  0, 1,\n  1, 1,\n  // Bottom face\n  1, 0,\n  0, 0,\n  0, 1,\n  1, 1,\n  // Right face\n  1, 0,\n  0, 0,\n  0, 1,\n  1, 1,\n  // Left face\n  1, 0,\n  0, 0,\n  0, 1,\n  1, 1\n];\n\n// This array defines each face as two triangles, using the indices into the vertex array\n// to specify each triangle's position.\nconst vertexIndices = [\n  // Front face\n  0,  1,  2,\n  0,  2,  3,\n  // Back face\n  4,  5,  6,\n  4,  6,  7,\n  // Top face\n  8,  9,  10,\n  8,  10, 11,\n  // Bottom face\n  12, 13, 14,\n  12, 14, 15,\n  // Right face\n  16, 17, 18,\n  16, 18, 19,\n  // Left face\n  20, 21, 22,\n  20, 22, 23\n];\n\nconst cubeRenderableShapeFactory = {\n  shapeId: 'CUBE',\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {RenderableShape}\n   */\n  getRenderableShape: params => {\n    const vertexNormals = params.isUsingSphericalNormals ? vertexPositions : orthogonalVertexNormals;\n\n    return {\n      vertexPositions: vertexPositions,\n      vertexNormals: vertexNormals,\n      textureCoordinates: textureCoordinates,\n      vertexIndices: vertexIndices,\n      elementCount: vertexIndices.length\n    };\n  },\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {string}\n   */\n  getCacheId(params) {\n    return getCacheKey(params);\n  }\n};\n\nexport {cubeRenderableShapeFactory};\n","/**\n * This model defines a shape configuration factory for a regular icosahedron.\n *\n * The shape is centered around the origin.\n */\n\nimport {\n  calculateLatLongTextureCoordinates,\n  calculateOrthogonalVertexNormals,\n  expandVertexIndicesAroundLongitudeSeam,\n  expandVertexIndicesToDuplicatePositions,\n} from '../../../util';\nimport {getCacheKey} from '../renderable-shape-store';\n\n// The corners of a unit icosahedron with vertices aligned with the y-axis.\nconst individualVertexPositions = [\n  -0.525731086730957, -0.7236068248748779, 0.4472135901451111,\n  0.525731086730957, -0.7236068248748779, 0.4472135901451111,\n  -0.525731086730957, 0.7236068248748779, -0.4472135901451111,\n  0.525731086730957, 0.7236068248748779, -0.4472135901451111,\n  0, 0, 1,\n  0, 0.8944271802902222, 0.44721361994743347,\n  0, -0.8944271802902222, -0.44721361994743347,\n  0, 0, -1,\n  0.8506508469581604, 0.27639320492744446, 0.4472135901451111,\n  -0.8506508469581604, 0.27639320492744446, 0.4472135901451111,\n  0.8506508469581604, -0.27639320492744446, -0.4472135901451111,\n  -0.8506508469581604, -0.27639320492744446, -0.4472135901451111\n];\n\nconst individualVertexIndices = [\n  1,  4,  0,\n  4,  9,  0,\n  4,  5,  9,\n  8,  5,  4,\n  1,  8,  4,\n  1,  10, 8,\n  10, 3,  8,\n  8,  3,  5,\n  3,  2,  5,\n  3,  7,  2,\n  3,  10, 7,\n  10, 6,  7,\n  6,  11, 7,\n  6,  0,  11,\n  6,  1,  0,\n  10, 1,  6,\n  11, 0,  9,\n  2,  11, 9,\n  5,  2,  9,\n  11, 2,  7\n];\n\nlet vertexPositionsExpandedAroundSeam = null;\nlet vertexIndicesExpandedAroundSeam = null;\nlet textureCoordinates = null;\n\nconst icosahedronRenderableShapeFactory = {\n  shapeId: 'ICOSAHEDRON',\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {RenderableShape}\n   */\n  getRenderableShape: params => {\n    let vertexPositions;\n    let vertexIndices;\n\n    if (!vertexPositionsExpandedAroundSeam) {\n      // Calculate the modified positions and indices.\n      const positionsAndIndices = expandVertexIndicesAroundLongitudeSeam(\n          individualVertexPositions, individualVertexIndices);\n      vertexPositionsExpandedAroundSeam = positionsAndIndices.vertexPositions;\n      vertexIndicesExpandedAroundSeam = positionsAndIndices.vertexIndices;\n    }\n\n    vertexPositions = vertexPositionsExpandedAroundSeam;\n    vertexIndices = vertexIndicesExpandedAroundSeam;\n\n    let vertexNormals;\n    // If we use orthogonal normals, then we cannot use vertexIndices.\n    if (!params.isUsingSphericalNormals) {\n      vertexPositions = expandVertexIndicesToDuplicatePositions(vertexPositions,\n          vertexIndices);\n      vertexIndices = null;\n      vertexNormals = calculateOrthogonalVertexNormals(vertexPositions);\n    } else {\n      vertexNormals = vertexPositions;\n    }\n\n    textureCoordinates = textureCoordinates\n        ? textureCoordinates\n        : calculateLatLongTextureCoordinates(vertexPositions);\n\n    const elementCount = vertexIndices ? vertexIndices.length : vertexPositions.length / 3;\n\n    return {\n      vertexPositions: vertexPositions,\n      vertexNormals: vertexNormals,\n      textureCoordinates: textureCoordinates,\n      vertexIndices: vertexIndices,\n      elementCount: elementCount\n    };\n  },\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {string}\n   */\n  getCacheId(params) {\n    return getCacheKey(params);\n  }\n};\n\nexport {icosahedronRenderableShapeFactory};\n","/**\n * This module defines logic that creates a spherical shape configuration by taking a shape,\n * sub-dividing each of its triangles, and projecting each new vertex onto the edge of a sphere.\n *\n * This is technically only an \"icosphere\" if the starting shape is an icosahedron.\n *\n * This shape also is known as a \"geosphere\".\n *\n * The shape is centered around the origin.\n */\n\nimport {\n  deepCopy,\n  calculateLatLongTextureCoordinates,\n  calculateOrthogonalVertexNormals,\n  expandVertexIndicesAroundLongitudeSeam,\n  expandVertexIndicesToDuplicatePositions,\n  tesselateSphere,\n} from '../../../util';\nimport {getCacheKey} from '../renderable-shape-store';\nimport {renderableShapeFactory} from '../renderable-shape-factory';\n\nconst icosphereRenderableShapeFactory = {\n  shapeId: 'ICOSPHERE',\n\n  /**\n   * @param {IcosphereRenderableShapeParams} params\n   * @returns {RenderableShape}\n   */\n  getRenderableShape: params => {\n    params.divisionsCount = Math.max(params.divisionsCount, 1);\n\n    const copyParams = deepCopy(params);\n    copyParams.shapeId = params.baseShapeId || 'ICOSAHEDRON';\n    const baseRenderableShape = renderableShapeFactory.getRenderableShape(copyParams);\n\n    // Calculate the positions and indices.\n    let {vertexPositions, vertexIndices} = tesselateSphere(params.divisionsCount,\n        baseRenderableShape.vertexPositions, baseRenderableShape.vertexIndices);\n    ({vertexPositions, vertexIndices} = expandVertexIndicesAroundLongitudeSeam(\n        vertexPositions, vertexIndices));\n\n    let vertexNormals;\n    // If we use orthogonal normals, then we cannot use vertexIndices.\n    if (!params.isUsingSphericalNormals) {\n      vertexPositions = expandVertexIndicesToDuplicatePositions(vertexPositions,\n          vertexIndices);\n      vertexIndices = null;\n      vertexNormals = calculateOrthogonalVertexNormals(vertexPositions);\n    } else {\n      vertexNormals = vertexPositions;\n    }\n\n    const textureCoordinates = calculateLatLongTextureCoordinates(vertexPositions);\n\n    const elementCount = vertexIndices ? vertexIndices.length : vertexPositions.length / 3;\n\n    return {\n      vertexPositions: vertexPositions,\n      vertexNormals: vertexNormals,\n      textureCoordinates: textureCoordinates,\n      vertexIndices: vertexIndices,\n      elementCount: elementCount\n    };\n  },\n\n  /**\n   * @param {IcosphereRenderableShapeParams} params\n   * @returns {string}\n   */\n  getCacheId(params) {\n    return `${getCacheKey(params)}:${params.divisionsCount}`;\n  }\n};\n\nexport {icosphereRenderableShapeFactory};\n\n/**\n * @typedef {SphericalRenderableShapeParams} IcosphereRenderableShapeParams\n * @property {string} baseShapeId The ID of the base renderable shape that will be sub-divided to\n * create this icosphere shape.\n */\n","import {\n  calculateLatLongTextureCoordinates,\n  calculateOrthogonalVertexNormals,\n  calculateSphericalSection,\n  dedupVertexArrayWithPositionsAndIndicesArrays,\n  TWO_PI,\n} from '../../../util';\nimport {getCacheKey} from '../renderable-shape-store';\n\n/**\n * This module defines a configuration factory for a spherical shape whose vertices lie along\n * latitude and longitude lines.\n *\n * This shape also is known as a \"UV sphere\".\n *\n * The shape is centered around the origin with the poles aligned with the z-axis.\n */\n\n/**\n * @param {number} divisionsCount\n * @returns {Array.<Number>}\n * @private\n */\nfunction _calculateLatLongSpherePositions(divisionsCount) {\n  const deltaPitch = Math.PI / divisionsCount;\n  const deltaAzimuth = TWO_PI / divisionsCount;\n\n  return calculateSphericalSection(\n      0, divisionsCount, deltaPitch,\n      0, divisionsCount, deltaAzimuth);\n}\n\nconst latLongSphereRenderableShapeFactory = {\n  shapeId: 'LAT_LONG_SPHERE',\n\n  /**\n   * @param {SphericalRenderableShapeParams} params\n   * @returns {RenderableShape}\n   */\n  getRenderableShape: params => {\n    // Calculate the positions.\n    const individualVertexPositions = _calculateLatLongSpherePositions(params.divisionsCount);\n\n    // Calculate the indices and normals.\n    let vertexPositions;\n    let vertexIndices;\n    let vertexNormals;\n    if (!params.isUsingSphericalNormals) {\n      // If we use orthogonal normals, then we cannot use vertexIndices.\n      vertexPositions = individualVertexPositions;\n      vertexIndices = null;\n      vertexNormals = calculateOrthogonalVertexNormals(vertexPositions);\n    } else {\n      ({vertexPositions, vertexIndices} = dedupVertexArrayWithPositionsAndIndicesArrays(\n          individualVertexPositions));\n      vertexNormals = vertexPositions;\n    }\n\n    const textureCoordinates = calculateLatLongTextureCoordinates(vertexPositions);\n\n    const elementCount = vertexIndices ? vertexIndices.length : vertexPositions.length / 3;\n\n    return {\n      vertexPositions: vertexPositions,\n      vertexNormals: vertexNormals,\n      textureCoordinates: textureCoordinates,\n      vertexIndices: vertexIndices,\n      elementCount: elementCount\n    };\n  },\n\n  /**\n   * @param {SphericalRenderableShapeParams} params\n   * @returns {string}\n   */\n  getCacheId(params) {\n    return `${getCacheKey(params)}:${params.divisionsCount}`;\n  }\n};\n\nexport {latLongSphereRenderableShapeFactory};\n","import {calculateOrthogonalVertexNormals} from '../../../util';\nimport {getCacheKey} from '../renderable-shape-store';\n\n/**\n * This model defines a shape configuration factory for a regular tetrahedron.\n *\n * The shape is centered around the origin.\n */\n\n// ||(VERTEX_COORDINATE, VERTEX_COORDINATE, VERTEX_COORDINATE)|| = 1\nconst VERTEX_COORDINATE = 0.5773502588272095;\n\nconst vertexPositions = [\n  // Left-top-near face\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  -VERTEX_COORDINATE,\n\n  // Right-top-far face\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  -VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n\n  // Right-bottom-near face\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, VERTEX_COORDINATE,\n\n  // Left-bottom-far face\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  VERTEX_COORDINATE, -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE, -VERTEX_COORDINATE\n];\n\n// 1 - Math.sqrt(3) / 2\nconst TEXTURE_BASE_COORDINATE = 0.13397459621;\n\nconst textureCoordinates = [\n  // Left-top-near face\n  0, TEXTURE_BASE_COORDINATE,\n  0.5, 1,\n  1, TEXTURE_BASE_COORDINATE,\n\n  // Right-top-far face\n  0, TEXTURE_BASE_COORDINATE,\n  0.5, 1,\n  1, TEXTURE_BASE_COORDINATE,\n\n  // Right-bottom-near face\n  0, TEXTURE_BASE_COORDINATE,\n  0.5, 1,\n  1, TEXTURE_BASE_COORDINATE,\n\n  // Left-bottom-far face\n  0, TEXTURE_BASE_COORDINATE,\n  0.5, 1,\n  1, TEXTURE_BASE_COORDINATE\n];\n\nconst tetrahedronRenderableShapeFactory = {\n  shapeId: 'TETRAHEDRON',\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {RenderableShape}\n   */\n  getRenderableShape: params => {\n    const vertexNormals = params.isUsingSphericalNormals\n        ? vertexPositions\n        : calculateOrthogonalVertexNormals(vertexPositions);\n\n    return {\n      vertexPositions: vertexPositions,\n      vertexNormals: vertexNormals,\n      textureCoordinates: textureCoordinates,\n      vertexIndices: null,\n      elementCount: vertexPositions.length / 3\n    };\n  },\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {string}\n   */\n  getCacheId(params) {\n    return getCacheKey(params);\n  }\n};\n\nexport {tetrahedronRenderableShapeFactory};\n","import {\n  animator,\n  PersistentAnimationJob\n}\nfrom '../../../animatex';\nimport { PhysicsEngine } from 'lsl-physx';\nimport {\n  ProgramWrapper,\n  programWrapperStore,\n  textureStore\n}\nfrom '../program-wrapper';\nimport {\n  bindFramebuffer,\n  bindGLContextToViewportDimensions,\n  getWebGLContext,\n  getViewportHeight,\n  getViewportWidth,\n}\nfrom '../util';\n\n/**\n * This top-level Controller class initializes and runs the rest of the app.\n */\nclass GrafxController extends PersistentAnimationJob {\n  constructor() {\n    super();\n\n    this._canvas = null;\n    this._gl = null;\n    this._scene = null;\n    this._currentProgramWrapper = null;\n  }\n\n  /**\n   * Initializes the app. After this completes successfully, call run to actually start the app.\n   *\n   * @param {HTMLCanvasElement} canvas\n   * @param {Array.<ProgramWrapperConfig>} programConfigs Configurations for program wrappers that\n   * should be pre-cached before starting the rest of the app.\n   * @param {Array.<String>} texturePaths Texture images that should be pre-cached before\n   * starting the rest of the app.\n   * @param {Function.<Scene>} sceneFactory\n   * @returns {Promise}\n   */\n  initialize(canvas, programConfigs, texturePaths, sceneFactory) {\n    this._canvas = canvas;\n\n    return Promise.resolve()\n      .then(() => this._setUpWebGLContext())\n      .then(() => Promise.all([\n        this._preCachePrograms(programConfigs),\n        this._preCacheTextures(texturePaths)\n      ]))\n      .then(() => this._setUpScene(sceneFactory));\n  }\n\n  destroy() {}\n\n  reset() {\n    // FIXME: Will it be easier to replace this with initialize?\n    this._scene.reset();\n  }\n\n  /**\n   * Runs the app. This should be called after initialize.\n   *\n   * A few things happen if this is run in dev mode:\n   * - The draw and update steps of each frame are wrapped in a try/catch block.\n   * - This method returns a Promise that rejects if an error is throw during any update or draw\n   *   step and resolves when this controller has finished (currently never)\n   */\n  run() {\n    this._startAnimator();\n  }\n\n  _startAnimator() { // FIXME: Decouple physx\n    animator.startJob(PhysicsEngine.instance);\n    animator.startJob(this);\n  }\n\n  /**\n   * Updates the scene.\n   *\n   * This updates all of the current parameters for each component in the scene for the current\n   * frame. However, this does not render anything. Rendering is done by a following call to the\n   * draw function.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  update(currentTime, deltaTime) {\n    this._scene.updateSelfAndChildren(currentTime, deltaTime);\n  }\n\n  /**\n   * Draws the scene.\n   *\n   * This renders the current frame for all components in the scene. This assumes that all relevant\n   * parameter updates for this frame have already been computed by a previous call to _updateScene.\n   */\n  draw() {\n    // Clear the canvas before we start drawing on it.\n    this._gl.clear(this._gl.COLOR_BUFFER_BIT | this._gl.DEPTH_BUFFER_BIT);\n\n    // If we are using a post-processing program, then we need to render models to a framebuffer\n    // rather than directly to the canvas.\n    if (programWrapperStore.isUsingPostProcessingPrograms) {\n      bindFramebuffer(this._gl, programWrapperStore.modelsFramebuffer);\n      this._gl.clear(this._gl.COLOR_BUFFER_BIT | this._gl.DEPTH_BUFFER_BIT);\n    }\n\n    // Draw each program separately. This minimizes how many times we need to switch programs by\n    // grouping all of the draw calls for models that use the same program/shaders.\n    programWrapperStore.forEachModelProgram((programWrapper, drawFrameHandlers) =>\n      this._drawModelProgram(programWrapper, drawFrameHandlers));\n    programWrapperStore.forEachPostProcessingProgram(\n      (programWrapper) => this._drawPostProcessingProgram(programWrapper));\n  }\n\n  /**\n   * For the given program key, this binds the registered shader program to the GL rendering context\n   * and calls each of the registered draw-frame handlers.\n   *\n   * @param {ProgramWrapper|GroupProgramWrapper} programWrapper\n   * @param {Set.<Function>} [drawFrameHandlers]\n   * @private\n   */\n  _drawModelProgram(programWrapper, drawFrameHandlers) {\n    // Check whether we need to switch programs (always true if there is more than one program\n    // registered).\n    if (this._currentProgramWrapper !== programWrapper) {\n      programWrapper.setProgram(this._gl);\n      this._currentProgramWrapper = programWrapper;\n    }\n\n    // Call each of the draw-frame handlers that use the current rendering program.\n    drawFrameHandlers.forEach(drawFrameHandler => drawFrameHandler());\n  }\n\n  /**\n   * For the given program key, this binds the registered shader program to the GL rendering context\n   * and calls each of the registered draw-frame handlers.\n   *\n   * @param {ProgramWrapper|GroupProgramWrapper} programWrapper\n   * @private\n   */\n  _drawPostProcessingProgram(programWrapper) {\n    this._currentProgramWrapper = programWrapper;\n    programWrapper.draw(this._gl);\n  }\n\n  /**\n   * Initializes the WebGL rendering context.\n   *\n   * @private\n   */\n  _setUpWebGLContext() {\n    // Get the WebGL rendering context.\n    try {\n      this._gl = getWebGLContext(this._canvas);\n    }\n    catch (e) {\n      alert('WebGL is not supported by your browser! :(');\n      throw e;\n    }\n\n    // Have the canvas context match the resolution of the window's viewport.\n    bindGLContextToViewportDimensions(this._canvas, this._gl, () => this._updateAspectRatio());\n\n    // Clear everything to black.\n    this._gl.clearColor(0, 0, 0, 1);\n    this._gl.clearDepth(1);\n\n    // Enable depth testing.\n    this._gl.enable(this._gl.DEPTH_TEST);\n    this._gl.depthFunc(this._gl.LEQUAL);\n  }\n\n  /**\n   * Loads, compiles, caches, and initializes some rendering programs.\n   *\n   * @param {Array.<ProgramWrapperConfig>} programConfigs\n   * @returns {Promise}\n   * @private\n   */\n  _preCachePrograms(programConfigs) {\n    const promises =\n      programConfigs.map(config => programWrapperStore.loadProgramWrapper(this._gl, config));\n    return Promise.all(promises);\n  }\n\n  /**\n   * Loads, compiles, and caches some textures.\n   *\n   * @param {Array.<String>} texturePaths\n   * @returns {Promise}\n   * @private\n   */\n  _preCacheTextures(texturePaths) {\n    return Promise.all(texturePaths\n      .map(texturePath => textureStore.loadTexture(this._gl, texturePath)));\n  }\n\n  /**\n   * Initializes the scene.\n   *\n   * @param {Function.<Scene>} sceneFactory\n   * @returns {Promise}\n   * @abstract\n   * @protected\n   */\n  _setUpScene(sceneFactory) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * @protected\n   */\n  _updateAspectRatio() {\n    this._scene.camera.aspectRatio = getViewportWidth() / getViewportHeight();\n    _resizeFramebuffersToMatchViewportSize(this._gl);\n  }\n\n  /**\n   * @returns {mat4}\n   * @protected\n   */\n  _getViewMatrix() {\n    return this._scene.camera.viewMatrix;\n  }\n\n  /**\n   * @returns {mat4}\n   * @protected\n   */\n  _getProjectionMatrix() {\n    return this._scene.camera.projectionMatrix;\n  }\n}\n\n/**\n * @param {WebGLRenderingContext} gl\n * @private\n */\nfunction _resizeFramebuffersToMatchViewportSize(gl) {\n  if (programWrapperStore.isUsingPostProcessingPrograms) {\n    const width = getViewportWidth();\n    const height = getViewportHeight();\n\n    // Update the per-model framebuffer texture.\n    const texture = programWrapperStore.modelsTexture;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n    // Update the per-model framebuffer depth render buffer.\n    const renderBuffer = programWrapperStore.modelsRenderBuffer;\n    gl.bindRenderbuffer(gl.RENDERBUFFER, renderBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);\n\n    // Update the post-processing framebuffer textures.\n    programWrapperStore.forEachPostProcessingProgram(programWrapper => {\n      programWrapper.config.childrenFramebufferIds.forEach(id => {\n        const texture = programWrapperStore.getTexture(id);\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n      });\n    });\n  }\n}\n\nexport { GrafxController };\n","/**\n * This class defines a light source.\n */\nclass Light {\n  constructor() {\n    // TODO\n  }\n\n  // TODO: Implement this.\n}\n\nexport {Light};\n","import { ModelGroupController } from '../models';\n\n/**\n * This class handles the overall scene.\n */\nclass Scene extends ModelGroupController {\n  /**\n   * @param {ModelGroupControllerConfig} modelControllerParams\n   */\n  constructor(modelControllerParams) {\n    super(modelControllerParams);\n\n    // Scene is an abstract class. It should not be instantiated directly.\n    if (new.target === Scene) {\n      throw new TypeError('Cannot construct Scene instances directly');\n    }\n\n    this._getWorldTransform = () => this.worldTransform;\n    this._lights = [];\n    this._camera = null;\n  }\n\n  reset() {\n    super.reset();\n    this._lights.forEach(light => light.reset());\n    this._camera.reset();\n  }\n\n  /**\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  updateChildren(currentTime, deltaTime) {\n    super.updateChildren(currentTime, deltaTime);\n    this._camera.update(currentTime, deltaTime);\n  }\n\n  /** @returns {Camera} */\n  get camera() {\n    return this._camera;\n  }\n}\n\nexport { Scene };\n","export * from './src/geometry';\nexport * from './src/gl-util';\nexport * from './src/hash-map';\nexport * from './src/util';\n","/**\n * This module defines a collection of static geometry utility functions.\n */\n\nimport {randomFloatInRange} from './util';\n\nconst EPSILON = 0.0000001;\nconst DEG_TO_RAD_RATIO = Math.PI / 180;\nconst RAD_TO_DEG_RATIO = 180 / Math.PI;\nconst HALF_PI = Math.PI / 2;\nconst TWO_PI = Math.PI * 2;\n\n/**\n * @param {number} deg\n * @returns {number}\n */\nfunction degToRad(deg) {\n  return deg * DEG_TO_RAD_RATIO;\n}\n\n/**\n * @param {number} rad\n * @returns {number}\n */\nfunction radToDeg(rad) {\n  return rad * RAD_TO_DEG_RATIO;\n}\n\n/**\n * This checks whether two floating-point numbers are close enough that they could be equal if not\n * for round-off errors.\n *\n * @param {number} a\n * @param {number} b\n * @returns {boolean}\n */\nfunction areClose(a, b) {\n  const diff = a - b;\n  return (diff > 0 ? diff : -diff) < EPSILON;\n}\n\n/**\n * @param {vec3} a\n * @param {vec3} b\n * @returns {boolean}\n */\nfunction areVec3sEqual(a, b) {\n  return a[0] === b[0] &&\n      a[1] === b[1] &&\n      a[2] === b[2];\n}\n\n/**\n * @param {vec3} v\n * @returns {string}\n */\nfunction vec3ToString(v) {\n  return `(${v[0]},${v[1]},${v[2]})`;\n}\n\n/**\n * TODO: This finds a random point with uniform probability within a cubic area, which biases the resulting vector toward the corners of this cubic area. Re-write this to produce an unbiased vector.\n *\n * @param {number} [scale=1]\n * @returns {vec3}\n */\nfunction createRandomVec3(scale = 1) {\n  const v = vec3.create();\n  return setRandomVec3(v, scale);\n}\n\n/**\n * TODO: This finds a random point with uniform probability within a cubic area, which biases the resulting vector toward the corners of this cubic area. Re-write this to produce an unbiased vector.\n *\n * @param {vec3} v\n * @param {number} [scale=1]\n * @returns {vec3}\n */\nfunction setRandomVec3(v, scale = 1) {\n  vec3.set(v, Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5);\n  vec3.normalize(v, v);\n  vec3.scale(v, v, scale);\n  return v;\n}\n\n/**\n * Calculates a vector that is orthogonal to the given vector.\n *\n * TODO: This finds a random point with uniform probability within a cubic area, which biases the resulting vector toward the corners of this cubic area. Re-write this to produce an unbiased vector.\n *\n * @param {vec3} basis\n * @param {number} [scale=1]\n * @returns {vec3}\n */\nfunction createRandomOrthogonalVec3(basis, scale = 1) {\n  const result = vec3.create();\n  return setRandomOrthogonalVec3(result, basis, scale);\n}\n\n/**\n * Calculates a vector that is orthogonal to the given vector.\n *\n * TODO: This finds a random point with uniform probability within a cubic area, which biases the resulting vector toward the corners of this cubic area. Re-write this to produce an unbiased vector.\n *\n * @param {vec3} result\n * @param {vec3} basis\n * @param {number} [scale=1]\n * @returns {vec3}\n */\nfunction setRandomOrthogonalVec3(result, basis, scale = 1) {\n  setRandomVec3(result);\n  // This is based on the dot and cross products and the fact that the dot product for two\n  // orthogonal vectors is zero.\n  result[2] = -(basis[0] * result[0] + basis[1] * result[1]) / basis[2];\n  vec3.normalize(result, result);\n  vec3.scale(result, result, scale);\n  return result;\n}\n\n/**\n * @param {vec3} avg\n * @param {vec3} range\n * @returns {vec3}\n * @private\n */\nfunction randomVec3InRange(avg, range) {\n  const position = vec3.create();\n  for (let i = 0; i < 3; i++) {\n    const min = avg[i] - range[i] / 2;\n    const max = avg[i] + range[i] / 2;\n    position[i] = randomFloatInRange(min, max);\n  }\n  return position;\n}\n\n/**\n * Rotates the given vector around a random orthogonal axis by a random angle within the given angle\n * bounds.\n *\n * @param {vec3} v\n * @param {number} minRotationAngle\n * @param {number} maxRotationAngle\n */\nfunction addRandomRotationToVector(v, minRotationAngle, maxRotationAngle) {\n  // Create a random orthogonal axis.\n  const rotationAxis = createRandomVec3();\n  vec3.cross(rotationAxis, rotationAxis, v);\n  vec3.normalize(rotationAxis, rotationAxis);\n\n  // Create a random angle.\n  const rotationAngle = randomFloatInRange(minRotationAngle, maxRotationAngle);\n\n  // Create a rotation quaternion.\n  const rotation = quat.create();\n  quat.setAxisAngle(rotation, rotationAxis, rotationAngle);\n\n  // Apply the rotation to the vector.\n  vec3.transformQuat(v, v, rotation);\n}\n\n/**\n * @param {quat} out\n * @param {quat} a\n * @param {quat} b\n * @param {number} scale\n * @returns {quat}\n */\nfunction scaleAndAddQuat(out, a, b, scale) {\n  return quat.set(out,\n      a[0] + b[0] * scale,\n      a[1] + b[1] * scale,\n      a[2] + b[2] * scale,\n      a[3] + b[3] * scale);\n}\n\n/**\n * @param {vec3} v\n * @returns {number}\n */\nfunction getMaxVec3Dimension(v) {\n  let max = v[0] > v[1] ? v[0] : v[1];\n  max = max > v[2] ? max : v[2];\n  return max;\n}\n\nexport {\n  EPSILON,\n  HALF_PI,\n  TWO_PI,\n  degToRad,\n  radToDeg,\n  areClose,\n  areVec3sEqual,\n  vec3ToString,\n  createRandomVec3,\n  setRandomVec3,\n  createRandomOrthogonalVec3,\n  setRandomOrthogonalVec3,\n  randomVec3InRange,\n  addRandomRotationToVector,\n  scaleAndAddQuat,\n  getMaxVec3Dimension,\n};\n","/**\n * This module defines a collection of static general utility functions for WebGL.\n */\n\nimport {HashMap} from './hash-map';\nimport {HALF_PI, TWO_PI} from './geometry';\nimport {debounce, isInDevMode, loadText} from './util';\nimport {programWrapperStore} from '../../program-wrapper/src/program-wrapper-store';\n\nlet viewportWidth = 10;\nlet viewportHeight = 10;\n\n/**\n * @param {HTMLCanvasElement} canvas\n * @returns {?WebGLRenderingContext}\n * @throws If unable to get a WebGL context.\n */\nfunction getWebGLContext(canvas) {\n  const params = {alpha: false};\n  // Try to grab the standard context. If it fails, fallback to the experimental context.\n  return canvas.getContext('webgl', params) || canvas.getContext('experimental-webgl', params);\n}\n\n/**\n * @param {WebGLRenderingContext} gl\n * @returns {?WebGLBuffer}\n * @throws If unable to create a buffer object.\n */\nfunction createBuffer(gl) {\n  const buffer = gl.createBuffer();\n  if (!buffer) {\n    throw new Error('An error occurred creating the buffer object');\n  }\n  return buffer;\n}\n// TODO: use all this helper stuff in the programWrapper logic?\n/**\n * @param {WebGLRenderingContext} gl\n * @param {WebGLProgram} program\n * @param {string} locationName\n * @returns {number}\n * @throws If unable to get an attribute location for the given name.\n */\nfunction getAttribLocation(gl, program, locationName) {\n  const attribLocation = gl.getAttribLocation(program, locationName);\n  if (attribLocation < 0) {\n    throw new Error(`An error occurred getting the attribute location: ${locationName}`);\n  }\n  return attribLocation;\n}\n\n/**\n * @param {WebGLRenderingContext} gl\n * @param {WebGLShader} vertexShader\n * @param {WebGLShader} fragmentShader\n * @returns {WebGLProgram}\n * @throws If unable to link the program.\n */\nfunction buildProgram(gl, vertexShader, fragmentShader) {\n  const program = gl.createProgram();\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, fragmentShader);\n  gl.linkProgram(program);\n\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    const infoLog = gl.getProgramInfoLog(program);\n    console.error('An error occurred linking the shader program', infoLog);\n    throw new Error('An error occurred linking the shader program');\n  }\n\n  return program;\n}\n\n/**\n * @param {WebGLRenderingContext} gl\n * @param {string} shaderSource\n * @param {boolean} isFragmentShader\n * @returns {WebGLShader}\n * @throws If unable to compile the shader.\n */\nfunction buildShader(gl, shaderSource, isFragmentShader) {\n  const shaderType = isFragmentShader ? gl.FRAGMENT_SHADER : gl.VERTEX_SHADER;\n  const shader = gl.createShader(shaderType);\n  gl.shaderSource(shader, shaderSource);\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    const infoLog = gl.getShaderInfoLog(shader);\n    console.error('An error occurred compiling the shader', infoLog);\n    throw new Error('An error occurred compiling the shader');\n  }\n\n  return shader;\n}\n\n/**\n * Loads a shader program by scouring the current document, looking for a script with the specified\n * ID.\n *\n * @param {WebGLRenderingContext} gl\n * @param {string} url\n * @returns {Promise.<WebGLShader, Error>}\n */\nfunction loadShader(gl, url) {\n  return loadText(url)\n      .then(shaderSource => buildShader(gl, shaderSource, url.endsWith('.frag')));\n}\n\n/**\n * Loads the shader source code from the given URLs, compiles the shader source code, and creates\n * a program from the resulting shaders.\n *\n * @param {WebGLRenderingContext} gl\n * @param {string} vertexShaderUrl\n * @param {string} fragmentShaderUrl\n * @returns {Promise.<WebGLProgram, Error>}\n * @throws If any error occurs while loading and building the shaders and program.\n */\nfunction loadProgram(gl, vertexShaderUrl, fragmentShaderUrl) {\n  return Promise.all([\n        vertexShaderUrl,\n        fragmentShaderUrl\n      ].map(url => loadShader(gl, url)))\n      .then(shaders => {\n        const vertexShader = shaders[0];\n        const fragmentShader = shaders[1];\n\n        return buildProgram(gl, vertexShader, fragmentShader);\n      });\n}\n\n/**\n * Create, bind, and move the given raw data into a WebGL buffer.\n *\n * @param {WebGLRenderingContext} gl\n * @param {Array.<Number>} rawData A plain, flat array containing the data to bind to a buffer.\n * @param {number} [target=gl.ARRAY_BUFFER] An enum describing the type of this buffer; one of:\n *   - gl.ARRAY_BUFFER,\n *   - gl.ELEMENT_ARRAY_BUFFER.\n * @param {number} [usage=gl.STATIC_DRAW] An enum describing how this buffer is going to be used;\n * one of:\n *   - gl.STATIC_DRAW,\n *   - gl.DYNAMIC_DRAW,\n *   - gl.STREAM_DRAW.\n * @returns {WebGLBuffer}\n */\nfunction createBufferFromData(gl, rawData, target, usage) {\n  target = target || gl.ARRAY_BUFFER;\n  usage = usage || gl.STATIC_DRAW;\n  const typedArray = target === gl.ARRAY_BUFFER ? new Float32Array(rawData) : new Uint16Array(rawData);\n\n  const buffer = gl.createBuffer();\n  gl.bindBuffer(target, buffer);\n  gl.bufferData(target, typedArray, usage);\n\n  // Making the original data visible on the buffer object is helpful for debugging.\n  if (isInDevMode) {\n    buffer.rawData = typedArray;\n  }\n\n  return buffer;\n}\n\n/**\n * Adjusts the dimensions of the given element to match those of the viewport. Also, when the\n * viewport is resized, the given element will also be resized to match.\n *\n * @param {HTMLCanvasElement} canvas\n * @param {WebGLRenderingContext} gl\n * @param {Function} onGLResized\n * @param {?Number} [updateInterval=150]\n */\nfunction bindGLContextToViewportDimensions(canvas, gl, onGLResized, updateInterval = 150) {\n  _resizeGLContextToMatchViewportDimensions(canvas, gl);\n  const debouncedResize =\n      debounce(_ => {\n        _resizeGLContextToMatchViewportDimensions(canvas, gl);\n        onGLResized();\n      }, updateInterval);\n  window.addEventListener('resize', debouncedResize);\n}\n\n/**\n * Resizes the given element to match the dimensions of the viewport components.\n *\n * @param {HTMLCanvasElement} canvas\n * @param {WebGLRenderingContext} gl\n * @private\n */\nfunction _resizeGLContextToMatchViewportDimensions(canvas, gl) {\n  // Account for high-definition DPI displays.\n  const devicePixelToCssPixelRatio = window.devicePixelRatio || 1;\n  viewportWidth = Math.floor(canvas.clientWidth * devicePixelToCssPixelRatio);\n  viewportHeight = Math.floor(canvas.clientHeight * devicePixelToCssPixelRatio);\n  canvas.width = viewportWidth;\n  canvas.height = viewportHeight;\n  gl.viewport(0, 0, viewportWidth, viewportHeight);\n}\n\n/**\n * @returns {number}\n */\nfunction getViewportWidth() {\n  return viewportWidth;\n}\n\n/**\n * @returns {number}\n */\nfunction getViewportHeight() {\n  return viewportHeight;\n}\n\n/**\n * Binds a framebuffer to the GL context.\n *\n * @param {WebGLRenderingContext} gl\n * @param {WebGLFramebuffer} framebuffer\n */\nfunction bindFramebuffer(gl, framebuffer, width, height) {\n  // FIXME: Remove or add back in?\n  // width = width || getViewportWidth();\n  // height = height || getViewportHeight();\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n  // FIXME: Remove or add back in?\n  // gl.viewport(0, 0, width, height);\n}\n\n/**\n * Creates a framebuffer and attaches a texture to the framebuffer.\n *\n * This means that when we bind to the framebuffer, draw calls will render to the given texture.\n *\n * @param {WebGLRenderingContext} gl\n * @param {WebGLTexture} texture\n * @param {WebGLRenderBuffer} [renderBuffer]\n * @returns {WebGLFramebuffer}\n */\nfunction createFramebuffer(gl, texture, renderBuffer) {\n  const framebuffer = gl.createFramebuffer();\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  if (renderBuffer) {\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderBuffer);\n  }\n\n  return framebuffer;\n}\n\n/**\n * Creates a texture for rendering to.\n *\n * @param {WebGLRenderingContext} gl\n * @param {number} [width] Defaults to the viewport width stored in gl-util.\n * @param {number} [height] Defaults to the viewport height stored in gl-util.\n * @returns {WebGLTexture}\n */\nfunction createTextureForRendering(gl, width, height) {\n  width = width || getViewportWidth();\n  height = height || getViewportHeight();\n\n  // TODO: Double-check these params\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n  return texture;\n}\n\n/**\n * Creates a render buffer.\n *\n * @param {WebGLRenderingContext} gl\n * @param {number} [width] Defaults to the viewport width stored in gl-util.\n * @param {number} [height] Defaults to the viewport height stored in gl-util.\n * @returns {WebGLRenderBuffer}\n */\nfunction createRenderBuffer(gl, width, height) {\n  width = width || getViewportWidth();\n  height = height || getViewportHeight();\n\n  const renderBuffer = gl.createRenderbuffer();\n  gl.bindRenderbuffer(gl.RENDERBUFFER, renderBuffer);\n  gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);\n\n  return renderBuffer;\n}\n\nconst _SQUARE_COORDINATES_2D = [\n  0, 0,\n  1, 0,\n  0, 1,\n\n  1, 0,\n  1, 1,\n  0, 1,\n];\n\n/**\n * @param {WebGLRenderingContext} gl\n * @returns {AttributeConfig}\n */\nfunction create2DSquarePositionsConfig(gl) {\n  const positionsBuffer = createBufferFromData(gl, _SQUARE_COORDINATES_2D);\n  return {\n    buffer: positionsBuffer,\n    size: 2,\n    type: gl.FLOAT,\n    normalized: false,\n    stride: 0,\n    offset: 0\n  };\n}\n\n//\n// Geometrical calculations.\n//\n\n/**\n * Given an array of individual vertex positions and an array of vertex indices, creates an expanded\n * array of the positions grouped by the triangles they form.\n *\n * @param {Array.<Number>} individualVertexPositions\n * @param {Array.<Number>} vertexIndices\n * @returns {Array.<Number>}\n */\nfunction expandVertexIndicesToDuplicatePositions(individualVertexPositions, vertexIndices) {\n  const expandedVertexPositions = [];\n\n  for (let i = 0, j = 0, k = 0, count = vertexIndices.length; i < count; i++, k += 3) {\n    j = vertexIndices[i] * 3;\n\n    expandedVertexPositions[k] = individualVertexPositions[j];\n    expandedVertexPositions[k + 1] = individualVertexPositions[j + 1];\n    expandedVertexPositions[k + 2] = individualVertexPositions[j + 2];\n  }\n\n  return expandedVertexPositions;\n}\n\n/**\n * Computes normal vectors that are each orthogonal to the triangles they are a part of.\n *\n * The given vertices should represent individual triangles whose vertices are defined in clockwise\n * order (as seen when looking at the exterior side).\n *\n * @param {Array.<Number>} vertices\n * @returns {Array.<Number>}\n */\nfunction calculateOrthogonalVertexNormals(vertices) {\n  const vertex1 = vec3.create();\n  const vertex2 = vec3.create();\n  const vertex3 = vec3.create();\n  const vectorA = vec3.create();\n  const vectorB = vec3.create();\n  const normal1 = vec3.create();\n  const normal2 = vec3.create();\n  const normal3 = vec3.create();\n\n  const normals = [];\n\n  // Loop over each triangle in the flattened vertex array.\n  for (let i = 0, count = vertices.length; i < count; i += 9) {\n    // Get the vertices of the current triangle from the flattened array.\n    vec3.set(vertex1, vertices[i + 0], vertices[i + 1], vertices[i + 2]);\n    vec3.set(vertex2, vertices[i + 3], vertices[i + 4], vertices[i + 5]);\n    vec3.set(vertex3, vertices[i + 6], vertices[i + 7], vertices[i + 8]);\n\n    // Compute the normals.\n    vec3.subtract(vectorA, vertex3, vertex1);\n    vec3.subtract(vectorB, vertex2, vertex1);\n    vec3.cross(normal1, vectorA, vectorB);\n    vec3.normalize(normal1, normal1);\n\n    vec3.subtract(vectorA, vertex1, vertex2);\n    vec3.subtract(vectorB, vertex3, vertex2);\n    vec3.cross(normal2, vectorA, vectorB);\n    vec3.normalize(normal2, normal2);\n\n    vec3.subtract(vectorA, vertex2, vertex3);\n    vec3.subtract(vectorB, vertex1, vertex3);\n    vec3.cross(normal3, vectorA, vectorB);\n    vec3.normalize(normal3, normal3);\n\n    // Save the normal vectors in a flattened array.\n    normals[i + 0] = normal1[0];\n    normals[i + 1] = normal1[1];\n    normals[i + 2] = normal1[2];\n    normals[i + 3] = normal2[0];\n    normals[i + 4] = normal2[1];\n    normals[i + 5] = normal2[2];\n    normals[i + 6] = normal3[0];\n    normals[i + 7] = normal3[1];\n    normals[i + 8] = normal3[2];\n  }\n\n  return normals;\n}\n\nconst MAX_TEXTURE_V_COORDINATE_DELTA = 0.5;\n\n/**\n * Calculates lat-long texture coordinates for the given vertex positions.\n *\n * @param {Array.<Number>} vertexPositions\n * @returns {Array.<Number>}\n * @private\n */\nfunction calculateLatLongTextureCoordinates(vertexPositions) {\n  const currentVertexPosition = vec3.create();\n  const currentTextureCoordinates = vec2.create();\n  const textureCoordinates = [];\n\n  // Calculate the texture coordinates of each vertex.\n  for (let i = 0, j = 0, count = vertexPositions.length; i < count; i += 3, j += 2) {\n    vec3.set(currentVertexPosition,\n        vertexPositions[i], vertexPositions[i + 1], vertexPositions[i + 2]);\n    _getTextureCoordinatesOfLatLongPosition(currentTextureCoordinates, currentVertexPosition);\n    textureCoordinates[j] = currentTextureCoordinates[0];\n    textureCoordinates[j + 1] = currentTextureCoordinates[1];\n  }\n\n  _correctTextureForTrianglesAroundSeam(textureCoordinates);\n\n  return textureCoordinates;\n}\n\n/**\n * Calculates cylindrical texture coordinates for the given vertex positions.\n *\n * This assumes the cylinder is aligned with the z-axis and centered at the origin.\n *\n * @param {Array.<Number>} vertexPositions\n * @returns {Array.<Number>}\n * @private\n */\nfunction calculateCylindricalTextureCoordinates(vertexPositions) {\n  const currentVertexPosition = vec3.create();\n  const currentTextureCoordinates = vec2.create();\n  const textureCoordinates = [];\n\n  // Calculate the texture coordinates of each vertex.\n  for (let i = 0, j = 0, count = vertexPositions.length; i < count; i += 3, j += 2) {\n    vec3.set(currentVertexPosition,\n        vertexPositions[i], vertexPositions[i + 1], vertexPositions[i + 2]);\n    _getTextureCoordinatesOfCylindricalPosition(currentTextureCoordinates, currentVertexPosition);\n    textureCoordinates[j] = currentTextureCoordinates[0];\n    textureCoordinates[j + 1] = currentTextureCoordinates[1];\n  }\n\n  _correctTextureForTrianglesAroundSeam(textureCoordinates);\n\n  return textureCoordinates;\n}\n\n/**\n * @param {Array.<Number>} textureCoordinates\n */\nfunction _correctTextureForTrianglesAroundSeam(textureCoordinates) {\n  let v1;\n  let v2;\n  let v3;\n\n  // Determine which triangles span the seam across 0/2PI, and correct their textures.\n  for (let i = 0, count = textureCoordinates.length; i < count; i += 6) {\n    v1 = textureCoordinates[i];\n    v2 = textureCoordinates[i + 2];\n    v3 = textureCoordinates[i + 4];\n\n    if (v3 - v1 > MAX_TEXTURE_V_COORDINATE_DELTA || v2 - v1 > MAX_TEXTURE_V_COORDINATE_DELTA) {\n      textureCoordinates[i]++;\n    }\n    if (v3 - v2 > MAX_TEXTURE_V_COORDINATE_DELTA || v1 - v2 > MAX_TEXTURE_V_COORDINATE_DELTA) {\n      textureCoordinates[i + 2]++;\n    }\n    if (v2 - v3 > MAX_TEXTURE_V_COORDINATE_DELTA || v1 - v3 > MAX_TEXTURE_V_COORDINATE_DELTA) {\n      textureCoordinates[i + 4]++;\n    }\n  }\n}\n\n/**\n * Calculate the texture coordinates for a normalized point on a globe.\n *\n * @param {vec2} textureCoordinates Output parameter.\n * @param {vec3} vertexPosition Input parameter.\n * @private\n */\nfunction _getTextureCoordinatesOfLatLongPosition(textureCoordinates, vertexPosition) {\n  const x = vertexPosition[0];\n  const y = vertexPosition[1];\n  const z = vertexPosition[2];\n\n  let longitude;\n  if (y !== 0) {\n    longitude = Math.atan2(x, y);\n  } else if (x > 0) {\n    longitude = HALF_PI;\n  } else {\n    longitude = -HALF_PI;\n  }\n\n  const u = (longitude + Math.PI) / TWO_PI;\n\n  // TODO: Should I instead be calculating the v value from wrapping the texture around the globe\n  // curvature rather than simply projecting it directly?\n\n  // This assumes that the texture has been vertically distorted so that it can be directly\n  // projected onto the curvature of the globe.\n  const v = (z + 1) * 0.5;\n\n  textureCoordinates[0] = u;\n  textureCoordinates[1] = v;\n}\n\n/**\n * Calculate the texture coordinates for a normalized point on a cylinder.\n *\n * This assumes the cylinder is aligned with the z-axis and centered at the origin.\n *\n * @param {vec2} textureCoordinates Output parameter.\n * @param {vec3} vertexPosition Input parameter.\n * @private\n */\nfunction _getTextureCoordinatesOfCylindricalPosition(textureCoordinates, vertexPosition) {\n  const x = vertexPosition[0];\n  const y = vertexPosition[1];\n  const z = vertexPosition[2];\n\n  let longitude;\n  if (y !== 0) {\n    longitude = Math.atan2(x, y);\n  } else if (x > 0) {\n    longitude = HALF_PI;\n  } else {\n    longitude = -HALF_PI;\n  }\n\n  const u = (longitude + Math.PI) / TWO_PI;\n\n  const v = z > 0 ? 1 : 0;\n\n  textureCoordinates[0] = u;\n  textureCoordinates[1] = v;\n}\n\n/**\n * Expands the given vertices around the seam where longitude switches from 0 to 2PI.\n *\n * This is useful because, when applying a spherical texture using lat-long coordinates, any\n * triangle that spans the seam (from longitude 2PI to 0) would otherwise show the wrong result.\n *\n * @param {Array.<Number>} oldVertexPositions\n * @param {Array.<Number>} oldVertexIndices\n * @returns {{vertexPositions: Array.<Number>, vertexIndices: Array.<Number>}}\n */\nfunction expandVertexIndicesAroundLongitudeSeam(oldVertexPositions, oldVertexIndices) {\n  // const newVertexPositions = [];\n  // const newVertexIndices = [];\n  //\n  // ****\n  // // TODO: loop over triangles, use _getTextureCoordinatesOfLatLongPosition on each vertex,\n  // // check if two vertices in a triangle span the seam; to check the span, just check if both are\n  // // within a distance from the seam, but on opposite ends;\n  //\n  // return {\n  //   vertexPositions: newVertexPositions,\n  //   vertexIndices: newVertexIndices\n  // };\n\n  return {\n    vertexPositions: oldVertexPositions,\n    vertexIndices: oldVertexIndices\n  };\n}\n\n/**\n * Subdivides the triangles of a shape and projects all resulting vertices to a radius of one.\n *\n * @param {number} divisionFactor\n * @param {Array.<Number>} oldPositions\n * @param {Array.<Number>} [oldIndices]\n * @returns {{vertexPositions: Array.<Number>, vertexIndices: Array.<Number>}}\n */\nfunction tesselateSphere(divisionFactor, oldPositions, oldIndices) {\n  const newPositions = _expandAndTesselateTriangles(divisionFactor, oldPositions, oldIndices);\n\n  // Convert the expanded positions array into a unique positions array with a corresponding indices\n  // array.\n  const positionsAndIndices = dedupVertexArrayWithPositionsAndIndicesArrays(newPositions);\n\n  // Project the given positions to a distance of one.\n  _normalizePositions(positionsAndIndices.vertexPositions, positionsAndIndices.vertexPositions);\n\n  return positionsAndIndices;\n}\n\n/**\n * Subdivides triangles.\n *\n * This has the side-effect of flattening the given vertices into an expanded list that can contain\n * duplicate positions.\n *\n * @param {number} divisionFactor\n * @param {Array.<Number>} oldPositions\n * @param {Array.<Number>} [oldIndices]\n * @returns {Array.<Number>}\n * @private\n */\nfunction _expandAndTesselateTriangles(divisionFactor, oldPositions, oldIndices) {\n  const expandedOldPositions = oldIndices\n      ? expandVertexIndicesToDuplicatePositions(oldPositions, oldIndices)\n      : oldPositions;\n\n  const newPositions = [];\n  const a = vec3.create();\n  const b = vec3.create();\n  const c = vec3.create();\n  const aToB = vec3.create();\n  const aToC = vec3.create();\n  const bToC = vec3.create();\n  const rowDelta = vec3.create();\n  const columnDelta = vec3.create();\n  const backwardsDelta = vec3.create();\n  const rowStartPoint = vec3.create();\n  const rowColumnStartPoint = vec3.create();\n  const tempVec = vec3.create();\n\n  let oldIndex;\n  let count;\n  let newIndex;\n  let rowIndex;\n  let columnIndex;\n\n  //\n  // The basic tesselation algorithm:\n  // - Iterate across the original triangles that we are sub-dividing.\n  // - A, B, and C are the vertices of the current, original triangle.\n  // - Consider \"rows\" to iterate across the a-to-b direction and \"columns\" to iterate across the\n  //   a-to-c direction.\n  // - First calculate the distance between one row and one column.\n  // - Then loop over the rows and columns and create a the new triangle for each \"cell\".\n  //\n  //                   /\\\n  //                 B   \\--- A \"column\"\n  //                 o    \\\n  //                / \\   /\n  //               /   \\             rowDelta:      columnDelta:     backwardsDelta:\n  //              o-----o                 o             o\n  //             / \\   / \\               /               \\              o-----o\n  //            /   \\ /   \\             /                 \\\n  //           o-----o-----o           o                   o\n  //          / \\   / \\   / \\\n  //         /   \\ /   \\ /   \\\n  //        o-----o-----o-----o\n  //       / \\   / \\   / \\   / \\\n  //      /   \\ /   \\ /   \\ /   \\\n  //  A  o-----o-----o-----o-----o  C\n  //\n  //       \\_____\\\n  //           \\\n  //         A \"row\"\n  //\n\n  // Loop over the old triangles.\n  for (oldIndex = 0, newIndex = 0, count = expandedOldPositions.length;\n       oldIndex < count;\n       oldIndex += 9) {\n    // Pull out the three vertices of the current triangle.\n    vec3.set(a,\n        expandedOldPositions[oldIndex],\n        expandedOldPositions[oldIndex + 1],\n        expandedOldPositions[oldIndex + 2]);\n    vec3.set(b,\n        expandedOldPositions[oldIndex + 3],\n        expandedOldPositions[oldIndex + 4],\n        expandedOldPositions[oldIndex + 5]);\n    vec3.set(c,\n        expandedOldPositions[oldIndex + 6],\n        expandedOldPositions[oldIndex + 7],\n        expandedOldPositions[oldIndex + 8]);\n\n    vec3.subtract(aToB, b, a);\n    vec3.subtract(bToC, c, b);\n    vec3.subtract(aToC, c, a);\n\n    vec3.scale(rowDelta, aToB, 1 / divisionFactor);\n    vec3.scale(columnDelta, bToC, 1 / divisionFactor);\n    vec3.scale(backwardsDelta, aToC, 1 / divisionFactor);\n\n    // Loop over each new division (row) for the current triangle.\n    for (rowIndex = 0; rowIndex < divisionFactor; rowIndex++) {\n      vec3.scaleAndAdd(rowStartPoint, a, rowDelta, rowIndex);\n\n      // Create the first triangle in the row (address the fence-post problem).\n      newPositions[newIndex++] = rowStartPoint[0];\n      newPositions[newIndex++] = rowStartPoint[1];\n      newPositions[newIndex++] = rowStartPoint[2];\n      vec3.add(tempVec, rowStartPoint, rowDelta);\n      newPositions[newIndex++] = tempVec[0];\n      newPositions[newIndex++] = tempVec[1];\n      newPositions[newIndex++] = tempVec[2];\n      vec3.add(tempVec, rowStartPoint, backwardsDelta);\n      newPositions[newIndex++] = tempVec[0];\n      newPositions[newIndex++] = tempVec[1];\n      newPositions[newIndex++] = tempVec[2];\n\n      // Loop over the new triangles in the current division.\n      for (columnIndex = 1; columnIndex <= rowIndex; columnIndex++) {\n        vec3.scaleAndAdd(rowColumnStartPoint, rowStartPoint, columnDelta, columnIndex);\n\n        newPositions[newIndex++] = rowColumnStartPoint[0];\n        newPositions[newIndex++] = rowColumnStartPoint[1];\n        newPositions[newIndex++] = rowColumnStartPoint[2];\n        vec3.subtract(tempVec, rowColumnStartPoint, columnDelta);\n        newPositions[newIndex++] = tempVec[0];\n        newPositions[newIndex++] = tempVec[1];\n        newPositions[newIndex++] = tempVec[2];\n        vec3.add(tempVec, rowColumnStartPoint, rowDelta);\n        newPositions[newIndex++] = tempVec[0];\n        newPositions[newIndex++] = tempVec[1];\n        newPositions[newIndex++] = tempVec[2];\n\n        newPositions[newIndex++] = rowColumnStartPoint[0];\n        newPositions[newIndex++] = rowColumnStartPoint[1];\n        newPositions[newIndex++] = rowColumnStartPoint[2];\n        vec3.add(tempVec, rowColumnStartPoint, rowDelta);\n        newPositions[newIndex++] = tempVec[0];\n        newPositions[newIndex++] = tempVec[1];\n        newPositions[newIndex++] = tempVec[2];\n        vec3.add(tempVec, rowColumnStartPoint, backwardsDelta);\n        newPositions[newIndex++] = tempVec[0];\n        newPositions[newIndex++] = tempVec[1];\n        newPositions[newIndex++] = tempVec[2];\n      }\n    }\n  }\n\n  return newPositions;\n}\n\n/**\n * Projects the given positions to a distance of one.\n *\n * @param {Array.<Number>} out\n * @param {Array.<Number>} positions\n * @private\n */\nfunction _normalizePositions(out, positions) {\n  const tempVec = vec3.create();\n\n  for (let i = 0, count = positions.length; i < count; i += 3) {\n    vec3.set(tempVec, positions[i], positions[i + 1], positions[i + 2]);\n\n    vec3.normalize(tempVec, tempVec);\n\n    out[i] = tempVec[0];\n    out[i + 1] = tempVec[1];\n    out[i + 2] = tempVec[2];\n  }\n}\n\n/**\n * Given a collection of vertices that possibly contains duplicates, creates an array of the unique\n * vertex positions and an array of the indices of the original, duplicated vertices in the unique\n * array.\n *\n * This is useful for rendering using gl.drawElements (with gl.ELEMENT_ARRAY_BUFFER) instead of\n * gl.drawArrays.\n *\n * NOTE: Although this function does partially address floating-point round-off errors within the\n * given positions, it does not guarantee correctness.\n *\n * @param {Array.<Number>} oldVertexPositions\n * @returns {{vertexPositions: Array.<Number>, vertexIndices: Array.<Number>}}\n */\nfunction dedupVertexArrayWithPositionsAndIndicesArrays(oldVertexPositions) {\n  const vertexPositions = [];\n  const vertexIndices = [];\n\n  const vertexToIndexMap = new HashMap(_vertexHashFunction);\n  const vertex = vec3.create();\n  let oldCoordinateIndex;\n  let oldCoordinateCount;\n  let newVertexIndex;\n\n  // Loop over the original, duplicated vertex positions.\n  for (oldCoordinateIndex = 0, oldCoordinateCount = oldVertexPositions.length;\n       oldCoordinateIndex < oldCoordinateCount;\n       oldCoordinateIndex += 3) {\n    vec3.set(vertex,\n        oldVertexPositions[oldCoordinateIndex],\n        oldVertexPositions[oldCoordinateIndex + 1],\n        oldVertexPositions[oldCoordinateIndex + 2]);\n\n    // Has this position already been recorded?\n    if (!vertexToIndexMap.has(vertex)) {\n      // Record the index of the unique vertex position.\n      newVertexIndex = vertexPositions.length / 3;\n      vertexToIndexMap.set(vertex, newVertexIndex);\n\n      // Record the unique vertex position.\n      vertexPositions.push(vertex[0]);\n      vertexPositions.push(vertex[1]);\n      vertexPositions.push(vertex[2]);\n    }\n\n    newVertexIndex = vertexToIndexMap.get(vertex);\n\n    // Record the index of the unique position.\n    vertexIndices.push(newVertexIndex);\n  }\n\n  return {\n    vertexPositions: vertexPositions,\n    vertexIndices: vertexIndices\n  };\n}\n\nconst _VERTEX_COORDINATE_BUCKET_SIZE_DIGITS = 4;\n\n// This offset is important for preventing bucket-aligned numbers from being placed in inconsistent\n// buckets. For example, whole integer values could easily be placed in lower or higher buckets\n// depending on round-off error.\nconst _OFFSET = Math.random();\n\n/**\n * Calculates a hash code for the given vertex.\n *\n * NOTE: This does not guarantee correct results. Due to round-off error, \"equal\" coordinates could\n * be calculated is being in different buckets. Larger bucket sizes might reduce the rate of false\n * negatives, but with the trade-off of potentially introducing false positives.\n *\n * @param {vec3} vertex\n * @returns {string}\n * @private\n */\nfunction _vertexHashFunction(vertex) {\n  return `${(vertex[0] + _OFFSET).toFixed(_VERTEX_COORDINATE_BUCKET_SIZE_DIGITS)},` +\n      `${(vertex[1] + _OFFSET).toFixed(_VERTEX_COORDINATE_BUCKET_SIZE_DIGITS)},` +\n      `${(vertex[2] + _OFFSET).toFixed(_VERTEX_COORDINATE_BUCKET_SIZE_DIGITS)}`;\n}\n\n/**\n * Calculate the vertex positions for a section of a sphere.\n *\n * - These points will lie along latitude-longitude lines.\n * - The shape is centered around the origin with the poles aligned with the z-axis.\n * - The radius of the circle will be one.\n *\n * @param {number} startPitchIndex\n * @param {number} endPitchIndex\n * @param {number} deltaPitch\n * @param {number} startAzimuthIndex\n * @param {number} endAzimuthIndex\n * @param {number} deltaAzimuth\n * @return {Array.<Number>}\n * @private\n */\nfunction calculateSphericalSection(startPitchIndex, endPitchIndex, deltaPitch,\n                                   startAzimuthIndex, endAzimuthIndex, deltaAzimuth) {\n  const vertexPositions = [];\n  let vertexPositionsIndex = 0;\n\n  let pitchIndex;\n  let azimuthIndex;\n  let lowerPitch;\n  let upperPitch;\n  let lowerAzimuth;\n  let upperAzimuth;\n  let x1;\n  let y1;\n  let z1;\n  let x2;\n  let y2;\n  let z2;\n  let x3;\n  let y3;\n  let z3;\n  let x4;\n  let y4;\n  let z4;\n\n  // TODO: This implementation calculates all coordinates multiple times. Refactor it to be more\n  // efficient.\n\n  // Loop over each latitudinal strip.\n  for (pitchIndex = startPitchIndex; pitchIndex < endPitchIndex; pitchIndex++) {\n    lowerPitch = deltaPitch * pitchIndex;\n    upperPitch = deltaPitch + lowerPitch;\n\n    // Create the triangles for the strip at the current pitch.\n    for (azimuthIndex = startAzimuthIndex; azimuthIndex < endAzimuthIndex; azimuthIndex++) {\n      lowerAzimuth = deltaAzimuth * azimuthIndex;\n      upperAzimuth = deltaAzimuth + lowerAzimuth;\n\n      // The corners of the current square.\n\n      x1 = Math.sin(lowerPitch) * Math.cos(lowerAzimuth);\n      y1 = Math.sin(lowerPitch) * Math.sin(lowerAzimuth);\n      z1 = Math.cos(lowerPitch);\n\n      x2 = Math.sin(upperPitch) * Math.cos(lowerAzimuth);\n      y2 = Math.sin(upperPitch) * Math.sin(lowerAzimuth);\n      z2 = Math.cos(upperPitch);\n\n      x3 = Math.sin(lowerPitch) * Math.cos(upperAzimuth);\n      y3 = Math.sin(lowerPitch) * Math.sin(upperAzimuth);\n      z3 = Math.cos(lowerPitch);\n\n      x4 = Math.sin(upperPitch) * Math.cos(upperAzimuth);\n      y4 = Math.sin(upperPitch) * Math.sin(upperAzimuth);\n      z4 = Math.cos(upperPitch);\n\n      // The first triangle.\n\n      vertexPositions[vertexPositionsIndex] = x1;\n      vertexPositions[vertexPositionsIndex + 1] = y1;\n      vertexPositions[vertexPositionsIndex + 2] = z1;\n      vertexPositions[vertexPositionsIndex + 3] = x2;\n      vertexPositions[vertexPositionsIndex + 4] = y2;\n      vertexPositions[vertexPositionsIndex + 5] = z2;\n      vertexPositions[vertexPositionsIndex + 6] = x3;\n      vertexPositions[vertexPositionsIndex + 7] = y3;\n      vertexPositions[vertexPositionsIndex + 8] = z3;\n\n      // The second triangle.\n\n      vertexPositions[vertexPositionsIndex + 9] = x4;\n      vertexPositions[vertexPositionsIndex + 10] = y4;\n      vertexPositions[vertexPositionsIndex + 11] = z4;\n      vertexPositions[vertexPositionsIndex + 12] = x3;\n      vertexPositions[vertexPositionsIndex + 13] = y3;\n      vertexPositions[vertexPositionsIndex + 14] = z3;\n      vertexPositions[vertexPositionsIndex + 15] = x2;\n      vertexPositions[vertexPositionsIndex + 16] = y2;\n      vertexPositions[vertexPositionsIndex + 17] = z2;\n\n      vertexPositionsIndex += 18;\n    }\n  }\n\n  return vertexPositions;\n}\n\n/**\n * Calculate the vertex positions for a section of a cylinder.\n *\n * The shape is centered around the origin with the poles aligned with the z-axis.\n *\n * @param {number} cylinderBottom\n * @param {number} cylinderTop\n * @param {number} startIndex\n * @param {number} endIndex\n * @param {number} delta\n * @returns {Array.<Number>}\n * @private\n */\nfunction calculateCylindricalSection(cylinderBottom, cylinderTop, startIndex, endIndex, delta) {\n  const vertexPositions = [];\n  let vertexPositionsIndex = 0;\n\n  let index;\n  let lowerAzimuth;\n  let upperAzimuth;\n  let x1;\n  let y1;\n  let z1;\n  let x2;\n  let y2;\n  let z2;\n  let x3;\n  let y3;\n  let z3;\n  let x4;\n  let y4;\n  let z4;\n\n  // Create the triangles for the cylindrical strip.\n  for (index = startIndex; index < endIndex; index++) {\n    lowerAzimuth = delta * index;\n    upperAzimuth = delta + lowerAzimuth;\n\n    // The corners of the current square.\n\n    x1 = Math.cos(lowerAzimuth);\n    y1 = Math.sin(lowerAzimuth);\n    z1 = cylinderBottom;\n\n    x2 = Math.cos(lowerAzimuth);\n    y2 = Math.sin(lowerAzimuth);\n    z2 = cylinderTop;\n\n    x3 = Math.cos(upperAzimuth);\n    y3 = Math.sin(upperAzimuth);\n    z3 = cylinderBottom;\n\n    x4 = Math.cos(upperAzimuth);\n    y4 = Math.sin(upperAzimuth);\n    z4 = cylinderTop;\n\n    // The first triangle.\n\n    vertexPositions[vertexPositionsIndex] = x1;\n    vertexPositions[vertexPositionsIndex + 1] = y1;\n    vertexPositions[vertexPositionsIndex + 2] = z1;\n    vertexPositions[vertexPositionsIndex + 3] = x2;\n    vertexPositions[vertexPositionsIndex + 4] = y2;\n    vertexPositions[vertexPositionsIndex + 5] = z2;\n    vertexPositions[vertexPositionsIndex + 6] = x3;\n    vertexPositions[vertexPositionsIndex + 7] = y3;\n    vertexPositions[vertexPositionsIndex + 8] = z3;\n\n    // The second triangle.\n\n    vertexPositions[vertexPositionsIndex + 9] = x4;\n    vertexPositions[vertexPositionsIndex + 10] = y4;\n    vertexPositions[vertexPositionsIndex + 11] = z4;\n    vertexPositions[vertexPositionsIndex + 12] = x3;\n    vertexPositions[vertexPositionsIndex + 13] = y3;\n    vertexPositions[vertexPositionsIndex + 14] = z3;\n    vertexPositions[vertexPositionsIndex + 15] = x2;\n    vertexPositions[vertexPositionsIndex + 16] = y2;\n    vertexPositions[vertexPositionsIndex + 17] = z2;\n\n    vertexPositionsIndex += 18;\n  }\n\n  return vertexPositions;\n}\n\n/**\n * Scale and then translate the 3-dimensional positions in the given flattened array.\n *\n * The shape is centered around the origin with the poles aligned with the z-axis.\n *\n * @param {Array.<Number>} vertexPositions Output.\n * @param {number} startIndex\n * @param {number} endIndex\n * @param {vec3} scale\n * @param {vec3} translate\n * @private\n */\nfunction scaleThenTranslatePositions(vertexPositions, startIndex, endIndex, scale, translate) {\n  const scaleX = scale[0];\n  const scaleY = scale[1];\n  const scaleZ = scale[2];\n  const translateX = translate[0];\n  const translateY = translate[1];\n  const translateZ = translate[2];\n\n  for (let i = startIndex; i < endIndex; i += 3) {\n    vertexPositions[i] = vertexPositions[i] * scaleX + translateX;\n    vertexPositions[i + 1] = vertexPositions[i + 1] * scaleY + translateY;\n    vertexPositions[i + 2] = vertexPositions[i + 2] * scaleZ + translateZ;\n  }\n}\n\n// Export this module's logic\n\nexport {\n  getViewportWidth,\n  getViewportHeight,\n  getWebGLContext,\n  createBuffer,\n  getAttribLocation,\n  buildProgram,\n  buildShader,\n  loadShader,\n  loadProgram,\n  createBufferFromData,\n  bindGLContextToViewportDimensions,\n  bindFramebuffer,\n  createFramebuffer,\n  createTextureForRendering,\n  createRenderBuffer,\n  create2DSquarePositionsConfig,\n\n  expandVertexIndicesToDuplicatePositions,\n  calculateOrthogonalVertexNormals,\n  calculateLatLongTextureCoordinates,\n  calculateCylindricalTextureCoordinates,\n  expandVertexIndicesAroundLongitudeSeam,\n  tesselateSphere,\n  dedupVertexArrayWithPositionsAndIndicesArrays,\n  calculateSphericalSection,\n  calculateCylindricalSection,\n  scaleThenTranslatePositions,\n};\n\n// Some type defs to make my editor's auto-complete happy.\n\n/** @typedef {Object} WebGLProgram */\n/** @typedef {Object} WebGLShader */\n/** @typedef {Object} WebGLBuffer */\n/** @typedef {Object} WebGLTexture */\n/** @typedef {Float32Array|Array.<Number>} mat3 */\n/** @typedef {Float32Array|Array.<Number>} mat4 */\n/** @typedef {Float32Array|Array.<Number>} quat */\n/** @typedef {Float32Array|Array.<Number>} vec2 */\n/** @typedef {Float32Array|Array.<Number>} vec3 */\n/** @typedef {Float32Array|Array.<Number>} vec4 */\n","/**\n * A hash map that uses a custom hash function.\n */\nclass HashMap {\n  /**\n   * @param {Function} hashFunction\n   */\n  constructor(hashFunction) {\n    this._hashFunction = hashFunction;\n    this._map = new Map();\n  }\n\n  /**\n   * @param {Object} key\n   * @param {Object} value\n   */\n  set(key, value) {\n    const hashCode = this._hashFunction(key);\n    this._map.set(hashCode, value);\n  }\n\n  /**\n   * @param {Object} key\n   * @returns {Object}\n   */\n  get(key) {\n    const hashCode = this._hashFunction(key);\n    return this._map.get(hashCode);\n  }\n\n  /**\n   * @param {Object} key\n   * @returns {boolean}\n   */\n  has(key) {\n    const hashCode = this._hashFunction(key);\n    return this._map.has(hashCode);\n  }\n\n  /**\n   * @param {Object} item\n   * @returns {boolean}\n   */\n  remove(item) {\n    return this._map.delete(item);\n  }\n\n  /**\n   * @param {Function} callback\n   */\n  forEach(callback) {\n    this._map.forEach(callback);\n  }\n\n  clear() {\n    this._map.clear();\n  }\n\n  /**\n   * @returns {number}\n   */\n  get size() {\n    return this._map.size;\n  }\n}\n\nexport {HashMap};\n","/**\n * This module defines a collection of static general utility functions.\n */\n\n// TODO: This should be set from somewhere else (probably as a param to controller like before; but then I need to make this updatable)\nconst isInDevMode = true;\n\n/**\n * Adds an event listener for each of the given events to each of the given elements.\n *\n * @param {Array.<HTMLElement>} elements The elements to add event listeners to.\n * @param {Array.<String>} events The event listeners to add to the elements.\n * @param {Function} callback The single callback for handling the events.\n */\nfunction listenToMultipleForMultiple(elements, events, callback) {\n  elements.forEach(element => {\n    events.forEach(event => {\n      element.addEventListener(event, callback, false);\n    });\n  });\n}\n\n/**\n * Creates a DOM element with the given tag name, appends it to the given parent element, and\n * gives it the given id and classes.\n *\n * @param {string} tagName The tag name to give the new element.\n * @param {HTMLElement} [parent] The parent element to append the new element to.\n * @param {string} [id] The id to give the new element.\n * @param {Array.<String>} [classes] The classes to give the new element.\n * @returns {HTMLElement} The new element.\n */\nfunction createElement(tagName, parent, id, classes) {\n  const element = document.createElement(tagName);\n  if (parent) {\n    parent.appendChild(element);\n  }\n  if (id) {\n    element.id = id;\n  }\n  if (classes) {\n    classes.forEach(className => addClass(element, className));\n  }\n  return element;\n}\n\n/**\n * Determines whether the given element contains the given class.\n *\n * @param {HTMLElement} element The element to check.\n * @param {string} className The class to check for.\n * @returns {boolean} True if the element does contain the class.\n */\nfunction containsClass(element, className) {\n  let startIndex;\n  let indexAfterEnd;\n  startIndex = element.className.indexOf(className);\n  if (startIndex >= 0) {\n    if (startIndex === 0 || element.className[startIndex - 1] === ' ') {\n      indexAfterEnd = startIndex + className.length;\n      if (indexAfterEnd === element.className.length ||\n        element.className[indexAfterEnd] === ' ') {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/**\n * Toggles whether the given element has the given class. If the enabled argument is given, then\n * the inclusion of the class will be forced. That is, if enabled=true, then this will ensure the\n * element has the class; if enabled=false, then this will ensure the element does NOT have the\n * class; if enabled=undefined, then this will simply toggle whether the element has the class.\n *\n * @param {HTMLElement} element The element to add the class to or remove the class from.\n * @param {string} className The class to add or remove.\n * @param {boolean} [enabled] If given, then the inclusion of the class will be forced.\n */\nfunction toggleClass(element, className, enabled) {\n  if (typeof enabled === 'undefined') {\n    if (containsClass(element, className)) {\n      removeClass(element, className);\n    }\n    else {\n      addClass(element, className);\n    }\n  }\n  else if (enabled) {\n    addClass(element, className);\n  }\n  else {\n    removeClass(element, className);\n  }\n}\n\n/**\n * Gets the coordinates of the element relative to the top-left corner of the page.\n *\n * @param {HTMLElement} element The element to get the coordinates of.\n * @returns {{x: Number, y: Number}} The coordinates of the element relative to the top-left\n * corner of the page.\n */\nfunction getPageOffset(element) {\n  let x = 0;\n  let y = 0;\n  while (element) {\n    x += element.offsetLeft;\n    y += element.offsetTop;\n    element = element.offsetParent;\n  }\n  x -= document.documentElement.scrollLeft;\n  y -= document.documentElement.scrollTop;\n  return { x: x, y: y };\n}\n\n/**\n * Gets the dimensions of the viewport.\n *\n * @returns {{w: Number, h: Number}} The dimensions of the viewport.\n */\nfunction getViewportSize() {\n  let w;\n  let h;\n  if (typeof window.innerWidth !== 'undefined') {\n    // Good browsers\n    w = window.innerWidth;\n    h = window.innerHeight;\n  }\n  else if (typeof document.documentElement !== 'undefined' &&\n    typeof document.documentElement.clientWidth !== 'undefined' &&\n    document.documentElement.clientWidth !== 0) {\n    // IE6 in standards compliant mode\n    w = document.documentElement.clientWidth;\n    h = document.documentElement.clientHeight;\n  }\n  else {\n    // Older versions of IE\n    w = document.getElementsByTagName('body')[0].clientWidth;\n    h = document.getElementsByTagName('body')[0].clientHeight;\n  }\n  return { w: w, h: h };\n}\n\n/**\n * Removes the given child element from the given parent element if the child does indeed belong\n * to the parent.\n *\n * @param {HTMLElement} parent The parent to remove the child from.\n * @param {HTMLElement} child The child to remove.\n * @returns {boolean} True if the child did indeed belong to the parent.\n */\nfunction removeChildIfPresent(parent, child) {\n  if (child && child.parentNode === parent) {\n    parent.removeChild(child);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Adds the given class to the given element.\n *\n * @param {HTMLElement} element The element to add the class to.\n * @param {string} className The class to add.\n */\nfunction addClass(element, className) {\n  element.setAttribute('class', element.className + ' ' + className);\n}\n\n/**\n * Removes the given class from the given element.\n *\n * @param {HTMLElement} element The element to remove the class from.\n * @param {string} className The class to remove.\n */\nfunction removeClass(element, className) {\n  element.setAttribute('class',\n    element.className\n    .split(' ')\n    .filter(value => value !== className)\n    .join(' '));\n}\n\n/**\n * Removes all classes from the given element.\n *\n * @param {HTMLElement} element The element to remove all classes from.\n */\nfunction clearClasses(element) {\n  element.className = '';\n}\n\n/**\n * Calculates the width that the DOM would give to a div with the given text. The given tag\n * name, parent, id, and classes allow the width to be affected by various CSS rules.\n *\n * @param {string} text The text to determine the width of.\n * @param {string} tagName The tag name this text would supposedly have.\n * @param {HTMLElement} [parent] The parent this text would supposedly be a child of; defaults\n * to the document body.\n * @param {string} [id] The id this text would supposedly have.\n * @param {Array.<String>} [classes] The classes this text would supposedly have.\n * @returns {number} The width of the text under these conditions.\n */\nfunction getTextWidth(text, tagName, parent, id, classes) {\n  let tmpElement;\n  let width;\n  parent = parent || document.getElementsByTagName('body')[0];\n  tmpElement = createElement(tagName, null, id, classes);\n  tmpElement.style.position = 'absolute';\n  tmpElement.style.visibility = 'hidden';\n  tmpElement.style.whiteSpace = 'nowrap';\n  parent.appendChild(tmpElement);\n  tmpElement.innerHTML = text;\n  width = tmpElement.clientWidth;\n  parent.removeChild(tmpElement);\n  return width;\n}\n\n/**\n * Encodes and concatenates the given URL parameters into a single query string.\n *\n * @param {Object} rawParams An object whose properties represent the URL query string\n * parameters.\n * @returns {string} The query string.\n */\nfunction encodeQueryString(rawParams) {\n  let parameter;\n  let encodedParams;\n  encodedParams = [];\n  for (parameter in rawParams) {\n    if (rawParams.hasOwnProperty(parameter)) {\n      encodedParams.push(encodeURIComponent(parameter) + '=' +\n        encodeURIComponent(rawParams[parameter]));\n    }\n  }\n  return '?' + encodedParams.join('&');\n}\n\n/**\n * Retrieves the value corresponding to the given name from the given query string.\n *\n * (borrowed from http://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript)\n *\n * @param {string} queryString The query string containing the parameter.\n * @param {string} name The (non-encoded) name of the parameter value to retrieve.\n * @returns {string} The query string parameter value, or null if the parameter was not found.\n */\nfunction getQueryStringParameterValue(queryString, name) {\n  let regex;\n  let results;\n  name = encodeURIComponent(name);\n  name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n  regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)', 'i');\n  results = regex.exec(queryString);\n  return results === null ? null : decodeURIComponent(results[1].replace(/\\+/g, ' '));\n}\n\n/**\n * Sets the CSS transition style of the given element.\n *\n * @param {HTMLElement} element The element.\n * @param {number} value The transition string.\n */\nfunction setTransition(element, value) {\n  element.style.transition = value;\n  element.style.WebkitTransition = value;\n  element.style.MozTransition = value;\n  element.style.msTransition = value;\n  element.style.OTransition = value;\n}\n\n/**\n * Sets the CSS transition duration style of the given element.\n *\n * @param {HTMLElement} element The element.\n * @param {number} value The duration.\n */\nfunction setTransitionDurationSeconds(element, value) {\n  element.style.transitionDuration = value + 's';\n  element.style.WebkitTransitionDuration = value + 's';\n  element.style.MozTransitionDuration = value + 's';\n  element.style.msTransitionDuration = value + 's';\n  element.style.OTransitionDuration = value + 's';\n}\n\n/**\n * Sets the CSS transition delay style of the given element.\n *\n * @param {HTMLElement} element The element.\n * @param {number} value The delay.\n */\nfunction setTransitionDelaySeconds(element, value) {\n  element.style.transitionDelay = value + 's';\n  element.style.WebkitTransitionDelay = value + 's';\n  element.style.MozTransitionDelay = value + 's';\n  element.style.msTransitionDelay = value + 's';\n  element.style.OTransitionDelay = value + 's';\n}\n\n/**\n * Sets the userSelect style of the given element to 'none'.\n *\n * @param {HTMLElement} element\n */\nfunction setUserSelectNone(element) {\n  element.style.userSelect = 'none';\n  element.style.webkitUserSelect = 'none';\n  element.style.MozUserSelect = 'none';\n  element.style.msUserSelect = 'none';\n}\n\n/**\n * Removes any children elements from the given parent that have the given class.\n *\n * @param {HTMLElement} parent The parent to remove children from.\n * @param {string} className The class to match.\n */\nfunction removeChildrenWithClass(parent, className) {\n  let matchingChildren = parent.querySelectorAll('.' + className);\n\n  for (let i = 0, count = matchingChildren.length; i < count; i++) {\n    parent.removeChild(matchingChildren[i]);\n  }\n}\n\n/**\n * Sets the CSS transition-timing-function style of the given element with the given cubic-\n * bezier points.\n *\n * @param {HTMLElement} element The element.\n * @param {{p1x: Number, p1y: Number, p2x: Number, p2y: Number}} bezierPts The cubic-bezier\n * points to use for this timing function.\n */\nfunction setTransitionCubicBezierTimingFunction(element, bezierPts) {\n  const value = 'cubic-bezier(' + bezierPts.p1x + ',' + bezierPts.p1y + ',' + bezierPts.p2x + ',' +\n    bezierPts.p2y + ')';\n  element.style.transitionTimingFunction = value;\n  element.style.WebkitTransitionTimingFunction = value;\n  element.style.MozTransitionTimingFunction = value;\n  element.style.msTransitionTimingFunction = value;\n  element.style.OTransitionTimingFunction = value;\n}\n\n// A collection of different types of easing functions.\nconst easingFunctions = {\n  linear: t => t,\n  easeInQuad: t => t * t,\n  easeOutQuad: t => t * (2 - t),\n  easeInOutQuad: t => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t,\n  easeInCubic: t => t * t * t,\n  easeOutCubic: t => 1 + --t * t * t,\n  easeInOutCubic: t => t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,\n  easeInQuart: t => t * t * t * t,\n  easeOutQuart: t => 1 - --t * t * t * t,\n  easeInOutQuart: t => t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t,\n  easeInQuint: t => t * t * t * t * t,\n  easeOutQuint: t => 1 + --t * t * t * t * t,\n  easeInOutQuint: t => t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t\n};\n\n// A collection of the inverses of different types of easing functions.\nconst inverseEasingFunctions = {\n  linear: t => t,\n  easeInQuad: t => Math.sqrt(t),\n  easeOutQuad: t => 1 - Math.sqrt(1 - t),\n  easeInOutQuad: t => t < 0.5 ? Math.sqrt(t * 0.5) : 1 - 0.70710678 * Math.sqrt(1 - t)\n};\n\n/**\n * Calculates the x and y coordinates represented by the given Bezier curve at the given\n * percentage.\n *\n * @param {number} percent Expressed as a number between 0 and 1.\n * @param {Array.<{x:Number,y:Number}>} controlPoints\n * @returns {{x:Number,y:Number}}\n */\nfunction getXYFromPercentWithBezier(percent, controlPoints) {\n  let x;\n  let y;\n  let oneMinusPercent;\n  let tmp1;\n  let tmp2;\n  let tmp3;\n  let tmp4;\n\n  oneMinusPercent = 1 - percent;\n  tmp1 = oneMinusPercent * oneMinusPercent * oneMinusPercent;\n  tmp2 = 3 * percent * oneMinusPercent * oneMinusPercent;\n  tmp3 = 3 * percent * percent * oneMinusPercent;\n  tmp4 = percent * percent * percent;\n\n  x = controlPoints[0].x * tmp1 +\n    controlPoints[1].x * tmp2 +\n    controlPoints[2].x * tmp3 +\n    controlPoints[3].x * tmp4;\n  y = controlPoints[0].y * tmp1 +\n    controlPoints[1].y * tmp2 +\n    controlPoints[2].y * tmp3 +\n    controlPoints[3].y * tmp4;\n\n  return { x: x, y: y };\n}\n\n/**\n * Applies the given transform to the given element as a CSS style in a cross-browser compatible\n * manner.\n *\n * @param {HTMLElement} element\n * @param {string} transform\n */\nfunction setTransform(element, transform) {\n  element.style.webkitTransform = transform;\n  element.style.MozTransform = transform;\n  element.style.msTransform = transform;\n  element.style.OTransform = transform;\n  element.style.transform = transform;\n}\n\n/**\n * Returns a copy of the given array with its contents re-arranged in a random order.\n *\n * The original array is left in its original order.\n *\n * @param {Array} array\n * @returns {Array}\n */\nfunction shuffle(array) {\n  let i;\n  let j;\n  let count;\n  let temp;\n\n  for (i = 0, count = array.length; i < count; i++) {\n    j = parseInt(Math.random() * count);\n    temp = array[j];\n    array[j] = array[i];\n    array[i] = temp;\n  }\n\n  return array;\n}\n\n/**\n * Performs a shallow copy of the given object.\n *\n * This only copies enumerable properties.\n *\n * @param {Object} object\n * @returns {Object}\n */\nfunction shallowCopy(object) {\n  if (typeof object === 'object') {\n    const cloneObject = {};\n\n    Object.keys(object)\n      .forEach(key => cloneObject[key] = object[key]);\n\n    return cloneObject;\n  }\n  else {\n    return object;\n  }\n}\n\n/**\n * Performs a deep copy of the given object.\n *\n * This only copies enumerable properties.\n *\n * @param {Object} object\n * @returns {Object}\n */\nfunction deepCopy(object) {\n  if (typeof object === 'object') {\n    // Hack: Not a robust copy policy\n    let cloneObject;\n    if (object instanceof Array) {\n      cloneObject = [];\n    }\n    else {\n      cloneObject = {};\n    }\n\n    Object.keys(object)\n      .forEach(key => cloneObject[key] = deepCopy(object[key]));\n\n    return cloneObject;\n  }\n  else {\n    return object;\n  }\n}\n\n/**\n * Converts the given HSL color values to HSV color values.\n *\n * Given and returned values will be in the range of [0, 1].\n *\n * @param {HslColor} hsl\n * @returns {{h:Number,s:Number,v:Number}}\n */\nfunction hslToHsv(hsl) {\n  const temp = hsl.s * (hsl.l < 0.5 ? hsl.l : 1 - hsl.l);\n  return {\n    h: hsl.h,\n    s: 2 * temp / (hsl.l + temp),\n    v: hsl.l + temp\n  };\n}\n\n/**\n * Converts the given HSV color values to HSL color values.\n *\n * Given and returned values will be in the range of [0, 1].\n *\n * @param {{h:Number,s:Number,v:Number}} hsv\n * @returns {HslColor}\n */\nfunction hsvToHsl(hsv) {\n  const temp = (2 - hsv.s) * hsv.v;\n  return {\n    h: hsv.h,\n    s: hsv.s * hsv.v / (temp < 1 ? temp : 2.00000001 - temp),\n    l: temp * 0.5\n  };\n}\n\n/**\n * Converts the given HSL color values to RGB color values.\n *\n * Given and returned values will be in the range of [0, 1].\n *\n * Originally adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n *\n * @param {HslColor} hsl\n * @returns {RgbColor} rgb\n */\nfunction hslToRgb(hsl) {\n  let r;\n  let g;\n  let b;\n\n  if (hsl.s === 0) {\n    // Achromatic.\n    r = hsl.l;\n    g = hsl.l;\n    b = hsl.l;\n  }\n  else {\n    const q = hsl.l < 0.5 ?\n      hsl.l * (1 + hsl.s) :\n      hsl.l + hsl.s - hsl.l * hsl.s;\n    const p = 2 * hsl.l - q;\n\n    r = _hue2Rgb(p, q, hsl.h + 1 / 3);\n    g = _hue2Rgb(p, q, hsl.h);\n    b = _hue2Rgb(p, q, hsl.h - 1 / 3);\n  }\n\n  return {\n    r: r,\n    g: g,\n    b: b\n  };\n}\n\nfunction _hue2Rgb(p, q, t) {\n  if (t < 0) {\n    t++;\n  }\n  else if (t > 1) {\n    t--;\n  }\n\n  if (t < 1 / 6) {\n    return p + (q - p) * 6 * t;\n  }\n  else if (t < 1 / 2) {\n    return q;\n  }\n  else if (t < 2 / 3) {\n    return p + (q - p) * (2 / 3 - t) * 6;\n  }\n  else {\n    return p;\n  }\n}\n\n/**\n * Converts the given RGB color values to HSL color values.\n *\n * Given and returned values will be in the range of [0, 1].\n *\n * Originally adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n *\n * @param {{r:Number,g:Number,b:Number}} rgb\n * @returns {HslColor} hsl\n */\nfunction rgbToHsl(rgb) {\n  const max = Math.max(rgb.r, rgb.g, rgb.b);\n  const min = Math.min(rgb.r, rgb.g, rgb.b);\n  let h;\n  let s;\n  const l = (max + min) / 2;\n\n  if (max === min) {\n    // Achromatic.\n    h = 0;\n    s = 0;\n  }\n  else {\n    const d = max - min;\n    s = l > 0.5 ?\n      d / (2 - max - min) :\n      d / (max + min);\n\n    switch (max) {\n      case rgb.r:\n        h = (rgb.g - rgb.b) / d + (rgb.g < rgb.b ? 6 : 0);\n        break;\n      case rgb.g:\n        h = (rgb.b - rgb.r) / d + 2;\n        break;\n      case rgb.b:\n        h = (rgb.r - rgb.g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return {\n    h: h,\n    s: s,\n    l: l\n  };\n}\n\n/**\n * Creates a valid color string to assign to a CSS property from the given h/s/l color values.\n *\n * Given values should be in the range of [0,1].\n *\n * @param {HslColor} hsl\n * @returns {string}\n */\nfunction createHslColorString(hsl) {\n  return typeof hsl.a !== 'undefined' ?\n    `hsla(${hsl.h * 360},${hsl.s * 100}%,${hsl.l * 100}%,${hsl.a})` :\n    `hsl(${hsl.h * 360},${hsl.s * 100}%,${hsl.l * 100}%)`;\n}\n\n/**\n * Checks the given element and all of its ancestors, and returns the first that contains the\n * given class.\n *\n * @param {?HTMLElement} element\n * @param {string} className\n * @returns {?HTMLElement}\n */\nfunction findClassInSelfOrAncestors(element, className) {\n  while (element) {\n    if (containsClass(element, className)) {\n      return element;\n    }\n  }\n\n  return null;\n}\n\nlet utilStyleSheet;\n\n/**\n * Adds the given style rule to a style sheet for the current document.\n *\n * @param {string} styleRule\n */\nfunction addRuleToStyleSheet(styleRule) {\n  // Create the custom style sheet if it doesn't already exist\n  if (!utilStyleSheet) {\n    utilStyleSheet = document.createElement('style');\n    document.getElementsByTagName('head')[0].appendChild(utilStyleSheet);\n  }\n\n  // Add the given rule to the custom style sheet\n  if (utilStyleSheet.styleSheet) {\n    utilStyleSheet.styleSheet.cssText = styleRule;\n  }\n  else {\n    utilStyleSheet.appendChild(document.createTextNode(styleRule));\n  }\n}\n\nfunction checkForSafari() {\n  return /Safari/i.test(window.navigator.userAgent) && !/Chrome/i.test(window.navigator.userAgent);\n}\n\nfunction checkForIos() {\n  return /iPhone|iPod|iPad/i.test(window.navigator.userAgent);\n}\n\n/**\n * Returns a debounced version of the given function.\n *\n * Even if the debounced function is invoked many times, the wrapped function will only be invoked\n * after the given delay has ellapsed since the last invocation.\n *\n * If isInvokedImmediately is true, then the wrapped function will be triggered at the start of the\n * invocation group rather than at the end.\n *\n * @param {Function} wrappedFunction\n * @param {number} delay In milliseconds.\n * @param {boolean} [isInvokedImmediately=false]\n * @returns {Function}\n */\nfunction debounce(wrappedFunction, delay, isInvokedImmediately = false) {\n  let timeoutId;\n\n  return () => {\n    // Save the context and arguments passed from the client (this will use the values from the\n    // first invocation of the invocation group.\n    const context = this;\n    const args = arguments;\n\n    // Invoke immediately only if this is the first invocation of a group.\n    if (isInvokedImmediately && !timeoutId) {\n      wrappedFunction.apply(context, args);\n    }\n\n    // Reset the delay.\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => {\n      // The invocation group has ended.\n      timeoutId = null;\n      if (!isInvokedImmediately) {\n        wrappedFunction.apply(context, args);\n      }\n    }, delay);\n  };\n}\n\n/**\n * Returns a throttled version of the given function.\n *\n * Even if the throttled function is invoked many times, the wrapped function will only be invoked\n * at each interval of the given delay. After the throttled function stops being invoked, then\n * wrapped function will also stop being invoked.\n *\n * If isInvokedImmediately is true, then the wrapped function will be triggered at the start of the\n * invocation delay rather than at the end.\n *\n * @param {Function} wrappedFunction\n * @param {number} delay In milliseconds.\n * @param {boolean} [isInvokedImmediately=false]\n * @returns {Function}\n */\nfunction throttle(wrappedFunction, delay, isInvokedImmediately = false) {\n  let timeoutId;\n\n  return () => {\n    // Save the context and arguments passed from the client (this will use the values from the\n    // first invocation of the invocation group.\n    const context = this;\n    const args = arguments;\n\n    // Only trigger a new invocation group if we are not already/still waiting on the delay from a\n    // previous invocation.\n    if (!timeoutId) {\n      if (isInvokedImmediately) {\n        wrappedFunction.apply(context, args);\n      }\n\n      // Start the delay.\n      timeoutId = setTimeout(() => {\n        // The invocation group has ended.\n        timeoutId = null;\n        if (!isInvokedImmediately) {\n          wrappedFunction.apply(context, args);\n        }\n      }, delay);\n    }\n  };\n}\n\n/**\n * @param {Array.<*>|String} array\n * @param {*} delimiter\n * @returns {Array.<*>}\n * @private\n */\nfunction _interleave(array, delimiter) {\n  const result = new Array(array.length * 2 - 1);\n  if (array.length) {\n    result.push(array[0]);\n  }\n  for (let i = 1, count = array.length; i < count; i++) {\n    result.push(delimiter);\n    result.push(array[i]);\n  }\n  return result;\n}\n\n/**\n * Loads the given src for the given image.\n *\n * @param {HTMLImageElement} image\n * @param {string} src\n * @returns {Promise.<HTMLImageElement, Error>}\n */\nfunction loadImageSrc(image, src) {\n  return new Promise((resolve, reject) => {\n    console.debug(`Loading image: ${src}`);\n\n    image.addEventListener('load', _ => resolve(image));\n    image.addEventListener('error', reject);\n    image.addEventListener('abort', reject);\n\n    image.src = src;\n  });\n}\n\n/**\n * Loads text from the given URL.\n *\n * @param {string} url\n * @returns {Promise.<String, Error>}\n */\nfunction loadText(url) {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n\n    xhr.addEventListener('load', _ => resolve(xhr.response));\n    xhr.addEventListener('error', reject);\n    xhr.addEventListener('abort', reject);\n\n    console.debug(`Loading text: ${url}`);\n\n    xhr.open('GET', url);\n    xhr.send();\n  });\n}\n\n/**\n * Loads a JSON object from the given URL.\n *\n * @param {string} url\n * @returns {Promise.<Object, Error>}\n */\nfunction loadJson(url) {\n  return loadText(url).then(jsonText => JSON.parse(jsonText));\n}\n\n/**\n * Gets the current stack trace.\n *\n * @returns {string}\n */\nfunction getStackTrace() {\n  return new Error().stack;\n}\n\n/**\n * Freezes the given object and recursively freezes all of its properties.\n *\n * @param {Object} object\n */\nfunction deepFreeze(object) {\n  if (typeof object === 'object') {\n    Object.freeze(object);\n    Object.keys(object).forEach(key => deepFreeze(object[key]));\n  }\n}\n\n/**\n * Creates a GUID.\n *\n * GUID specification: http://www.ietf.org/rfc/rfc4122.txt\n *\n * Logic adopted from http://stackoverflow.com/a/2117523/489568.\n *\n * @returns {string}\n */\nfunction createGuid() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\n/**\n * -11 % 3 === -2\n * mod(-11, 3) === 1\n *\n * @param {number} n\n * @param {number} m\n * @returns {number}\n */\nfunction mod(n, m) {\n  return ((n % m) + m) % m;\n}\n\n/**\n * @param {number} min\n * @param {number} max\n * @returns {number}\n */\nfunction randomFloatInRange(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\n/**\n * @param {number} min Inclusive\n * @param {number} max Exclusive\n * @returns {number}\n */\nfunction randomIntInRange(min, max) {\n  return parseInt(Math.random() * (max - min) + min);\n}\n\n/**\n * @param {Array} list\n * @returns {*}\n */\nfunction pickRandom(list) {\n  return list[randomIntInRange(0, list.length)];\n}\n\n/**\n * Triggers the given callback when either the current tab or the browser window loses/gains focus.\n *\n * @param {Function} focusChangeHandler\n */\nfunction handlePageFocusChange(focusChangeHandler) {\n  // Pause/unpause the app when the tab loses/gains focus.\n  document.addEventListener('visibilitychange', () => focusChangeHandler(!document.hidden));\n  // Pause/unpause the app when the browser window loses/gains focus.\n  window.addEventListener('blur', () => focusChangeHandler(false));\n  window.addEventListener('focus', () => focusChangeHandler(true));\n}\n\n/**\n * Creates an array with all the consecutive numbers from start (inclusive) to end (exclusive).\n *\n * @param {number} start\n * @param {number} end\n * @returns {Array.<Number>}\n */\nfunction range(start, end) {\n  const r = [];\n  for (let i = 0, j = start; j < end; i++, j++) {\n    r[i] = j;\n  }\n  return r;\n}\n\n/**\n * @param {*} value\n * @returns {boolean}\n */\nfunction isInt(value) {\n  return typeof value === 'number' &&\n    isFinite(value) &&\n    parseInt(value) === value;\n}\n\n/**\n * Find the first value in a list that satisfies a predicate.\n *\n * @param {Array} list\n * @param {Function} predicate\n * @returns {*}\n */\nfunction find(list, predicate) {\n  for (var i = 0, count = list.length; i < count; i++) {\n    const value = list[i];\n    if (predicate.call(null, value, i, list)) {\n      return value;\n    }\n  }\n  return null;\n}\n\nconst keyCodes = {\n  'a': 65,\n  'b': 66,\n  'c': 67,\n  'd': 68,\n  'e': 69,\n  'f': 70,\n  'g': 71,\n  'h': 72,\n  'i': 73,\n  'j': 74,\n  'k': 75,\n  'l': 76,\n  'm': 77,\n  'n': 78,\n  'o': 79,\n  'p': 80,\n  'q': 81,\n  'r': 82,\n  's': 83,\n  't': 84,\n  'u': 85,\n  'v': 86,\n  'w': 87,\n  'x': 88,\n  'y': 89,\n  'z': 90,\n  '0': 48,\n  '1': 49,\n  '2': 50,\n  '3': 51,\n  '4': 52,\n  '5': 53,\n  '6': 54,\n  '7': 55,\n  '8': 56,\n  '9': 57,\n  'SPACE': 32,\n  'ENTER': 13,\n  'ESCAPE': 27,\n  'LEFT': 37,\n  'UP': 38,\n  'RIGHT': 39,\n  'DOWN': 40\n};\n\nconst svgNamespace = 'http://www.w3.org/2000/svg';\nconst xlinkNamespace = 'http://www.w3.org/1999/xlink';\n\nexport {\n  isInDevMode,\n  listenToMultipleForMultiple,\n  createElement,\n  containsClass,\n  toggleClass,\n  getPageOffset,\n  getViewportSize,\n  removeChildIfPresent,\n  addClass,\n  removeClass,\n  clearClasses,\n  getTextWidth,\n  encodeQueryString,\n  getQueryStringParameterValue,\n  setTransition,\n  setTransitionDurationSeconds,\n  setTransitionDelaySeconds,\n  setUserSelectNone,\n  removeChildrenWithClass,\n  setTransitionCubicBezierTimingFunction,\n  easingFunctions,\n  inverseEasingFunctions,\n  getXYFromPercentWithBezier,\n  setTransform,\n  shuffle,\n  shallowCopy,\n  deepCopy,\n  hsvToHsl,\n  hslToHsv,\n  hslToRgb,\n  rgbToHsl,\n  createHslColorString,\n  findClassInSelfOrAncestors,\n  addRuleToStyleSheet,\n  checkForSafari,\n  checkForIos,\n  debounce,\n  throttle,\n  loadImageSrc,\n  loadText,\n  loadJson,\n  getStackTrace,\n  deepFreeze,\n  createGuid,\n  mod,\n  randomFloatInRange,\n  randomIntInRange,\n  pickRandom,\n  handlePageFocusChange,\n  range,\n  isInt,\n  find,\n  keyCodes,\n  svgNamespace,\n  xlinkNamespace,\n};\n\n/**\n * @typedef {Object} HslColor\n * @property {Number} h In the range of [0, 1].\n * @property {Number} s In the range of [0, 1].\n * @property {Number} l In the range of [0, 1].\n * @property {Number} [a] In the range of [0, 1].\n */\n\n/**\n * @typedef {Object} RgbColor\n * @property {Number} r In the range of [0, 1].\n * @property {Number} g In the range of [0, 1].\n * @property {Number} b In the range of [0, 1].\n * @property {Number} [a] In the range of [0, 1].\n */\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIuLi9hbmltYXRleC9pbmRleC5qcyIsIi4uL2FuaW1hdGV4L3NyYy9hbmltYXRpb24tam9iLmpzIiwiLi4vYW5pbWF0ZXgvc3JjL2FuaW1hdG9yLmpzIiwiLi4vYW5pbWF0ZXgvc3JjL2ZyYW1lLWxhdGVuY3ktcHJvZmlsZXIuanMiLCIuLi9hbmltYXRleC9zcmMvaW5kZXguanMiLCIuLi9hbmltYXRleC9zcmMvcGVyc2lzdGVudC1hbmltYXRpb24tam9iLmpzIiwiLi4vYW5pbWF0ZXgvc3JjL3RyYW5zaWVudC1hbmltYXRpb24tam9iLmpzIiwiLi4vYW5pbWF0ZXgvc3JjL3V0aWwuanMiLCJub2RlX21vZHVsZXMvbHNsLWFuaW1hdGV4L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2xzbC1hbmltYXRleC9zcmMvYW5pbWF0aW9uLWpvYi5qcyIsIm5vZGVfbW9kdWxlcy9sc2wtYW5pbWF0ZXgvc3JjL2FuaW1hdG9yLmpzIiwibm9kZV9tb2R1bGVzL2xzbC1hbmltYXRleC9zcmMvZnJhbWUtbGF0ZW5jeS1wcm9maWxlci5qcyIsIm5vZGVfbW9kdWxlcy9sc2wtYW5pbWF0ZXgvc3JjL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2xzbC1hbmltYXRleC9zcmMvcGVyc2lzdGVudC1hbmltYXRpb24tam9iLmpzIiwibm9kZV9tb2R1bGVzL2xzbC1hbmltYXRleC9zcmMvdHJhbnNpZW50LWFuaW1hdGlvbi1qb2IuanMiLCJub2RlX21vZHVsZXMvbHNsLWFuaW1hdGV4L3NyYy91dGlsLmpzIiwibm9kZV9tb2R1bGVzL2xzbC1waHlzeC9zcmMvY29sbGlzaW9ucy9jb2xsaWRhYmxlcy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9sc2wtcGh5c3gvc3JjL2NvbGxpc2lvbnMvY29sbGlkYWJsZXMvc3JjL2FhYmItY29sbGlkYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9sc2wtcGh5c3gvc3JjL2NvbGxpc2lvbnMvY29sbGlkYWJsZXMvc3JjL2NhcHN1bGUtY29sbGlkYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9sc2wtcGh5c3gvc3JjL2NvbGxpc2lvbnMvY29sbGlkYWJsZXMvc3JjL2NvbGxpZGFibGUuanMiLCJub2RlX21vZHVsZXMvbHNsLXBoeXN4L3NyYy9jb2xsaXNpb25zL2NvbGxpZGFibGVzL3NyYy9saW5lLXNlZ21lbnQuanMiLCJub2RlX21vZHVsZXMvbHNsLXBoeXN4L3NyYy9jb2xsaXNpb25zL2NvbGxpZGFibGVzL3NyYy9vYmItY29sbGlkYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9sc2wtcGh5c3gvc3JjL2NvbGxpc2lvbnMvY29sbGlkYWJsZXMvc3JjL3NwaGVyZS1jb2xsaWRhYmxlLmpzIiwibm9kZV9tb2R1bGVzL2xzbC1waHlzeC9zcmMvY29sbGlzaW9ucy9jb2xsaXNpb24tZGV0ZWN0aW9uL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2xzbC1waHlzeC9zcmMvY29sbGlzaW9ucy9jb2xsaXNpb24tZGV0ZWN0aW9uL3NyYy9hYWJiLWNvbGxpc2lvbi1kZXRlY3Rpb24uanMiLCJub2RlX21vZHVsZXMvbHNsLXBoeXN4L3NyYy9jb2xsaXNpb25zL2NvbGxpc2lvbi1kZXRlY3Rpb24vc3JjL2NhcHN1bGUtY29sbGlzaW9uLWRldGVjdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9sc2wtcGh5c3gvc3JjL2NvbGxpc2lvbnMvY29sbGlzaW9uLWRldGVjdGlvbi9zcmMvb2JiLWNvbGxpc2lvbi1kZXRlY3Rpb24uanMiLCJub2RlX21vZHVsZXMvbHNsLXBoeXN4L3NyYy9jb2xsaXNpb25zL2NvbGxpc2lvbi1kZXRlY3Rpb24vc3JjL3NwaGVyZS1jb2xsaXNpb24tZGV0ZWN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2xzbC1waHlzeC9zcmMvY29sbGlzaW9ucy9jb250YWN0LWNhbGN1bGF0aW9uL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2xzbC1waHlzeC9zcmMvY29sbGlzaW9ucy9jb250YWN0LWNhbGN1bGF0aW9uL3NyYy9hYWJiLWNvbnRhY3QtY2FsY3VsYXRpb24uanMiLCJub2RlX21vZHVsZXMvbHNsLXBoeXN4L3NyYy9jb2xsaXNpb25zL2NvbnRhY3QtY2FsY3VsYXRpb24vc3JjL2NhcHN1bGUtY29udGFjdC1jYWxjdWxhdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9sc2wtcGh5c3gvc3JjL2NvbGxpc2lvbnMvY29udGFjdC1jYWxjdWxhdGlvbi9zcmMvb2JiLWNvbnRhY3QtY2FsY3VsYXRpb24uanMiLCJub2RlX21vZHVsZXMvbHNsLXBoeXN4L3NyYy9jb2xsaXNpb25zL2NvbnRhY3QtY2FsY3VsYXRpb24vc3JjL3NwaGVyZS1jb250YWN0LWNhbGN1bGF0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2xzbC1waHlzeC9zcmMvY29sbGlzaW9ucy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9sc2wtcGh5c3gvc3JjL2NvbGxpc2lvbnMvc3JjL2NvbGxpZGFibGUtZmFjdG9yaWVzLmpzIiwibm9kZV9tb2R1bGVzL2xzbC1waHlzeC9zcmMvY29sbGlzaW9ucy9zcmMvY29sbGlkYWJsZS1waHlzaWNzLWpvYi5qcyIsIm5vZGVfbW9kdWxlcy9sc2wtcGh5c3gvc3JjL2NvbGxpc2lvbnMvc3JjL2NvbGxpZGFibGUtc3RvcmUuanMiLCJub2RlX21vZHVsZXMvbHNsLXBoeXN4L3NyYy9jb2xsaXNpb25zL3NyYy9jb2xsaXNpb24taGFuZGxlci5qcyIsIm5vZGVfbW9kdWxlcy9sc2wtcGh5c3gvc3JjL2NvbGxpc2lvbnMvc3JjL2NvbGxpc2lvbi11dGlscy5qcyIsIm5vZGVfbW9kdWxlcy9sc2wtcGh5c3gvc3JjL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2xzbC1waHlzeC9zcmMvaW50ZWdyYXRvci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9sc2wtcGh5c3gvc3JjL2ludGVncmF0b3Ivc3JjL2ludGVncmF0b3IuanMiLCJub2RlX21vZHVsZXMvbHNsLXBoeXN4L3NyYy9pbnRlZ3JhdG9yL3NyYy9yazQtaW50ZWdyYXRvci5qcyIsIm5vZGVfbW9kdWxlcy9sc2wtcGh5c3gvc3JjL3NyYy9waHlzaWNzLWVuZ2luZS5qcyIsIm5vZGVfbW9kdWxlcy9sc2wtcGh5c3gvc3JjL3NyYy9waHlzaWNzLWpvYi5qcyIsIm5vZGVfbW9kdWxlcy9sc2wtcGh5c3gvc3JjL3NyYy9waHlzaWNzLXN0YXRlLmpzIiwibm9kZV9tb2R1bGVzL2xzbC1waHlzeC9zcmMvdXRpbC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9sc2wtcGh5c3gvc3JjL3V0aWwvc3JjL2ZvcmNlLXV0aWxzLmpzIiwibm9kZV9tb2R1bGVzL2xzbC1waHlzeC9zcmMvdXRpbC9zcmMvZ2VvbWV0cnkuanMiLCJub2RlX21vZHVsZXMvbHNsLXBoeXN4L3NyYy91dGlsL3NyYy9pbmVydGlhLXRlbnNvci11dGlscy5qcyIsIm5vZGVfbW9kdWxlcy9sc2wtcGh5c3gvc3JjL3V0aWwvc3JjL3V0aWwuanMiLCJzcmMvY2FtZXJhcy9pbmRleC5qcyIsInNyYy9jYW1lcmFzL3NyYy9jYW1lcmEuanMiLCJzcmMvY2FtZXJhcy9zcmMvZmlyc3QtcGVyc29uLWNhbWVyYS5qcyIsInNyYy9jYW1lcmFzL3NyYy9maXhlZC1jYW1lcmEuanMiLCJzcmMvY2FtZXJhcy9zcmMvZml4ZWQtZm9sbG93LWNhbWVyYS5qcyIsInNyYy9jYW1lcmFzL3NyYy9mb2xsb3ctY2FtZXJhLmpzIiwic3JjL2NhbWVyYXMvc3JjL292ZXJoZWFkLWNhbWVyYS5qcyIsInNyYy9jYW1lcmFzL3NyYy90aGlyZC1wZXJzb24tY2FtZXJhLmpzIiwic3JjL2luZGV4LmpzIiwic3JjL21vZGVscy9pbmRleC5qcyIsInNyYy9tb2RlbHMvc3JjL2RlZmF1bHQtbW9kZWwuanMiLCJzcmMvbW9kZWxzL3NyYy9pbnZpc2libGUtbW9kZWwtY29udHJvbGxlci5qcyIsInNyYy9tb2RlbHMvc3JjL21vZGVsLWNvbnRyb2xsZXIuanMiLCJzcmMvbW9kZWxzL3NyYy9tb2RlbC1ncm91cC1jb250cm9sbGVyLmpzIiwic3JjL21vZGVscy9zcmMvbW9kZWwuanMiLCJzcmMvbW9kZWxzL3NyYy9zdGFuZGFyZC1tb2RlbC1jb250cm9sbGVyLmpzIiwic3JjL3Byb2dyYW0td3JhcHBlci9pbmRleC5qcyIsInNyYy9wcm9ncmFtLXdyYXBwZXIvc3JjL2dyb3VwLXByb2dyYW0td3JhcHBlci5qcyIsInNyYy9wcm9ncmFtLXdyYXBwZXIvc3JjL3Byb2dyYW0td3JhcHBlci1zdG9yZS5qcyIsInNyYy9wcm9ncmFtLXdyYXBwZXIvc3JjL3Byb2dyYW0td3JhcHBlci5qcyIsInNyYy9wcm9ncmFtLXdyYXBwZXIvc3JjL3RleHR1cmUtc3RvcmUuanMiLCJzcmMvcHJvZ3JhbS13cmFwcGVyL3NyYy91bmlmb3JtLXNldHRlci5qcyIsInNyYy9yZW5kZXJhYmxlLXNoYXBlcy9pbmRleC5qcyIsInNyYy9yZW5kZXJhYmxlLXNoYXBlcy9zcmMvcmVuZGVyYWJsZS1zaGFwZS1mYWN0b3J5LmpzIiwic3JjL3JlbmRlcmFibGUtc2hhcGVzL3NyYy9yZW5kZXJhYmxlLXNoYXBlLXN0b3JlLmpzIiwic3JjL3JlbmRlcmFibGUtc2hhcGVzL3NyYy9zaGFwZS1jb25maWdzL2NhcHN1bGUtcmVuZGVyYWJsZS1zaGFwZS5qcyIsInNyYy9yZW5kZXJhYmxlLXNoYXBlcy9zcmMvc2hhcGUtY29uZmlncy9jdWJlLXJlbmRlcmFibGUtc2hhcGUuanMiLCJzcmMvcmVuZGVyYWJsZS1zaGFwZXMvc3JjL3NoYXBlLWNvbmZpZ3MvaWNvc2FoZWRyb24tcmVuZGVyYWJsZS1zaGFwZS5qcyIsInNyYy9yZW5kZXJhYmxlLXNoYXBlcy9zcmMvc2hhcGUtY29uZmlncy9pY29zcGhlcmUtcmVuZGVyYWJsZS1zaGFwZS5qcyIsInNyYy9yZW5kZXJhYmxlLXNoYXBlcy9zcmMvc2hhcGUtY29uZmlncy9sYXQtbG9uZy1zcGhlcmUtcmVuZGVyYWJsZS1zaGFwZS5qcyIsInNyYy9yZW5kZXJhYmxlLXNoYXBlcy9zcmMvc2hhcGUtY29uZmlncy90ZXRyYWhlZHJvbi1yZW5kZXJhYmxlLXNoYXBlLmpzIiwic3JjL3NyYy9ncmFmeC1jb250cm9sbGVyLmpzIiwic3JjL3NyYy9saWdodC5qcyIsInNyYy9zcmMvc2NlbmUuanMiLCJzcmMvdXRpbC9pbmRleC5qcyIsInNyYy91dGlsL3NyYy9nZW9tZXRyeS5qcyIsInNyYy91dGlsL3NyYy9nbC11dGlsLmpzIiwic3JjL3V0aWwvc3JjL2hhc2gtbWFwLmpzIiwic3JjL3V0aWwvc3JjL3V0aWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztBQ0FBLE9BQUEsSUFBQSxDQUFBLElBQUEsRUFBQSxPQUFBLENBQUEsVUFBQSxHQUFBLEVBQUE7QUFBQSxNQUFBLFFBQUEsU0FBQSxJQUFBLFFBQUEsWUFBQSxFQUFBO0FBQUEsU0FBQSxjQUFBLENBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQTtBQUFBLGdCQUFBLElBQUE7QUFBQSxTQUFBLFNBQUEsR0FBQSxHQUFBO0FBQUEsYUFBQSxLQUFBLEdBQUEsQ0FBQTtBQUFBO0FBQUEsR0FBQTtBQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNBQTs7Ozs7SUFLTSxlO0FBQ0o7OztBQUdBLFdBQUEsWUFBQSxDQUFBLFVBQUEsRUFBd0I7QUFBQSxvQkFBQSxJQUFBLEVBQUEsWUFBQTs7QUFDdEI7QUFDQSxRQUFJLElBQUEsTUFBQSxLQUFKLFlBQUEsRUFBaUM7QUFDL0IsWUFBTSxJQUFBLFNBQUEsQ0FBTixrREFBTSxDQUFOO0FBQ0Q7O0FBRUQsU0FBQSxVQUFBLEdBQUEsQ0FBQTtBQUNBLFNBQUEsV0FBQSxHQUFBLElBQUE7QUFDQSxTQUFBLFdBQUEsR0FBQSxVQUFBO0FBQ0Q7O0FBRUQ7Ozs7Ozs7OztBQVNBOzs7OzswQkFLTSxTLEVBQVc7QUFDZixXQUFBLFVBQUEsR0FBQSxTQUFBO0FBQ0EsV0FBQSxXQUFBLEdBQUEsS0FBQTtBQUNEOztBQUVEOzs7Ozs7Ozs7Ozs7MkJBU08sVyxFQUFhLFMsRUFBVztBQUM3QjtBQUNBLFlBQU0sSUFBQSxTQUFBLENBQU4sd0JBQU0sQ0FBTjtBQUNEOztB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QUFBO0FBREYsU0FBQSxNQUVPO0FBQ0wsa0JBQUEsS0FBQSxDQUFBLE9BQUE7QUFDRDtBQUNGO0FBQ0Y7Ozs7OztRQUdLLG9CLEdBQUEsb0I7Ozs7Ozs7Ozs7O0FDekVSLE9BQUEsSUFBQSxDQUFBLGFBQUEsRUFBQSxPQUFBLENBQUEsVUFBQSxHQUFBLEVBQUE7QUFBQSxNQUFBLFFBQUEsU0FBQSxJQUFBLFFBQUEsWUFBQSxFQUFBO0FBQUEsU0FBQSxjQUFBLENBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQTtBQUFBLGdCQUFBLElBQUE7QUFBQSxTQUFBLFNBQUEsR0FBQSxHQUFBO0FBQUEsYUFBQSxjQUFBLEdBQUEsQ0FBQTtBQUFBO0FBQUEsR0FBQTtBQUFBLENBQUE7Ozs7QUFDQSxPQUFBLElBQUEsQ0FBQSxTQUFBLEVBQUEsT0FBQSxDQUFBLFVBQUEsR0FBQSxFQUFBO0FBQUEsTUFBQSxRQUFBLFNBQUEsSUFBQSxRQUFBLFlBQUEsRUFBQTtBQUFBLFNBQUEsY0FBQSxDQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUE7QUFBQSxnQkFBQSxJQUFBO0FBQUEsU0FBQSxTQUFBLEdBQUEsR0FBQTtBQUFBLGFBQUEsVUFBQSxHQUFBLENBQUE7QUFBQTtBQUFBLEdBQUE7QUFBQSxDQUFBOzs7O0FBQ0EsT0FBQSxJQUFBLENBQUEscUJBQUEsRUFBQSxPQUFBLENBQUEsVUFBQSxHQUFBLEVBQUE7QUFBQSxNQUFBLFFBQUEsU0FBQSxJQUFBLFFBQUEsWUFBQSxFQUFBO0FBQUEsU0FBQSxjQUFBLENBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQTtBQUFBLGdCQUFBLElBQUE7QUFBQSxTQUFBLFNBQUEsR0FBQSxHQUFBO0FBQUEsYUFBQSxzQkFBQSxHQUFBLENBQUE7QUFBQTtBQUFBLEdBQUE7QUFBQSxDQUFBOzs7O0FBQ0EsT0FBQSxJQUFBLENBQUEsdUJBQUEsRUFBQSxPQUFBLENBQUEsVUFBQSxHQUFBLEVBQUE7QUFBQSxNQUFBLFFBQUEsU0FBQSxJQUFBLFFBQUEsWUFBQSxFQUFBO0FBQUEsU0FBQSxjQUFBLENBQUEsT0FB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VUFBQSxHQUFBLEVBQUE7QUFBQSxNQUFBLFFBQUEsU0FBQSxJQUFBLFFBQUEsWUFBQSxFQUFBO0FBQUEsU0FBQSxjQUFBLENBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQTtBQUFBLGdCQUFBLElBQUE7QUFBQSxTQUFBLFNBQUEsR0FBQSxHQUFBO0FBQUEsYUFBQSxtQkFBQSxHQUFBLENBQUE7QUFBQTtBQUFBLEdBQUE7QUFBQSxDQUFBOzs7O0FBQ0EsT0FBQSxJQUFBLENBQUEsWUFBQSxFQUFBLE9BQUEsQ0FBQSxVQUFBLEdBQUEsRUFBQTtBQUFBLE1BQUEsUUFBQSxTQUFBLElBQUEsUUFBQSxZQUFBLEVBQUE7QUFBQSxTQUFBLGNBQUEsQ0FBQSxPQUFBLEVBQUEsR0FBQSxFQUFBO0FBQUEsZ0JBQUEsSUFBQTtBQUFBLFNBQUEsU0FBQSxHQUFBLEdBQUE7QUFBQSxhQUFBLGFBQUEsR0FBQSxDQUFBO0FBQUE7QUFBQSxHQUFBO0FBQUEsQ0FBQTs7OztBQUNBLE9BQUEsSUFBQSxDQUFBLGtCQUFBLEVBQUEsT0FBQSxDQUFBLFVBQUEsR0FBQSxFQUFBO0FBQUEsTUFBQSxRQUFBLFNBQUEsSUFBQSxRQUFBLFlBQUEsRUFBQTtBQUFBLFNBQUEsY0FBQSxDQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUE7QUFBQSxnQkFBQSxJQUFBO0FBQUEsU0FBQSxTQUFBLEdBQUEsR0FBQTtBQUFBLGFBQUEsbUJBQUEsR0FBQSxDQUFBO0FBQUE7QUFBQSxHQUFBO0FBQUEsQ0FBQTs7OztBQUNBLE9BQUEsSUFBQSxDQUFBLGFBQUEsRUFBQSxPQUFBLENBQUEsVUFBQSxHQUFBLEVBQUE7QUFBQSxNQUFBLFFBQUEsU0FBQSxJQUFBLFFBQUEsWUFBQSxFQUFBO0FBQUEsU0FBQSxjQUFBLENBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQTtBQUFBLGdCQUFBLElBQUE7QUFBQSxTQUFBLFNBQUEsR0FBQSxHQUFBO0FBQUEsYUFBQSxjQUFBLEdBQUEsQ0FBQTtBQUFBO0FBQUEsR0FBQTtBQUFBLENBQUE7Ozs7QUFDQSxPQUFBLElBQUEsQ0FBQSxrQkFBQSxFQUFBLE9BQUEsQ0FBQSxVQUFBLEdBQUEsRUFBQTtBQUFBLE1BQUEsUUFBQSxTQUFBLElBQUEsUUFBQSxZQUFBLEVBQUE7QUFBQSxTQUFBLGNBQUEsQ0FBQSxPQUFBLEVBQUEsR0FBQSxFQUFBO0FBQUEsZ0JBQUEsSUFBQTtBQUFBLFNBQUEsU0FBQSxHQUFBLEdBQUE7QUFBQSxhQUFBLG1CQUFBLEdBQUEsQ0FBQTtBQUFBO0FBQUEsR0FBQTtBQUFBLENBQUE7Ozs7QUFDQSxPQUFBLElBQUEsQ0FBQSxlQUFBLEVBQUEsT0FBQSxDQUFBLFVBQUEsR0FBQSxFQUFBO0FBQUEsTUFBQSxRQUFBLFNBQUEsSUFBQSxRQUFBLFlBQUEsRUFBQTtBQUFBLFNBQUEsY0FBQSxDQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUE7QUFBQSxnQkFBQSxJQUFBO0FBQUEsU0FBQSxTQUFBLEdBQUEsR0FBQTtBQUFBLGFBQUEsZ0JBQUEsR0FBQSxDQUFBO0FBQUE7QUFBQSxHQUFBO0FBQUEsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ05BLElBQUEsZUFBQSxRQUFBLGNBQUEsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOzs7OztJQUtNLFM7OztBQUNKOzs7Ozs7O0FBT0EsV0FBQSxNQUFBLENBQUEsWUFBQSxFQUFBLFNBQUEsRUFBcUM7QUFBQSxvQkFBQSxJQUFBLEVBQUEsTUFBQTs7QUFHbkM7QUFIbUMsUUFBQSxRQUFBLDJCQUFBLElBQUEsRUFBQSxDQUFBLE9BQUEsU0FBQSxJQUFBLE9BQUEsY0FBQSxDQUFBLE1BQUEsQ0FBQSxFQUFBLElBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQTs7QUFJbkMsUUFBSSxJQUFBLE1BQUEsS0FBSixNQUFBLEVBQTJCO0FBQ3pCLFlBQU0sSUFBQSxTQUFBLENBQU4sNENBQU0sQ0FBTjtBQUNEOztBQUVELFVBQUEsYUFBQSxHQUFBLFlBQUE7QUFDQSxVQUFBLEtBQUEsR0FBQSxJQUFBO0FBQ0EsVUFBQSxZQUFBLEdBQUEsSUFBQTtBQUNBLFVBQUEsTUFBQSxHQUFBLElBQUE7QUFDQSxVQUFBLEtBQUEsR0FBQSxJQUFBO0FBQ0EsVUFBQSxTQUFBLEdBQWlCLEtBQWpCLE1BQWlCLEVBQWpCO0FBQ0EsVUFBQSxZQUFBLEdBQW9CLEtBZGUsTUFjZixFQUFwQixDQWRtQyxDQWNBO0FBQ25DLFVBQUEsV0FBQSxHQUFtQixLQUFuQixNQUFtQixFQUFuQjtBQUNBLFVBQUEsaUJBQUEsR0FBeUIsS0FBekIsTUFBeUIsRUFBekI7QUFDQSxVQUFBLHFCQUFBLEdBQTZCLEtBQTdCLE1BQTZCLEVBQTdCOztBQUVBLFVBQUEsZUFBQSxDQUFBLFNBQUE7QUFuQm1DLFdBQUEsS0FBQTtBQW9CcEM7Ozs7NEJBRU87QUFDTixXQUFBLGVBQUEsQ0FBcUIsS0FBQSxhQUFBLENBQXJCLElBQUEsRUFBOEMsS0FBQSxhQUFBLENBQTlDLGtCQUFBLEVBQ0UsS0FBQSxhQUFBLENBREYsS0FBQSxFQUM0QixLQUFBLGFBQUEsQ0FENUIsSUFBQTtBQUVEOztBQUVEOzs7OzhCQUNVLENBQUU7O0FBRVo7Ozs7Ozs7Ozs7OzswQ0FTc0IsRyxFQUFLLE0sRUFBUSxFLEVBQUksYSxFQUFlO0FBQ3BELFdBQUEsSUFBQSxDQUFVLEtBQVYsU0FBQSxFQUFBLEdBQUE7QUFDQSxXQUFBLDZCQUFBLENBQUEsTUFBQSxFQUFBLEVBQUEsRUFBQSxhQUFBO0FBQ0Q7O0FBRUQ7Ozs7Ozs7Ozs7O2tEQVE4QixNLEVBQVEsRSxFQUFJLGEsRUFBZTtBQUN2RCxXQUFBLE1BQUEsQ0FBWSxLQUFaLFdBQUEsRUFBOEIsS0FBOUIsU0FBQSxFQUFBLE1BQUEsRUFBQSxFQUFBO0FBQ0EsV0FBQSxVQUFBLENBQWdCLEtBQWhCLFlBQUEsRUFBbUMsS0FBQSxhQUFBLENBQW5DLHVCQUFBLEVBRnVELGFBRXZELEVBRnVELENBRXdDO0FBQy9GLFdBQUEsMkJBQUE7QUFDRDs7QUFFRDs7Ozs7Ozs7OytCQU1XLFcsRUFBYTtBQUN0QixXQUFBLEdBQUEsQ0FBUyxLQUFULFNBQUEsRUFBeUIsS0FBekIsU0FBQSxFQUFBLFdBQUE7QUFDRDs7QUFFRDs7Ozs7Ozs7OzRCQU1RLFEsRUFBVSxDQUVqQjtBQURDOzs7QUFHRjs7Ozs7Ozs7OztvQ0FPZ0IsSSxFQUFNLFcsRUFBYSxLLEVBQU8sSSxFQUFNO0FBQzlDLFdBQUEsS0FBQSxHQUFBLElBQUE7QUFDQSxXQUFBLFlBQUEsR0FBQSxXQUFBO0FBQ0EsV0FBQSxNQUFBLEdBQUEsS0FBQTtBQUNBLFdBQUEsS0FBQSxHQUFBLElBQUE7QUFDQSxXQUFBLHVCQUFBO0FBQ0Q7O0FBRUQ7Ozs7Ozs7Ozs4Q0FNMEI7QUFDeEIsV0FBQSxXQUFBLENBQ0UsS0FERixpQkFBQSxFQUMwQixLQUQxQixLQUFBLEVBQ3NDLEtBRHRDLFlBQUEsRUFDeUQsS0FEekQsTUFBQSxFQUNzRSxLQUR0RSxLQUFBO0FBRUEsV0FBQSwyQkFBQTtBQUNEOztBQUVEOzs7Ozs7Ozs7a0RBTThCO0FBQzVCLFdBQUEsUUFBQSxDQUFjLEtBQWQscUJBQUEsRUFBMEMsS0FBMUMsaUJBQUEsRUFBa0UsS0FBbEUsV0FBQTtBQUNEOztBQUVEOzs7Ozs7OzsyQkFLTyxXLEVBQWEsUyxFQUFXO0FBQzdCO0FBQ0EsWUFBTSxJQUFBLFNBQUEsQ0FBTix3QkFBTSxDQUFOO0FBQ0Q7OzsyQkFFTSxDQUFFOztBQUVUOzs7Ozs7OztBQXNDQTs7Ozs7O29DQU1nQixTLEVBQVc7QUFDekIsVUFBSSxDQUFKLFNBQUEsRUFBZ0I7QUFDZDtBQUNEO0FBQ0QsV0FBQSxLQUFBLEdBQWEsVUFBYixLQUFBO0FBQ0EsV0FBQSxZQUFBLEdBQW9CLFVBQXBCLFlBQUE7QUFDQSxXQUFBLE1BQUEsR0FBYyxVQUFkLE1BQUE7QUFDQSxXQUFBLEtBQUEsR0FBYSxVQUFiLEtBQUE7QUFDQSxXQUFBLElBQUEsQ0FBVSxLQUFWLFNBQUEsRUFBMEIsVUFBMUIsU0FBQTtBQUNBLFdBQUEsSUFBQSxDQUFVLEtBQVYsWUFBQSxFQUE2QixVQUE3QixZQUFBO0FBQ0EsV0FBQSxJQUFBLENBQVUsS0FBVixXQUFBLEVBQTRCLFVBQTVCLFdBQUE7QUFDQSxXQUFBLElBQUEsQ0FBVSxLQUFWLGlCQUFBLEVBQWtDLFVBQWxDLGlCQUFBO0FBQ0EsV0FBQSxJQUFBLENBQVUsS0FBVixxQkFBQSxFQUFzQyxVQUF0QyxxQkFBQTtBQUNEOzs7c0JBckRPLEksRUFBTTtBQUNaLFdBQUEsS0FBQSxHQUFBLElBQUE7QUFDQSxXQUFBLHVCQUFBO0FBQ0Q7O0FBRUQ7Ozs7OztzQkFHZ0IsVyxFQUFhO0FBQzNCLFdBQUEsZUFBQSxDQUFxQixLQUFBLGFBQUEsQ0FBckIsSUFBQSxFQUFBLFdBQUEsRUFBMkQsS0FBQSxhQUFBLENBQTNELEtBQUEsRUFDRSxLQUFBLGFBQUEsQ0FERixJQUFBO0FBRUQ7O0FBRUQ7Ozs7d0JBQ2U7QUFDYixhQUFPLEtBQVAsU0FBQTtBQUNEO0FBQ0Q7Ozs7d0JBQ2tCO0FBQ2hCLGFBQU8sS0FBUCxZQUFBO0FBQ0Q7QUFDRDs7Ozt3QkFDaUI7QUFDZixhQUFPLEtBQVAsV0FBQTtBQUNEO0FBQ0Q7Ozs7d0JBQ3VCO0FBQ3JCLGFBQU8sS0FBUCxpQkFBQTtBQUNEO0FBQ0Q7Ozs7d0JBQzJCO0FBQUU7QUFDM0IsYUFBTyxLQUFQLHFCQUFBO0FBQ0Q7Ozs7RUEzS2tCLGFBQUEsc0I7O1FBbU1aLE0sR0FBQSxNOztBQUVUOzs7Ozs7Ozs7QUFTQTs7Ozs7Ozs7OztBQVVBOzs7Ozs7O0FBT0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzNPQSxJQUFBLFVBQUEsUUFBQSxVQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7Ozs7O0lBS00sb0I7OztBQUNKOzs7Ozs7QUFNQSxXQUFBLGlCQUFBLENBQUEsWUFBQSxFQUFBLHVCQUFBLEVBQUEsWUFBQSxFQUFBLFNBQUEsRUFBNEU7QUFBQSxvQkFBQSxJQUFBLEVBQUEsaUJBQUE7O0FBQUEsUUFBQSxRQUFBLDJCQUFBLElBQUEsRUFBQSxDQUFBLGtCQUFBLFNBQUEsSUFBQSxPQUFBLGNBQUEsQ0FBQSxpQkFBQSxDQUFBLEVBQUEsSUFBQSxDQUFBLElBQUEsRUFBQSxZQUFBLEVBQUEsU0FBQSxDQUFBLENBQUE7O0FBRTFFLFVBQUEsYUFBQSxHQUFBLFlBQUE7QUFDQSxVQUFBLHdCQUFBLEdBQUEsdUJBQUE7QUFDQSxVQUFBLGFBQUEsR0FBQSxZQUFBO0FBSjBFLFdBQUEsS0FBQTtBQUszRTs7QUFFRDs7Ozs7OzsyQkFJTyxXLEVBQWEsUyxFQUFXO0FBQzdCLFdBQUEsZUFBQTtBQUNBLFdBQUEsa0JBQUE7QUFDRDs7QUFFRDs7Ozs7O3NDQUdrQjtBQUNoQixVQUFNLG1CQUFtQixLQUF6QixvQkFBeUIsRUFBekI7QUFDQSxXQUFBLElBQUEsQ0FBVSxLQUFWLFNBQUEsRUFBQSxnQkFBQTtBQUNEOztBQUVEOzs7Ozs7Ozs7eUNBTXFCO0FBQ25CO0FBQ0EsVUFBTSxnQkFBZ0IsS0FBdEIsTUFBc0IsRUFBdEI7QUFDQSxXQUFBLElBQUEsQ0FBQSxhQUFBLEVBQXlCLEtBQUEsd0JBQUEsQ0FBekIsYUFBQTtBQUNBLFdBQUEsYUFBQSxDQUFBLGFBQUEsRUFBQSxhQUFBLEVBQWlELEtBQUEsYUFBQSxDQUFqRCxXQUFBOztBQUVBLFVBQU0sU0FBUyxLQUFmLE1BQWUsRUFBZjtBQUNBLFdBQUEsV0FBQSxDQUFBLE1BQUEsRUFBeUIsS0FBekIsU0FBQSxFQUFBLGFBQUEsRUFDRSxLQUFBLHdCQUFBLENBREYsY0FBQTs7QUFHQTtBQUNBLFVBQU0sS0FBSyxLQUFBLFVBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFYLENBQVcsQ0FBWDs7QUFFQTtBQUNBLFdBQUEsYUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEVBQTJCLEtBQUEsYUFBQSxDQUEzQixXQUFBOztBQUVBLFVBQU0sUUFBUSxLQUFkLE1BQWMsRUFBZDtBQUNBLFdBQUEsS0FBQSxDQUFBLEtBQUEsRUFBQSxhQUFBLEVBQUEsRUFBQTs7QUFFQTtBQUNBLFdBQUEsS0FBQSxDQUFBLEVBQUEsRUFBQSxLQUFBLEVBQUEsYUFBQTs7QUFFQSxXQUFBLHFCQUFBLENBQTJCLEtBQTNCLFNBQUEsRUFBQSxNQUFBLEVBQUEsRUFBQSxFQUFBLGFBQUE7QUFDRDs7QUFFRDs7Ozs7Ozs7Ozs7MkNBUXVCO0FBQ3JCLFVBQU0sbUJBQW1CLEtBQXpCLE1BQXlCLEVBQXpCO0FBQ0EsV0FBQSxhQUFBLENBQUEsZ0JBQUEsRUFFRSxLQUFBLHdCQUFBLENBRkYsOEJBQUEsRUFHRSxLQUFBLGFBQUEsQ0FIRixjQUFBO0FBSUEsYUFBQSxnQkFBQTtBQUNEOzs7O0VBN0U2QixRQUFBLE07O1FBZ0Z2QixpQixHQUFBLGlCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3ZGVCxJQUFBLFVBQUEsUUFBQSxVQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7Ozs7OztJQU1NLGM7OztBQUNKOzs7Ozs7OztBQVFBLFdBQUEsV0FBQSxDQUFBLGlCQUFBLEVBQUEsWUFBQSxFQUFBLFNBQUEsRUFBd0Q7QUFBQSxvQkFBQSxJQUFBLEVBQUEsV0FBQTs7QUFBQSxRQUFBLFFBQUEsMkJBQUEsSUFBQSxFQUFBLENBQUEsWUFBQSxTQUFBLElBQUEsT0FBQSxjQUFBLENBQUEsV0FBQSxDQUFBLEVBQUEsSUFBQSxDQUFBLElBQUEsRUFBQSxZQUFBLEVBQUEsU0FBQSxDQUFBLENBQUE7O0FBR3RELFVBQUEsU0FBQSxHQUFpQixrQkFBakIsUUFBQTtBQUNBLFVBQUEsY0FBQSxHQUFzQixrQkFBdEIsYUFBQTtBQUNBLFVBQUEsR0FBQSxHQUFXLGtCQUFYLEdBQUE7QUFDQSxVQUFBLFFBQUEsR0FBZ0IsS0FBaEIsTUFBZ0IsRUFBaEI7QUFOc0QsV0FBQSxLQUFBO0FBT3ZEOzs7OzRCQUVPO0FBQ04sV0FBQSxZQUFBLFNBQUEsQ0FBQSxTQUFBLElBQUEsT0FBQSxjQUFBLENBQUEsWUFBQSxTQUFBLENBQUEsRUFBQSxPQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsQ0FBQSxJQUFBO0FBQ0EsV0FBQSxPQUFBO0FBQ0Q7O0FBRUQ7Ozs7Ozs7MkJBSU8sVyxFQUFhLFMsRUFBVyxDQUFFOzs7OEJBRXZCO0FBQ1IsV0FBQSxTQUFBLENBQWUsS0FBZixjQUFBLEVBQW9DLEtBQXBDLGNBQUE7QUFDQSxXQUFBLFNBQUEsQ0FBZSxLQUFmLEdBQUEsRUFBeUIsS0FBekIsR0FBQTs7QUFFQTtBQUNBLFVBQU0sUUFBUSxLQUFkLE1BQWMsRUFBZDtBQUNBLFdBQUEsS0FBQSxDQUFBLEtBQUEsRUFBa0IsS0FBbEIsY0FBQSxFQUF1QyxLQUF2QyxHQUFBO0FBQ0EsV0FBQSxLQUFBLENBQVcsS0FBWCxHQUFBLEVBQUEsS0FBQSxFQUE0QixLQUE1QixjQUFBOztBQUVBLFdBQUEscUJBQUEsQ0FBMkIsS0FBM0IsU0FBQSxFQUEyQyxLQUEzQyxPQUFBLEVBQXlELEtBQXpELEdBQUEsRUFBbUUsS0FBbkUsY0FBQTtBQUNEOztBQUVEOzs7OztBQXdDQTs7OztvQ0FJZ0IsUyxFQUFXO0FBQ3pCLFdBQUEsWUFBQSxTQUFBLENBQUEsU0FBQSxJQUFBLE9BQUEsY0FBQSxDQUFBLFlBQUEsU0FBQSxDQUFBLEVBQUEsaUJBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxDQUFBLElBQUEsRUFBQSxTQUFBO0FBQ0EsVUFBSSxxQkFBSixXQUFBLEVBQXNDO0FBQ3BDLGFBQUEsSUFBQSxDQUFVLEtBQVYsY0FBQSxFQUErQixVQUEvQixjQUFBO0FBQ0EsYUFBQSxJQUFBLENBQVUsS0FBVixHQUFBLEVBQW9CLFVBQXBCLEdBQUE7QUFDRDtBQUNGOzs7c0JBakRpQixZLEVBQWM7QUFDOUIsV0FBQSxJQUFBLENBQVUsS0FBVixjQUFBLEVBQUEsWUFBQTtBQUNBLFdBQUEsT0FBQTtBQUNEOztBQUVEOztNQWtCQTt3QkFDb0I7QUFDbEIsYUFBTyxLQUFQLGNBQUE7QUFDRDtBQUNEOzs7O3NCQXJCTyxLLEVBQU87QUFDWixXQUFBLElBQUEsQ0FBVSxLQUFWLEdBQUEsRUFBQSxLQUFBO0FBQ0EsV0FBQSxPQUFBO0FBQ0Q7O0FBRUQ7OzBCQWlCUztBQUNQLGFBQU8sS0FBUCxHQUFBO0FBQ0Q7QUFDRDs7Ozs7OztzQkFuQmEsVyxFQUFhO0FBQ3hCLFdBQUEsSUFBQSxDQUFVLEtBQVYsU0FBQSxFQUFBLFdBQUE7QUFDQSxXQUFBLE9BQUE7QUFDRDs7QUFFRDtBQUNBOzswQkFDZTtBQUNiLGFBQU8sS0FBUCxTQUFBO0FBQ0Q7Ozt3QkFjYTtBQUNaLGFBQU8sS0FBQSxHQUFBLENBQVMsS0FBVCxRQUFBLEVBQXdCLEtBQXhCLFNBQUEsRUFBd0MsS0FBL0MsY0FBTyxDQUFQO0FBQ0Q7Ozs7RUEvRXVCLFFBQUEsTTs7UUE4RmxCLFcsR0FBQSxXOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDdEdSLElBQUEsZ0JBQUEsUUFBQSxpQkFBQSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBOzs7Ozs7OztJQVFNLG9COzs7Ozs7Ozs7Ozs7QUFDSjs7OzsyQkFJTyxXLEVBQWEsUyxFQUFXO0FBQzdCLFdBQUEsZUFBQTtBQUNBLFdBQUEsa0JBQUE7QUFDRDs7QUFFRDs7Ozs7O3NDQUdrQjtBQUNoQixVQUFNLG1CQUFtQixLQUF6QixvQkFBeUIsRUFBekI7QUFDQSxXQUFBLElBQUEsQ0FBVSxLQUFWLFNBQUEsRUFBQSxnQkFBQTtBQUNEOzs7O0VBaEI2QixjQUFBLFk7O1FBbUJ4QixpQixHQUFBLGlCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDN0JSLElBQUEscUJBQUEsUUFBQSx1QkFBQSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBOzs7OztJQUtNLGU7Ozs7Ozs7Ozs7OztBQUNKOzs7Ozs7eUNBTXFCO0FBQ25CLFVBQU0sU0FBUyxLQUFBLGFBQUEsQ0FBZixRQUFBOztBQUVBLFVBQU0sZ0JBQWdCLEtBQXRCLE1BQXNCLEVBQXRCO0FBQ0EsV0FBQSxRQUFBLENBQUEsYUFBQSxFQUFBLE1BQUEsRUFBcUMsS0FBckMsU0FBQTtBQUNBLFdBQUEsU0FBQSxDQUFBLGFBQUEsRUFBQSxhQUFBOztBQUVBO0FBQ0EsVUFBTSxLQUFLLEtBQUEsVUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQVgsQ0FBVyxDQUFYOztBQUVBO0FBQ0EsV0FBQSxhQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBMkIsS0FBQSxhQUFBLENBQTNCLFdBQUE7O0FBRUEsVUFBTSxRQUFRLEtBQWQsTUFBYyxFQUFkO0FBQ0EsV0FBQSxLQUFBLENBQUEsS0FBQSxFQUFBLGFBQUEsRUFBQSxFQUFBOztBQUVBO0FBQ0EsV0FBQSxLQUFBLENBQUEsRUFBQSxFQUFBLEtBQUEsRUFBQSxhQUFBOztBQUVBLFdBQUEscUJBQUEsQ0FBMkIsS0FBM0IsU0FBQSxFQUFBLE1BQUEsRUFBQSxFQUFBLEVBQUEsYUFBQTtBQUNEOzs7O0VBM0J3QixtQkFBQSxpQjs7UUE4Qm5CLFksR0FBQSxZOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3JDUixJQUFBLHFCQUFBLFFBQUEsdUJBQUEsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQTs7Ozs7Ozs7O0lBU00saUI7OztBQUNKOzs7Ozs7Ozs7QUFTQSxXQUFBLGNBQUEsQ0FBQSxZQUFBLEVBQUEsa0JBQUEsRUFBQSxZQUFBLEVBQUEsU0FBQSxFQUF1RTtBQUFBLG9CQUFBLElBQUEsRUFBQSxjQUFBOztBQUFBLFFBQUEsUUFBQSwyQkFBQSxJQUFBLEVBQUEsQ0FBQSxlQUFBLFNBQUEsSUFBQSxPQUFBLGNBQUEsQ0FBQSxjQUFBLENBQUEsRUFBQSxJQUFBLENBQUEsSUFBQSxFQUFBLFlBQUEsRUFBQSxrQkFBQSxFQUFBLFlBQUEsRUFBQSxTQUFBLENBQUEsQ0FBQTs7QUFHckUsVUFBQSxLQUFBO0FBSHFFLFdBQUEsS0FBQTtBQUl0RTs7Ozs0QkFFTztBQUNOLFdBQUEsZUFBQSxTQUFBLENBQUEsU0FBQSxJQUFBLE9BQUEsY0FBQSxDQUFBLGVBQUEsU0FBQSxDQUFBLEVBQUEsT0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLENBQUEsSUFBQTtBQUNEOztBQUVEOzs7OztFQXBCMkIsbUJBQUEsaUI7O1FBdUJyQixjLEdBQUEsYzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2xDUixJQUFBLFVBQUEsUUFBQSxVQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7Ozs7Ozs7SUFPTSxvQjs7O0FBQ0o7Ozs7Ozs7OztBQVNBLFdBQUEsaUJBQUEsQ0FBQSxZQUFBLEVBQUEsa0JBQUEsRUFBQSxZQUFBLEVBQUEsU0FBQSxFQUF1RTtBQUFBLG9CQUFBLElBQUEsRUFBQSxpQkFBQTs7QUFHckU7QUFIcUUsUUFBQSxRQUFBLDJCQUFBLElBQUEsRUFBQSxDQUFBLGtCQUFBLFNBQUEsSUFBQSxPQUFBLGNBQUEsQ0FBQSxpQkFBQSxDQUFBLEVBQUEsSUFBQSxDQUFBLElBQUEsRUFBQSxZQUFBLEVBQUEsU0FBQSxDQUFBLENBQUE7O0FBSXJFLFFBQUksSUFBQSxNQUFBLEtBQUosaUJBQUEsRUFBc0M7QUFDcEMsWUFBTSxJQUFBLFNBQUEsQ0FBTix1REFBTSxDQUFOO0FBQ0Q7O0FBRUQsVUFBQSxtQkFBQSxHQUFBLGtCQUFBO0FBQ0EsVUFBQSxhQUFBLEdBQUEsWUFBQTtBQVRxRSxXQUFBLEtBQUE7QUFVdEU7O0FBRUQ7Ozs7Ozs7Ozs7OzJDQVF1QjtBQUNyQixVQUFNLG1CQUFtQixLQUF6QixNQUF5QixFQUF6QjtBQUNBLFdBQUEsYUFBQSxDQUFBLGdCQUFBLEVBRUksS0FBQSxtQkFBQSxDQUZKLDhCQUFBLEVBR0ksS0FBQSxhQUFBLENBSEosY0FBQTtBQUlBLGFBQUEsZ0JBQUE7QUFDRDs7QUFFRDs7OztzQkFDaUIsWSxFQUFjO0FBQzdCLFdBQUEsYUFBQSxHQUFBLFlBQUE7QUFDRDs7OztFQTFDNkIsUUFBQSxNOztRQTZDeEIsaUIsR0FBQSxpQjs7QUFFUjs7Ozs7Ozs7Ozs7Ozs7OztBQ25EQSxPQUFBLElBQUEsQ0FBQSxRQUFBLEVBQUEsT0FBQSxDQUFBLFVBQUEsR0FBQSxFQUFBO0FBQUEsTUFBQSxRQUFBLFNBQUEsSUFBQSxRQUFBLFlBQUEsRUFBQTtBQUFBLFNBQUEsY0FBQSxDQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUE7QUFBQSxnQkFBQSxJQUFBO0FBQUEsU0FBQSxTQUFBLEdBQUEsR0FBQTtBQUFBLGFBQUEsU0FBQSxHQUFBLENBQUE7QUFBQTtBQUFBLEdBQUE7QUFBQSxDQUFBOzs7O0FBQ0EsT0FBQSxJQUFBLENBQUEsT0FBQSxFQUFBLE9BQUEsQ0FBQSxVQUFBLEdBQUEsRUFBQTtBQUFBLE1BQUEsUUFBQSxTQUFBLElBQUEsUUFBQSxZQUFBLEVBQUE7QUFBQSxTQUFBLGNBQUEsQ0FBQSxPQUFBLEVBQUEsR0FBQSxFQUFBO0FBQUEsZ0JBQUEsSUFBQTtBQUFBLFNBQUEsU0FBQSxHQUFBLEdBQUE7QUFBQSxhQUFBLFFBQUEsR0FBQSxDQUFBO0FBQUE7QUFBQSxHQUFBO0FBQUEsQ0FBQTs7OztBQUNBLE9BQUEsSUFBQSxDQUFBLGVBQUEsRUFBQSxPQUFBLENBQUEsVUFBQSxHQUFBLEVBQUE7QUFBQSxNQUFBLFFBQUEsU0FBQSxJQUFBLFFBQUEsWUFBQSxFQUFBO0FBQUEsU0FBQSxjQUFBLENBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQTtBQUFBLGdCQUFBLElBQUE7QUFBQSxTQUFBLFNBQUEsR0FBQSxHQUFBO0FBQUEsYUFBQSxnQkFBQSxHQUFBLENBQUE7QUFBQTtBQUFBLEdBQUE7QUFBQSxDQUFBOzs7O0FBQ0EsT0FBQSxJQUFBLENBQUEsaUJBQUEsRUFBQSxPQUFBLENBQUEsVUFBQSxHQUFBLEVBQUE7QUFBQSxNQUFBLFFBQUEsU0FBQSxJQUFBLFFBQUEsWUFBQSxFQUFBO0FBQUEsU0FBQSxjQUFBLENBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQTtBQUFBLGdCQUFBLElBQUE7QUFBQSxTQUFBLFNBQUEsR0FBQSxHQUFBO0FBQUEsYUFBQSxrQkFBQSxHQUFBLENBQUE7QUFBQTtBQUFBLEdBQUE7QUFBQSxDQUFBOzs7O0FBQ0EsT0FBQSxJQUFBLENBQUEsS0FBQSxFQUFBLE9BQUEsQ0FBQSxVQUFBLEdBQUEsRUFBQTtBQUFBLE1BQUEsUUFBQSxTQUFBLElBQUEsUUFBQSxZQUFBLEVBQUE7QUFBQSxTQUFBLGNBQUEsQ0FBQSxPQUFBLEVBQUEsR0FBQSxFQUFBO0FBQUEsZ0JBQUEsSUFBQTtBQUFBLFNBQUEsU0FBQSxHQUFBLEdBQUE7QUFBQSxhQUFBLE1BQUEsR0FBQSxDQUFBO0FBQUE7QUFBQSxHQUFBO0FBQUEsQ0FBQTs7OztBQUVBLE9BQUEsSUFBQSxDQUFBLGdCQUFBLEVBQUEsT0FBQSxDQUFBLFVBQUEsR0FBQSxFQUFBO0FBQUEsTUFBQSxRQUFBLFNBQUEsSUFBQSxRQUFBLFlBQUEsRUFBQTtBQUFBLFNBQUEsY0FBQSxDQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUE7QUFBQSxnQkFBQSxJQUFBO0FBQUEsU0FBQSxTQUFBLEdBQUEsR0FBQTtBQUFBLGFBQUEsaUJBQUEsR0FBQSxDQUFBO0FBQUE7QUFBQSxHQUFBO0FBQUEsQ0FBQTs7OztBQUNBLE9BQUEsSUFBQSxDQUFBLE1BQUEsRUFBQSxPQUFBLENBQUEsVUFBQSxHQUFBLEVBQUE7QUFBQSxNQUFBLFFBQUEsU0FBQSxJQUFBLFFBQUEsWUFBQSxFQUFBO0FBQUEsU0FBQSxjQUFBLENBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQTtBQUFBLGdCQUFBLElBQUE7QUFBQSxTQUFBLFNBQUEsR0FBQSxHQUFBO0FBQUEsYUFBQSxPQUFBLEdBQUEsQ0FBQTtBQUFBO0FBQUEsR0FBQTtBQUFBLENBQUE7Ozs7QUFDQSxPQUFBLElBQUEsQ0FBQSxNQUFBLEVBQUEsT0FBQSxDQUFBLFVBQUEsR0FBQSxFQUFBO0FBQUEsTUFBQSxRQUFBLFNBQUEsSUFBQSxRQUFBLFlBQUEsRUFBQTtBQUFBLFNBQUEsY0FBQSxDQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUE7QUFBQSxnQkFBQSxJQUFBO0FBQUEsU0FBQSxTQUFBLEdBQUEsR0FBQTtBQUFBLGFBQUEsT0FBQSxHQUFBLENBQUE7QUFBQTtBQUFBLEdBQUE7QUFBQSxDQUFBOzs7Ozs7Ozs7OztBQ2JBLE9BQUEsSUFBQSxDQUFBLGFBQUEsRUFBQSxPQUFBLENBQUEsVUFBQSxHQUFBLEVBQUE7QUFBQSxNQUFBLFFBQUEsU0FBQSxJQUFBLFFBQUEsWUFBQSxFQUFBO0FBQUEsU0FBQSxjQUFBLENBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQTtBQUFBLGdCQUFBLElBQUE7QUFBQSxTQUFBLFNBQUEsR0FBQSxHQUFBO0FBQUEsYUFBQSxjQUFBLEdBQUEsQ0FBQTtBQUFBO0FBQUEsR0FBQTtBQUFBLENBQUE7Ozs7QUFDQSxPQUFBLElBQUEsQ0FBQSx5QkFBQSxFQUFBLE9BQUEsQ0FBQSxVQUFBLEdBQUEsRUFBQTtBQUFBLE1BQUEsUUFBQSxTQUFBLElBQUEsUUFBQSxZQUFBLEVBQUE7QUFBQSxTQUFBLGNBQUEsQ0FBQSxPQUFBLEVBQUEsR0FBQSxFQUFBO0FBQUEsZ0JBQUEsSUFBQTtBQUFBLFNBQUEsU0FBQSxHQUFBLEdBQUE7QUFBQSxhQUFBLDBCQUFBLEdBQUEsQ0FBQTtBQUFBO0FBQUEsR0FBQTtBQUFBLENBQUE7Ozs7QUFDQSxPQUFBLElBQUEsQ0FBQSxNQUFBLEVBQUEsT0FBQSxDQUFBLFVBQUEsR0FBQSxFQUFBO0FBQUEsTUFBQSxRQUFBLFNBQUEsSUFBQSxRQUFBLFlBQUEsRUFBQTtBQUFBLFNBQUEsY0FBQSxDQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUE7QUFBQSxnQkFBQSxJQUFBO0FBQUEsU0FBQSxTQUFBLEdBQUEsR0FBQTtBQUFBLGFBQUEsT0FBQSxHQUFBLENBQUE7QUFBQTtBQUFBLEdBQUE7QUFBQSxDQUFBOzs7O0FBQ0EsT0FBQSxJQUFBLENBQUEsZ0JBQUEsRUFBQSxPQUFBLENBQUEsVUFBQSxHQUFBLEVBQUE7QUFBQSxNQUFBLFFBQUEsU0FBQSxJQUFBLFFBQUEsWUFBQSxFQUFBO0FBQUEsU0FBQSxjQUFBLENBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQTtBQUFBLGdCQUFBLElBQUE7QUFBQSxTQUFBLFNBQUEsR0FBQSxHQUFBO0FBQUEsYUFBQSxpQkFBQSxHQUFBLENBQUE7QUFBQTtBQUFBLEdBQUE7QUFBQSxDQUFBOzs7O0FBQ0EsT0FBQSxJQUFBLENBQUEscUJBQUEsRUFBQSxPQUFBLENBQUEsVUFBQSxHQUFBLEVBQUE7QUFBQSxNQUFBLFFBQUEsU0FBQSxJQUFBLFFBQUEsWUFBQSxFQUFBO0FBQUEsU0FBQSxjQUFBLENBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQTtBQUFBLGdCQUFBLElBQUE7QUFBQSxTQUFBLFNBQUEsR0FBQSxHQUFBO0FBQUEsYUFBQSxzQkFBQSxHQUFBLENBQUE7QUFBQTtBQUFBLEdBQUE7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QUFBO0FBQUEsQ0FBQTs7OztBQUNBLE9BQUEsSUFBQSxDQUFBLG9CQUFBLEVBQUEsT0FBQSxDQUFBLFVBQUEsR0FBQSxFQUFBO0FBQUEsTUFBQSxRQUFBLFNBQUEsSUFBQSxRQUFBLFlBQUEsRUFBQTtBQUFBLFNBQUEsY0FBQSxDQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUE7QUFBQSxnQkFBQSxJQUFBO0FBQUEsU0FBQSxTQUFBLEdBQUEsR0FBQTtBQUFBLGFBQUEscUJBQUEsR0FBQSxDQUFBO0FBQUE7QUFBQSxHQUFBO0FBQUEsQ0FBQTs7OztBQUNBLE9BQUEsSUFBQSxDQUFBLGFBQUEsRUFBQSxPQUFBLENBQUEsVUFBQSxHQUFBLEVBQUE7QUFBQSxNQUFBLFFBQUEsU0FBQSxJQUFBLFFBQUEsWUFBQSxFQUFBO0FBQUEsU0FBQSxjQUFBLENBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQTtBQUFBLGdCQUFBLElBQUE7QUFBQSxTQUFBLFNBQUEsR0FBQSxHQUFBO0FBQUEsYUFBQSxjQUFBLEdBQUEsQ0FBQTtBQUFBO0FBQUEsR0FBQTtBQUFBLENBQUE7Ozs7QUFDQSxPQUFBLElBQUEsQ0FBQSxjQUFBLEVBQUEsT0FBQSxDQUFBLFVBQUEsR0FBQSxFQUFBO0FBQUEsTUFBQSxRQUFBLFNBQUEsSUFBQSxRQUFBLFlBQUEsRUFBQTtBQUFBLFNBQUEsY0FBQSxDQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUE7QUFBQSxnQkFBQSxJQUFBO0FBQUEsU0FBQSxTQUFBLEdBQUEsR0FBQTtBQUFBLGFBQUEsZUFBQSxHQUFBLENBQUE7QUFBQTtBQUFBLEdBQUE7QUFBQSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0hBLElBQUEsUUFBQSxRQUFBLFlBQUEsQ0FBQTs7QUFFQSxJQUFBLHVCQUFBLFFBQUEseUJBQUEsQ0FBQTs7Ozs7Ozs7QUFFQTs7O0lBR00sc0I7QUFDSjs7OztBQUlBLFdBQUEsbUJBQUEsQ0FBQSxFQUFBLEVBQUEsTUFBQSxFQUF3QjtBQUFBLG9CQUFBLElBQUEsRUFBQSxtQkFBQTs7QUFDdEIsU0FBQSxNQUFB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LE1BQUEsUUFBQSxTQUFBLElBQUEsUUFBQSxZQUFBLEVBQUE7QUFBQSxTQUFBLGNBQUEsQ0FBQSxPQUFBLEVBQUEsR0FBQSxFQUFBO0FBQUEsZ0JBQUEsSUFBQTtBQUFBLFNBQUEsU0FBQSxHQUFBLEdBQUE7QUFBQSxhQUFBLDhCQUFBLEdBQUEsQ0FBQTtBQUFBO0FBQUEsR0FBQTtBQUFBLENBQUE7O0FBZkEsSUFBQSw4QkFBQSxRQUFBLGtEQUFBLENBQUE7O0FBZ0JBLE9BQUEsSUFBQSxDQUFBLDJCQUFBLEVBQUEsT0FBQSxDQUFBLFVBQUEsR0FBQSxFQUFBO0FBQUEsTUFBQSxRQUFBLFNBQUEsSUFBQSxRQUFBLFlBQUEsRUFBQTtBQUFBLFNBQUEsY0FBQSxDQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUE7QUFBQSxnQkFBQSxJQUFBO0FBQUEsU0FBQSxTQUFBLEdBQUEsR0FBQTtBQUFBLGFBQUEsNEJBQUEsR0FBQSxDQUFBO0FBQUE7QUFBQSxHQUFBO0FBQUEsQ0FBQTs7QUF2QkEsSUFBQSwwQkFBQSxRQUFBLGdDQUFBLENBQUE7O0FBeUJBLE9BQUEsSUFBQSxDQUFBLHVCQUFBLEVBQUEsT0FBQSxDQUFBLFVBQUEsR0FBQSxFQUFBO0FBQUEsTUFBQSxRQUFBLFNBQUEsSUFBQSxRQUFBLFlBQUEsRUFBQTtBQUFBLFNBQUEsY0FBQSxDQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUE7QUFBQSxnQkFBQSxJQUFBO0FBQUEsU0FBQSxTQUFBLEdBQUEsR0FBQTtBQUFBLGFBQUEsd0JBQUEsR0FBQSxDQUFBO0FBQUE7QUFBQSxHQUFBO0FBQUEsQ0FBQTs7OztBQUNBLE9BQUEsSUFBQSxDQUFBLHFCQUFBLEVBQUEsT0FBQSxDQUFBLFVBQUEsR0FBQSxFQUFBO0FBQUEsTUFBQSxRQUFBLFNBQUEsSUFBQSxRQUFBLFlBQUEsRUFBQTtBQUFBLFNBQUEsY0FBQSxDQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUE7QUFBQSxnQkFBQSxJQUFBO0FBQUEsU0FBQSxTQUFBLEdBQUEsR0FBQTtBQUFBLGFBQUEsc0JBQUEsR0FBQSxDQUFB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UUFDQSw0QixHQUFBLDRCO1FBQ0EsYSxHQUFBLGE7UUFDQSw0QixHQUFBLDRCO1FBQ0EseUIsR0FBQSx5QjtRQUNBLGlCLEdBQUEsaUI7UUFDQSx1QixHQUFBLHVCO1FBQ0Esc0MsR0FBQSxzQztRQUNBLGUsR0FBQSxlO1FBQ0Esc0IsR0FBQSxzQjtRQUNBLDBCLEdBQUEsMEI7UUFDQSxZLEdBQUEsWTtRQUNBLE8sR0FBQSxPO1FBQ0EsVyxHQUFBLFc7UUFDQSxRLEdBQUEsUTtRQUNBLFEsR0FBQSxRO1FBQ0EsUSxHQUFBLFE7UUFDQSxRLEdBQUEsUTtRQUNBLFEsR0FBQSxRO1FBQ0Esb0IsR0FBQSxvQjtRQUNBLDBCLEdBQUEsMEI7UUFDQSxtQixHQUFBLG1CO1FBQ0EsYyxHQUFBLGM7UUFDQSxXLEdBQUEsVztRQUNBLFEsR0FBQSxRO1FBQ0EsUSxHQUFBLFE7UUFDQSxZLEdBQUEsWTtRQUNBLFEsR0FBQSxRO1FBQ0EsUSxHQUFBLFE7UUFDQSxhLEdBQUEsYTtRQUNBLFUsR0FBQSxVO1FBQ0EsVSxHQUFBLFU7UUFDQSxHLEdBQUEsRztRQUNBLGtCLEdBQUEsa0I7UUFDQSxnQixHQUFBLGdCO1FBQ0EsVSxHQUFBLFU7UUFDQSxxQixHQUFBLHFCO1FBQ0EsSyxHQUFBLEs7UUFDQSxLLEdBQUEsSztRQUNBLEksR0FBQSxJO1FBQ0EsUSxHQUFBLFE7UUFDQSxZLEdBQUEsWTtRQUNBLGMsR0FBQSxjOztBQUdGOzs7Ozs7OztBQVFBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiZXhwb3J0ICogZnJvbSAnLi9zcmMnO1xuIiwiLyoqXG4gKiBBbiBBbmltYXRpb25Kb2IgaXMgdXNlZCB3aXRoIHRoZSBhbmltYXRvciBjb250cm9sbGVyIHRvIHVwZGF0ZSBhbmQgcmUtZHJhdyBzb21ldGhpbmcgZWFjaCBmcmFtZS5cbiAqXG4gKiBAYWJzdHJhY3RcbiAqL1xuY2xhc3MgQW5pbWF0aW9uSm9iIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtvbkNvbXBsZXRlXSBBIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCB3aGVuIHRoaXMgQW5pbWF0aW9uSm9iIGlzIGZpbmlzaGVkLlxuICAgKi9cbiAgY29uc3RydWN0b3Iob25Db21wbGV0ZSkge1xuICAgIC8vIEFuaW1hdGlvbkpvYiBpcyBhbiBhYnN0cmFjdCBjbGFzcy4gSXQgc2hvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQgZGlyZWN0bHkuXG4gICAgaWYgKG5ldy50YXJnZXQgPT09IEFuaW1hdGlvbkpvYikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnN0cnVjdCBBbmltYXRpb25Kb2IgaW5zdGFuY2VzIGRpcmVjdGx5Jyk7XG4gICAgfVxuXG4gICAgdGhpcy5fc3RhcnRUaW1lID0gMDtcbiAgICB0aGlzLl9pc0NvbXBsZXRlID0gdHJ1ZTtcbiAgICB0aGlzLl9vbkNvbXBsZXRlID0gb25Db21wbGV0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGlzIEFuaW1hdGlvbkpvYiBpcyBjb21wbGV0ZS5cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGdldCBpc0NvbXBsZXRlKCkge1xuICAgIHJldHVybiB0aGlzLl9pc0NvbXBsZXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhpcyBBbmltYXRpb25Kb2IgYXMgc3RhcnRlZC5cbiAgICpcbiAgICogQHBhcmFtIHtET01IaWdoUmVzVGltZVN0YW1wfSBzdGFydFRpbWVcbiAgICovXG4gIHN0YXJ0KHN0YXJ0VGltZSkge1xuICAgIHRoaXMuX3N0YXJ0VGltZSA9IHN0YXJ0VGltZTtcbiAgICB0aGlzLl9pc0NvbXBsZXRlID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgYW5pbWF0aW9uIHByb2dyZXNzIG9mIHRoaXMgQW5pbWF0aW9uSm9iIHRvIG1hdGNoIHRoZSBnaXZlbiB0aW1lLlxuICAgKlxuICAgKiBUaGlzIGlzIGNhbGxlZCBmcm9tIHRoZSBvdmVyYWxsIGFuaW1hdGlvbiBsb29wLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUhpZ2hSZXNUaW1lU3RhbXB9IGN1cnJlbnRUaW1lXG4gICAqIEBwYXJhbSB7RE9NSGlnaFJlc1RpbWVTdGFtcH0gZGVsdGFUaW1lXG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgdXBkYXRlKGN1cnJlbnRUaW1lLCBkZWx0YVRpbWUpIHtcbiAgICAvLyBFeHRlbmRpbmcgY2xhc3NlcyBzaG91bGQgaW1wbGVtZW50IHRoaXMgbWV0aG9kLlxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3cyB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGlzIEFuaW1hdGlvbkpvYi5cbiAgICpcbiAgICogVGhpcyBpcyBjYWxsZWQgZnJvbSB0aGUgb3ZlcmFsbCBhbmltYXRpb24gbG9vcC5cbiAgICpcbiAgICogQGFic3RyYWN0XG4gICAqL1xuICBkcmF3KCkge1xuICAgIC8vIEV4dGVuZGluZyBjbGFzc2VzIHNob3VsZCBpbXBsZW1lbnQgdGhpcyBtZXRob2QuXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgYW55IG5lY2Vzc2FyeSBzdGF0ZSBmb3IgdGhpcyBBbmltYXRpb25Kb2IgYmVpbmcgZmluaXNoZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNDYW5jZWxsZWRcbiAgICovXG4gIGZpbmlzaChpc0NhbmNlbGxlZCkge1xuICAgIGNvbnNvbGUubG9nKGAke3RoaXMuY29uc3RydWN0b3IubmFtZX0gJHtpc0NhbmNlbGxlZCA/ICdjYW5jZWxsZWQnIDogJ2NvbXBsZXRlZCd9YCk7XG5cbiAgICB0aGlzLl9pc0NvbXBsZXRlID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLl9vbkNvbXBsZXRlKSB7XG4gICAgICB0aGlzLl9vbkNvbXBsZXRlKCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB7QW5pbWF0aW9uSm9ifTtcbiIsImltcG9ydCB7RnJhbWVMYXRlbmN5UHJvZmlsZXJ9IGZyb20gJy4vZnJhbWUtbGF0ZW5jeS1wcm9maWxlcic7XG5pbXBvcnQge1BlcnNpc3RlbnRBbmltYXRpb25Kb2J9IGZyb20gJy4vcGVyc2lzdGVudC1hbmltYXRpb24tam9iJztcbmltcG9ydCB7VHJhbnNpZW50QW5pbWF0aW9uSm9ifSBmcm9tICcuL3RyYW5zaWVudC1hbmltYXRpb24tam9iJztcblxuY29uc3QgX0RFTFRBX1RJTUVfVVBQRVJfVEhSRVNIT0xEID0gMjAwO1xuY29uc3QgX0ZSQU1FX0RVUkFUSU9OX1dBUk5JTkdfVEhSRVNIT0xEID0gMTAwMCAvIDMwO1xuY29uc3QgX0ZSQU1FX0xBVEVOQ1lfTE9HX1BFUklPRCA9IDUwMDA7XG5jb25zdCBfTEFURU5DWV9MT0dfTEFCRUwgPSAnQW5pbWF0aW9uIGZyYW1lIHBlcmlvZCc7XG5cbi8qKlxuICogVGhpcyBjbGFzcyBoYW5kbGVzIHRoZSBhbmltYXRpb24gbG9vcC5cbiAqXG4gKiBUaGlzIGNsYXNzJ3MgcmVzcG9uc2liaWxpdGllcyBpbmNsdWRlOlxuICogLSB1cGRhdGluZyBtb2R1bGVzIGZvciB0aGUgY3VycmVudCBmcmFtZSxcbiAqIC0gZHJhd2luZyByZW5kZXJhYmxlcyBmb3IgdGhlIGN1cnJlbnQgZnJhbWUsXG4gKiAtIHN0YXJ0aW5nIGFuZCBzdG9wcGluZyB0cmFuc2llbnQgYW5pbWF0aW9uIGpvYnMsXG4gKiAtIGNhcHBpbmcgdGltZSBzdGVwIGR1cmF0aW9ucyBhdCBhIG1heCB0aHJlc2hvbGQuXG4gKi9cbmNsYXNzIEFuaW1hdG9yIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fam9icyA9IFtdO1xuICAgIHRoaXMuX3ByZXZpb3VzVGltZSA9IG51bGw7XG4gICAgdGhpcy5faXNQYXVzZWQgPSB0cnVlO1xuICAgIHRoaXMuX3JlcXVlc3RBbmltYXRpb25GcmFtZUlkID0gbnVsbDtcbiAgICB0aGlzLl90b3RhbFVucGF1c2VkUnVuVGltZSA9IDA7XG4gICAgdGhpcy5fbGFzdFVucGF1c2VUaW1lID0gbnVsbDtcbiAgICB0aGlzLl9sYXRlbmN5UHJvZmlsZXIgPSBuZXcgRnJhbWVMYXRlbmN5UHJvZmlsZXIoX0ZSQU1FX0xBVEVOQ1lfTE9HX1BFUklPRCxcbiAgICAgICAgX0ZSQU1FX0RVUkFUSU9OX1dBUk5JTkdfVEhSRVNIT0xELCBfTEFURU5DWV9MT0dfTEFCRUwpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyB0aGUgZ2l2ZW4gQW5pbWF0aW9uSm9iLlxuICAgKlxuICAgKiBAcGFyYW0ge0FuaW1hdGlvbkpvYn0gam9iXG4gICAqL1xuICBzdGFydEpvYihqb2IpIHtcbiAgICAvLyBJcyB0aGlzIGEgcmVzdGFydD9cbiAgICBpZiAoIWpvYi5pc0NvbXBsZXRlKSB7XG4gICAgICBjb25zb2xlLmRlYnVnKGBSZXN0YXJ0aW5nIEFuaW1hdGlvbkpvYjogJHtqb2IuY29uc3RydWN0b3IubmFtZX1gKTtcblxuICAgICAgaWYgKGpvYiBpbnN0YW5jZW9mIFBlcnNpc3RlbnRBbmltYXRpb25Kb2IpIHtcbiAgICAgICAgam9iLnJlc2V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBqb2IuZmluaXNoKHRydWUpO1xuICAgICAgICBqb2Iuc3RhcnQod2luZG93LnBlcmZvcm1hbmNlLm5vdygpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5kZWJ1ZyhgU3RhcnRpbmcgQW5pbWF0aW9uSm9iOiAke2pvYi5jb25zdHJ1Y3Rvci5uYW1lfWApO1xuXG4gICAgICBqb2Iuc3RhcnQodGhpcy5fcHJldmlvdXNUaW1lKTtcbiAgICAgIHRoaXMuX2pvYnMucHVzaChqb2IpO1xuICAgIH1cblxuICAgIHRoaXMuX3N0YXJ0QW5pbWF0aW9uTG9vcCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbmNlbHMgdGhlIGdpdmVuIEFuaW1hdGlvbkpvYi5cbiAgICpcbiAgICogQHBhcmFtIHtBbmltYXRpb25Kb2J9IGpvYlxuICAgKi9cbiAgY2FuY2VsSm9iKGpvYikge1xuICAgIGNvbnNvbGUuZGVidWcoYENhbmNlbGxpbmcgQW5pbWF0aW9uSm9iOiAke2pvYi5jb25zdHJ1Y3Rvci5uYW1lfWApO1xuICAgIGpvYi5maW5pc2godHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FuY2VscyBhbGwgcnVubmluZyBBbmltYXRpb25Kb2JzLlxuICAgKi9cbiAgY2FuY2VsQWxsKCkge1xuICAgIHdoaWxlICh0aGlzLl9qb2JzLmxlbmd0aCkge1xuICAgICAgdGhpcy5jYW5jZWxKb2IodGhpcy5fam9ic1swXSk7XG4gICAgfVxuICB9XG5cbiAgLyoqIEByZXR1cm5zIHtET01IaWdoUmVzVGltZVN0YW1wfSAqL1xuICBnZXQgY3VycmVudFRpbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ByZXZpb3VzVGltZTtcbiAgfVxuXG4gIC8qKiBAcmV0dXJucyB7Ym9vbGVhbn0gKi9cbiAgZ2V0IGlzUGF1c2VkKCkge1xuICAgIHJldHVybiB0aGlzLl9pc1BhdXNlZDtcbiAgfVxuXG4gIHBhdXNlKCkge1xuICAgIHRoaXMuX3N0b3BBbmltYXRpb25Mb29wKCk7XG4gICAgY29uc29sZS5kZWJ1ZygnQW5pbWF0b3IgcGF1c2VkJyk7XG4gIH1cblxuICB1bnBhdXNlKCkge1xuICAgIHRoaXMuX3N0YXJ0QW5pbWF0aW9uTG9vcCgpO1xuICAgIGNvbnNvbGUuZGVidWcoJ0FuaW1hdG9yIHVucGF1c2VkJyk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgYW5pbWF0aW9uIGxvb3AgdGhhdCBkcml2ZXMgYWxsIG9mIHRoZSBhbmltYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NSGlnaFJlc1RpbWVTdGFtcH0gY3VycmVudFRpbWVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9hbmltYXRpb25Mb29wKGN1cnJlbnRUaW1lKSB7XG4gICAgLy8gV2hlbiBwYXVzaW5nIGFuZCByZXN0YXJ0aW5nLCBpdCdzIHBvc3NpYmxlIGZvciB0aGUgcHJldmlvdXMgdGltZSB0byBiZSBzbGlnaHRseSBpbmNvbnNpc3RlbnRcbiAgICAvLyB3aXRoIHRoZSBhbmltYXRpb25GcmFtZSB0aW1lLlxuICAgIGlmIChjdXJyZW50VGltZSA8IHRoaXMuX3ByZXZpb3VzVGltZSkge1xuICAgICAgdGhpcy5fcHJldmlvdXNUaW1lID0gY3VycmVudFRpbWUgLSAxO1xuICAgIH1cblxuICAgIGxldCBkZWx0YVRpbWUgPSBjdXJyZW50VGltZSAtIHRoaXMuX3ByZXZpb3VzVGltZTtcbiAgICB0aGlzLl9wcmV2aW91c1RpbWUgPSBjdXJyZW50VGltZTtcblxuICAgIHRoaXMuX2xhdGVuY3lQcm9maWxlci5yZWNvcmRGcmFtZUxhdGVuY3koZGVsdGFUaW1lKTtcblxuICAgIC8vIExhcmdlIGRlbGF5cyBiZXR3ZWVuIGZyYW1lcyBjYW4gY2F1c2UgbGVhZCB0byBpbnN0YWJpbGl0eSBpbiB0aGUgc3lzdGVtLCBzbyB0aGlzIGNhcHMgdGhlbSB0b1xuICAgIC8vIGEgbWF4IHRocmVzaG9sZC5cbiAgICBkZWx0YVRpbWUgPSBkZWx0YVRpbWUgPiBfREVMVEFfVElNRV9VUFBFUl9USFJFU0hPTEQgP1xuICAgICAgICBfREVMVEFfVElNRV9VUFBFUl9USFJFU0hPTEQgOiBkZWx0YVRpbWU7XG5cbiAgICBpZiAoIXRoaXMuX2lzUGF1c2VkKSB7XG4gICAgICB0aGlzLl9yZXF1ZXN0QW5pbWF0aW9uRnJhbWVJZCA9XG4gICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShjdXJyZW50VGltZSA9PiB0aGlzLl9hbmltYXRpb25Mb29wKGN1cnJlbnRUaW1lKSk7XG4gICAgICB0aGlzLl91cGRhdGVKb2JzKGN1cnJlbnRUaW1lLCBkZWx0YVRpbWUpO1xuICAgICAgdGhpcy5fZHJhd0pvYnMoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyBhbGwgb2YgdGhlIGFjdGl2ZSBBbmltYXRpb25Kb2JzLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUhpZ2hSZXNUaW1lU3RhbXB9IGN1cnJlbnRUaW1lXG4gICAqIEBwYXJhbSB7RE9NSGlnaFJlc1RpbWVTdGFtcH0gZGVsdGFUaW1lXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfdXBkYXRlSm9icyhjdXJyZW50VGltZSwgZGVsdGFUaW1lKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGNvdW50ID0gdGhpcy5fam9icy5sZW5ndGg7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICBsZXQgam9iID0gdGhpcy5fam9ic1tpXTtcblxuICAgICAgLy8gUmVtb3ZlIGpvYnMgZnJvbSB0aGUgbGlzdCBhZnRlciB0aGV5IGFyZSBjb21wbGV0ZS5cbiAgICAgIGlmIChqb2IuaXNDb21wbGV0ZSkge1xuICAgICAgICB0aGlzLl9yZW1vdmVKb2Ioam9iLCBpKTtcbiAgICAgICAgaS0tO1xuICAgICAgICBjb3VudC0tO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgd2hldGhlciB0aGUgam9iIGlzIHRyYW5zaWVudCBhbmQgaGFzIHJlYWNoZWQgaXRzIGVuZC5cbiAgICAgIGlmIChqb2IgaW5zdGFuY2VvZiBUcmFuc2llbnRBbmltYXRpb25Kb2IgJiYgam9iLmVuZFRpbWUgPCBjdXJyZW50VGltZSkge1xuICAgICAgICBqb2IuZmluaXNoKGZhbHNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGpvYi51cGRhdGUoY3VycmVudFRpbWUsIGRlbHRhVGltZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgdGhlIGdpdmVuIGpvYiBmcm9tIHRoZSBjb2xsZWN0aW9uIG9mIGFjdGl2ZSwgYW5pbWF0aW5nIGpvYnMuXG4gICAqXG4gICAqIEBwYXJhbSB7QW5pbWF0aW9uSm9ifSBqb2JcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtpbmRleD0tMV1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZW1vdmVKb2Ioam9iLCBpbmRleCA9IC0xKSB7XG4gICAgY29uc29sZS5kZWJ1ZyhgUmVtb3ZpbmcgQW5pbWF0aW9uSm9iOiAke2pvYi5jb25zdHJ1Y3Rvci5uYW1lfWApO1xuXG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHRoaXMuX2pvYnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY291bnQgPSB0aGlzLl9qb2JzLmxlbmd0aDtcbiAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGNvdW50OyBpbmRleCsrKSB7XG4gICAgICAgIGlmICh0aGlzLl9qb2JzW2luZGV4XSA9PT0gam9iKSB7XG4gICAgICAgICAgdGhpcy5fam9icy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU3RvcCB0aGUgYW5pbWF0aW9uIGxvb3Agd2hlbiB0aGVyZSBhcmUgbm8gbW9yZSBqb2JzIHRvIGFuaW1hdGUuXG4gICAgaWYgKHRoaXMuX2pvYnMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLl9zdG9wQW5pbWF0aW9uTG9vcCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3cyBhbGwgb2YgdGhlIGFjdGl2ZSBBbmltYXRpb25Kb2JzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2RyYXdKb2JzKCkge1xuICAgIGZvciAobGV0IGkgPSAwLCBjb3VudCA9IHRoaXMuX2pvYnMubGVuZ3RoOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgdGhpcy5fam9ic1tpXS5kcmF3KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyB0aGUgYW5pbWF0aW9uIGxvb3AgaWYgaXQgaXMgbm90IGFscmVhZHkgcnVubmluZy5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgaXMgaWRlbXBvdGVudC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zdGFydEFuaW1hdGlvbkxvb3AoKSB7XG4gICAgaWYgKHRoaXMuX2lzUGF1c2VkKSB7XG4gICAgICB0aGlzLl9sYXN0VW5wYXVzZVRpbWUgPSB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCk7XG4gICAgfVxuICAgIHRoaXMuX2lzUGF1c2VkID0gZmFsc2U7XG5cbiAgICAvLyBPbmx5IGFjdHVhbGx5IHN0YXJ0IHRoZSBsb29wIGlmIGl0IGlzbid0IGFscmVhZHkgcnVubmluZyBhbmQgdGhlIHBhZ2UgaGFzIGZvY3VzLlxuICAgIGlmICghdGhpcy5fcmVxdWVzdEFuaW1hdGlvbkZyYW1lSWQgJiYgIWRvY3VtZW50LmhpZGRlbikge1xuICAgICAgdGhpcy5fbGF0ZW5jeVByb2ZpbGVyLnN0YXJ0KCk7XG4gICAgICB0aGlzLl9wcmV2aW91c1RpbWUgPSB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICB0aGlzLl9yZXF1ZXN0QW5pbWF0aW9uRnJhbWVJZCA9XG4gICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aW1lID0+IHRoaXMuX2FuaW1hdGlvbkxvb3AodGltZSkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9wcyB0aGUgYW5pbWF0aW9uIGxvb3AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc3RvcEFuaW1hdGlvbkxvb3AoKSB7XG4gICAgaWYgKCF0aGlzLl9pc1BhdXNlZCkge1xuICAgICAgdGhpcy5fdG90YWxVbnBhdXNlZFJ1blRpbWUgKz0gdGhpcy5fdGltZVNpbmNlTGFzdFBhdXNlZDtcbiAgICB9XG4gICAgdGhpcy5faXNQYXVzZWQgPSB0cnVlO1xuICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLl9yZXF1ZXN0QW5pbWF0aW9uRnJhbWVJZCk7XG4gICAgdGhpcy5fcmVxdWVzdEFuaW1hdGlvbkZyYW1lSWQgPSBudWxsO1xuICAgIHRoaXMuX2xhdGVuY3lQcm9maWxlci5zdG9wKCk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHByb21pc2UgdGhhdCB3aWxsIHJlc29sdmUgb24gdGhlIG5leHQgYW5pbWF0aW9uIGxvb3AuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgKi9cbiAgcmVzb2x2ZU9uTmV4dEZyYW1lKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSh3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB0b3RhbCBhbW91bnQgb2YgdGltZSB0aGUgYW5pbWF0b3IgaGFzIGJlZW4gcnVubmluZyB3aGlsZSBub3QgcGF1c2VkLlxuICAgKlxuICAgKiBAcmV0dXJucyB7RE9NSGlnaFJlc1RpbWVTdGFtcH1cbiAgICovXG4gIGdldCB0b3RhbFJ1blRpbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzUGF1c2VkXG4gICAgICAgID8gdGhpcy5fdG90YWxVbnBhdXNlZFJ1blRpbWVcbiAgICAgICAgOiB0aGlzLl90b3RhbFVucGF1c2VkUnVuVGltZSArIHRoaXMuX3RpbWVTaW5jZUxhc3RQYXVzZWQ7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge0RPTUhpZ2hSZXNUaW1lU3RhbXB9XG4gICAqL1xuICBnZXQgX3RpbWVTaW5jZUxhc3RQYXVzZWQoKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKSAtIHRoaXMuX2xhc3RVbnBhdXNlVGltZTtcbiAgfVxufVxuXG5jb25zdCBhbmltYXRvciA9IG5ldyBBbmltYXRvcigpO1xuXG5leHBvcnQge2FuaW1hdG9yfTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7bnVtYmVyfSBET01IaWdoUmVzVGltZVN0YW1wIEEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcywgYWNjdXJhdGUgdG8gb25lIHRob3VzYW5kdGggb2YgYVxuICogbWlsbGlzZWNvbmQuXG4gKi9cblxuIiwiLyoqXG4gKiBUaGlzIGNsYXNzIGtlZXBzIHRyYWNrIG9mIGF2Zy9taW4vbWF4IGZyYW1lIGxhdGVuY2llcyBvdmVyIHRoZSBsYXN0IGxvZ2dpbmcgdGltZSBwZXJpb2QgYW5kXG4gKiBwZXJpb2RpY2FsbHkgbG9ncyB0aGVzZSB2YWx1ZXMuXG4gKi9cbmNsYXNzIEZyYW1lTGF0ZW5jeVByb2ZpbGVyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsb2dQZXJpb2QgVGhlIHBlcmlvZCBhdCB3aGljaCB0byBwcmludCBsYXRlbmN5IGxvZyBtZXNzYWdlcy4gSW4gbWlsbGlzZWNvbmRzLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbGF0ZW5jeVdhcm5pbmdUaHJlc2hvbGQgSWYgdGhlIGF2ZXJhZ2UgbGF0ZW5jeSBleGNlZWRzIHRoaXMgdGhyZXNob2xkLCB0aGVuIHRoZVxuICAgKiBsb2cgbWVzc2FnZSBpcyBzaG93biBhcyBhIHdhcm5pbmcuIEluIG1pbGxpc2Vjb25kcy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGxvZ0xhYmVsIEEgbGFiZWwgdG8gc2hvdyBmb3IgZWFjaCBsYXRlbmN5IGxvZyBtZXNzYWdlLlxuICAgKi9cbiAgY29uc3RydWN0b3IobG9nUGVyaW9kLCBsYXRlbmN5V2FybmluZ1RocmVzaG9sZCwgbG9nTGFiZWwpIHtcbiAgICB0aGlzLl9sb2dQZXJpb2QgPSBsb2dQZXJpb2Q7XG4gICAgdGhpcy5fbGF0ZW5jeVdhcm5pbmdUaHJlc2hvbGQgPSBsYXRlbmN5V2FybmluZ1RocmVzaG9sZDtcbiAgICB0aGlzLl9sb2dMYWJlbCA9IGxvZ0xhYmVsO1xuXG4gICAgdGhpcy5fZnJhbWVDb3VudCA9IG51bGw7XG4gICAgdGhpcy5fbWF4RnJhbWVMYXRlbmN5ID0gbnVsbDtcbiAgICB0aGlzLl9taW5GcmFtZUxhdGVuY3kgPSBudWxsO1xuICAgIHRoaXMuX2F2Z0ZyYW1lTGF0ZW5jeSA9IG51bGw7XG5cbiAgICB0aGlzLl9pbnRlcnZhbElkID0gbnVsbDtcbiAgfVxuXG4gIHN0YXJ0KCkge1xuICAgIHRoaXMuc3RvcCgpO1xuICAgIHRoaXMucmVzZXQoKTtcblxuICAgIHRoaXMuX2ludGVydmFsSWQgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICB0aGlzLmxvZ0ZyYW1lTGF0ZW5jeSgpO1xuICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH0sIHRoaXMuX2xvZ1BlcmlvZCk7XG4gIH1cblxuICBzdG9wKCkge1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWxJZCk7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLl9mcmFtZUNvdW50ID0gMDtcbiAgICB0aGlzLl9tYXhGcmFtZUxhdGVuY3kgPSBOdW1iZXIuTUlOX1ZBTFVFO1xuICAgIHRoaXMuX21pbkZyYW1lTGF0ZW5jeSA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgdGhpcy5fYXZnRnJhbWVMYXRlbmN5ID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBLZWVwcyB0cmFjayBvZiBhIHJ1bm5pbmcgYXZlcmFnZSwgbWluIHZhbHVlLCBhbmQgbWF4IHZhbHVlIGZvciB0aGUgZnJhbWUgbGF0ZW5jaWVzLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUhpZ2hSZXNUaW1lU3RhbXB9IGZyYW1lTGF0ZW5jeVxuICAgKi9cbiAgcmVjb3JkRnJhbWVMYXRlbmN5KGZyYW1lTGF0ZW5jeSkge1xuICAgIHRoaXMuX2ZyYW1lQ291bnQrKztcbiAgICB0aGlzLl9tYXhGcmFtZUxhdGVuY3kgPVxuICAgICAgICB0aGlzLl9tYXhGcmFtZUxhdGVuY3kgPCBmcmFtZUxhdGVuY3kgPyBmcmFtZUxhdGVuY3kgOiB0aGlzLl9tYXhGcmFtZUxhdGVuY3k7XG4gICAgdGhpcy5fbWluRnJhbWVMYXRlbmN5ID1cbiAgICAgICAgdGhpcy5fbWluRnJhbWVMYXRlbmN5ID4gZnJhbWVMYXRlbmN5ID8gZnJhbWVMYXRlbmN5IDogdGhpcy5fbWluRnJhbWVMYXRlbmN5O1xuICAgIHRoaXMuX2F2Z0ZyYW1lTGF0ZW5jeSA9XG4gICAgICAgIHRoaXMuX2F2Z0ZyYW1lTGF0ZW5jeSArIChmcmFtZUxhdGVuY3kgLSB0aGlzLl9hdmdGcmFtZUxhdGVuY3kpIC8gdGhpcy5fZnJhbWVDb3VudDtcbiAgfVxuXG4gIGxvZ0ZyYW1lTGF0ZW5jeSgpIHtcbiAgICBpZiAodGhpcy5fZnJhbWVDb3VudCA+IDApIHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHt0aGlzLl9sb2dMYWJlbH06ICBBVkc9JHt0aGlzLl9hdmdGcmFtZUxhdGVuY3kudG9GaXhlZCgzKX0gIGAgK1xuICAgICAgICAgIGAoTUFYPSR7dGhpcy5fbWF4RnJhbWVMYXRlbmN5LnRvRml4ZWQoMyl9OyBNSU49JHt0aGlzLl9taW5GcmFtZUxhdGVuY3kudG9GaXhlZCgzKX0pYDtcbiAgICAgIGlmICh0aGlzLl9tYXhGcmFtZUxhdGVuY3kgPj0gdGhpcy5fbGF0ZW5jeVdhcm5pbmdUaHJlc2hvbGQpIHtcbiAgICAgICAgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhtZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IHtGcmFtZUxhdGVuY3lQcm9maWxlcn07XG4iLCJleHBvcnQgKiBmcm9tICcuL2FuaW1hdGlvbi1qb2InO1xuZXhwb3J0ICogZnJvbSAnLi9hbmltYXRvcic7XG5leHBvcnQgKiBmcm9tICcuL2ZyYW1lLWxhdGVuY3ktcHJvZmlsZXInO1xuZXhwb3J0ICogZnJvbSAnLi9wZXJzaXN0ZW50LWFuaW1hdGlvbi1qb2InO1xuZXhwb3J0ICogZnJvbSAnLi90cmFuc2llbnQtYW5pbWF0aW9uLWpvYic7XG4iLCJpbXBvcnQge0FuaW1hdGlvbkpvYn0gZnJvbSAnLi9hbmltYXRpb24tam9iJztcblxuLyoqXG4gKiBBIFBlcnNpc3RlbnRBbmltYXRpb25Kb2IgcmVjdXJzIG9yIGhhcyBhbiBpbmRlZmluaXRlIGR1cmF0aW9uLlxuICpcbiAqIEBhYnN0cmFjdFxuICovXG5jbGFzcyBQZXJzaXN0ZW50QW5pbWF0aW9uSm9iIGV4dGVuZHMgQW5pbWF0aW9uSm9iIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtvbkNvbXBsZXRlXSBBIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCB3aGVuIHRoaXMgQW5pbWF0aW9uSm9iIGlzIGZpbmlzaGVkLlxuICAgKi9cbiAgY29uc3RydWN0b3Iob25Db21wbGV0ZSkge1xuICAgIHN1cGVyKG9uQ29tcGxldGUpO1xuXG4gICAgLy8gUGVyc2lzdGVudEFuaW1hdGlvbkpvYiBpcyBhbiBhYnN0cmFjdCBjbGFzcy4gSXQgc2hvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQgZGlyZWN0bHkuXG4gICAgaWYgKG5ldy50YXJnZXQgPT09IFBlcnNpc3RlbnRBbmltYXRpb25Kb2IpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb25zdHJ1Y3QgUGVyc2lzdGVudEFuaW1hdGlvbkpvYiBpbnN0YW5jZXMgZGlyZWN0bHknKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQGFic3RyYWN0XG4gICAqL1xuICByZXNldCgpIHtcbiAgICAvLyBFeHRlbmRpbmcgY2xhc3NlcyBzaG91bGQgaW1wbGVtZW50IHRoaXMgbWV0aG9kLlxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQnKTtcbiAgfVxufVxuXG5leHBvcnQge1BlcnNpc3RlbnRBbmltYXRpb25Kb2J9O1xuIiwiaW1wb3J0IHtfdXRpbH0gZnJvbSAnLi91dGlsJztcblxuaW1wb3J0IHtBbmltYXRpb25Kb2J9IGZyb20gJy4vYW5pbWF0aW9uLWpvYic7XG5cbi8qKlxuICogQSBUcmFuc2llbnRBbmltYXRpb25Kb2IgaXMgdGVtcG9yYXJ5IGFuZCBoYXMgYSBkZWZpbml0ZSBiZWdpbm5pbmcgYW5kIGVuZC5cbiAqXG4gKiBAYWJzdHJhY3RcbiAqL1xuY2xhc3MgVHJhbnNpZW50QW5pbWF0aW9uSm9iIGV4dGVuZHMgQW5pbWF0aW9uSm9iIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkdXJhdGlvblxuICAgKiBAcGFyYW0ge251bWJlcn0gZGVsYXlcbiAgICogQHBhcmFtIHtGdW5jdGlvbnxTdHJpbmd9IGVhc2luZ0Z1bmN0aW9uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtvbkNvbXBsZXRlXSBBIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCB3aGVuIHRoaXMgQW5pbWF0aW9uSm9iIGlzIGZpbmlzaGVkLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZHVyYXRpb24sIGRlbGF5LCBlYXNpbmdGdW5jdGlvbiwgb25Db21wbGV0ZSkge1xuICAgIHN1cGVyKG9uQ29tcGxldGUpO1xuXG4gICAgLy8gVHJhbnNpZW50QW5pbWF0aW9uSm9iIGlzIGFuIGFic3RyYWN0IGNsYXNzLiBJdCBzaG91bGQgbm90IGJlIGluc3RhbnRpYXRlZCBkaXJlY3RseS5cbiAgICBpZiAobmV3LnRhcmdldCA9PT0gVHJhbnNpZW50QW5pbWF0aW9uSm9iKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29uc3RydWN0IFRyYW5zaWVudEFuaW1hdGlvbkpvYiBpbnN0YW5jZXMgZGlyZWN0bHknKTtcbiAgICB9XG5cbiAgICB0aGlzLl9kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgIHRoaXMuX2RlbGF5ID0gZGVsYXk7XG4gICAgdGhpcy5fZWFzaW5nRnVuY3Rpb24gPSB0eXBlb2YgZWFzaW5nRnVuY3Rpb24gPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBlYXNpbmdGdW5jdGlvblxuICAgICAgICA6IF91dGlsLmVhc2luZ0Z1bmN0aW9uc1tlYXNpbmdGdW5jdGlvbl07XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIGdldCBlbmRUaW1lKCkge1xuICAgIHJldHVybiB0aGlzLl9zdGFydFRpbWUgKyB0aGlzLl9kdXJhdGlvbiArIHRoaXMuX2RlbGF5O1xuICB9XG59XG5cbmV4cG9ydCB7VHJhbnNpZW50QW5pbWF0aW9uSm9ifTtcbiIsIi8qKlxuICogVGhpcyBtb2R1bGUgZGVmaW5lcyBhIGNvbGxlY3Rpb24gb2Ygc3RhdGljIHV0aWxpdHkgZnVuY3Rpb25zLlxuICovXG5cbi8vIEEgY29sbGVjdGlvbiBvZiBkaWZmZXJlbnQgdHlwZXMgb2YgZWFzaW5nIGZ1bmN0aW9ucy5cbmNvbnN0IGVhc2luZ0Z1bmN0aW9ucyA9IHtcbiAgbGluZWFyOiB0ID0+IHQsXG4gIGVhc2VJblF1YWQ6IHQgPT4gdCAqIHQsXG4gIGVhc2VPdXRRdWFkOiB0ID0+IHQgKiAoMiAtIHQpLFxuICBlYXNlSW5PdXRRdWFkOiB0ID0+IHQgPCAwLjUgPyAyICogdCAqIHQgOiAtMSArICg0IC0gMiAqIHQpICogdCxcbiAgZWFzZUluQ3ViaWM6IHQgPT4gdCAqIHQgKiB0LFxuICBlYXNlT3V0Q3ViaWM6IHQgPT4gMSArIC0tdCAqIHQgKiB0LFxuICBlYXNlSW5PdXRDdWJpYzogdCA9PiB0IDwgMC41ID8gNCAqIHQgKiB0ICogdCA6ICh0IC0gMSkgKiAoMiAqIHQgLSAyKSAqICgyICogdCAtIDIpICsgMSxcbiAgZWFzZUluUXVhcnQ6IHQgPT4gdCAqIHQgKiB0ICogdCxcbiAgZWFzZU91dFF1YXJ0OiB0ID0+IDEgLSAtLXQgKiB0ICogdCAqIHQsXG4gIGVhc2VJbk91dFF1YXJ0OiB0ID0+IHQgPCAwLjUgPyA4ICogdCAqIHQgKiB0ICogdCA6IDEgLSA4ICogLS10ICogdCAqIHQgKiB0LFxuICBlYXNlSW5RdWludDogdCA9PiB0ICogdCAqIHQgKiB0ICogdCxcbiAgZWFzZU91dFF1aW50OiB0ID0+IDEgKyAtLXQgKiB0ICogdCAqIHQgKiB0LFxuICBlYXNlSW5PdXRRdWludDogdCA9PiB0IDwgMC41ID8gMTYgKiB0ICogdCAqIHQgKiB0ICogdCA6IDEgKyAxNiAqIC0tdCAqIHQgKiB0ICogdCAqIHRcbn07XG5cbmNvbnN0IF91dGlsID0ge1xuICBlYXNpbmdGdW5jdGlvbnMsXG59O1xuXG5leHBvcnQge1xuICBfdXRpbCxcbn07XG4iLCJleHBvcnQgKiBmcm9tICcuL3NyYyc7XG4iLCIvKipcbiAqIEFuIEFuaW1hdGlvbkpvYiBpcyB1c2VkIHdpdGggdGhlIGFuaW1hdG9yIGNvbnRyb2xsZXIgdG8gdXBkYXRlIGFuZCByZS1kcmF3IHNvbWV0aGluZyBlYWNoIGZyYW1lLlxuICpcbiAqIEBhYnN0cmFjdFxuICovXG5jbGFzcyBBbmltYXRpb25Kb2Ige1xuICAvKipcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW29uQ29tcGxldGVdIEEgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIHdoZW4gdGhpcyBBbmltYXRpb25Kb2IgaXMgZmluaXNoZWQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvbkNvbXBsZXRlKSB7XG4gICAgLy8gQW5pbWF0aW9uSm9iIGlzIGFuIGFic3RyYWN0IGNsYXNzLiBJdCBzaG91bGQgbm90IGJlIGluc3RhbnRpYXRlZCBkaXJlY3RseS5cbiAgICBpZiAobmV3LnRhcmdldCA9PT0gQW5pbWF0aW9uSm9iKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29uc3RydWN0IEFuaW1hdGlvbkpvYiBpbnN0YW5jZXMgZGlyZWN0bHknKTtcbiAgICB9XG5cbiAgICB0aGlzLl9zdGFydFRpbWUgPSAwO1xuICAgIHRoaXMuX2lzQ29tcGxldGUgPSB0cnVlO1xuICAgIHRoaXMuX29uQ29tcGxldGUgPSBvbkNvbXBsZXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyB3aGV0aGVyIHRoaXMgQW5pbWF0aW9uSm9iIGlzIGNvbXBsZXRlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGlzQ29tcGxldGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzQ29tcGxldGU7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGlzIEFuaW1hdGlvbkpvYiBhcyBzdGFydGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUhpZ2hSZXNUaW1lU3RhbXB9IHN0YXJ0VGltZVxuICAgKi9cbiAgc3RhcnQoc3RhcnRUaW1lKSB7XG4gICAgdGhpcy5fc3RhcnRUaW1lID0gc3RhcnRUaW1lO1xuICAgIHRoaXMuX2lzQ29tcGxldGUgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBhbmltYXRpb24gcHJvZ3Jlc3Mgb2YgdGhpcyBBbmltYXRpb25Kb2IgdG8gbWF0Y2ggdGhlIGdpdmVuIHRpbWUuXG4gICAqXG4gICAqIFRoaXMgaXMgY2FsbGVkIGZyb20gdGhlIG92ZXJhbGwgYW5pbWF0aW9uIGxvb3AuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NSGlnaFJlc1RpbWVTdGFtcH0gY3VycmVudFRpbWVcbiAgICogQHBhcmFtIHtET01IaWdoUmVzVGltZVN0YW1wfSBkZWx0YVRpbWVcbiAgICogQGFic3RyYWN0XG4gICAqL1xuICB1cGRhdGUoY3VycmVudFRpbWUsIGRlbHRhVGltZSkge1xuICAgIC8vIEV4dGVuZGluZyBjbGFzc2VzIHNob3VsZCBpbXBsZW1lbnQgdGhpcyBtZXRob2QuXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdzIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoaXMgQW5pbWF0aW9uSm9iLlxuICAgKlxuICAgKiBUaGlzIGlzIGNhbGxlZCBmcm9tIHRoZSBvdmVyYWxsIGFuaW1hdGlvbiBsb29wLlxuICAgKlxuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIGRyYXcoKSB7XG4gICAgLy8gRXh0ZW5kaW5nIGNsYXNzZXMgc2hvdWxkIGltcGxlbWVudCB0aGlzIG1ldGhvZC5cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdNZXRob2Qgbm90IGltcGxlbWVudGVkJyk7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyBhbnkgbmVjZXNzYXJ5IHN0YXRlIGZvciB0aGlzIEFuaW1hdGlvbkpvYiBiZWluZyBmaW5pc2hlZC5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBpc0NhbmNlbGxlZFxuICAgKi9cbiAgZmluaXNoKGlzQ2FuY2VsbGVkKSB7XG4gICAgY29uc29sZS5sb2coYCR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfSAke2lzQ2FuY2VsbGVkID8gJ2NhbmNlbGxlZCcgOiAnY29tcGxldGVkJ31gKTtcblxuICAgIHRoaXMuX2lzQ29tcGxldGUgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMuX29uQ29tcGxldGUpIHtcbiAgICAgIHRoaXMuX29uQ29tcGxldGUoKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IHtBbmltYXRpb25Kb2J9O1xuIiwiaW1wb3J0IHtGcmFtZUxhdGVuY3lQcm9maWxlcn0gZnJvbSAnLi9mcmFtZS1sYXRlbmN5LXByb2ZpbGVyJztcbmltcG9ydCB7UGVyc2lzdGVudEFuaW1hdGlvbkpvYn0gZnJvbSAnLi9wZXJzaXN0ZW50LWFuaW1hdGlvbi1qb2InO1xuaW1wb3J0IHtUcmFuc2llbnRBbmltYXRpb25Kb2J9IGZyb20gJy4vdHJhbnNpZW50LWFuaW1hdGlvbi1qb2InO1xuXG5jb25zdCBfREVMVEFfVElNRV9VUFBFUl9USFJFU0hPTEQgPSAyMDA7XG5jb25zdCBfRlJBTUVfRFVSQVRJT05fV0FSTklOR19USFJFU0hPTEQgPSAxMDAwIC8gMzA7XG5jb25zdCBfRlJBTUVfTEFURU5DWV9MT0dfUEVSSU9EID0gNTAwMDtcbmNvbnN0IF9MQVRFTkNZX0xPR19MQUJFTCA9ICdBbmltYXRpb24gZnJhbWUgcGVyaW9kJztcblxuLyoqXG4gKiBUaGlzIGNsYXNzIGhhbmRsZXMgdGhlIGFuaW1hdGlvbiBsb29wLlxuICpcbiAqIFRoaXMgY2xhc3MncyByZXNwb25zaWJpbGl0aWVzIGluY2x1ZGU6XG4gKiAtIHVwZGF0aW5nIG1vZHVsZXMgZm9yIHRoZSBjdXJyZW50IGZyYW1lLFxuICogLSBkcmF3aW5nIHJlbmRlcmFibGVzIGZvciB0aGUgY3VycmVudCBmcmFtZSxcbiAqIC0gc3RhcnRpbmcgYW5kIHN0b3BwaW5nIHRyYW5zaWVudCBhbmltYXRpb24gam9icyxcbiAqIC0gY2FwcGluZyB0aW1lIHN0ZXAgZHVyYXRpb25zIGF0IGEgbWF4IHRocmVzaG9sZC5cbiAqL1xuY2xhc3MgQW5pbWF0b3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9qb2JzID0gW107XG4gICAgdGhpcy5fcHJldmlvdXNUaW1lID0gbnVsbDtcbiAgICB0aGlzLl9pc1BhdXNlZCA9IHRydWU7XG4gICAgdGhpcy5fcmVxdWVzdEFuaW1hdGlvbkZyYW1lSWQgPSBudWxsO1xuICAgIHRoaXMuX3RvdGFsVW5wYXVzZWRSdW5UaW1lID0gMDtcbiAgICB0aGlzLl9sYXN0VW5wYXVzZVRpbWUgPSBudWxsO1xuICAgIHRoaXMuX2xhdGVuY3lQcm9maWxlciA9IG5ldyBGcmFtZUxhdGVuY3lQcm9maWxlcihfRlJBTUVfTEFURU5DWV9MT0dfUEVSSU9ELFxuICAgICAgICBfRlJBTUVfRFVSQVRJT05fV0FSTklOR19USFJFU0hPTEQsIF9MQVRFTkNZX0xPR19MQUJFTCk7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnRzIHRoZSBnaXZlbiBBbmltYXRpb25Kb2IuXG4gICAqXG4gICAqIEBwYXJhbSB7QW5pbWF0aW9uSm9ifSBqb2JcbiAgICovXG4gIHN0YXJ0Sm9iKGpvYikge1xuICAgIC8vIElzIHRoaXMgYSByZXN0YXJ0P1xuICAgIGlmICgham9iLmlzQ29tcGxldGUpIHtcbiAgICAgIGNvbnNvbGUuZGVidWcoYFJlc3RhcnRpbmcgQW5pbWF0aW9uSm9iOiAke2pvYi5jb25zdHJ1Y3Rvci5uYW1lfWApO1xuXG4gICAgICBpZiAoam9iIGluc3RhbmNlb2YgUGVyc2lzdGVudEFuaW1hdGlvbkpvYikge1xuICAgICAgICBqb2IucmVzZXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGpvYi5maW5pc2godHJ1ZSk7XG4gICAgICAgIGpvYi5zdGFydCh3aW5kb3cucGVyZm9ybWFuY2Uubm93KCkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmRlYnVnKGBTdGFydGluZyBBbmltYXRpb25Kb2I6ICR7am9iLmNvbnN0cnVjdG9yLm5hbWV9YCk7XG5cbiAgICAgIGpvYi5zdGFydCh0aGlzLl9wcmV2aW91c1RpbWUpO1xuICAgICAgdGhpcy5fam9icy5wdXNoKGpvYik7XG4gICAgfVxuXG4gICAgdGhpcy5fc3RhcnRBbmltYXRpb25Mb29wKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FuY2VscyB0aGUgZ2l2ZW4gQW5pbWF0aW9uSm9iLlxuICAgKlxuICAgKiBAcGFyYW0ge0FuaW1hdGlvbkpvYn0gam9iXG4gICAqL1xuICBjYW5jZWxKb2Ioam9iKSB7XG4gICAgY29uc29sZS5kZWJ1ZyhgQ2FuY2VsbGluZyBBbmltYXRpb25Kb2I6ICR7am9iLmNvbnN0cnVjdG9yLm5hbWV9YCk7XG4gICAgam9iLmZpbmlzaCh0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYW5jZWxzIGFsbCBydW5uaW5nIEFuaW1hdGlvbkpvYnMuXG4gICAqL1xuICBjYW5jZWxBbGwoKSB7XG4gICAgd2hpbGUgKHRoaXMuX2pvYnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLmNhbmNlbEpvYih0aGlzLl9qb2JzWzBdKTtcbiAgICB9XG4gIH1cblxuICAvKiogQHJldHVybnMge0RPTUhpZ2hSZXNUaW1lU3RhbXB9ICovXG4gIGdldCBjdXJyZW50VGltZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcHJldmlvdXNUaW1lO1xuICB9XG5cbiAgLyoqIEByZXR1cm5zIHtib29sZWFufSAqL1xuICBnZXQgaXNQYXVzZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzUGF1c2VkO1xuICB9XG5cbiAgcGF1c2UoKSB7XG4gICAgdGhpcy5fc3RvcEFuaW1hdGlvbkxvb3AoKTtcbiAgICBjb25zb2xlLmRlYnVnKCdBbmltYXRvciBwYXVzZWQnKTtcbiAgfVxuXG4gIHVucGF1c2UoKSB7XG4gICAgdGhpcy5fc3RhcnRBbmltYXRpb25Mb29wKCk7XG4gICAgY29uc29sZS5kZWJ1ZygnQW5pbWF0b3IgdW5wYXVzZWQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBhbmltYXRpb24gbG9vcCB0aGF0IGRyaXZlcyBhbGwgb2YgdGhlIGFuaW1hdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtET01IaWdoUmVzVGltZVN0YW1wfSBjdXJyZW50VGltZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2FuaW1hdGlvbkxvb3AoY3VycmVudFRpbWUpIHtcbiAgICAvLyBXaGVuIHBhdXNpbmcgYW5kIHJlc3RhcnRpbmcsIGl0J3MgcG9zc2libGUgZm9yIHRoZSBwcmV2aW91cyB0aW1lIHRvIGJlIHNsaWdodGx5IGluY29uc2lzdGVudFxuICAgIC8vIHdpdGggdGhlIGFuaW1hdGlvbkZyYW1lIHRpbWUuXG4gICAgaWYgKGN1cnJlbnRUaW1lIDwgdGhpcy5fcHJldmlvdXNUaW1lKSB7XG4gICAgICB0aGlzLl9wcmV2aW91c1RpbWUgPSBjdXJyZW50VGltZSAtIDE7XG4gICAgfVxuXG4gICAgbGV0IGRlbHRhVGltZSA9IGN1cnJlbnRUaW1lIC0gdGhpcy5fcHJldmlvdXNUaW1lO1xuICAgIHRoaXMuX3ByZXZpb3VzVGltZSA9IGN1cnJlbnRUaW1lO1xuXG4gICAgdGhpcy5fbGF0ZW5jeVByb2ZpbGVyLnJlY29yZEZyYW1lTGF0ZW5jeShkZWx0YVRpbWUpO1xuXG4gICAgLy8gTGFyZ2UgZGVsYXlzIGJldHdlZW4gZnJhbWVzIGNhbiBjYXVzZSBsZWFkIHRvIGluc3RhYmlsaXR5IGluIHRoZSBzeXN0ZW0sIHNvIHRoaXMgY2FwcyB0aGVtIHRvXG4gICAgLy8gYSBtYXggdGhyZXNob2xkLlxuICAgIGRlbHRhVGltZSA9IGRlbHRhVGltZSA+IF9ERUxUQV9USU1FX1VQUEVSX1RIUkVTSE9MRCA/XG4gICAgICAgIF9ERUxUQV9USU1FX1VQUEVSX1RIUkVTSE9MRCA6IGRlbHRhVGltZTtcblxuICAgIGlmICghdGhpcy5faXNQYXVzZWQpIHtcbiAgICAgIHRoaXMuX3JlcXVlc3RBbmltYXRpb25GcmFtZUlkID1cbiAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGN1cnJlbnRUaW1lID0+IHRoaXMuX2FuaW1hdGlvbkxvb3AoY3VycmVudFRpbWUpKTtcbiAgICAgIHRoaXMuX3VwZGF0ZUpvYnMoY3VycmVudFRpbWUsIGRlbHRhVGltZSk7XG4gICAgICB0aGlzLl9kcmF3Sm9icygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIGFsbCBvZiB0aGUgYWN0aXZlIEFuaW1hdGlvbkpvYnMuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NSGlnaFJlc1RpbWVTdGFtcH0gY3VycmVudFRpbWVcbiAgICogQHBhcmFtIHtET01IaWdoUmVzVGltZVN0YW1wfSBkZWx0YVRpbWVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF91cGRhdGVKb2JzKGN1cnJlbnRUaW1lLCBkZWx0YVRpbWUpIHtcbiAgICBmb3IgKGxldCBpID0gMCwgY291bnQgPSB0aGlzLl9qb2JzLmxlbmd0aDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgIGxldCBqb2IgPSB0aGlzLl9qb2JzW2ldO1xuXG4gICAgICAvLyBSZW1vdmUgam9icyBmcm9tIHRoZSBsaXN0IGFmdGVyIHRoZXkgYXJlIGNvbXBsZXRlLlxuICAgICAgaWYgKGpvYi5pc0NvbXBsZXRlKSB7XG4gICAgICAgIHRoaXMuX3JlbW92ZUpvYihqb2IsIGkpO1xuICAgICAgICBpLS07XG4gICAgICAgIGNvdW50LS07XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayB3aGV0aGVyIHRoZSBqb2IgaXMgdHJhbnNpZW50IGFuZCBoYXMgcmVhY2hlZCBpdHMgZW5kLlxuICAgICAgaWYgKGpvYiBpbnN0YW5jZW9mIFRyYW5zaWVudEFuaW1hdGlvbkpvYiAmJiBqb2IuZW5kVGltZSA8IGN1cnJlbnRUaW1lKSB7XG4gICAgICAgIGpvYi5maW5pc2goZmFsc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgam9iLnVwZGF0ZShjdXJyZW50VGltZSwgZGVsdGFUaW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyB0aGUgZ2l2ZW4gam9iIGZyb20gdGhlIGNvbGxlY3Rpb24gb2YgYWN0aXZlLCBhbmltYXRpbmcgam9icy5cbiAgICpcbiAgICogQHBhcmFtIHtBbmltYXRpb25Kb2J9IGpvYlxuICAgKiBAcGFyYW0ge251bWJlcn0gW2luZGV4PS0xXVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlbW92ZUpvYihqb2IsIGluZGV4ID0gLTEpIHtcbiAgICBjb25zb2xlLmRlYnVnKGBSZW1vdmluZyBBbmltYXRpb25Kb2I6ICR7am9iLmNvbnN0cnVjdG9yLm5hbWV9YCk7XG5cbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgdGhpcy5fam9icy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBjb3VudCA9IHRoaXMuX2pvYnMubGVuZ3RoO1xuICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgY291bnQ7IGluZGV4KyspIHtcbiAgICAgICAgaWYgKHRoaXMuX2pvYnNbaW5kZXhdID09PSBqb2IpIHtcbiAgICAgICAgICB0aGlzLl9qb2JzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTdG9wIHRoZSBhbmltYXRpb24gbG9vcCB3aGVuIHRoZXJlIGFyZSBubyBtb3JlIGpvYnMgdG8gYW5pbWF0ZS5cbiAgICBpZiAodGhpcy5fam9icy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuX3N0b3BBbmltYXRpb25Mb29wKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERyYXdzIGFsbCBvZiB0aGUgYWN0aXZlIEFuaW1hdGlvbkpvYnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZHJhd0pvYnMoKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGNvdW50ID0gdGhpcy5fam9icy5sZW5ndGg7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICB0aGlzLl9qb2JzW2ldLmRyYXcoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3RhcnRzIHRoZSBhbmltYXRpb24gbG9vcCBpZiBpdCBpcyBub3QgYWxyZWFkeSBydW5uaW5nLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBpZGVtcG90ZW50LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3N0YXJ0QW5pbWF0aW9uTG9vcCgpIHtcbiAgICBpZiAodGhpcy5faXNQYXVzZWQpIHtcbiAgICAgIHRoaXMuX2xhc3RVbnBhdXNlVGltZSA9IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKTtcbiAgICB9XG4gICAgdGhpcy5faXNQYXVzZWQgPSBmYWxzZTtcblxuICAgIC8vIE9ubHkgYWN0dWFsbHkgc3RhcnQgdGhlIGxvb3AgaWYgaXQgaXNuJ3QgYWxyZWFkeSBydW5uaW5nIGFuZCB0aGUgcGFnZSBoYXMgZm9jdXMuXG4gICAgaWYgKCF0aGlzLl9yZXF1ZXN0QW5pbWF0aW9uRnJhbWVJZCAmJiAhZG9jdW1lbnQuaGlkZGVuKSB7XG4gICAgICB0aGlzLl9sYXRlbmN5UHJvZmlsZXIuc3RhcnQoKTtcbiAgICAgIHRoaXMuX3ByZXZpb3VzVGltZSA9IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgIHRoaXMuX3JlcXVlc3RBbmltYXRpb25GcmFtZUlkID1cbiAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRpbWUgPT4gdGhpcy5fYW5pbWF0aW9uTG9vcCh0aW1lKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN0b3BzIHRoZSBhbmltYXRpb24gbG9vcC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zdG9wQW5pbWF0aW9uTG9vcCgpIHtcbiAgICBpZiAoIXRoaXMuX2lzUGF1c2VkKSB7XG4gICAgICB0aGlzLl90b3RhbFVucGF1c2VkUnVuVGltZSArPSB0aGlzLl90aW1lU2luY2VMYXN0UGF1c2VkO1xuICAgIH1cbiAgICB0aGlzLl9pc1BhdXNlZCA9IHRydWU7XG4gICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuX3JlcXVlc3RBbmltYXRpb25GcmFtZUlkKTtcbiAgICB0aGlzLl9yZXF1ZXN0QW5pbWF0aW9uRnJhbWVJZCA9IG51bGw7XG4gICAgdGhpcy5fbGF0ZW5jeVByb2ZpbGVyLnN0b3AoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgcHJvbWlzZSB0aGF0IHdpbGwgcmVzb2x2ZSBvbiB0aGUgbmV4dCBhbmltYXRpb24gbG9vcC5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAqL1xuICByZXNvbHZlT25OZXh0RnJhbWUoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHRvdGFsIGFtb3VudCBvZiB0aW1lIHRoZSBhbmltYXRvciBoYXMgYmVlbiBydW5uaW5nIHdoaWxlIG5vdCBwYXVzZWQuXG4gICAqXG4gICAqIEByZXR1cm5zIHtET01IaWdoUmVzVGltZVN0YW1wfVxuICAgKi9cbiAgZ2V0IHRvdGFsUnVuVGltZSgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNQYXVzZWRcbiAgICAgICAgPyB0aGlzLl90b3RhbFVucGF1c2VkUnVuVGltZVxuICAgICAgICA6IHRoaXMuX3RvdGFsVW5wYXVzZWRSdW5UaW1lICsgdGhpcy5fdGltZVNpbmNlTGFzdFBhdXNlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7RE9NSGlnaFJlc1RpbWVTdGFtcH1cbiAgICovXG4gIGdldCBfdGltZVNpbmNlTGFzdFBhdXNlZCgpIHtcbiAgICByZXR1cm4gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpIC0gdGhpcy5fbGFzdFVucGF1c2VUaW1lO1xuICB9XG59XG5cbmNvbnN0IGFuaW1hdG9yID0gbmV3IEFuaW1hdG9yKCk7XG5cbmV4cG9ydCB7YW5pbWF0b3J9O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtudW1iZXJ9IERPTUhpZ2hSZXNUaW1lU3RhbXAgQSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzLCBhY2N1cmF0ZSB0byBvbmUgdGhvdXNhbmR0aCBvZiBhXG4gKiBtaWxsaXNlY29uZC5cbiAqL1xuXG4iLCIvKipcbiAqIFRoaXMgY2xhc3Mga2VlcHMgdHJhY2sgb2YgYXZnL21pbi9tYXggZnJhbWUgbGF0ZW5jaWVzIG92ZXIgdGhlIGxhc3QgbG9nZ2luZyB0aW1lIHBlcmlvZCBhbmRcbiAqIHBlcmlvZGljYWxseSBsb2dzIHRoZXNlIHZhbHVlcy5cbiAqL1xuY2xhc3MgRnJhbWVMYXRlbmN5UHJvZmlsZXIge1xuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxvZ1BlcmlvZCBUaGUgcGVyaW9kIGF0IHdoaWNoIHRvIHByaW50IGxhdGVuY3kgbG9nIG1lc3NhZ2VzLiBJbiBtaWxsaXNlY29uZHMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsYXRlbmN5V2FybmluZ1RocmVzaG9sZCBJZiB0aGUgYXZlcmFnZSBsYXRlbmN5IGV4Y2VlZHMgdGhpcyB0aHJlc2hvbGQsIHRoZW4gdGhlXG4gICAqIGxvZyBtZXNzYWdlIGlzIHNob3duIGFzIGEgd2FybmluZy4gSW4gbWlsbGlzZWNvbmRzLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbG9nTGFiZWwgQSBsYWJlbCB0byBzaG93IGZvciBlYWNoIGxhdGVuY3kgbG9nIG1lc3NhZ2UuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihsb2dQZXJpb2QsIGxhdGVuY3lXYXJuaW5nVGhyZXNob2xkLCBsb2dMYWJlbCkge1xuICAgIHRoaXMuX2xvZ1BlcmlvZCA9IGxvZ1BlcmlvZDtcbiAgICB0aGlzLl9sYXRlbmN5V2FybmluZ1RocmVzaG9sZCA9IGxhdGVuY3lXYXJuaW5nVGhyZXNob2xkO1xuICAgIHRoaXMuX2xvZ0xhYmVsID0gbG9nTGFiZWw7XG5cbiAgICB0aGlzLl9mcmFtZUNvdW50ID0gbnVsbDtcbiAgICB0aGlzLl9tYXhGcmFtZUxhdGVuY3kgPSBudWxsO1xuICAgIHRoaXMuX21pbkZyYW1lTGF0ZW5jeSA9IG51bGw7XG4gICAgdGhpcy5fYXZnRnJhbWVMYXRlbmN5ID0gbnVsbDtcblxuICAgIHRoaXMuX2ludGVydmFsSWQgPSBudWxsO1xuICB9XG5cbiAgc3RhcnQoKSB7XG4gICAgdGhpcy5zdG9wKCk7XG4gICAgdGhpcy5yZXNldCgpO1xuXG4gICAgdGhpcy5faW50ZXJ2YWxJZCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIHRoaXMubG9nRnJhbWVMYXRlbmN5KCk7XG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfSwgdGhpcy5fbG9nUGVyaW9kKTtcbiAgfVxuXG4gIHN0b3AoKSB7XG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbElkKTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuX2ZyYW1lQ291bnQgPSAwO1xuICAgIHRoaXMuX21heEZyYW1lTGF0ZW5jeSA9IE51bWJlci5NSU5fVkFMVUU7XG4gICAgdGhpcy5fbWluRnJhbWVMYXRlbmN5ID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICB0aGlzLl9hdmdGcmFtZUxhdGVuY3kgPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEtlZXBzIHRyYWNrIG9mIGEgcnVubmluZyBhdmVyYWdlLCBtaW4gdmFsdWUsIGFuZCBtYXggdmFsdWUgZm9yIHRoZSBmcmFtZSBsYXRlbmNpZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NSGlnaFJlc1RpbWVTdGFtcH0gZnJhbWVMYXRlbmN5XG4gICAqL1xuICByZWNvcmRGcmFtZUxhdGVuY3koZnJhbWVMYXRlbmN5KSB7XG4gICAgdGhpcy5fZnJhbWVDb3VudCsrO1xuICAgIHRoaXMuX21heEZyYW1lTGF0ZW5jeSA9XG4gICAgICAgIHRoaXMuX21heEZyYW1lTGF0ZW5jeSA8IGZyYW1lTGF0ZW5jeSA/IGZyYW1lTGF0ZW5jeSA6IHRoaXMuX21heEZyYW1lTGF0ZW5jeTtcbiAgICB0aGlzLl9taW5GcmFtZUxhdGVuY3kgPVxuICAgICAgICB0aGlzLl9taW5GcmFtZUxhdGVuY3kgPiBmcmFtZUxhdGVuY3kgPyBmcmFtZUxhdGVuY3kgOiB0aGlzLl9taW5GcmFtZUxhdGVuY3k7XG4gICAgdGhpcy5fYXZnRnJhbWVMYXRlbmN5ID1cbiAgICAgICAgdGhpcy5fYXZnRnJhbWVMYXRlbmN5ICsgKGZyYW1lTGF0ZW5jeSAtIHRoaXMuX2F2Z0ZyYW1lTGF0ZW5jeSkgLyB0aGlzLl9mcmFtZUNvdW50O1xuICB9XG5cbiAgbG9nRnJhbWVMYXRlbmN5KCkge1xuICAgIGlmICh0aGlzLl9mcmFtZUNvdW50ID4gMCkge1xuICAgICAgY29uc3QgbWVzc2FnZSA9IGAke3RoaXMuX2xvZ0xhYmVsfTogIEFWRz0ke3RoaXMuX2F2Z0ZyYW1lTGF0ZW5jeS50b0ZpeGVkKDMpfSAgYCArXG4gICAgICAgICAgYChNQVg9JHt0aGlzLl9tYXhGcmFtZUxhdGVuY3kudG9GaXhlZCgzKX07IE1JTj0ke3RoaXMuX21pbkZyYW1lTGF0ZW5jeS50b0ZpeGVkKDMpfSlgO1xuICAgICAgaWYgKHRoaXMuX21heEZyYW1lTGF0ZW5jeSA+PSB0aGlzLl9sYXRlbmN5V2FybmluZ1RocmVzaG9sZCkge1xuICAgICAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmRlYnVnKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQge0ZyYW1lTGF0ZW5jeVByb2ZpbGVyfTtcbiIsImV4cG9ydCAqIGZyb20gJy4vYW5pbWF0aW9uLWpvYic7XG5leHBvcnQgKiBmcm9tICcuL2FuaW1hdG9yJztcbmV4cG9ydCAqIGZyb20gJy4vZnJhbWUtbGF0ZW5jeS1wcm9maWxlcic7XG5leHBvcnQgKiBmcm9tICcuL3BlcnNpc3RlbnQtYW5pbWF0aW9uLWpvYic7XG5leHBvcnQgKiBmcm9tICcuL3RyYW5zaWVudC1hbmltYXRpb24tam9iJztcbiIsImltcG9ydCB7QW5pbWF0aW9uSm9ifSBmcm9tICcuL2FuaW1hdGlvbi1qb2InO1xuXG4vKipcbiAqIEEgUGVyc2lzdGVudEFuaW1hdGlvbkpvYiByZWN1cnMgb3IgaGFzIGFuIGluZGVmaW5pdGUgZHVyYXRpb24uXG4gKlxuICogQGFic3RyYWN0XG4gKi9cbmNsYXNzIFBlcnNpc3RlbnRBbmltYXRpb25Kb2IgZXh0ZW5kcyBBbmltYXRpb25Kb2Ige1xuICAvKipcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW29uQ29tcGxldGVdIEEgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIHdoZW4gdGhpcyBBbmltYXRpb25Kb2IgaXMgZmluaXNoZWQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvbkNvbXBsZXRlKSB7XG4gICAgc3VwZXIob25Db21wbGV0ZSk7XG5cbiAgICAvLyBQZXJzaXN0ZW50QW5pbWF0aW9uSm9iIGlzIGFuIGFic3RyYWN0IGNsYXNzLiBJdCBzaG91bGQgbm90IGJlIGluc3RhbnRpYXRlZCBkaXJlY3RseS5cbiAgICBpZiAobmV3LnRhcmdldCA9PT0gUGVyc2lzdGVudEFuaW1hdGlvbkpvYikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnN0cnVjdCBQZXJzaXN0ZW50QW5pbWF0aW9uSm9iIGluc3RhbmNlcyBkaXJlY3RseScpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIHJlc2V0KCkge1xuICAgIC8vIEV4dGVuZGluZyBjbGFzc2VzIHNob3VsZCBpbXBsZW1lbnQgdGhpcyBtZXRob2QuXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZCcpO1xuICB9XG59XG5cbmV4cG9ydCB7UGVyc2lzdGVudEFuaW1hdGlvbkpvYn07XG4iLCJpbXBvcnQge191dGlsfSBmcm9tICcuL3V0aWwnO1xuXG5pbXBvcnQge0FuaW1hdGlvbkpvYn0gZnJvbSAnLi9hbmltYXRpb24tam9iJztcblxuLyoqXG4gKiBBIFRyYW5zaWVudEFuaW1hdGlvbkpvYiBpcyB0ZW1wb3JhcnkgYW5kIGhhcyBhIGRlZmluaXRlIGJlZ2lubmluZyBhbmQgZW5kLlxuICpcbiAqIEBhYnN0cmFjdFxuICovXG5jbGFzcyBUcmFuc2llbnRBbmltYXRpb25Kb2IgZXh0ZW5kcyBBbmltYXRpb25Kb2Ige1xuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGR1cmF0aW9uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkZWxheVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ30gZWFzaW5nRnVuY3Rpb25cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW29uQ29tcGxldGVdIEEgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIHdoZW4gdGhpcyBBbmltYXRpb25Kb2IgaXMgZmluaXNoZWQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihkdXJhdGlvbiwgZGVsYXksIGVhc2luZ0Z1bmN0aW9uLCBvbkNvbXBsZXRlKSB7XG4gICAgc3VwZXIob25Db21wbGV0ZSk7XG5cbiAgICAvLyBUcmFuc2llbnRBbmltYXRpb25Kb2IgaXMgYW4gYWJzdHJhY3QgY2xhc3MuIEl0IHNob3VsZCBub3QgYmUgaW5zdGFudGlhdGVkIGRpcmVjdGx5LlxuICAgIGlmIChuZXcudGFyZ2V0ID09PSBUcmFuc2llbnRBbmltYXRpb25Kb2IpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb25zdHJ1Y3QgVHJhbnNpZW50QW5pbWF0aW9uSm9iIGluc3RhbmNlcyBkaXJlY3RseScpO1xuICAgIH1cblxuICAgIHRoaXMuX2R1cmF0aW9uID0gZHVyYXRpb247XG4gICAgdGhpcy5fZGVsYXkgPSBkZWxheTtcbiAgICB0aGlzLl9lYXNpbmdGdW5jdGlvbiA9IHR5cGVvZiBlYXNpbmdGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IGVhc2luZ0Z1bmN0aW9uXG4gICAgICAgIDogX3V0aWwuZWFzaW5nRnVuY3Rpb25zW2Vhc2luZ0Z1bmN0aW9uXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IGVuZFRpbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0VGltZSArIHRoaXMuX2R1cmF0aW9uICsgdGhpcy5fZGVsYXk7XG4gIH1cbn1cblxuZXhwb3J0IHtUcmFuc2llbnRBbmltYXRpb25Kb2J9O1xuIiwiLyoqXG4gKiBUaGlzIG1vZHVsZSBkZWZpbmVzIGEgY29sbGVjdGlvbiBvZiBzdGF0aWMgdXRpbGl0eSBmdW5jdGlvbnMuXG4gKi9cblxuLy8gQSBjb2xsZWN0aW9uIG9mIGRpZmZlcmVudCB0eXBlcyBvZiBlYXNpbmcgZnVuY3Rpb25zLlxuY29uc3QgZWFzaW5nRnVuY3Rpb25zID0ge1xuICBsaW5lYXI6IHQgPT4gdCxcbiAgZWFzZUluUXVhZDogdCA9PiB0ICogdCxcbiAgZWFzZU91dFF1YWQ6IHQgPT4gdCAqICgyIC0gdCksXG4gIGVhc2VJbk91dFF1YWQ6IHQgPT4gdCA8IDAuNSA/IDIgKiB0ICogdCA6IC0xICsgKDQgLSAyICogdCkgKiB0LFxuICBlYXNlSW5DdWJpYzogdCA9PiB0ICogdCAqIHQsXG4gIGVhc2VPdXRDdWJpYzogdCA9PiAxICsgLS10ICogdCAqIHQsXG4gIGVhc2VJbk91dEN1YmljOiB0ID0+IHQgPCAwLjUgPyA0ICogdCAqIHQgKiB0IDogKHQgLSAxKSAqICgyICogdCAtIDIpICogKDIgKiB0IC0gMikgKyAxLFxuICBlYXNlSW5RdWFydDogdCA9PiB0ICogdCAqIHQgKiB0LFxuICBlYXNlT3V0UXVhcnQ6IHQgPT4gMSAtIC0tdCAqIHQgKiB0ICogdCxcbiAgZWFzZUluT3V0UXVhcnQ6IHQgPT4gdCA8IDAuNSA/IDggKiB0ICogdCAqIHQgKiB0IDogMSAtIDggKiAtLXQgKiB0ICogdCAqIHQsXG4gIGVhc2VJblF1aW50OiB0ID0+IHQgKiB0ICogdCAqIHQgKiB0LFxuICBlYXNlT3V0UXVpbnQ6IHQgPT4gMSArIC0tdCAqIHQgKiB0ICogdCAqIHQsXG4gIGVhc2VJbk91dFF1aW50OiB0ID0+IHQgPCAwLjUgPyAxNiAqIHQgKiB0ICogdCAqIHQgKiB0IDogMSArIDE2ICogLS10ICogdCAqIHQgKiB0ICogdFxufTtcblxuY29uc3QgX3V0aWwgPSB7XG4gIGVhc2luZ0Z1bmN0aW9ucyxcbn07XG5cbmV4cG9ydCB7XG4gIF91dGlsLFxufTtcbiIsImV4cG9ydCAqIGZyb20gJy4vc3JjL2FhYmItY29sbGlkYWJsZSc7XG5leHBvcnQgKiBmcm9tICcuL3NyYy9jYXBzdWxlLWNvbGxpZGFibGUnO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvY29sbGlkYWJsZSc7XG5leHBvcnQgKiBmcm9tICcuL3NyYy9saW5lLXNlZ21lbnQnO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvb2JiLWNvbGxpZGFibGUnO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvc3BoZXJlLWNvbGxpZGFibGUnO1xuIiwiaW1wb3J0IHtDb2xsaWRhYmxlfSBmcm9tICcuL2NvbGxpZGFibGUnO1xuaW1wb3J0IHtMaW5lU2VnbWVudH0gZnJvbSAnLi9saW5lLXNlZ21lbnQnO1xuaW1wb3J0IHt0bXBWZWMxLCB0bXBWZWMyfSBmcm9tICcuLi8uLi8uLi91dGlsJztcblxuLyoqXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgYW4gYXhpYWxseS1hbGlnbmVkIGJvdW5kaW5nIGJveCAoQUFCQikuXG4gKlxuICogVGhpcyBpcyBwcmltYXJpbHkgdXNlZnVsIGZvciBjb2xsaXNpb24gZGV0ZWN0aW9uLiBBbiBBQUJCIGlzIG9ubHkgYXBwcm9wcmlhdGUgZm9yIHNvbWVcbiAqIGdlb21ldHJpZXMuIEZvciBvdGhlciBnZW9tZXRyaWVzLCBhbiBvcmllbnRlZCBib3VuZGluZyBib3ggKE9CQikgb3IgYSBib3VuZGluZyBzcGhlcmUgbWF5IGJlIG1vcmVcbiAqIGFwcHJvcHJpYXRlLlxuICovXG5jbGFzcyBBYWJiIGV4dGVuZHMgQ29sbGlkYWJsZSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gbWluWFxuICAgKiBAcGFyYW0ge251bWJlcn0gbWluWVxuICAgKiBAcGFyYW0ge251bWJlcn0gbWluWlxuICAgKiBAcGFyYW0ge251bWJlcn0gbWF4WFxuICAgKiBAcGFyYW0ge251bWJlcn0gbWF4WVxuICAgKiBAcGFyYW0ge251bWJlcn0gbWF4WlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1N0YXRpb25hcnk9ZmFsc2VdXG4gICAqIEBwYXJhbSB7Q29sbGlkYWJsZVBoeXNpY3NKb2J9IFtwaHlzaWNzSm9iXVxuICAgKi9cbiAgY29uc3RydWN0b3IobWluWCwgbWluWSwgbWluWiwgbWF4WCwgbWF4WSwgbWF4WiwgaXNTdGF0aW9uYXJ5ID0gZmFsc2UsIHBoeXNpY3NKb2IpIHtcbiAgICBzdXBlcihpc1N0YXRpb25hcnksIHBoeXNpY3NKb2IpO1xuICAgIHRoaXMubWluWCA9IG1pblg7XG4gICAgdGhpcy5taW5ZID0gbWluWTtcbiAgICB0aGlzLm1pblogPSBtaW5aO1xuICAgIHRoaXMubWF4WCA9IG1heFg7XG4gICAgdGhpcy5tYXhZID0gbWF4WTtcbiAgICB0aGlzLm1heFogPSBtYXhaO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgYm91bmRpbmcgYm94IHdpdGggdGhlIGRpbWVuc2lvbnMgb2YgYW4gYXhpYWxseS1hbGlnbmVkIGN1YmUgY2VudGVyZWQgYXJvdW5kIHRoZSBcbiAgICogZ2l2ZW4gY2VudGVyIGFuZCB3aXRoIHRoZSBnaXZlbiBoYWxmLXNpZGUgbGVuZ3RoLlxuICAgKlxuICAgKiBAcGFyYW0ge3ZlYzN9IGNlbnRlclxuICAgKiBAcGFyYW0ge251bWJlcn0gaGFsZlNpZGVMZW5ndGhcbiAgICovXG4gIHN0YXRpYyBjcmVhdGVBc1VuaWZvcm1Bcm91bmRDZW50ZXIoY2VudGVyLCBoYWxmU2lkZUxlbmd0aCkge1xuICAgIGNvbnN0IGJvdW5kcyA9IG5ldyBBYWJiKDAsIDAsIDAsIDAsIDAsIDApO1xuICAgIGJvdW5kcy5zZXRBc1VuaWZvcm1Bcm91bmRDZW50ZXIoY2VudGVyLCBoYWxmU2lkZUxlbmd0aCk7XG4gICAgcmV0dXJuIGJvdW5kcztcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBkaW1lbnNpb25zIG9mIHRoaXMgYm91bmRpbmcgYm94IHRvIHJlcHJlc2VudCBhbiBheGlhbGx5LWFsaWduZWQgY3ViZSBjZW50ZXJlZFxuICAgKiBhcm91bmQgdGhlIGdpdmVuIGNlbnRlciBhbmQgd2l0aCB0aGUgZ2l2ZW4gaGFsZi1zaWRlIGxlbmd0aC5cbiAgICpcbiAgICogQHBhcmFtIHt2ZWMzfSBjZW50ZXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhhbGZTaWRlTGVuZ3RoXG4gICAqL1xuICBzZXRBc1VuaWZvcm1Bcm91bmRDZW50ZXIoY2VudGVyLCBoYWxmU2lkZUxlbmd0aCkge1xuICAgIHRoaXMubWluWCA9IGNlbnRlclswXSAtIGhhbGZTaWRlTGVuZ3RoO1xuICAgIHRoaXMubWluWSA9IGNlbnRlclsxXSAtIGhhbGZTaWRlTGVuZ3RoO1xuICAgIHRoaXMubWluWiA9IGNlbnRlclsyXSAtIGhhbGZTaWRlTGVuZ3RoO1xuICAgIHRoaXMubWF4WCA9IGNlbnRlclswXSArIGhhbGZTaWRlTGVuZ3RoO1xuICAgIHRoaXMubWF4WSA9IGNlbnRlclsxXSArIGhhbGZTaWRlTGVuZ3RoO1xuICAgIHRoaXMubWF4WiA9IGNlbnRlclsyXSArIGhhbGZTaWRlTGVuZ3RoO1xuICB9XG5cbiAgLyoqIEByZXR1cm5zIHtudW1iZXJ9ICovXG4gIGdldCByYW5nZVgoKSB7XG4gICAgcmV0dXJuIHRoaXMubWF4WCAtIHRoaXMubWluWDtcbiAgfVxuICAvKiogQHJldHVybnMge251bWJlcn0gKi9cbiAgZ2V0IHJhbmdlWSgpIHtcbiAgICByZXR1cm4gdGhpcy5tYXhZIC0gdGhpcy5taW5ZO1xuICB9XG4gIC8qKiBAcmV0dXJucyB7bnVtYmVyfSAqL1xuICBnZXQgcmFuZ2VaKCkge1xuICAgIHJldHVybiB0aGlzLm1heFogLSB0aGlzLm1pblo7XG4gIH1cblxuICAvKiogQHJldHVybnMge251bWJlcn0gKi9cbiAgZ2V0IGNlbnRlclgoKSB7XG4gICAgcmV0dXJuIHRoaXMubWluWCArIHRoaXMucmFuZ2VYIC8gMjtcbiAgfVxuICAvKiogQHJldHVybnMge251bWJlcn0gKi9cbiAgZ2V0IGNlbnRlclkoKSB7XG4gICAgcmV0dXJuIHRoaXMubWluWSArIHRoaXMucmFuZ2VZIC8gMjtcbiAgfVxuICAvKiogQHJldHVybnMge251bWJlcn0gKi9cbiAgZ2V0IGNlbnRlclooKSB7XG4gICAgcmV0dXJuIHRoaXMubWluWiArIHRoaXMucmFuZ2VaIC8gMjtcbiAgfVxuXG4gIC8qKiBAcmV0dXJucyB7bnVtYmVyfSAqL1xuICBnZXQgc3VyZmFjZUFyZWEoKSB7XG4gICAgY29uc3QgcmFuZ2VYID0gdGhpcy5yYW5nZVg7XG4gICAgY29uc3QgcmFuZ2VZID0gdGhpcy5yYW5nZVk7XG4gICAgY29uc3QgcmFuZ2VaID0gdGhpcy5yYW5nZVo7XG4gICAgcmV0dXJuIDIgKiAocmFuZ2VYICogcmFuZ2VZICsgcmFuZ2VYICogcmFuZ2VaICsgcmFuZ2VZICogcmFuZ2VaKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7dmVjM31cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXQgY2VudGVyT2ZWb2x1bWUoKSB7XG4gICAgLy8gUmV1c2UgdGhlIHNhbWUgb2JqZWN0IHdoZW4gdGhpcyBpcyBjYWxsZWQgbXVsdGlwbGUgdGltZXMuXG4gICAgdGhpcy5fY2VudGVyT2ZWb2x1bWUgPSB0aGlzLl9jZW50ZXJPZlZvbHVtZSB8fCB2ZWMzLmNyZWF0ZSgpO1xuICAgIHZlYzMuc2V0KHRoaXMuX2NlbnRlck9mVm9sdW1lLCB0aGlzLmNlbnRlclgsIHRoaXMuY2VudGVyWSwgdGhpcy5jZW50ZXJaKTtcbiAgICByZXR1cm4gdGhpcy5fY2VudGVyT2ZWb2x1bWU7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge0NvbGxpZGFibGV9XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0IGJvdW5kaW5nVm9sdW1lKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7dmVjM30gdmFsdWVcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzZXQgcG9zaXRpb24odmFsdWUpIHtcbiAgICBjb25zdCByYW5nZVggPSB0aGlzLnJhbmdlWDtcbiAgICBjb25zdCByYW5nZVkgPSB0aGlzLnJhbmdlWTtcbiAgICBjb25zdCByYW5nZVogPSB0aGlzLnJhbmdlWjtcbiAgICB0aGlzLm1pblggPSB2YWx1ZVswXSAtIHJhbmdlWCAvIDI7XG4gICAgdGhpcy5taW5ZID0gdmFsdWVbMV0gLSByYW5nZVkgLyAyO1xuICAgIHRoaXMubWluWiA9IHZhbHVlWzJdIC0gcmFuZ2VaIC8gMjtcbiAgICB0aGlzLm1heFggPSB2YWx1ZVswXSArIHJhbmdlWCAvIDI7XG4gICAgdGhpcy5tYXhZID0gdmFsdWVbMV0gKyByYW5nZVkgLyAyO1xuICAgIHRoaXMubWF4WiA9IHZhbHVlWzJdICsgcmFuZ2VaIC8gMjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3F1YXR9IHZhbHVlXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc2V0IG9yaWVudGF0aW9uKHZhbHVlKSB7XG4gICAgLy8gRG8gbm90aGluZy5cbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxscyB0aGUgZ2l2ZW4gY2FsbGJhY2sgb25jZSBmb3IgZWFjaCB2ZXJ0ZXguXG4gICAqXG4gICAqIFN0b3BzIGFzIHNvb24gYXMgdGhlIGNhbGxiYWNrIHJldHVybnMgdHJ1ZSBmb3IgYSB2ZXJ0ZXguXG4gICAqXG4gICAqIEBwYXJhbSB7VmVydGV4Q2FsbGJhY2t9IGNhbGxiYWNrXG4gICAqIEBwYXJhbSB7dmVjM30gW3ZlcnRleF0gT3V0cHV0IHBhcmFtLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBvbmUgb2YgdGhlIGNhbGxiYWNrcyByZXR1cm5lZCB0cnVlLlxuICAgKi9cbiAgc29tZVZlcnRleChjYWxsYmFjaywgdmVydGV4KSB7XG4gICAgdmVydGV4ID0gdmVydGV4IHx8IHRtcFZlYzE7XG5cbiAgICB2ZWMzLnNldCh2ZXJ0ZXgsIHRoaXMubWluWCwgdGhpcy5taW5ZLCB0aGlzLm1pblopO1xuICAgIGlmIChjYWxsYmFjayh2ZXJ0ZXgpKSByZXR1cm4gdHJ1ZTtcblxuICAgIHZlYzMuc2V0KHZlcnRleCwgdGhpcy5tYXhYLCB0aGlzLm1pblksIHRoaXMubWluWik7XG4gICAgaWYgKGNhbGxiYWNrKHZlcnRleCkpIHJldHVybiB0cnVlO1xuXG4gICAgdmVjMy5zZXQodmVydGV4LCB0aGlzLm1pblgsIHRoaXMubWF4WSwgdGhpcy5taW5aKTtcbiAgICBpZiAoY2FsbGJhY2sodmVydGV4KSkgcmV0dXJuIHRydWU7XG5cbiAgICB2ZWMzLnNldCh2ZXJ0ZXgsIHRoaXMubWF4WCwgdGhpcy5tYXhZLCB0aGlzLm1pblopO1xuICAgIGlmIChjYWxsYmFjayh2ZXJ0ZXgpKSByZXR1cm4gdHJ1ZTtcblxuICAgIHZlYzMuc2V0KHZlcnRleCwgdGhpcy5taW5YLCB0aGlzLm1pblksIHRoaXMubWF4Wik7XG4gICAgaWYgKGNhbGxiYWNrKHZlcnRleCkpIHJldHVybiB0cnVlO1xuXG4gICAgdmVjMy5zZXQodmVydGV4LCB0aGlzLm1heFgsIHRoaXMubWluWSwgdGhpcy5tYXhaKTtcbiAgICBpZiAoY2FsbGJhY2sodmVydGV4KSkgcmV0dXJuIHRydWU7XG5cbiAgICB2ZWMzLnNldCh2ZXJ0ZXgsIHRoaXMubWluWCwgdGhpcy5tYXhZLCB0aGlzLm1heFopO1xuICAgIGlmIChjYWxsYmFjayh2ZXJ0ZXgpKSByZXR1cm4gdHJ1ZTtcblxuICAgIHZlYzMuc2V0KHZlcnRleCwgdGhpcy5tYXhYLCB0aGlzLm1heFksIHRoaXMubWF4Wik7XG4gICAgaWYgKGNhbGxiYWNrKHZlcnRleCkpIHJldHVybiB0cnVlO1xuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxzIHRoZSBnaXZlbiBjYWxsYmFjayBvbmNlIGZvciBlYWNoIGVkZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB7RWRnZUNhbGxiYWNrfSBjYWxsYmFja1xuICAgKiBAcGFyYW0ge0xpbmVTZWdtZW50fSBbZWRnZV0gT3V0cHV0IHBhcmFtLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBvbmUgb2YgdGhlIGNhbGxiYWNrcyByZXR1cm5lZCB0cnVlLlxuICAgKi9cbiAgc29tZUVkZ2UoY2FsbGJhY2ssIGVkZ2UpIHtcbiAgICBlZGdlID0gZWRnZSB8fCBfc2VnbWVudDtcblxuICAgIC8vXG4gICAgLy8gRWRnZXMgYWxvbmcgZnJvbnQgZmFjZS5cbiAgICAvL1xuXG4gICAgdmVjMy5zZXQodG1wVmVjMSwgdGhpcy5taW5YLCB0aGlzLm1pblksIHRoaXMubWluWik7XG4gICAgdmVjMy5zZXQodG1wVmVjMiwgdGhpcy5tYXhYLCB0aGlzLm1pblksIHRoaXMubWluWik7XG4gICAgZWRnZS5yZXNldCh0bXBWZWMxLCB0bXBWZWMyKTtcbiAgICBpZiAoY2FsbGJhY2soZWRnZSkpIHJldHVybiB0cnVlO1xuXG4gICAgdmVjMy5zZXQodG1wVmVjMSwgdGhpcy5taW5YLCB0aGlzLm1heFksIHRoaXMubWluWik7XG4gICAgdmVjMy5zZXQodG1wVmVjMiwgdGhpcy5tYXhYLCB0aGlzLm1heFksIHRoaXMubWluWik7XG4gICAgZWRnZS5yZXNldCh0bXBWZWMxLCB0bXBWZWMyKTtcbiAgICBpZiAoY2FsbGJhY2soZWRnZSkpIHJldHVybiB0cnVlO1xuXG4gICAgdmVjMy5zZXQodG1wVmVjMSwgdGhpcy5taW5YLCB0aGlzLm1pblksIHRoaXMubWluWik7XG4gICAgdmVjMy5zZXQodG1wVmVjMiwgdGhpcy5taW5YLCB0aGlzLm1heFksIHRoaXMubWluWik7XG4gICAgZWRnZS5yZXNldCh0bXBWZWMxLCB0bXBWZWMyKTtcbiAgICBpZiAoY2FsbGJhY2soZWRnZSkpIHJldHVybiB0cnVlO1xuXG4gICAgdmVjMy5zZXQodG1wVmVjMSwgdGhpcy5tYXhYLCB0aGlzLm1pblksIHRoaXMubWluWik7XG4gICAgdmVjMy5zZXQodG1wVmVjMiwgdGhpcy5tYXhYLCB0aGlzLm1heFksIHRoaXMubWluWik7XG4gICAgZWRnZS5yZXNldCh0bXBWZWMxLCB0bXBWZWMyKTtcbiAgICBpZiAoY2FsbGJhY2soZWRnZSkpIHJldHVybiB0cnVlO1xuXG4gICAgLy9cbiAgICAvLyBFZGdlcyBhbG9uZyBiYWNrIGZhY2UuXG4gICAgLy9cblxuICAgIHZlYzMuc2V0KHRtcFZlYzEsIHRoaXMubWluWCwgdGhpcy5taW5ZLCB0aGlzLm1heFopO1xuICAgIHZlYzMuc2V0KHRtcFZlYzIsIHRoaXMubWF4WCwgdGhpcy5taW5ZLCB0aGlzLm1heFopO1xuICAgIGVkZ2UucmVzZXQodG1wVmVjMSwgdG1wVmVjMik7XG4gICAgaWYgKGNhbGxiYWNrKGVkZ2UpKSByZXR1cm4gdHJ1ZTtcblxuICAgIHZlYzMuc2V0KHRtcFZlYzEsIHRoaXMubWluWCwgdGhpcy5tYXhZLCB0aGlzLm1heFopO1xuICAgIHZlYzMuc2V0KHRtcFZlYzIsIHRoaXMubWF4WCwgdGhpcy5tYXhZLCB0aGlzLm1heFopO1xuICAgIGVkZ2UucmVzZXQodG1wVmVjMSwgdG1wVmVjMik7XG4gICAgaWYgKGNhbGxiYWNrKGVkZ2UpKSByZXR1cm4gdHJ1ZTtcblxuICAgIHZlYzMuc2V0KHRtcFZlYzEsIHRoaXMubWluWCwgdGhpcy5taW5ZLCB0aGlzLm1heFopO1xuICAgIHZlYzMuc2V0KHRtcFZlYzIsIHRoaXMubWluWCwgdGhpcy5tYXhZLCB0aGlzLm1heFopO1xuICAgIGVkZ2UucmVzZXQodG1wVmVjMSwgdG1wVmVjMik7XG4gICAgaWYgKGNhbGxiYWNrKGVkZ2UpKSByZXR1cm4gdHJ1ZTtcblxuICAgIHZlYzMuc2V0KHRtcFZlYzEsIHRoaXMubWF4WCwgdGhpcy5taW5ZLCB0aGlzLm1heFopO1xuICAgIHZlYzMuc2V0KHRtcFZlYzIsIHRoaXMubWF4WCwgdGhpcy5tYXhZLCB0aGlzLm1heFopO1xuICAgIGVkZ2UucmVzZXQodG1wVmVjMSwgdG1wVmVjMik7XG4gICAgaWYgKGNhbGxiYWNrKGVkZ2UpKSByZXR1cm4gdHJ1ZTtcblxuICAgIC8vXG4gICAgLy8gRWRnZXMgYmV0d2VlbiBmcm9udCBhbmQgYmFjayBmYWNlcy5cbiAgICAvL1xuXG4gICAgdmVjMy5zZXQodG1wVmVjMSwgdGhpcy5taW5YLCB0aGlzLm1pblksIHRoaXMubWluWik7XG4gICAgdmVjMy5zZXQodG1wVmVjMiwgdGhpcy5taW5YLCB0aGlzLm1pblksIHRoaXMubWF4Wik7XG4gICAgZWRnZS5yZXNldCh0bXBWZWMxLCB0bXBWZWMyKTtcbiAgICBpZiAoY2FsbGJhY2soZWRnZSkpIHJldHVybiB0cnVlO1xuXG4gICAgdmVjMy5zZXQodG1wVmVjMSwgdGhpcy5tYXhYLCB0aGlzLm1pblksIHRoaXMubWluWik7XG4gICAgdmVjMy5zZXQodG1wVmVjMiwgdGhpcy5tYXhYLCB0aGlzLm1pblksIHRoaXMubWF4Wik7XG4gICAgZWRnZS5yZXNldCh0bXBWZWMxLCB0bXBWZWMyKTtcbiAgICBpZiAoY2FsbGJhY2soZWRnZSkpIHJldHVybiB0cnVlO1xuXG4gICAgdmVjMy5zZXQodG1wVmVjMSwgdGhpcy5taW5YLCB0aGlzLm1heFksIHRoaXMubWluWik7XG4gICAgdmVjMy5zZXQodG1wVmVjMiwgdGhpcy5taW5YLCB0aGlzLm1heFksIHRoaXMubWF4Wik7XG4gICAgZWRnZS5yZXNldCh0bXBWZWMxLCB0bXBWZWMyKTtcbiAgICBpZiAoY2FsbGJhY2soZWRnZSkpIHJldHVybiB0cnVlO1xuXG4gICAgdmVjMy5zZXQodG1wVmVjMSwgdGhpcy5tYXhYLCB0aGlzLm1heFksIHRoaXMubWluWik7XG4gICAgdmVjMy5zZXQodG1wVmVjMiwgdGhpcy5tYXhYLCB0aGlzLm1heFksIHRoaXMubWF4Wik7XG4gICAgZWRnZS5yZXNldCh0bXBWZWMxLCB0bXBWZWMyKTtcbiAgICBpZiAoY2FsbGJhY2soZWRnZSkpIHJldHVybiB0cnVlO1xuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmNvbnN0IF9zZWdtZW50ID0gbmV3IExpbmVTZWdtZW50KHZlYzMuY3JlYXRlKCksIHZlYzMuY3JlYXRlKCkpO1xuXG5leHBvcnQge0FhYmJ9O1xuIiwiaW1wb3J0IHtDb2xsaWRhYmxlfSBmcm9tICcuL2NvbGxpZGFibGUnO1xuaW1wb3J0IHtMaW5lU2VnbWVudH0gZnJvbSAnLi9saW5lLXNlZ21lbnQnO1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhIGNhcHN1bGUuXG4gKlxuICogLSBBIGNhcHN1bGUgaXMgYSBjeWxpbmRlciB3aXRoIHNlbWktc3BoZXJlcyBvbiBlaXRoZXIgZW5kLlxuICogLSBBIGNhcHN1bGUgY2FuIHJlcHJlc2VudCBhIHJvdWdoIGFwcHJveGltYXRpb24gb2YgbWFueSB1c2VmdWwgc2hhcGVzLlxuICogLSBBIGNhcHN1bGUgY2FuIGJlIHVzZWQgZm9yIHJlbGF0aXZlbHkgZWZmaWNpZW50IGNvbGxpc2lvbiBkZXRlY3Rpb24uXG4gKi9cbmNsYXNzIENhcHN1bGUgZXh0ZW5kcyBDb2xsaWRhYmxlIHtcbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IG9yaWVudGF0aW9uIG9mIHRoZSBjYXBzdWxlIGlzIGFsb25nIHRoZSB6LWF4aXMuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoYWxmRGlzdGFuY2UgSGFsZiB0aGUgZGlzdGFuY2UgZnJvbSB0aGUgY2VudGVycyBvZiB0aGUgY2Fwc3VsZSBlbmQgc3BoZXJlcy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1c1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1N0YXRpb25hcnk9ZmFsc2VdXG4gICAqIEBwYXJhbSB7Q29sbGlkYWJsZVBoeXNpY3NKb2J9IFtwaHlzaWNzSm9iXVxuICAgKi9cbiAgY29uc3RydWN0b3IoaGFsZkRpc3RhbmNlLCByYWRpdXMsIGlzU3RhdGlvbmFyeSA9IGZhbHNlLCBwaHlzaWNzSm9iKSB7XG4gICAgc3VwZXIoaXNTdGF0aW9uYXJ5LCBwaHlzaWNzSm9iKTtcbiAgICB0aGlzLmhhbGZEaXN0YW5jZSA9IGhhbGZEaXN0YW5jZTtcbiAgICB0aGlzLnNlZ21lbnQgPSBuZXcgTGluZVNlZ21lbnQodmVjMy5mcm9tVmFsdWVzKDAsIDAsIC1oYWxmRGlzdGFuY2UpLFxuICAgICAgICB2ZWMzLmZyb21WYWx1ZXMoMCwgMCwgaGFsZkRpc3RhbmNlKSk7XG4gICAgdGhpcy5yYWRpdXMgPSByYWRpdXM7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge3ZlYzN9XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0IGNlbnRlck9mVm9sdW1lKCkge1xuICAgIHJldHVybiB0aGlzLnNlZ21lbnQuY2VudGVyO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtDb2xsaWRhYmxlfVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldCBib3VuZGluZ1ZvbHVtZSgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3ZlYzN9IHZhbHVlXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc2V0IHBvc2l0aW9uKHZhbHVlKSB7XG4gICAgdGhpcy5zZWdtZW50LmNlbnRlciA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7cXVhdH0gdmFsdWVcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzZXQgb3JpZW50YXRpb24odmFsdWUpIHtcbiAgICB0aGlzLnNlZ21lbnQub3JpZW50YXRpb24gPSB2YWx1ZTtcbiAgfVxufVxuXG5leHBvcnQge0NhcHN1bGV9O1xuIiwiLyoqXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgYSAzRCBjb2xsaWRhYmxlIHJpZ2lkIG9iamVjdC5cbiAqXG4gKiBUaGlzIGlzIHVzZWZ1bCBmb3IgY29sbGlzaW9uIGRldGVjdGlvbiBhbmQgcmVzcG9uc2UuXG4gKlxuICogQGFic3RyYWN0XG4gKi9cbmNsYXNzIENvbGxpZGFibGUge1xuICAvKipcbiAgICogQHBhcmFtIHtib29sZWFufSBpc1N0YXRpb25hcnlcbiAgICogQHBhcmFtIHtDb2xsaWRhYmxlUGh5c2ljc0pvYn0gW3BoeXNpY3NKb2JdXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihpc1N0YXRpb25hcnksIHBoeXNpY3NKb2IpIHtcbiAgICAvLyBDb2xsaWRhYmxlIGlzIGFuIGFic3RyYWN0IGNsYXNzLiBJdCBzaG91bGQgbm90IGJlIGluc3RhbnRpYXRlZCBkaXJlY3RseS5cbiAgICBpZiAobmV3LnRhcmdldCA9PT0gQ29sbGlkYWJsZSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnN0cnVjdCBDb2xsaWRhYmxlIGluc3RhbmNlcyBkaXJlY3RseScpO1xuICAgIH1cblxuICAgIHRoaXMuaXNTdGF0aW9uYXJ5ID0gaXNTdGF0aW9uYXJ5O1xuICAgIHRoaXMucGh5c2ljc0pvYiA9IHBoeXNpY3NKb2I7XG4gICAgdGhpcy5jb2xsaXNpb25zID0gW107XG4gICAgdGhpcy5wcmV2aW91c0NvbGxpc2lvbnMgPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbXBsZW1lbnRpbmcgY2xhc3NlcyBjYW4gb3ZlcnJpZGUgdGhpcyB0byBwcm92aWRlIGEgY2VudGVyIG9mIG1hc3MgdGhhdCBpcyBkaWZmZXJlbnQgdGhhbiB0aGVcbiAgICogY2VudGVyIG9mIHZvbHVtZS5cbiAgICpcbiAgICogQHJldHVybnMge3ZlYzN9XG4gICAqL1xuICBnZXQgY2VudGVyT2ZNYXNzKCkge1xuICAgIHJldHVybiB0aGlzLmNlbnRlck9mVm9sdW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHt2ZWMzfVxuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIGdldCBjZW50ZXJPZlZvbHVtZSgpIHtcbiAgICAvLyBFeHRlbmRpbmcgY2xhc3NlcyBzaG91bGQgaW1wbGVtZW50IHRoaXMgbWV0aG9kLlxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7Q29sbGlkYWJsZX1cbiAgICogQGFic3RyYWN0XG4gICAqL1xuICBnZXQgYm91bmRpbmdWb2x1bWUoKSB7XG4gICAgLy8gRXh0ZW5kaW5nIGNsYXNzZXMgc2hvdWxkIGltcGxlbWVudCB0aGlzIG1ldGhvZC5cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdNZXRob2Qgbm90IGltcGxlbWVudGVkJyk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHt2ZWMzfSB2YWx1ZVxuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIHNldCBwb3NpdGlvbih2YWx1ZSkge1xuICAgIC8vIEV4dGVuZGluZyBjbGFzc2VzIHNob3VsZCBpbXBsZW1lbnQgdGhpcyBtZXRob2QuXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7cXVhdH0gdmFsdWVcbiAgICogQGFic3RyYWN0XG4gICAqL1xuICBzZXQgb3JpZW50YXRpb24odmFsdWUpIHtcbiAgICAvLyBFeHRlbmRpbmcgY2xhc3NlcyBzaG91bGQgaW1wbGVtZW50IHRoaXMgbWV0aG9kLlxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQnKTtcbiAgfVxufVxuXG5leHBvcnQge0NvbGxpZGFibGV9O1xuIiwiaW1wb3J0IHt0bXBWZWMxLCB0bXBWZWMyfSBmcm9tICcuLi8uLi8uLi91dGlsJztcblxuLyoqXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgYSBsaW5lIHNlZ21lbnQuXG4gKi9cbmNsYXNzIExpbmVTZWdtZW50IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7dmVjM30gc3RhcnRcbiAgICogQHBhcmFtIHt2ZWMzfSBlbmRcbiAgICovXG4gIGNvbnN0cnVjdG9yKHN0YXJ0LCBlbmQpIHtcbiAgICB0aGlzLnN0YXJ0ID0gdmVjMy5jcmVhdGUoKTtcbiAgICB0aGlzLmVuZCA9IHZlYzMuY3JlYXRlKCk7XG4gICAgdGhpcy5fY2VudGVyID0gdmVjMy5jcmVhdGUoKTtcbiAgICB0aGlzLl9vcmlnaW5hbE9yaWVudGF0aW9uU3RhcnQgPSB2ZWMzLmNyZWF0ZSgpO1xuICAgIHRoaXMuX29yaWdpbmFsT3JpZW50YXRpb25FbmQgPSB2ZWMzLmNyZWF0ZSgpO1xuICAgIHRoaXMucmVzZXQoc3RhcnQsIGVuZCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHt2ZWMzfSBzdGFydFxuICAgKiBAcGFyYW0ge3ZlYzN9IGVuZFxuICAgKi9cbiAgcmVzZXQoc3RhcnQsIGVuZCkge1xuICAgIHZlYzMuY29weSh0aGlzLnN0YXJ0LCBzdGFydCk7XG4gICAgdmVjMy5jb3B5KHRoaXMuZW5kLCBlbmQpO1xuICAgIHZlYzMuc3VidHJhY3QodGhpcy5fb3JpZ2luYWxPcmllbnRhdGlvblN0YXJ0LCB0aGlzLnN0YXJ0LCB0aGlzLmNlbnRlcik7XG4gICAgdmVjMy5zdWJ0cmFjdCh0aGlzLl9vcmlnaW5hbE9yaWVudGF0aW9uRW5kLCB0aGlzLmVuZCwgdGhpcy5jZW50ZXIpO1xuICB9XG5cbiAgLyoqIEByZXR1cm5zIHtMaW5lU2VnbWVudH0gKi9cbiAgY2xvbmUoKSB7XG4gICAgY29uc3Qgc2VnbWVudCA9IG5ldyBMaW5lU2VnbWVudCh0aGlzLnN0YXJ0LCB0aGlzLmVuZCk7XG4gICAgc2VnbWVudC5fb3JpZ2luYWxPcmllbnRhdGlvblN0YXJ0ID0gdGhpcy5fb3JpZ2luYWxPcmllbnRhdGlvblN0YXJ0O1xuICAgIHNlZ21lbnQuX29yaWdpbmFsT3JpZW50YXRpb25FbmQgPSB0aGlzLl9vcmlnaW5hbE9yaWVudGF0aW9uRW5kO1xuICAgIHJldHVybiBzZWdtZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBVTi1OT1JNQUxJWkVEIGRpcmVjdGlvbiBvZiB0aGlzIHNlZ21lbnQuXG4gICAqXG4gICAqIEByZXR1cm5zIHt2ZWMzfVxuICAgKi9cbiAgZ2V0IGRpcigpIHtcbiAgICAvLyBSZXVzZSB0aGUgc2FtZSBvYmplY3Qgd2hlbiB0aGlzIGlzIGNhbGxlZCBtdWx0aXBsZSB0aW1lcy5cbiAgICB0aGlzLl9kaXIgPSB0aGlzLl9kaXIgfHwgdmVjMy5jcmVhdGUoKTtcbiAgICByZXR1cm4gdmVjMy5zdWJ0cmFjdCh0aGlzLl9kaXIsIHRoaXMuZW5kLCB0aGlzLnN0YXJ0KTtcbiAgfVxuXG4gIC8qKiBAcmV0dXJucyB7dmVjM30gKi9cbiAgZ2V0IGNlbnRlcigpIHtcbiAgICB2ZWMzLmxlcnAodGhpcy5fY2VudGVyLCB0aGlzLnN0YXJ0LCB0aGlzLmVuZCwgMC41KTtcbiAgICByZXR1cm4gdGhpcy5fY2VudGVyO1xuICB9XG5cbiAgLyoqIEBwYXJhbSB7dmVjM30gdmFsdWUgKi9cbiAgc2V0IGNlbnRlcih2YWx1ZSkge1xuICAgIC8vIFJldXNlIHRoZSBzYW1lIG9iamVjdCB3aGVuIHRoaXMgaXMgY2FsbGVkIG11bHRpcGxlIHRpbWVzLlxuICAgIHRoaXMuX2Rpc3BsYWNlbWVudCA9IHRoaXMuX2Rpc3BsYWNlbWVudCB8fCB2ZWMzLmNyZWF0ZSgpO1xuICAgIHZlYzMuc3VidHJhY3QodGhpcy5fZGlzcGxhY2VtZW50LCB2YWx1ZSwgdGhpcy5jZW50ZXIpO1xuXG4gICAgdmVjMy5hZGQodGhpcy5zdGFydCwgdGhpcy5zdGFydCwgdGhpcy5fZGlzcGxhY2VtZW50KTtcbiAgICB2ZWMzLmFkZCh0aGlzLmVuZCwgdGhpcy5lbmQsIHRoaXMuX2Rpc3BsYWNlbWVudCk7XG4gIH1cblxuICAvKiogQHBhcmFtIHtxdWF0fSB2YWx1ZSAqL1xuICBzZXQgb3JpZW50YXRpb24odmFsdWUpIHtcbiAgICB2ZWMzLnRyYW5zZm9ybVF1YXQodG1wVmVjMSwgdGhpcy5fb3JpZ2luYWxPcmllbnRhdGlvblN0YXJ0LCB2YWx1ZSk7XG4gICAgdmVjMy50cmFuc2Zvcm1RdWF0KHRtcFZlYzIsIHRoaXMuX29yaWdpbmFsT3JpZW50YXRpb25FbmQsIHZhbHVlKTtcblxuICAgIC8vIFdlIGRvbid0IHdhbnQgdGhpcyB0byBiZSByZS1jYWxjdWxhdGVkIGJldHdlZW4gc3RhcnQvZW5kIHVwZGF0ZXMuXG4gICAgY29uc3QgY2VudGVyID0gdGhpcy5jZW50ZXI7XG5cbiAgICB2ZWMzLmFkZCh0aGlzLnN0YXJ0LCBjZW50ZXIsIHRtcFZlYzEpO1xuICAgIHZlYzMuYWRkKHRoaXMuZW5kLCBjZW50ZXIsIHRtcFZlYzIpO1xuICB9XG59XG5cbmV4cG9ydCB7TGluZVNlZ21lbnR9O1xuIiwiaW1wb3J0IHtDb2xsaWRhYmxlfSBmcm9tICcuL2NvbGxpZGFibGUnO1xuaW1wb3J0IHtTcGhlcmV9IGZyb20gJy4vc3BoZXJlLWNvbGxpZGFibGUnO1xuaW1wb3J0IHtMaW5lU2VnbWVudH0gZnJvbSAnLi9saW5lLXNlZ21lbnQnO1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhbiBvcmllbnRlZCBib3VuZGluZyBib3ggKE9CQikuXG4gKlxuICogVGhpcyBpcyB1c2VmdWwgYm90aCBmb3IgY29sbGlzaW9uIGRldGVjdGlvbiBhbmQgZm9yIHJlcHJlc2VudGluZyBhbnkgcm90YXRlZCByZWN0YW5ndWxhciBjdWJvaWQuXG4gKiBBbiBPQkIgaXMgb25seSBhcHByb3ByaWF0ZSBmb3Igc29tZSBnZW9tZXRyaWVzLiBGb3Igb3RoZXIgZ2VvbWV0cmllcywgYW4gYXhpYWxseS1hbGlnbmVkIGJvdW5kaW5nXG4gKiBib3ggKEFBQkIpIG9yIGEgYm91bmRpbmcgc3BoZXJlIG1heSBiZSBtb3JlIGFwcHJvcHJpYXRlLlxuICovXG5jbGFzcyBPYmIgZXh0ZW5kcyBDb2xsaWRhYmxlIHtcbiAgLyoqXG4gICAqIERlZmF1bHRzIHRvIGJlaW5nIGNlbnRlcmVkIGF0IHRoZSBvcmlnaW4gd2l0aCBpdHMgbG9jYWwgYXhlcyBhbGlnbmVkIHdpdGggdGhlIHdvcmxkIGF4ZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoYWxmU2lkZUxlbmd0aFhcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhhbGZTaWRlTGVuZ3RoWVxuICAgKiBAcGFyYW0ge251bWJlcn0gaGFsZlNpZGVMZW5ndGhaXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzU3RhdGlvbmFyeT1mYWxzZV1cbiAgICogQHBhcmFtIHtDb2xsaWRhYmxlUGh5c2ljc0pvYn0gW3BoeXNpY3NKb2JdXG4gICAqL1xuICBjb25zdHJ1Y3RvcihoYWxmU2lkZUxlbmd0aFgsIGhhbGZTaWRlTGVuZ3RoWSwgaGFsZlNpZGVMZW5ndGhaLCBpc1N0YXRpb25hcnkgPSBmYWxzZSwgcGh5c2ljc0pvYikge1xuICAgIHN1cGVyKGlzU3RhdGlvbmFyeSwgcGh5c2ljc0pvYik7XG4gICAgdGhpcy5leHRlbnRzID0gW1xuICAgICAgdmVjMy5mcm9tVmFsdWVzKGhhbGZTaWRlTGVuZ3RoWCwgMCwgMCksXG4gICAgICB2ZWMzLmZyb21WYWx1ZXMoMCwgaGFsZlNpZGVMZW5ndGhZLCAwKSxcbiAgICAgIHZlYzMuZnJvbVZhbHVlcygwLCAwLCBoYWxmU2lkZUxlbmd0aFopXG4gICAgXTtcbiAgICB0aGlzLmF4ZXMgPSBbXG4gICAgICB2ZWMzLmZyb21WYWx1ZXMoMSwgMCwgMCksXG4gICAgICB2ZWMzLmZyb21WYWx1ZXMoMCwgMSwgMCksXG4gICAgICB2ZWMzLmZyb21WYWx1ZXMoMCwgMCwgMSlcbiAgICBdO1xuICAgIHRoaXMuaGFsZlNpZGVMZW5ndGhzID0gW1xuICAgICAgaGFsZlNpZGVMZW5ndGhYLFxuICAgICAgaGFsZlNpZGVMZW5ndGhZLFxuICAgICAgaGFsZlNpZGVMZW5ndGhaXG4gICAgXTtcbiAgICB0aGlzLl9jZW50ZXIgPSB2ZWMzLmNyZWF0ZSgpO1xuICAgIHRoaXMuX29yaWVudGF0aW9uID0gcXVhdC5jcmVhdGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7dmVjM31cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXQgY2VudGVyT2ZWb2x1bWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NlbnRlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7Q29sbGlkYWJsZX1cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXQgYm91bmRpbmdWb2x1bWUoKSB7XG4gICAgLy8gUmV1c2UgdGhlIHNhbWUgdmFsdWUgd2hlbiB0aGlzIGlzIGNhbGxlZCBtdWx0aXBsZSB0aW1lcy5cbiAgICBpZiAoIXRoaXMuX2JvdW5kaW5nU3BoZXJlKSB7XG4gICAgICBjb25zdCByYWRpdXMgPSBNYXRoLnNxcnQodGhpcy5oYWxmU2lkZUxlbmd0aFggKiB0aGlzLmhhbGZTaWRlTGVuZ3RoWCArXG4gICAgICAgICAgdGhpcy5oYWxmU2lkZUxlbmd0aFkgKiB0aGlzLmhhbGZTaWRlTGVuZ3RoWSArXG4gICAgICAgICAgdGhpcy5oYWxmU2lkZUxlbmd0aFogKiB0aGlzLmhhbGZTaWRlTGVuZ3RoWik7XG4gICAgICB0aGlzLl9ib3VuZGluZ1NwaGVyZSA9IG5ldyBTcGhlcmUoMCwgMCwgMCwgcmFkaXVzLCB0aGlzLmlzU3RhdGlvbmFyeSk7XG4gICAgfVxuICAgIHRoaXMuX2JvdW5kaW5nU3BoZXJlLnBvc2l0aW9uID0gdGhpcy5fY2VudGVyO1xuICAgIHJldHVybiB0aGlzLl9ib3VuZGluZ1NwaGVyZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3ZlYzN9IHZhbHVlXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc2V0IHBvc2l0aW9uKHZhbHVlKSB7XG4gICAgdmVjMy5jb3B5KHRoaXMuX2NlbnRlciwgdmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7cXVhdH0gdmFsdWVcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzZXQgb3JpZW50YXRpb24odmFsdWUpIHtcbiAgICBxdWF0LmNvcHkodGhpcy5fb3JpZW50YXRpb24sIHZhbHVlKTtcbiAgICB0aGlzLl91cGRhdGVFeHRlbnRzKCk7XG4gIH1cbiAgLyoqIEByZXR1cm5zIHtxdWF0fSAqL1xuICBnZXQgb3JpZW50YXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX29yaWVudGF0aW9uO1xuICB9XG5cbiAgLyoqIEByZXR1cm5zIHtudW1iZXJ9ICovXG4gIGdldCBoYWxmU2lkZUxlbmd0aFgoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFsZlNpZGVMZW5ndGhzWzBdO1xuICB9XG4gIC8qKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgKi9cbiAgc2V0IGhhbGZTaWRlTGVuZ3RoWCh2YWx1ZSkge1xuICAgIHRoaXMuaGFsZlNpZGVMZW5ndGhzWzBdID0gdmFsdWU7XG4gICAgdGhpcy5fdXBkYXRlRXh0ZW50cygpO1xuICB9XG5cbiAgLyoqIEByZXR1cm5zIHtudW1iZXJ9ICovXG4gIGdldCBoYWxmU2lkZUxlbmd0aFkoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFsZlNpZGVMZW5ndGhzWzFdO1xuICB9XG4gIC8qKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgKi9cbiAgc2V0IGhhbGZTaWRlTGVuZ3RoWSh2YWx1ZSkge1xuICAgIHRoaXMuaGFsZlNpZGVMZW5ndGhzWzFdID0gdmFsdWU7XG4gICAgdGhpcy5fdXBkYXRlRXh0ZW50cygpO1xuICB9XG5cbiAgLyoqIEByZXR1cm5zIHtudW1iZXJ9ICovXG4gIGdldCBoYWxmU2lkZUxlbmd0aFooKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFsZlNpZGVMZW5ndGhzWzJdO1xuICB9XG4gIC8qKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgKi9cbiAgc2V0IGhhbGZTaWRlTGVuZ3RoWih2YWx1ZSkge1xuICAgIHRoaXMuaGFsZlNpZGVMZW5ndGhzWzJdID0gdmFsdWU7XG4gICAgdGhpcy5fdXBkYXRlRXh0ZW50cygpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxzIHRoZSBnaXZlbiBjYWxsYmFjayBvbmNlIGZvciBlYWNoIHZlcnRleC5cbiAgICpcbiAgICogU3RvcHMgYXMgc29vbiBhcyB0aGUgY2FsbGJhY2sgcmV0dXJucyB0cnVlIGZvciBhIHZlcnRleC5cbiAgICpcbiAgICogQHBhcmFtIHtWZXJ0ZXhDYWxsYmFja30gY2FsbGJhY2tcbiAgICogQHBhcmFtIHt2ZWMzfSBbdmVydGV4XSBPdXRwdXQgcGFyYW0uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIG9uZSBvZiB0aGUgY2FsbGJhY2tzIHJldHVybmVkIHRydWUuXG4gICAqL1xuICBzb21lVmVydGV4KGNhbGxiYWNrLCB2ZXJ0ZXgpIHtcbiAgICB2ZXJ0ZXggPSB2ZXJ0ZXggfHwgX3ZlcnRleDE7XG5cbiAgICBmb3IgKGxldCB4U2NhbGUgPSAtMTsgeFNjYWxlIDw9IDE7IHhTY2FsZSArPSAyKSB7XG4gICAgICBmb3IgKGxldCB5U2NhbGUgPSAtMTsgeVNjYWxlIDw9IDE7IHlTY2FsZSArPSAyKSB7XG4gICAgICAgIGZvciAobGV0IHpTY2FsZSA9IC0xOyB6U2NhbGUgPD0gMTsgelNjYWxlICs9IDIpIHtcbiAgICAgICAgICB2ZWMzLmNvcHkodmVydGV4LCB0aGlzLl9jZW50ZXIpO1xuICAgICAgICAgIHZlYzMuc2NhbGVBbmRBZGQodmVydGV4LCB2ZXJ0ZXgsIHRoaXMuZXh0ZW50c1swXSwgeFNjYWxlKTtcbiAgICAgICAgICB2ZWMzLnNjYWxlQW5kQWRkKHZlcnRleCwgdmVydGV4LCB0aGlzLmV4dGVudHNbMV0sIHlTY2FsZSk7XG4gICAgICAgICAgdmVjMy5zY2FsZUFuZEFkZCh2ZXJ0ZXgsIHZlcnRleCwgdGhpcy5leHRlbnRzWzJdLCB6U2NhbGUpO1xuICAgICAgICAgIGlmIChjYWxsYmFjayh2ZXJ0ZXgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxzIHRoZSBnaXZlbiBjYWxsYmFjayBvbmNlIGZvciBlYWNoIGVkZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB7RWRnZUNhbGxiYWNrfSBjYWxsYmFja1xuICAgKiBAcGFyYW0ge0xpbmVTZWdtZW50fSBbZWRnZV0gT3V0cHV0IHBhcmFtLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBvbmUgb2YgdGhlIGNhbGxiYWNrcyByZXR1cm5lZCB0cnVlLlxuICAgKi9cbiAgc29tZUVkZ2UoY2FsbGJhY2ssIGVkZ2UpIHtcbiAgICBlZGdlID0gZWRnZSB8fCBfc2VnbWVudDtcblxuICAgIHJldHVybiBfZWRnZUV4dGVudFNjYWxlcy5zb21lKGVkZ2VFeHRlbnRTY2FsZVBhaXIgPT4ge1xuICAgICAgY29uc3QgdmVydGV4MUV4dGVudFNjYWxlcyA9IGVkZ2VFeHRlbnRTY2FsZVBhaXJbMF07XG4gICAgICBjb25zdCB2ZXJ0ZXgyRXh0ZW50U2NhbGVzID0gZWRnZUV4dGVudFNjYWxlUGFpclsxXTtcblxuICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBlZGdlJ3MgZmlyc3QgYW5kIHNlY29uZCB2ZXJ0ZXguXG4gICAgICB2ZWMzLmNvcHkoX3ZlcnRleDEsIHRoaXMuX2NlbnRlcik7XG4gICAgICB2ZWMzLmNvcHkoX3ZlcnRleDIsIHRoaXMuX2NlbnRlcik7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkrKykge1xuICAgICAgICB2ZWMzLnNjYWxlQW5kQWRkKF92ZXJ0ZXgxLCBfdmVydGV4MSwgdGhpcy5leHRlbnRzW2ldLCB2ZXJ0ZXgxRXh0ZW50U2NhbGVzW2ldKTtcbiAgICAgICAgdmVjMy5zY2FsZUFuZEFkZChfdmVydGV4MiwgX3ZlcnRleDIsIHRoaXMuZXh0ZW50c1tpXSwgdmVydGV4MkV4dGVudFNjYWxlc1tpXSk7XG4gICAgICB9XG5cbiAgICAgIC8vIENhbGwgYmFjayB3aXRoIHRoZSBlZGdlLlxuICAgICAgZWRnZS5yZXNldChfdmVydGV4MSwgX3ZlcnRleDIpO1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKGVkZ2UpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxzIHRoZSBnaXZlbiBjYWxsYmFjayBvbmNlIGZvciBlYWNoIGZhY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7RmFjZUNhbGxiYWNrfSBjYWxsYmFja1xuICAgKiBAcGFyYW0ge0FycmF5Ljx2ZWMzPn0gW2ZhY2VdIE91dHB1dCBwYXJhbS5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgb25lIG9mIHRoZSBjYWxsYmFja3MgcmV0dXJuZWQgdHJ1ZS5cbiAgICovXG4gIHNvbWVGYWNlKGNhbGxiYWNrLCBmYWNlKSB7XG4gICAgZmFjZSA9IGZhY2UgfHwgW107XG5cbiAgICByZXR1cm4gX2ZhY2VFeHRlbnRTY2FsZXMuc29tZShmYWNlRXh0ZW50U2NhbGVzID0+IHtcbiAgICAgIGNvbnN0IHZlcnRleDFFeHRlbnRTY2FsZXMgPSBmYWNlRXh0ZW50U2NhbGVzWzBdO1xuICAgICAgY29uc3QgdmVydGV4MkV4dGVudFNjYWxlcyA9IGZhY2VFeHRlbnRTY2FsZXNbMV07XG4gICAgICBjb25zdCB2ZXJ0ZXgzRXh0ZW50U2NhbGVzID0gZmFjZUV4dGVudFNjYWxlc1syXTtcbiAgICAgIGNvbnN0IHZlcnRleDRFeHRlbnRTY2FsZXMgPSBmYWNlRXh0ZW50U2NhbGVzWzNdO1xuXG4gICAgICAvLyBDYWxjdWxhdGUgdGhlIGZhY2UncyB2ZXJ0aWNlcy5cbiAgICAgIHZlYzMuY29weShfdmVydGV4MSwgdGhpcy5fY2VudGVyKTtcbiAgICAgIHZlYzMuY29weShfdmVydGV4MiwgdGhpcy5fY2VudGVyKTtcbiAgICAgIHZlYzMuY29weShfdmVydGV4MywgdGhpcy5fY2VudGVyKTtcbiAgICAgIHZlYzMuY29weShfdmVydGV4NCwgdGhpcy5fY2VudGVyKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgICAgIHZlYzMuc2NhbGVBbmRBZGQoX3ZlcnRleDEsIF92ZXJ0ZXgxLCB0aGlzLmV4dGVudHNbaV0sIHZlcnRleDFFeHRlbnRTY2FsZXNbaV0pO1xuICAgICAgICB2ZWMzLnNjYWxlQW5kQWRkKF92ZXJ0ZXgyLCBfdmVydGV4MiwgdGhpcy5leHRlbnRzW2ldLCB2ZXJ0ZXgyRXh0ZW50U2NhbGVzW2ldKTtcbiAgICAgICAgdmVjMy5zY2FsZUFuZEFkZChfdmVydGV4MywgX3ZlcnRleDMsIHRoaXMuZXh0ZW50c1tpXSwgdmVydGV4M0V4dGVudFNjYWxlc1tpXSk7XG4gICAgICAgIHZlYzMuc2NhbGVBbmRBZGQoX3ZlcnRleDQsIF92ZXJ0ZXg0LCB0aGlzLmV4dGVudHNbaV0sIHZlcnRleDRFeHRlbnRTY2FsZXNbaV0pO1xuICAgICAgfVxuXG4gICAgICAvLyBDYWxsIGJhY2sgd2l0aCB0aGUgZmFjZS5cbiAgICAgIGZhY2Uuc3BsaWNlKDAsIDQsIF92ZXJ0ZXgxLCBfdmVydGV4MiwgX3ZlcnRleDMsIF92ZXJ0ZXg0KTtcbiAgICAgIHJldHVybiBjYWxsYmFjayhmYWNlKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxscyB0aGUgZ2l2ZW4gY2FsbGJhY2sgb25jZSBmb3IgZWFjaCBmYWNlIHdpdGggYSBnaXZlbiBhZGRpdGlvbmFsIG9mZnNldCBmcm9tIHRoZSBjZW50ZXJcbiAgICogYXBwbGllZCB0byBlYWNoIGZhY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7RmFjZUNhbGxiYWNrfSBjYWxsYmFja1xuICAgKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzT2Zmc2V0XG4gICAqIEBwYXJhbSB7QXJyYXkuPHZlYzM+fSBbZmFjZV0gT3V0cHV0IHBhcmFtLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBvbmUgb2YgdGhlIGNhbGxiYWNrcyByZXR1cm5lZCB0cnVlLlxuICAgKi9cbiAgc29tZVB1c2hlZE91dEZhY2UoY2FsbGJhY2ssIHJhZGl1c09mZnNldCwgZmFjZSkge1xuICAgIGZhY2UgPSBmYWNlIHx8IFtdO1xuXG4gICAgcmV0dXJuIF9mYWNlRXh0ZW50U2NhbGVzLnNvbWUoKGZhY2VFeHRlbnRTY2FsZXMsIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCB2ZXJ0ZXgxRXh0ZW50U2NhbGVzID0gZmFjZUV4dGVudFNjYWxlc1swXTtcbiAgICAgIGNvbnN0IHZlcnRleDJFeHRlbnRTY2FsZXMgPSBmYWNlRXh0ZW50U2NhbGVzWzFdO1xuICAgICAgY29uc3QgdmVydGV4M0V4dGVudFNjYWxlcyA9IGZhY2VFeHRlbnRTY2FsZXNbMl07XG4gICAgICBjb25zdCB2ZXJ0ZXg0RXh0ZW50U2NhbGVzID0gZmFjZUV4dGVudFNjYWxlc1szXTtcbiAgICAgIGNvbnN0IGRpcmVjdGlvbk9mZnNldHMgPSBfcHVzaGVkT3V0RmFjZU9mZnNldERpcmVjdGlvbnNbaW5kZXhdO1xuXG4gICAgICAvLyBDYWxjdWxhdGUgdGhlIGZhY2UncyB2ZXJ0aWNlcy5cbiAgICAgIHZlYzMuY29weShfdmVydGV4MSwgdGhpcy5fY2VudGVyKTtcbiAgICAgIHZlYzMuY29weShfdmVydGV4MiwgdGhpcy5fY2VudGVyKTtcbiAgICAgIHZlYzMuY29weShfdmVydGV4MywgdGhpcy5fY2VudGVyKTtcbiAgICAgIHZlYzMuY29weShfdmVydGV4NCwgdGhpcy5fY2VudGVyKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgICAgIC8vIEFkZCB0aGUgb2Zmc2V0IGZvciB0aGUgbm9ybWFsIHZlcnRleCBwb3NpdGlvbi5cbiAgICAgICAgdmVjMy5zY2FsZUFuZEFkZChfdmVydGV4MSwgX3ZlcnRleDEsIHRoaXMuZXh0ZW50c1tpXSwgdmVydGV4MUV4dGVudFNjYWxlc1tpXSk7XG4gICAgICAgIHZlYzMuc2NhbGVBbmRBZGQoX3ZlcnRleDIsIF92ZXJ0ZXgyLCB0aGlzLmV4dGVudHNbaV0sIHZlcnRleDJFeHRlbnRTY2FsZXNbaV0pO1xuICAgICAgICB2ZWMzLnNjYWxlQW5kQWRkKF92ZXJ0ZXgzLCBfdmVydGV4MywgdGhpcy5leHRlbnRzW2ldLCB2ZXJ0ZXgzRXh0ZW50U2NhbGVzW2ldKTtcbiAgICAgICAgdmVjMy5zY2FsZUFuZEFkZChfdmVydGV4NCwgX3ZlcnRleDQsIHRoaXMuZXh0ZW50c1tpXSwgdmVydGV4NEV4dGVudFNjYWxlc1tpXSk7XG4gICAgICAgIC8vIEFkZCB0aGUgcHVzaGVkLW91dCBvZmZzZXQuXG4gICAgICAgIHZlYzMuc2NhbGVBbmRBZGQoX3ZlcnRleDEsIF92ZXJ0ZXgxLCB0aGlzLmV4dGVudHNbaV0sXG4gICAgICAgICAgICByYWRpdXNPZmZzZXQgLyB0aGlzLmhhbGZTaWRlTGVuZ3Roc1tpXSAqIGRpcmVjdGlvbk9mZnNldHNbaV0pO1xuICAgICAgICB2ZWMzLnNjYWxlQW5kQWRkKF92ZXJ0ZXgyLCBfdmVydGV4MiwgdGhpcy5leHRlbnRzW2ldLFxuICAgICAgICAgICAgcmFkaXVzT2Zmc2V0IC8gdGhpcy5oYWxmU2lkZUxlbmd0aHNbaV0gKiBkaXJlY3Rpb25PZmZzZXRzW2ldKTtcbiAgICAgICAgdmVjMy5zY2FsZUFuZEFkZChfdmVydGV4MywgX3ZlcnRleDMsIHRoaXMuZXh0ZW50c1tpXSxcbiAgICAgICAgICAgIHJhZGl1c09mZnNldCAvIHRoaXMuaGFsZlNpZGVMZW5ndGhzW2ldICogZGlyZWN0aW9uT2Zmc2V0c1tpXSk7XG4gICAgICAgIHZlYzMuc2NhbGVBbmRBZGQoX3ZlcnRleDQsIF92ZXJ0ZXg0LCB0aGlzLmV4dGVudHNbaV0sXG4gICAgICAgICAgICByYWRpdXNPZmZzZXQgLyB0aGlzLmhhbGZTaWRlTGVuZ3Roc1tpXSAqIGRpcmVjdGlvbk9mZnNldHNbaV0pO1xuICAgICAgfVxuXG4gICAgICAvLyBDYWxsIGJhY2sgd2l0aCB0aGUgZmFjZS5cbiAgICAgIGZhY2Uuc3BsaWNlKDAsIDQsIF92ZXJ0ZXgxLCBfdmVydGV4MiwgX3ZlcnRleDMsIF92ZXJ0ZXg0KTtcbiAgICAgIHJldHVybiBjYWxsYmFjayhmYWNlKTtcbiAgICB9KTtcbiAgfVxuXG4gIF91cGRhdGVFeHRlbnRzKCkge1xuICAgIHZlYzMuc2V0KF92ZXJ0ZXgxLCB0aGlzLmhhbGZTaWRlTGVuZ3Roc1swXSwgMCwgMCk7XG4gICAgdmVjMy50cmFuc2Zvcm1RdWF0KHRoaXMuZXh0ZW50c1swXSwgX3ZlcnRleDEsIHRoaXMuX29yaWVudGF0aW9uKTtcbiAgICB2ZWMzLnNldChfdmVydGV4MSwgMCwgdGhpcy5oYWxmU2lkZUxlbmd0aHNbMV0sIDApO1xuICAgIHZlYzMudHJhbnNmb3JtUXVhdCh0aGlzLmV4dGVudHNbMV0sIF92ZXJ0ZXgxLCB0aGlzLl9vcmllbnRhdGlvbik7XG4gICAgdmVjMy5zZXQoX3ZlcnRleDEsIDAsIDAsIHRoaXMuaGFsZlNpZGVMZW5ndGhzWzJdKTtcbiAgICB2ZWMzLnRyYW5zZm9ybVF1YXQodGhpcy5leHRlbnRzWzJdLCBfdmVydGV4MSwgdGhpcy5fb3JpZW50YXRpb24pO1xuXG4gICAgdmVjMy5zZXQoX3ZlcnRleDEsIDEsIDAsIDApO1xuICAgIHZlYzMudHJhbnNmb3JtUXVhdCh0aGlzLmF4ZXNbMF0sIF92ZXJ0ZXgxLCB0aGlzLl9vcmllbnRhdGlvbik7XG4gICAgdmVjMy5zZXQoX3ZlcnRleDEsIDAsIDEsIDApO1xuICAgIHZlYzMudHJhbnNmb3JtUXVhdCh0aGlzLmF4ZXNbMV0sIF92ZXJ0ZXgxLCB0aGlzLl9vcmllbnRhdGlvbik7XG4gICAgdmVjMy5zZXQoX3ZlcnRleDEsIDAsIDAsIDEpO1xuICAgIHZlYzMudHJhbnNmb3JtUXVhdCh0aGlzLmF4ZXNbMl0sIF92ZXJ0ZXgxLCB0aGlzLl9vcmllbnRhdGlvbik7XG4gIH1cbn1cblxuY29uc3QgX3ZlcnRleDEgPSB2ZWMzLmNyZWF0ZSgpO1xuY29uc3QgX3ZlcnRleDIgPSB2ZWMzLmNyZWF0ZSgpO1xuY29uc3QgX3ZlcnRleDMgPSB2ZWMzLmNyZWF0ZSgpO1xuY29uc3QgX3ZlcnRleDQgPSB2ZWMzLmNyZWF0ZSgpO1xuY29uc3QgX3NlZ21lbnQgPSBuZXcgTGluZVNlZ21lbnQodmVjMy5jcmVhdGUoKSwgdmVjMy5jcmVhdGUoKSk7XG5cbmNvbnN0IF9lZGdlRXh0ZW50U2NhbGVzID0gW1xuICAvLyBGcm9udC1mYWNlIGVkZ2VzLlxuICBbWzEsIC0xLCAtMV0sIFsxLCAtMSwgMV1dLFxuICBbWzEsIC0xLCAtMV0sIFsxLCAxLCAtMV1dLFxuICBbWzEsIDEsIDFdLCBbMSwgLTEsIDFdXSxcbiAgW1sxLCAxLCAxXSwgWzEsIDEsIC0xXV0sXG4gIC8vIEJhY2stZmFjZSBlZGdlcy5cbiAgW1stMSwgLTEsIC0xXSwgWy0xLCAtMSwgMV1dLFxuICBbWy0xLCAtMSwgLTFdLCBbLTEsIDEsIC0xXV0sXG4gIFtbLTEsIDEsIDFdLCBbLTEsIC0xLCAxXV0sXG4gIFtbLTEsIDEsIDFdLCBbLTEsIDEsIC0xXV0sXG4gIC8vIEZyb250LXRvLWJhY2sgZWRnZXMuXG4gIFtbMSwgLTEsIDFdLCBbLTEsIC0xLCAxXV0sXG4gIFtbMSwgMSwgLTFdLCBbLTEsIDEsIC0xXV0sXG4gIFtbMSwgMSwgMV0sIFstMSwgMSwgMV1dLFxuICBbWzEsIC0xLCAtMV0sIFstMSwgLTEsIC0xXV0sXG5dO1xuXG5jb25zdCBfZmFjZUV4dGVudFNjYWxlcyA9IFtcbiAgW1sxLCAtMSwgLTFdLCBbMSwgLTEsIDFdLCBbMSwgMSwgMV0sIFsxLCAxLCAtMV1dLFxuICBbWy0xLCAtMSwgLTFdLCBbLTEsIC0xLCAxXSwgWy0xLCAxLCAxXSwgWy0xLCAxLCAtMV1dLFxuICBbWy0xLCAxLCAtMV0sIFsxLCAxLCAtMV0sIFsxLCAxLCAxXSwgWy0xLCAxLCAxXV0sXG4gIFtbLTEsIC0xLCAtMV0sIFsxLCAtMSwgLTFdLCBbMSwgLTEsIDFdLCBbLTEsIC0xLCAxXV0sXG4gIFtbLTEsIC0xLCAxXSwgWzEsIC0xLCAxXSwgWzEsIDEsIDFdLCBbLTEsIDEsIDFdXSxcbiAgW1stMSwgLTEsIC0xXSwgWzEsIC0xLCAtMV0sIFsxLCAxLCAtMV0sIFstMSwgMSwgLTFdXSxcbl07XG5cbmNvbnN0IF9wdXNoZWRPdXRGYWNlT2Zmc2V0RGlyZWN0aW9ucyA9IFtcbiAgdmVjMy5mcm9tVmFsdWVzKDEsIDAsIDApLFxuICB2ZWMzLmZyb21WYWx1ZXMoLTEsIDAsIDApLFxuICB2ZWMzLmZyb21WYWx1ZXMoMCwgMSwgMCksXG4gIHZlYzMuZnJvbVZhbHVlcygwLCAtMSwgMCksXG4gIHZlYzMuZnJvbVZhbHVlcygwLCAwLCAxKSxcbiAgdmVjMy5mcm9tVmFsdWVzKDAsIDAsIC0xKSxcbl07XG5cbmV4cG9ydCB7T2JifTtcblxuLyoqXG4gKiBAY2FsbGJhY2sgVmVydGV4Q2FsbGJhY2tcbiAqIEBwYXJhbSB7dmVjM31cbiAqIEByZXR1cm5zIHtib29sZWFufSBJZiB0cnVlLCBpdGVyYXRpb24gd2lsbCBzdG9wLlxuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIEVkZ2VDYWxsYmFja1xuICogQHBhcmFtIHtMaW5lU2VnbWVudH1cbiAqIEByZXR1cm5zIHtib29sZWFufSBJZiB0cnVlLCBpdGVyYXRpb24gd2lsbCBzdG9wLlxuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIEZhY2VDYWxsYmFja1xuICogQHBhcmFtIHtBcnJheS48dmVjMz59XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gSWYgdHJ1ZSwgaXRlcmF0aW9uIHdpbGwgc3RvcC5cbiAqL1xuIiwiaW1wb3J0IHtDb2xsaWRhYmxlfSBmcm9tICcuL2NvbGxpZGFibGUnO1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhIGJvdW5kaW5nIHNwaGVyZS5cbiAqXG4gKiBUaGlzIGlzIHByaW1hcmlseSB1c2VmdWwgZm9yIGNvbGxpc2lvbiBkZXRlY3Rpb24uIEEgYm91bmRpbmcgc3BoZXJlIGlzIG9ubHkgYXBwcm9wcmlhdGUgZm9yIHNvbWVcbiAqIGdlb21ldHJpZXMuIEZvciBvdGhlciBnZW9tZXRyaWVzLCBhbiBheGlhbGx5LWFsaWduZWQgYm91bmRpbmcgYm94IG1heSBiZSBtb3JlIGFwcHJvcHJpYXRlLiBGb3JcbiAqIG90aGVycyBzdGlsbCwgYW4gb3JpZW50ZWQgYm91bmRpbmcgYm94IG9yIGEgbW9yZSBjb21wbGljYXRlZCBoaWVyYXJjaGljYWwgbW9kZWwgbWF5IGJlIG1vcmVcbiAqIGFwcHJvcHJpYXRlLlxuICovXG5jbGFzcyBTcGhlcmUgZXh0ZW5kcyBDb2xsaWRhYmxlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjZW50ZXJYXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjZW50ZXJZXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjZW50ZXJaXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXNcbiAgICogQHBhcmFtIHtib29sZWFufSBbaXNTdGF0aW9uYXJ5PWZhbHNlXVxuICAgKiBAcGFyYW0ge0NvbGxpZGFibGVQaHlzaWNzSm9ifSBbcGh5c2ljc0pvYl1cbiAgICovXG4gIGNvbnN0cnVjdG9yKGNlbnRlclgsIGNlbnRlclksIGNlbnRlclosIHJhZGl1cywgaXNTdGF0aW9uYXJ5ID0gZmFsc2UsIHBoeXNpY3NKb2IpIHtcbiAgICBzdXBlcihpc1N0YXRpb25hcnksIHBoeXNpY3NKb2IpO1xuICAgIHRoaXMuY2VudGVyWCA9IGNlbnRlclg7XG4gICAgdGhpcy5jZW50ZXJZID0gY2VudGVyWTtcbiAgICB0aGlzLmNlbnRlclogPSBjZW50ZXJaO1xuICAgIHRoaXMucmFkaXVzID0gcmFkaXVzO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHt2ZWMzfVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldCBjZW50ZXJPZlZvbHVtZSgpIHtcbiAgICAvLyBSZXVzZSB0aGUgc2FtZSBvYmplY3Qgd2hlbiB0aGlzIGlzIGNhbGxlZCBtdWx0aXBsZSB0aW1lcy5cbiAgICB0aGlzLl9jZW50ZXIgPSB0aGlzLl9jZW50ZXIgfHwgdmVjMy5jcmVhdGUoKTtcbiAgICB2ZWMzLnNldCh0aGlzLl9jZW50ZXIsIHRoaXMuY2VudGVyWCwgdGhpcy5jZW50ZXJZLCB0aGlzLmNlbnRlclopO1xuICAgIHJldHVybiB0aGlzLl9jZW50ZXI7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge0NvbGxpZGFibGV9XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0IGJvdW5kaW5nVm9sdW1lKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7dmVjM30gdmFsdWVcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzZXQgcG9zaXRpb24odmFsdWUpIHtcbiAgICB0aGlzLmNlbnRlclggPSB2YWx1ZVswXTtcbiAgICB0aGlzLmNlbnRlclkgPSB2YWx1ZVsxXTtcbiAgICB0aGlzLmNlbnRlclogPSB2YWx1ZVsyXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3F1YXR9IHZhbHVlXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc2V0IG9yaWVudGF0aW9uKHZhbHVlKSB7XG4gICAgLy8gRG8gbm90aGluZy5cbiAgfVxufVxuXG5leHBvcnQge1NwaGVyZX07XG4iLCJpbXBvcnQgKiBhcyBhYWJiQ29sbGlzaW9uRGV0ZWN0aW9uIGZyb20gJy4vc3JjL2FhYmItY29sbGlzaW9uLWRldGVjdGlvbic7XG5pbXBvcnQgKiBhcyBjYXBzdWxlQ29sbGlzaW9uRGV0ZWN0aW9uIGZyb20gJy4vc3JjL2NhcHN1bGUtY29sbGlzaW9uLWRldGVjdGlvbic7XG5pbXBvcnQgKiBhcyBvYmJDb2xsaXNpb25EZXRlY3Rpb24gZnJvbSAnLi9zcmMvb2JiLWNvbGxpc2lvbi1kZXRlY3Rpb24nO1xuaW1wb3J0ICogYXMgc3BoZXJlQ29sbGlzaW9uRGV0ZWN0aW9uIGZyb20gJy4vc3JjL3NwaGVyZS1jb2xsaXNpb24tZGV0ZWN0aW9uJztcblxuZXhwb3J0IHtcbiAgYWFiYkNvbGxpc2lvbkRldGVjdGlvbixcbiAgY2Fwc3VsZUNvbGxpc2lvbkRldGVjdGlvbixcbiAgb2JiQ29sbGlzaW9uRGV0ZWN0aW9uLFxuICBzcGhlcmVDb2xsaXNpb25EZXRlY3Rpb24sXG59O1xuIiwiaW1wb3J0ICogYXMgc3BoZXJlQ29sbGlzaW9uRGV0ZWN0aW9uIGZyb20gJy4vc3BoZXJlLWNvbGxpc2lvbi1kZXRlY3Rpb24nO1xuaW1wb3J0ICogYXMgb2JiQ29sbGlzaW9uRGV0ZWN0aW9uIGZyb20gJy4vb2JiLWNvbGxpc2lvbi1kZXRlY3Rpb24nO1xuaW1wb3J0ICogYXMgY2Fwc3VsZUNvbGxpc2lvbkRldGVjdGlvbiBmcm9tICcuL2NhcHN1bGUtY29sbGlzaW9uLWRldGVjdGlvbic7XG5pbXBvcnQge2FhYmJWc1BvaW50IGFzIGdlb21ldHJ5QWFiYlZzUG9pbnR9IGZyb20gJy4uLy4uLy4uL3V0aWwnO1xuXG4vKipcbiAqIFRoaXMgbW9kdWxlIGRlZmluZXMgdXRpbGl0eSBtZXRob2RzIGZvciBkZXRlY3Rpbmcgd2hldGhlciBpbnRlcnNlY3Rpb24gaGFzIG9jY3VycmVkIGJldHdlZW5cbiAqIGF4aWFsbHktYWxpZ25lZCBib3VuZGluZyBib3hlcyBhbmQgb3RoZXIgc2hhcGVzLlxuICovXG5cbi8qKlxuICogQHBhcmFtIHtBYWJifSBhYWJiXG4gKiBAcGFyYW0ge3ZlYzN9IHBvaW50XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gYWFiYlZzUG9pbnQoYWFiYiwgcG9pbnQpIHtcbiAgcmV0dXJuIGdlb21ldHJ5QWFiYlZzUG9pbnQoYWFiYiwgcG9pbnQpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7QWFiYn0gYWFiYlxuICogQHBhcmFtIHtTcGhlcmV9IHNwaGVyZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGFhYmJWc1NwaGVyZShhYWJiLCBzcGhlcmUpIHtcbiAgcmV0dXJuIHNwaGVyZUNvbGxpc2lvbkRldGVjdGlvbi5zcGhlcmVWc0FhYmIoc3BoZXJlLCBhYWJiKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FhYmJ9IGFhYmJBXG4gKiBAcGFyYW0ge0FhYmJ9IGFhYmJCXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gYWFiYlZzQWFiYihhYWJiQSwgYWFiYkIpIHtcbiAgcmV0dXJuIGFhYmJBLm1heFggPj0gYWFiYkIubWluWCAmJiBhYWJiQS5taW5YIDw9IGFhYmJCLm1heFggJiZcbiAgICAgIGFhYmJBLm1heFkgPj0gYWFiYkIubWluWSAmJiBhYWJiQS5taW5ZIDw9IGFhYmJCLm1heFkgJiZcbiAgICAgIGFhYmJBLm1heFogPj0gYWFiYkIubWluWiAmJiBhYWJiQS5taW5aIDw9IGFhYmJCLm1heFo7XG59XG5cbi8qKlxuICogQHBhcmFtIHtBYWJifSBhYWJiXG4gKiBAcGFyYW0ge09iYn0gb2JiXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gYWFiYlZzT2JiKGFhYmIsIG9iYikge1xuICByZXR1cm4gb2JiQ29sbGlzaW9uRGV0ZWN0aW9uLm9iYlZzQWFiYihvYmIsIGFhYmIpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7QWFiYn0gYWFiYlxuICogQHBhcmFtIHtDYXBzdWxlfSBjYXBzdWxlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gYWFiYlZzQ2Fwc3VsZShhYWJiLCBjYXBzdWxlKSB7XG4gIHJldHVybiBjYXBzdWxlQ29sbGlzaW9uRGV0ZWN0aW9uLmNhcHN1bGVWc0FhYmIoY2Fwc3VsZSwgYWFiYik7XG59XG5cbmV4cG9ydCB7XG4gIGFhYmJWc1BvaW50LFxuICBhYWJiVnNTcGhlcmUsXG4gIGFhYmJWc0FhYmIsXG4gIGFhYmJWc09iYixcbiAgYWFiYlZzQ2Fwc3VsZSxcbn07XG4iLCIvKipcbiAqIFRoaXMgbW9kdWxlIGRlZmluZXMgdXRpbGl0eSBtZXRob2RzIGZvciBkZXRlY3Rpbmcgd2hldGhlciBpbnRlcnNlY3Rpb24gaGFzIG9jY3VycmVkIGJldHdlZW5cbiAqIGNhcHN1bGVzIGFuZCBvdGhlciBzaGFwZXMuXG4gKi9cblxuaW1wb3J0IHtcbiAgZmluZENsb3Nlc3RQb2ludEZyb21BYWJiVG9Qb2ludCxcbiAgZmluZFNxdWFyZWREaXN0YW5jZUJldHdlZW5TZWdtZW50cyxcbiAgZmluZFNxdWFyZWREaXN0YW5jZUZyb21TZWdtZW50VG9Qb2ludCxcbiAgdG1wVmVjMVxufSBmcm9tICcuLi8uLi8uLi91dGlsJztcbmltcG9ydCAqIGFzIG9iYkNvbGxpc2lvbkRldGVjdGlvbiBmcm9tICcuL29iYi1jb2xsaXNpb24tZGV0ZWN0aW9uJztcblxuLyoqXG4gKiBAcGFyYW0ge0NhcHN1bGV9IGNhcHN1bGVcbiAqIEBwYXJhbSB7dmVjM30gcG9pbnRcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBjYXBzdWxlVnNQb2ludChjYXBzdWxlLCBwb2ludCkge1xuICByZXR1cm4gZmluZFNxdWFyZWREaXN0YW5jZUZyb21TZWdtZW50VG9Qb2ludChjYXBzdWxlLnNlZ21lbnQsIHBvaW50KSA8PVxuICAgICAgY2Fwc3VsZS5yYWRpdXMgKiBjYXBzdWxlLnJhZGl1cztcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0NhcHN1bGV9IGNhcHN1bGVcbiAqIEBwYXJhbSB7U3BoZXJlfSBzcGhlcmVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBjYXBzdWxlVnNTcGhlcmUoY2Fwc3VsZSwgc3BoZXJlKSB7XG4gIGNvbnN0IHN1bU9mUmFkaWkgPSBjYXBzdWxlLnJhZGl1cyArIHNwaGVyZS5yYWRpdXM7XG4gIHJldHVybiBmaW5kU3F1YXJlZERpc3RhbmNlRnJvbVNlZ21lbnRUb1BvaW50KGNhcHN1bGUuc2VnbWVudCwgc3BoZXJlLmNlbnRlck9mVm9sdW1lKSA8PVxuICAgICAgc3VtT2ZSYWRpaSAqIHN1bU9mUmFkaWk7XG59XG5cbi8qKlxuICogTk9URTogVGhpcyBpbXBsZW1lbnRhdGlvbiBjaGVhdHMgYnkgY2hlY2tpbmcgd2hldGhlciB2ZXJ0aWNlcyBmcm9tIG9uZSBzaGFwZSBsaWUgd2l0aGluIHRoZVxuICogb3RoZXIuIER1ZSB0byB0aGUgdHVubmVsbGluZyBwcm9ibGVtLCBpdCBpcyBwb3NzaWJsZSB0aGF0IGludGVyc2VjdGlvbiBvY2N1cnMgd2l0aG91dCBhbnlcbiAqIHZlcnRpY2VzIGx5aW5nIHdpdGhpbiB0aGUgb3RoZXIgc2hhcGUuIEhvd2V2ZXIsIChBKSB0aGlzIGlzIHVubGlrZWx5LCBhbmQgKEIpIHdlIGFyZSBpZ25vcmluZyB0aGVcbiAqIHR1bm5lbGxpbmcgcHJvYmxlbSBmb3IgdGhlIHJlc3Qgb2YgdGhpcyBjb2xsaXNpb24gc3lzdGVtIGFueXdheS5cbiAqXG4gKiBAcGFyYW0ge0NhcHN1bGV9IGNhcHN1bGVcbiAqIEBwYXJhbSB7QWFiYn0gYWFiYlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGNhcHN1bGVWc0FhYmIoY2Fwc3VsZSwgYWFiYikge1xuICBjb25zdCBzcXVhcmVkUmFkaXVzID0gY2Fwc3VsZS5yYWRpdXMgKiBjYXBzdWxlLnJhZGl1cztcblxuICAvLyBDaGVjayB3aGV0aGVyIHRoZSB0d28gY2Fwc3VsZSBlbmRzIGludGVyc2VjdCB0aGUgQUFCQiAoc3BoZXJlIHZzIEFBQkIpIChhZGRyZXNzZXMgdGhlXG4gIC8vIGNhcHN1bGUtdnMtQUFCQi1mYWNlIGNhc2UpLlxuICBmaW5kQ2xvc2VzdFBvaW50RnJvbUFhYmJUb1BvaW50KHRtcFZlYzEsIGFhYmIsIGNhcHN1bGUuc2VnbWVudC5zdGFydCk7XG4gIGlmICh2ZWMzLnNxdWFyZWREaXN0YW5jZSh0bXBWZWMxLCBjYXBzdWxlLnNlZ21lbnQuc3RhcnQpIDw9IHNxdWFyZWRSYWRpdXMpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBmaW5kQ2xvc2VzdFBvaW50RnJvbUFhYmJUb1BvaW50KHRtcFZlYzEsIGFhYmIsIGNhcHN1bGUuc2VnbWVudC5lbmQpO1xuICBpZiAodmVjMy5zcXVhcmVkRGlzdGFuY2UodG1wVmVjMSwgY2Fwc3VsZS5zZWdtZW50LmVuZCkgPD0gc3F1YXJlZFJhZGl1cykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gQ2hlY2sgd2hldGhlciB0aGUgY2Fwc3VsZSBpbnRlcnNlY3RzIHdpdGggYW55IEFBQkIgZWRnZSAoYWRkcmVzc2VzIHRoZSBjYXBzdWxlLXZzLUFBQkItZWRnZVxuICAvLyBjYXNlKS5cbiAgcmV0dXJuIGFhYmIuc29tZUVkZ2UoZWRnZSA9PlxuICAgICAgZmluZFNxdWFyZWREaXN0YW5jZUJldHdlZW5TZWdtZW50cyhjYXBzdWxlLnNlZ21lbnQsIGVkZ2UpIDw9IHNxdWFyZWRSYWRpdXMpO1xuXG4gIC8vIChUaGUgY2Fwc3VsZS12cy1BQUJCLXZlcnRleCBjYXNlIGlzIGNvdmVyZWQgYnkgdGhlIGNhcHN1bGUtdnMtQUFCQi1lZGdlIGNhc2UpLlxufVxuXG4vKipcbiAqIEBwYXJhbSB7Q2Fwc3VsZX0gY2Fwc3VsZVxuICogQHBhcmFtIHtPYmJ9IG9iYlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGNhcHN1bGVWc09iYihjYXBzdWxlLCBvYmIpIHtcbiAgcmV0dXJuIG9iYkNvbGxpc2lvbkRldGVjdGlvbi5vYmJWc0NhcHN1bGUob2JiLCBjYXBzdWxlKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0NhcHN1bGV9IGNhcHN1bGVBXG4gKiBAcGFyYW0ge0NhcHN1bGV9IGNhcHN1bGVCXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gY2Fwc3VsZVZzQ2Fwc3VsZShjYXBzdWxlQSwgY2Fwc3VsZUIpIHtcbiAgY29uc3Qgc3VtT2ZSYWRpaSA9IGNhcHN1bGVBLnJhZGl1cyArIGNhcHN1bGVCLnJhZGl1cztcbiAgcmV0dXJuIGZpbmRTcXVhcmVkRGlzdGFuY2VCZXR3ZWVuU2VnbWVudHMoY2Fwc3VsZUEuc2VnbWVudCwgY2Fwc3VsZUIuc2VnbWVudCkgPD1cbiAgICAgIHN1bU9mUmFkaWkgKiBzdW1PZlJhZGlpO1xufVxuXG5leHBvcnQge1xuICBjYXBzdWxlVnNQb2ludCxcbiAgY2Fwc3VsZVZzU3BoZXJlLFxuICBjYXBzdWxlVnNBYWJiLFxuICBjYXBzdWxlVnNPYmIsXG4gIGNhcHN1bGVWc0NhcHN1bGUsXG59O1xuIiwiLyoqXG4gKiBUaGlzIG1vZHVsZSBkZWZpbmVzIHV0aWxpdHkgbWV0aG9kcyBmb3IgZGV0ZWN0aW5nIHdoZXRoZXIgaW50ZXJzZWN0aW9uIGhhcyBvY2N1cnJlZCBiZXR3ZWVuXG4gKiBvcmllbnRlZCBib3VuZGluZyBib3hlcyBhbmQgb3RoZXIgc2hhcGVzLlxuICovXG5cbmltcG9ydCB7XG4gIGZpbmRDbG9zZXN0UG9pbnRGcm9tT2JiVG9Qb2ludCxcbiAgZmluZFBvaUJldHdlZW5TZWdtZW50QW5kUGxhbmVSZWdpb24sXG4gIGZpbmRTcXVhcmVkRGlzdGFuY2VCZXR3ZWVuU2VnbWVudHMsXG4gIHRtcFZlYzEsXG4gIHRtcFZlYzIsXG4gIHRtcFZlYzMsXG4gIHRtcFZlYzRcbn0gZnJvbSAnLi4vLi4vLi4vdXRpbCc7XG5pbXBvcnQgKiBhcyBhYWJiQ29sbGlzaW9uRGV0ZWN0aW9uIGZyb20gJy4vYWFiYi1jb2xsaXNpb24tZGV0ZWN0aW9uJztcbmltcG9ydCAqIGFzIGNhcHN1bGVDb2xsaXNpb25EZXRlY3Rpb24gZnJvbSAnLi9jYXBzdWxlLWNvbGxpc2lvbi1kZXRlY3Rpb24nO1xuXG4vLyBUT0RPOiBSZWZhY3RvciB0aGVzZSB0byBub3QgYWN0dWFsbHkgY2FsY3VsYXRlIHRoZSBwb2ludCBvZiBpbnRlcnNlY3Rpb24uIFRoZXNlIGNoZWNrcyBjYW5cbi8vIGluc3RlYWQgYmUgZG9uZSBtb3JlIGVmZmljaWVudGx5IHVzaW5nIFNBVC5cblxuLyoqXG4gKiBAcGFyYW0ge09iYn0gb2JiXG4gKiBAcGFyYW0ge3ZlYzN9IHBvaW50XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gb2JiVnNQb2ludChvYmIsIHBvaW50KSB7XG4gIHZlYzMuc3VidHJhY3QodG1wVmVjNCwgcG9pbnQsIG9iYi5jZW50ZXJPZlZvbHVtZSk7XG5cbiAgdmVjMy5zZXQodG1wVmVjMSwgMSwgMCwgMCk7XG4gIHZlYzMudHJhbnNmb3JtUXVhdCh0bXBWZWMxLCB0bXBWZWMxLCBvYmIub3JpZW50YXRpb24pO1xuICBjb25zdCBheGlzMURpc3RhbmNlID0gdmVjMy5kb3QodG1wVmVjNCwgdG1wVmVjMSk7XG5cbiAgaWYgKGF4aXMxRGlzdGFuY2UgPj0gLW9iYi5oYWxmU2lkZUxlbmd0aFggJiYgYXhpczFEaXN0YW5jZSA8PSBvYmIuaGFsZlNpZGVMZW5ndGhYKSB7XG4gICAgdmVjMy5zZXQodG1wVmVjMiwgMCwgMSwgMCk7XG4gICAgdmVjMy50cmFuc2Zvcm1RdWF0KHRtcFZlYzIsIHRtcFZlYzIsIG9iYi5vcmllbnRhdGlvbik7XG4gICAgY29uc3QgYXhpczJEaXN0YW5jZSA9IHZlYzMuZG90KHRtcFZlYzQsIHRtcFZlYzIpO1xuXG4gICAgaWYgKGF4aXMyRGlzdGFuY2UgPj0gLW9iYi5oYWxmU2lkZUxlbmd0aFkgJiYgYXhpczJEaXN0YW5jZSA8PSBvYmIuaGFsZlNpZGVMZW5ndGhZKSB7XG4gICAgICB2ZWMzLnNldCh0bXBWZWMzLCAwLCAwLCAxKTtcbiAgICAgIHZlYzMudHJhbnNmb3JtUXVhdCh0bXBWZWMzLCB0bXBWZWMzLCBvYmIub3JpZW50YXRpb24pO1xuICAgICAgY29uc3QgYXhpczNEaXN0YW5jZSA9IHZlYzMuZG90KHRtcFZlYzQsIHRtcFZlYzMpO1xuXG4gICAgICByZXR1cm4gYXhpczNEaXN0YW5jZSA+PSAtb2JiLmhhbGZTaWRlTGVuZ3RoWiAmJiBheGlzM0Rpc3RhbmNlIDw9IG9iYi5oYWxmU2lkZUxlbmd0aFo7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7T2JifSBvYmJcbiAqIEBwYXJhbSB7U3BoZXJlfSBzcGhlcmVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBvYmJWc1NwaGVyZShvYmIsIHNwaGVyZSkge1xuICBmaW5kQ2xvc2VzdFBvaW50RnJvbU9iYlRvUG9pbnQodG1wVmVjMSwgb2JiLCBzcGhlcmUuY2VudGVyT2ZWb2x1bWUpO1xuICByZXR1cm4gdmVjMy5zcXVhcmVkRGlzdGFuY2UodG1wVmVjMSwgc3BoZXJlLmNlbnRlck9mVm9sdW1lKSA8PVxuICAgICAgc3BoZXJlLnJhZGl1cyAqIHNwaGVyZS5yYWRpdXM7XG59XG5cbi8qKlxuICogTk9URTogVGhpcyBpbXBsZW1lbnRhdGlvbiBjaGVhdHMgYnkgY2hlY2tpbmcgd2hldGhlciB2ZXJ0aWNlcyBmcm9tIG9uZSBzaGFwZSBsaWUgd2l0aGluIHRoZVxuICogb3RoZXIuIER1ZSB0byB0aGUgdHVubmVsbGluZyBwcm9ibGVtLCBpdCBpcyBwb3NzaWJsZSB0aGF0IGludGVyc2VjdGlvbiBvY2N1cnMgd2l0aG91dCBhbnlcbiAqIHZlcnRpY2VzIGx5aW5nIHdpdGhpbiB0aGUgb3RoZXIgc2hhcGUuIEhvd2V2ZXIsIChBKSB0aGlzIGlzIHVubGlrZWx5LCBhbmQgKEIpIHdlIGFyZSBpZ25vcmluZyB0aGVcbiAqIHR1bm5lbGxpbmcgcHJvYmxlbSBmb3IgdGhlIHJlc3Qgb2YgdGhpcyBjb2xsaXNpb24gc3lzdGVtIGFueXdheS5cbiAqXG4gKiBAcGFyYW0ge09iYn0gb2JiXG4gKiBAcGFyYW0ge0FhYmJ9IGFhYmJcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBvYmJWc0FhYmIob2JiLCBhYWJiKSB7XG4gIHJldHVybiBfb2JiVnNCb3hIZWxwZXIob2JiLCBhYWJiLCBhYWJiQ29sbGlzaW9uRGV0ZWN0aW9uLmFhYmJWc1BvaW50KTtcbn1cblxuLyoqXG4gKiBOT1RFOiBUaGlzIGltcGxlbWVudGF0aW9uIGNoZWF0cyBieSBjaGVja2luZyB3aGV0aGVyIHZlcnRpY2VzIGZyb20gb25lIHNoYXBlIGxpZSB3aXRoaW4gdGhlXG4gKiBvdGhlci4gRHVlIHRvIHRoZSB0dW5uZWxsaW5nIHByb2JsZW0sIGl0IGlzIHBvc3NpYmxlIHRoYXQgaW50ZXJzZWN0aW9uIG9jY3VycyB3aXRob3V0IGFueVxuICogdmVydGljZXMgbHlpbmcgd2l0aGluIHRoZSBvdGhlciBzaGFwZS4gSG93ZXZlciwgKEEpIHRoaXMgaXMgdW5saWtlbHksIGFuZCAoQikgd2UgYXJlIGlnbm9yaW5nIHRoZVxuICogdHVubmVsbGluZyBwcm9ibGVtIGZvciB0aGUgcmVzdCBvZiB0aGlzIGNvbGxpc2lvbiBzeXN0ZW0gYW55d2F5LlxuICpcbiAqIEBwYXJhbSB7T2JifSBvYmJBXG4gKiBAcGFyYW0ge09iYn0gb2JiQlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIG9iYlZzT2JiKG9iYkEsIG9iYkIpIHtcbiAgcmV0dXJuIF9vYmJWc0JveEhlbHBlcihvYmJBLCBvYmJCLCBvYmJWc1BvaW50KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge09iYn0gb2JiXG4gKiBAcGFyYW0ge09iYnxBYWJifSBvdGhlclxuICogQHBhcmFtIHtGdW5jdGlvbn0gb3RoZXJWc1BvaW50Q2FsbGJhY2tcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX29iYlZzQm94SGVscGVyKG9iYiwgb3RoZXIsIG90aGVyVnNQb2ludENhbGxiYWNrKSB7XG4gIC8vIENoZWNrIHdoZXRoZXIgYW55IHZlcnRpY2VzIGZyb20gQSBsaWUgd2l0aGluIEIncyBib3VuZHMuXG4gIGlmIChvYmIuc29tZVZlcnRleCh2ZXJ0ZXggPT4gb3RoZXJWc1BvaW50Q2FsbGJhY2sob3RoZXIsIHZlcnRleCkpKSByZXR1cm4gdHJ1ZTtcblxuICAvLyBDaGVjayB3aGV0aGVyIGFueSB2ZXJ0aWNlcyBmcm9tIEIgbGllIHdpdGhpbiBBJ3MgYm91bmRzLlxuICBpZiAob3RoZXIuc29tZVZlcnRleCh2ZXJ0ZXggPT4gb2JiVnNQb2ludChvYmIsIHZlcnRleCkpKSByZXR1cm4gdHJ1ZTtcblxuICAvLyBXZSBhc3N1bWUgdGhhdCBhIHZlcnRleC10by1mYWNlIGNvbGxpc2lvbiB3b3VsZCBoYXZlIGJlZW4gZGV0ZWN0ZWQgYnkgb25lIG9mIHRoZSB0d28gYWJvdmVcbiAgLy8gY2hlY2tzLiBBbnkgZWRnZS10by1lZGdlIGNvbGxpc2lvbiBtdXN0IGludm9sdmUgYm90aCBhbiBlZGdlIGZyb20gQSB0aHJvdWdoIGEgZmFjZSBvZiBCIGFuZFxuICAvLyB2aWNlIHZlcnNhLiBTbyBpdCBpcyBzdWZmaWNpZW50IHRvIG9ubHkgY2hlY2sgdGhlIGVkZ2VzIG9mIG9uZSBhbmQgdGhlIGZhY2VzIG9mIHRoZSBvdGhlci5cbiAgaWYgKG90aGVyLnNvbWVFZGdlKGVkZ2UgPT5cbiAgICAgICAgICBvYmIuc29tZUZhY2UoZmFjZSA9PlxuICAgICAgICAgICAgICBmaW5kUG9pQmV0d2VlblNlZ21lbnRBbmRQbGFuZVJlZ2lvbih0bXBWZWMxLCBlZGdlLCAuLi5mYWNlKSkpKVxuICAgIHJldHVybiB0cnVlO1xuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge09iYn0gb2JiXG4gKiBAcGFyYW0ge0NhcHN1bGV9IGNhcHN1bGVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBvYmJWc0NhcHN1bGUob2JiLCBjYXBzdWxlKSB7XG4gIC8vIENoZWNrIHRoZSBlZGdlcy5cbiAgY29uc3Qgc3F1YXJlZFJhZGl1cyA9IGNhcHN1bGUucmFkaXVzICogY2Fwc3VsZS5yYWRpdXM7XG4gIGxldCBhcmVJbnRlcnNlY3RpbmcgPSBvYmIuc29tZUVkZ2UoZWRnZSA9PlxuICAgICAgZmluZFNxdWFyZWREaXN0YW5jZUJldHdlZW5TZWdtZW50cyhjYXBzdWxlLnNlZ21lbnQsIGVkZ2UpIDwgc3F1YXJlZFJhZGl1cyk7XG5cbiAgaWYgKGFyZUludGVyc2VjdGluZykgcmV0dXJuIHRydWU7XG5cbiAgLy8gQ2hlY2sgdGhlIGZhY2VzLlxuICBhcmVJbnRlcnNlY3RpbmcgPSBvYmIuc29tZVB1c2hlZE91dEZhY2UoZmFjZSA9PlxuICAgICAgICAgIGZpbmRQb2lCZXR3ZWVuU2VnbWVudEFuZFBsYW5lUmVnaW9uKHRtcFZlYzEsIGNhcHN1bGUuc2VnbWVudCwgLi4uZmFjZSksIGNhcHN1bGUucmFkaXVzKTtcblxuICAvLyBDaGVjayBmb3IgaW5jbHVzaW9uIG9mIG9uZSBzaGFwZSBpbnNpZGUgdGhlIG90aGVyLlxuICBhcmVJbnRlcnNlY3RpbmcgPSBhcmVJbnRlcnNlY3RpbmcgfHwgb2JiVnNQb2ludChvYmIsIGNhcHN1bGUuY2VudGVyT2ZWb2x1bWUpO1xuICBhcmVJbnRlcnNlY3RpbmcgPSBhcmVJbnRlcnNlY3RpbmcgfHwgY2Fwc3VsZUNvbGxpc2lvbkRldGVjdGlvbi5jYXBzdWxlVnNQb2ludChjYXBzdWxlLFxuICAgICAgb2JiLmNlbnRlck9mVm9sdW1lKTtcblxuICByZXR1cm4gYXJlSW50ZXJzZWN0aW5nO1xufVxuXG5leHBvcnQge1xuICBvYmJWc1BvaW50LFxuICBvYmJWc1NwaGVyZSxcbiAgb2JiVnNBYWJiLFxuICBvYmJWc09iYixcbiAgb2JiVnNDYXBzdWxlLFxufTtcbiIsImltcG9ydCB7ZmluZENsb3Nlc3RQb2ludEZyb21BYWJiVG9Qb2ludCwgdG1wVmVjMX0gZnJvbSAnLi4vLi4vLi4vdXRpbCc7XG5pbXBvcnQgKiBhcyBvYmJDb2xsaXNpb25EZXRlY3Rpb24gZnJvbSAnLi9vYmItY29sbGlzaW9uLWRldGVjdGlvbic7XG5pbXBvcnQgKiBhcyBjYXBzdWxlQ29sbGlzaW9uRGV0ZWN0aW9uIGZyb20gJy4vY2Fwc3VsZS1jb2xsaXNpb24tZGV0ZWN0aW9uJztcblxuLyoqXG4gKiBUaGlzIG1vZHVsZSBkZWZpbmVzIHV0aWxpdHkgbWV0aG9kcyBmb3IgZGV0ZWN0aW5nIHdoZXRoZXIgaW50ZXJzZWN0aW9uIGhhcyBvY2N1cnJlZCBiZXR3ZWVuXG4gKiBzcGhlcmVzIGFuZCBvdGhlciBzaGFwZXMuXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge1NwaGVyZX0gc3BoZXJlXG4gKiBAcGFyYW0ge3ZlYzN9IHBvaW50XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gc3BoZXJlVnNQb2ludChzcGhlcmUsIHBvaW50KSB7XG4gIHJldHVybiB2ZWMzLnNxdWFyZWREaXN0YW5jZShwb2ludCwgc3BoZXJlLmNlbnRlck9mVm9sdW1lKSA8PSBzcGhlcmUucmFkaXVzICogc3BoZXJlLnJhZGl1cztcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1NwaGVyZX0gc3BoZXJlQVxuICogQHBhcmFtIHtTcGhlcmV9IHNwaGVyZUJcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBzcGhlcmVWc1NwaGVyZShzcGhlcmVBLCBzcGhlcmVCKSB7XG4gIGNvbnN0IHN1bU9mUmFkaWkgPSBzcGhlcmVBLnJhZGl1cyArIHNwaGVyZUIucmFkaXVzO1xuICByZXR1cm4gdmVjMy5zcXVhcmVkRGlzdGFuY2Uoc3BoZXJlQS5jZW50ZXJPZlZvbHVtZSwgc3BoZXJlQi5jZW50ZXJPZlZvbHVtZSkgPD1cbiAgICAgIHN1bU9mUmFkaWkgKiBzdW1PZlJhZGlpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7U3BoZXJlfSBzcGhlcmVcbiAqIEBwYXJhbSB7QWFiYn0gYWFiYlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIHNwaGVyZVZzQWFiYihzcGhlcmUsIGFhYmIpIHtcbiAgZmluZENsb3Nlc3RQb2ludEZyb21BYWJiVG9Qb2ludCh0bXBWZWMxLCBhYWJiLCBzcGhlcmUuY2VudGVyT2ZWb2x1bWUpO1xuICByZXR1cm4gdmVjMy5zcXVhcmVkRGlzdGFuY2UodG1wVmVjMSwgc3BoZXJlLmNlbnRlck9mVm9sdW1lKSA8PSBzcGhlcmUucmFkaXVzICogc3BoZXJlLnJhZGl1cztcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1NwaGVyZX0gc3BoZXJlXG4gKiBAcGFyYW0ge09iYn0gb2JiXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gc3BoZXJlVnNPYmIoc3BoZXJlLCBvYmIpIHtcbiAgcmV0dXJuIG9iYkNvbGxpc2lvbkRldGVjdGlvbi5vYmJWc1NwaGVyZShvYmIsIHNwaGVyZSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtTcGhlcmV9IHNwaGVyZVxuICogQHBhcmFtIHtDYXBzdWxlfSBjYXBzdWxlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gc3BoZXJlVnNDYXBzdWxlKHNwaGVyZSwgY2Fwc3VsZSkge1xuICByZXR1cm4gY2Fwc3VsZUNvbGxpc2lvbkRldGVjdGlvbi5jYXBzdWxlVnNTcGhlcmUoY2Fwc3VsZSwgc3BoZXJlKTtcbn1cblxuZXhwb3J0IHtcbiAgc3BoZXJlVnNQb2ludCxcbiAgc3BoZXJlVnNTcGhlcmUsXG4gIHNwaGVyZVZzQWFiYixcbiAgc3BoZXJlVnNPYmIsXG4gIHNwaGVyZVZzQ2Fwc3VsZSxcbn07XG4iLCJpbXBvcnQgKiBhcyBhYWJiQ29udGFjdENhbGN1bGF0aW9uIGZyb20gJy4vc3JjL2FhYmItY29udGFjdC1jYWxjdWxhdGlvbic7XG5pbXBvcnQgKiBhcyBjYXBzdWxlQ29udGFjdENhbGN1bGF0aW9uIGZyb20gJy4vc3JjL2NhcHN1bGUtY29udGFjdC1jYWxjdWxhdGlvbic7XG5pbXBvcnQgKiBhcyBvYmJDb250YWN0Q2FsY3VsYXRpb24gZnJvbSAnLi9zcmMvb2JiLWNvbnRhY3QtY2FsY3VsYXRpb24nO1xuaW1wb3J0ICogYXMgc3BoZXJlQ29udGFjdENhbGN1bGF0aW9uIGZyb20gJy4vc3JjL3NwaGVyZS1jb250YWN0LWNhbGN1bGF0aW9uJztcblxuZXhwb3J0IHtcbiAgYWFiYkNvbnRhY3RDYWxjdWxhdGlvbixcbiAgY2Fwc3VsZUNvbnRhY3RDYWxjdWxhdGlvbixcbiAgb2JiQ29udGFjdENhbGN1bGF0aW9uLFxuICBzcGhlcmVDb250YWN0Q2FsY3VsYXRpb24sXG59O1xuIiwiLyoqXG4gKiBUaGlzIG1vZHVsZSBkZWZpbmVzIHV0aWxpdHkgbWV0aG9kcyBmb3IgY2FsY3VsYXRpbmcgYSBjb250YWN0IHBvaW50IGJldHdlZW4gYXhpYWxseS1hbGlnbmVkIFxuICogYm91bmRpbmcgYm94ZXMgYW5kIG90aGVyIHNoYXBlcy5cbiAqXG4gKiAtIEVhY2ggb2YgdGhlc2UgZnVuY3Rpb25zIGFzc3VtZXMgdGhhdCB0aGUgb2JqZWN0cyBhcmUgYWN0dWFsbHkgY29sbGlkaW5nLlxuICogLSBUaGUgcmVzdWx0aW5nIGNvbnRhY3QgcG9pbnQgbWF5IGJlIGFueXdoZXJlIHdpdGhpbiB0aGUgaW50ZXJzZWN0aW9uIG9mIHRoZSB0d28gb2JqZWN0cy5cbiAqL1xuXG5pbXBvcnQgKiBhcyBzcGhlcmVDb250YWN0Q2FsY3VsYXRpb24gZnJvbSAnLi9zcGhlcmUtY29udGFjdC1jYWxjdWxhdGlvbic7XG5pbXBvcnQgKiBhcyBvYmJDb250YWN0Q2FsY3VsYXRpb24gZnJvbSAnLi9vYmItY29udGFjdC1jYWxjdWxhdGlvbic7XG5pbXBvcnQgKiBhcyBjYXBzdWxlQ29udGFjdENhbGN1bGF0aW9uIGZyb20gJy4vY2Fwc3VsZS1jb250YWN0LWNhbGN1bGF0aW9uJztcbmltcG9ydCB7dG1wVmVjMX0gZnJvbSAnLi4vLi4vLi4vdXRpbCc7XG5pbXBvcnQge2FhYmJDb2xsaXNpb25EZXRlY3Rpb259IGZyb20gJy4uLy4uL2NvbGxpc2lvbi1kZXRlY3Rpb24nO1xuXG4vKipcbiAqIEBwYXJhbSB7dmVjM30gY29udGFjdFBvaW50IE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7dmVjM30gY29udGFjdE5vcm1hbCBPdXRwdXQgcGFyYW0uXG4gKiBAcGFyYW0ge0FhYmJ9IGFhYmJcbiAqIEBwYXJhbSB7dmVjM30gcG9pbnRcbiAqL1xuZnVuY3Rpb24gYWFiYlZzUG9pbnQoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBhYWJiLCBwb2ludCkge1xuICB2ZWMzLmNvcHkoY29udGFjdFBvaW50LCBwb2ludCk7XG4gIGZpbmRBYWJiTm9ybWFsRnJvbUNvbnRhY3RQb2ludChjb250YWN0Tm9ybWFsLCBjb250YWN0UG9pbnQsIGFhYmIpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7dmVjM30gY29udGFjdFBvaW50IE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7dmVjM30gY29udGFjdE5vcm1hbCBPdXRwdXQgcGFyYW0uXG4gKiBAcGFyYW0ge0FhYmJ9IGFhYmJcbiAqIEBwYXJhbSB7U3BoZXJlfSBzcGhlcmVcbiAqL1xuZnVuY3Rpb24gYWFiYlZzU3BoZXJlKGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgYWFiYiwgc3BoZXJlKSB7XG4gIHNwaGVyZUNvbnRhY3RDYWxjdWxhdGlvbi5zcGhlcmVWc0FhYmIoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBzcGhlcmUsIGFhYmIpO1xuICB2ZWMzLm5lZ2F0ZShjb250YWN0Tm9ybWFsLCBjb250YWN0Tm9ybWFsKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3RQb2ludCBPdXRwdXQgcGFyYW0uXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3ROb3JtYWwgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHtBYWJifSBhYWJiQVxuICogQHBhcmFtIHtBYWJifSBhYWJiQlxuICovXG5mdW5jdGlvbiBhYWJiVnNBYWJiKGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgYWFiYkEsIGFhYmJCKSB7XG4gIC8vIENvbXB1dGUgdGhlIGNvbnRhY3Qgbm9ybWFsLlxuICB2ZWMzLnNldChjb250YWN0Tm9ybWFsLCAwLCAwLCAwKTtcbiAgY29uc3QgeEludGVyc2VjdGlvbkRlcHRoID0gTWF0aC5taW4oYWFiYkEubWF4WCAtIGFhYmJCLm1pblgsIGFhYmJCLm1heFggLSBhYWJiQS5taW5YKTtcbiAgY29uc3QgeUludGVyc2VjdGlvbkRlcHRoID0gTWF0aC5taW4oYWFiYkEubWF4WSAtIGFhYmJCLm1pblksIGFhYmJCLm1heFkgLSBhYWJiQS5taW5ZKTtcbiAgY29uc3QgekludGVyc2VjdGlvbkRlcHRoID0gTWF0aC5taW4oYWFiYkEubWF4WiAtIGFhYmJCLm1pblosIGFhYmJCLm1heFogLSBhYWJiQS5taW5aKTtcbiAgLy8gQXNzdW1lIHRoYXQgdGhlIGRpcmVjdGlvbiBvZiBpbnRlcnNlY3Rpb24gY29ycmVzcG9uZHMgdG8gd2hpY2hldmVyIGF4aXMgaGFzIHRoZSBzaGFsbG93ZXN0XG4gIC8vIGludGVyc2VjdGlvbi5cbiAgaWYgKHhJbnRlcnNlY3Rpb25EZXB0aCA8PSB5SW50ZXJzZWN0aW9uRGVwdGgpIHtcbiAgICBpZiAoeEludGVyc2VjdGlvbkRlcHRoIDw9IHpJbnRlcnNlY3Rpb25EZXB0aCkge1xuICAgICAgY29udGFjdE5vcm1hbFswXSA9IGFhYmJBLm1heFggLSBhYWJiQi5taW5YIDw9IGFhYmJCLm1heFggLSBhYWJiQS5taW5YID8gMSA6IC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250YWN0Tm9ybWFsWzJdID0gYWFiYkEubWF4WiAtIGFhYmJCLm1pblogPD0gYWFiYkIubWF4WiAtIGFhYmJBLm1pblogPyAxIDogLTE7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh5SW50ZXJzZWN0aW9uRGVwdGggPD0gekludGVyc2VjdGlvbkRlcHRoKSB7XG4gICAgICBjb250YWN0Tm9ybWFsWzFdID0gYWFiYkEubWF4WSAtIGFhYmJCLm1pblkgPD0gYWFiYkIubWF4WSAtIGFhYmJBLm1pblkgPyAxIDogLTE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRhY3ROb3JtYWxbMl0gPSBhYWJiQS5tYXhaIC0gYWFiYkIubWluWiA8PSBhYWJiQi5tYXhaIC0gYWFiYkEubWluWiA/IDEgOiAtMTtcbiAgICB9XG4gIH1cblxuICAvLyBUT0RPOiBUaGUgdHdvIEFBQkJzIGZvcm0gYSBzcXVhcmUgaW50ZXJzZWN0aW9uIGNyb3NzLXNlY3Rpb24gcmVnaW9uIGFsb25nIHRoZSBkaXJlY3Rpb24gb2YgdGhlXG4gIC8vIG5vcm1hbC4gQ2FsY3VsYXRlIHRoZSBjZW50ZXIgb2YgdGhhdCBzcXVhcmUgdG8gdXNlIGFzIHRoZSBwb2ludCBvZiBjb250YWN0LlxuICBpZiAoIWFhYmJBLnNvbWVWZXJ0ZXgodmVydGV4ID0+IGFhYmJDb2xsaXNpb25EZXRlY3Rpb24uYWFiYlZzUG9pbnQoYWFiYkIsIHZlcnRleCksXG4gICAgICAgICAgY29udGFjdFBvaW50KSkge1xuICAgIGFhYmJCLnNvbWVWZXJ0ZXgodmVydGV4ID0+IGFhYmJDb2xsaXNpb25EZXRlY3Rpb24uYWFiYlZzUG9pbnQoYWFiYkEsIHZlcnRleCksIGNvbnRhY3RQb2ludCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3RQb2ludCBPdXRwdXQgcGFyYW0uXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3ROb3JtYWwgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHtBYWJifSBhYWJiXG4gKiBAcGFyYW0ge09iYn0gb2JiXG4gKi9cbmZ1bmN0aW9uIGFhYmJWc09iYihjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIGFhYmIsIG9iYikge1xuICBvYmJDb250YWN0Q2FsY3VsYXRpb24ub2JiVnNBYWJiKGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgb2JiLCBhYWJiKTtcbiAgdmVjMy5uZWdhdGUoY29udGFjdE5vcm1hbCwgY29udGFjdE5vcm1hbCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0UG9pbnQgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0Tm9ybWFsIE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7QWFiYn0gYWFiYlxuICogQHBhcmFtIHtDYXBzdWxlfSBjYXBzdWxlXG4gKi9cbmZ1bmN0aW9uIGFhYmJWc0NhcHN1bGUoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBhYWJiLCBjYXBzdWxlKSB7XG4gIGNhcHN1bGVDb250YWN0Q2FsY3VsYXRpb24uY2Fwc3VsZVZzQWFiYihjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIGNhcHN1bGUsIGFhYmIpO1xuICB2ZWMzLm5lZ2F0ZShjb250YWN0Tm9ybWFsLCBjb250YWN0Tm9ybWFsKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3ROb3JtYWwgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0UG9pbnRcbiAqIEBwYXJhbSB7QWFiYn0gYWFiYlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZmluZEFhYmJOb3JtYWxGcm9tQ29udGFjdFBvaW50KGNvbnRhY3ROb3JtYWwsIGNvbnRhY3RQb2ludCwgYWFiYikge1xuICB2ZWMzLnNldChjb250YWN0Tm9ybWFsLCAwLCAwLCAwKTtcbiAgdmVjMy5zdWJ0cmFjdCh0bXBWZWMxLCBjb250YWN0UG9pbnQsIGFhYmIuY2VudGVyT2ZWb2x1bWUpO1xuICBjb25zdCB4RGlzdGFuY2VGcm9tRmFjZSA9IGFhYmIucmFuZ2VYIC8gMiAtIE1hdGguYWJzKHRtcFZlYzFbMF0pO1xuICBjb25zdCB5RGlzdGFuY2VGcm9tRmFjZSA9IGFhYmIucmFuZ2VZIC8gMiAtIE1hdGguYWJzKHRtcFZlYzFbMV0pO1xuICBjb25zdCB6RGlzdGFuY2VGcm9tRmFjZSA9IGFhYmIucmFuZ2VaIC8gMiAtIE1hdGguYWJzKHRtcFZlYzFbMl0pO1xuICAvLyBBc3N1bWUgdGhhdCB0aGUgcG9pbnQgaXMgY29udGFjdGluZyB3aGljaGV2ZXIgZmFjZSBpdCdzIGNsb3Nlc3QgdG8uXG4gIGlmICh4RGlzdGFuY2VGcm9tRmFjZSA8PSB5RGlzdGFuY2VGcm9tRmFjZSkge1xuICAgIGlmICh4RGlzdGFuY2VGcm9tRmFjZSA8PSB6RGlzdGFuY2VGcm9tRmFjZSkge1xuICAgICAgY29udGFjdE5vcm1hbFswXSA9IHRtcFZlYzFbMF0gPiAwID8gMSA6IC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250YWN0Tm9ybWFsWzJdID0gdG1wVmVjMVsyXSA+IDAgPyAxIDogLTE7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh5RGlzdGFuY2VGcm9tRmFjZSA8PSB6RGlzdGFuY2VGcm9tRmFjZSkge1xuICAgICAgY29udGFjdE5vcm1hbFsxXSA9IHRtcFZlYzFbMV0gPiAwID8gMSA6IC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250YWN0Tm9ybWFsWzJdID0gdG1wVmVjMVsyXSA+IDAgPyAxIDogLTE7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB7XG4gIGFhYmJWc1BvaW50LFxuICBhYWJiVnNTcGhlcmUsXG4gIGFhYmJWc0FhYmIsXG4gIGFhYmJWc09iYixcbiAgYWFiYlZzQ2Fwc3VsZSxcbiAgZmluZEFhYmJOb3JtYWxGcm9tQ29udGFjdFBvaW50LFxufTtcbiIsIi8qKlxuICogVGhpcyBtb2R1bGUgZGVmaW5lcyB1dGlsaXR5IG1ldGhvZHMgZm9yIGNhbGN1bGF0aW5nIGEgY29udGFjdCBwb2ludCBiZXR3ZWVuIGNhcHN1bGVzIGFuZCBvdGhlciBcbiAqIHNoYXBlcy5cbiAqXG4gKiAtIEVhY2ggb2YgdGhlc2UgZnVuY3Rpb25zIGFzc3VtZXMgdGhhdCB0aGUgb2JqZWN0cyBhcmUgYWN0dWFsbHkgY29sbGlkaW5nLlxuICogLSBUaGUgcmVzdWx0aW5nIGNvbnRhY3QgcG9pbnQgbWF5IGJlIGFueXdoZXJlIHdpdGhpbiB0aGUgaW50ZXJzZWN0aW9uIG9mIHRoZSB0d28gb2JqZWN0cy5cbiAqL1xuXG5pbXBvcnQge1xuICBmaW5kQ2xvc2VzdFBvaW50RnJvbUFhYmJUb1BvaW50LFxuICBmaW5kQ2xvc2VzdFBvaW50T25TZWdtZW50VG9Qb2ludCxcbiAgZmluZENsb3Nlc3RQb2ludHNGcm9tU2VnbWVudFRvU2VnbWVudCxcbiAgdG1wVmVjMSxcbiAgdG1wVmVjMlxufSBmcm9tICcuLi8uLi8uLi91dGlsJztcbmltcG9ydCAqIGFzIG9iYkNvbnRhY3RDYWxjdWxhdGlvbiBmcm9tICcuL29iYi1jb250YWN0LWNhbGN1bGF0aW9uJztcblxuLyoqXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3RQb2ludCBPdXRwdXQgcGFyYW0uXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3ROb3JtYWwgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHtDYXBzdWxlfSBjYXBzdWxlXG4gKiBAcGFyYW0ge3ZlYzN9IHBvaW50XG4gKi9cbmZ1bmN0aW9uIGNhcHN1bGVWc1BvaW50KGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgY2Fwc3VsZSwgcG9pbnQpIHtcbiAgdmVjMy5jb3B5KGNvbnRhY3RQb2ludCwgcG9pbnQpO1xuICBmaW5kQ2xvc2VzdFBvaW50T25TZWdtZW50VG9Qb2ludChjb250YWN0Tm9ybWFsLCBjYXBzdWxlLnNlZ21lbnQsIHBvaW50KTtcbiAgdmVjMy5zdWJ0cmFjdChjb250YWN0Tm9ybWFsLCBjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwpO1xuICB2ZWMzLm5vcm1hbGl6ZShjb250YWN0Tm9ybWFsLCBjb250YWN0Tm9ybWFsKTtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgY2xvc2VzdCBwb2ludCBvbiB0aGUgc3VyZmFjZSBvZiB0aGUgY2Fwc3VsZSB0byB0aGUgc3BoZXJlIGNlbnRlci5cbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3RQb2ludCBPdXRwdXQgcGFyYW0uXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3ROb3JtYWwgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHtDYXBzdWxlfSBjYXBzdWxlXG4gKiBAcGFyYW0ge1NwaGVyZX0gc3BoZXJlXG4gKi9cbmZ1bmN0aW9uIGNhcHN1bGVWc1NwaGVyZShjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIGNhcHN1bGUsIHNwaGVyZSkge1xuICBjb25zdCBzcGhlcmVDZW50ZXIgPSBzcGhlcmUuY2VudGVyT2ZWb2x1bWU7XG4gIGZpbmRDbG9zZXN0UG9pbnRPblNlZ21lbnRUb1BvaW50KGNvbnRhY3RQb2ludCwgY2Fwc3VsZS5zZWdtZW50LCBzcGhlcmVDZW50ZXIpO1xuICB2ZWMzLnN1YnRyYWN0KGNvbnRhY3ROb3JtYWwsIHNwaGVyZUNlbnRlciwgY29udGFjdFBvaW50KTtcbiAgdmVjMy5ub3JtYWxpemUoY29udGFjdE5vcm1hbCwgY29udGFjdE5vcm1hbCk7XG4gIHZlYzMuc2NhbGVBbmRBZGQoY29udGFjdFBvaW50LCBjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIGNhcHN1bGUucmFkaXVzKTtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgY2xvc2VzdCBwb2ludCBvbiB0aGUgc3VyZmFjZSBvZiB0aGUgY2Fwc3VsZSB0byB0aGUgQUFCQi5cbiAqXG4gKiBOT1RFOiBUaGlzIGltcGxlbWVudGF0aW9uIGNoZWF0cyBieSBjaGVja2luZyB3aGV0aGVyIHZlcnRpY2VzIGZyb20gb25lIHNoYXBlIGxpZSB3aXRoaW4gdGhlXG4gKiBvdGhlci4gRHVlIHRvIHRoZSB0dW5uZWxsaW5nIHByb2JsZW0sIGl0IGlzIHBvc3NpYmxlIHRoYXQgaW50ZXJzZWN0aW9uIG9jY3VycyB3aXRob3V0IGFueVxuICogdmVydGljZXMgbHlpbmcgd2l0aGluIHRoZSBvdGhlciBzaGFwZS4gSG93ZXZlciwgKEEpIHRoaXMgaXMgdW5saWtlbHksIGFuZCAoQikgd2UgYXJlIGlnbm9yaW5nIHRoZVxuICogdHVubmVsbGluZyBwcm9ibGVtIGZvciB0aGUgcmVzdCBvZiB0aGlzIGNvbGxpc2lvbiBzeXN0ZW0gYW55d2F5LlxuICpcbiAqIEBwYXJhbSB7dmVjM30gY29udGFjdFBvaW50IE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7dmVjM30gY29udGFjdE5vcm1hbCBPdXRwdXQgcGFyYW0uXG4gKiBAcGFyYW0ge0NhcHN1bGV9IGNhcHN1bGVcbiAqIEBwYXJhbSB7QWFiYn0gYWFiYlxuICovXG5mdW5jdGlvbiBjYXBzdWxlVnNBYWJiKGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgY2Fwc3VsZSwgYWFiYikge1xuICAvLyB0bXBWZWMxIHJlcHJlc2VudHMgdGhlIGNsb3Nlc3QgcG9pbnQgb24gdGhlIGNhcHN1bGUgdG8gdGhlIEFBQkIuIHRtcFZlYzJcbiAgLy8gcmVwcmVzZW50cyB0aGUgY2xvc2VzdCBwb2ludCBvbiB0aGUgQUFCQiB0byB0aGUgY2Fwc3VsZS5cblxuICAvL1xuICAvLyBDaGVjayB3aGV0aGVyIHRoZSB0d28gY2Fwc3VsZSBlbmRzIGludGVyc2VjdCB0aGUgQUFCQiAoc3BoZXJlIHZzIEFBQkIpIChhZGRyZXNzZXMgdGhlXG4gIC8vIGNhcHN1bGUtdnMtQUFCQi1mYWNlIGNhc2UpLlxuICAvL1xuXG4gIGNvbnN0IHNxdWFyZWRSYWRpdXMgPSBjYXBzdWxlLnJhZGl1cyAqIGNhcHN1bGUucmFkaXVzO1xuICBsZXQgZG9lc0FhYmJJbnRlcnNlY3RBbkVuZFBvaW50ID0gZmFsc2U7XG5cbiAgbGV0IGVuZFBvaW50ID0gY2Fwc3VsZS5zZWdtZW50LnN0YXJ0O1xuICBmaW5kQ2xvc2VzdFBvaW50RnJvbUFhYmJUb1BvaW50KHRtcFZlYzIsIGFhYmIsIGVuZFBvaW50KTtcbiAgaWYgKHZlYzMuc3F1YXJlZERpc3RhbmNlKHRtcFZlYzIsIGVuZFBvaW50KSA8PSBzcXVhcmVkUmFkaXVzKSB7XG4gICAgZG9lc0FhYmJJbnRlcnNlY3RBbkVuZFBvaW50ID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBlbmRQb2ludCA9IGNhcHN1bGUuc2VnbWVudC5lbmQ7XG4gICAgZmluZENsb3Nlc3RQb2ludEZyb21BYWJiVG9Qb2ludCh0bXBWZWMyLCBhYWJiLCBlbmRQb2ludCk7XG4gICAgaWYgKHZlYzMuc3F1YXJlZERpc3RhbmNlKHRtcFZlYzIsIGVuZFBvaW50KSA8PSBzcXVhcmVkUmFkaXVzKSB7XG4gICAgICBkb2VzQWFiYkludGVyc2VjdEFuRW5kUG9pbnQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmICghZG9lc0FhYmJJbnRlcnNlY3RBbkVuZFBvaW50KSB7XG4gICAgLy9cbiAgICAvLyBDaGVjayB3aGV0aGVyIHRoZSBjYXBzdWxlIGludGVyc2VjdHMgd2l0aCBhbnkgQUFCQiBlZGdlIChhZGRyZXNzZXMgdGhlIGNhcHN1bGUtdnMtQUFCQi1lZGdlXG4gICAgLy8gY2FzZSkuXG4gICAgLy9cbiAgICBhYWJiLnNvbWVFZGdlKGVkZ2UgPT4ge1xuICAgICAgZmluZENsb3Nlc3RQb2ludHNGcm9tU2VnbWVudFRvU2VnbWVudCh0bXBWZWMxLCB0bXBWZWMyLFxuICAgICAgICAgIGNhcHN1bGUuc2VnbWVudCwgZWRnZSk7XG4gICAgICBjb25zdCBkaXN0YW5jZSA9IHZlYzMuc3F1YXJlZERpc3RhbmNlKHRtcFZlYzEsIHRtcFZlYzIpO1xuICAgICAgcmV0dXJuIGRpc3RhbmNlIDw9IHNxdWFyZWRSYWRpdXM7XG4gICAgfSk7XG4gIH1cblxuICAvLyAoVGhlIGNhcHN1bGUtdnMtQUFCQi12ZXJ0ZXggY2FzZSBpcyBjb3ZlcmVkIGJ5IHRoZSBjYXBzdWxlLXZzLUFBQkItZWRnZSBjYXNlKS5cblxuICBmaW5kQ2xvc2VzdFBvaW50T25TZWdtZW50VG9Qb2ludCh0bXBWZWMxLCBjYXBzdWxlLnNlZ21lbnQsIHRtcFZlYzIpO1xuICB2ZWMzLnN1YnRyYWN0KGNvbnRhY3ROb3JtYWwsIHRtcFZlYzIsIHRtcFZlYzEpO1xuICB2ZWMzLm5vcm1hbGl6ZShjb250YWN0Tm9ybWFsLCBjb250YWN0Tm9ybWFsKTtcbiAgdmVjMy5zY2FsZUFuZEFkZChjb250YWN0UG9pbnQsIHRtcFZlYzEsIGNvbnRhY3ROb3JtYWwsIGNhcHN1bGUucmFkaXVzKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3RQb2ludCBPdXRwdXQgcGFyYW0uXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3ROb3JtYWwgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHtDYXBzdWxlfSBjYXBzdWxlXG4gKiBAcGFyYW0ge09iYn0gb2JiXG4gKi9cbmZ1bmN0aW9uIGNhcHN1bGVWc09iYihjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIGNhcHN1bGUsIG9iYikge1xuICBvYmJDb250YWN0Q2FsY3VsYXRpb24ub2JiVnNDYXBzdWxlKGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgb2JiLCBjYXBzdWxlKTtcbiAgdmVjMy5uZWdhdGUoY29udGFjdE5vcm1hbCwgY29udGFjdE5vcm1hbCk7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIGNsb3Nlc3QgcG9pbnQgb24gdGhlIHN1cmZhY2Ugb2YgY2Fwc3VsZSBBIHRvIGNhcHN1bGUgQi5cbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3RQb2ludCBPdXRwdXQgcGFyYW0uXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3ROb3JtYWwgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHtDYXBzdWxlfSBjYXBzdWxlQVxuICogQHBhcmFtIHtDYXBzdWxlfSBjYXBzdWxlQlxuICovXG5mdW5jdGlvbiBjYXBzdWxlVnNDYXBzdWxlKGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgY2Fwc3VsZUEsIGNhcHN1bGVCKSB7XG4gIGZpbmRDbG9zZXN0UG9pbnRzRnJvbVNlZ21lbnRUb1NlZ21lbnQodG1wVmVjMSwgdG1wVmVjMixcbiAgICAgIGNhcHN1bGVBLnNlZ21lbnQsIGNhcHN1bGVCLnNlZ21lbnQpO1xuICB2ZWMzLnN1YnRyYWN0KGNvbnRhY3ROb3JtYWwsIHRtcFZlYzIsIHRtcFZlYzEpO1xuICB2ZWMzLm5vcm1hbGl6ZShjb250YWN0Tm9ybWFsLCBjb250YWN0Tm9ybWFsKTtcbiAgdmVjMy5zY2FsZUFuZEFkZChjb250YWN0UG9pbnQsIHRtcFZlYzEsIGNvbnRhY3ROb3JtYWwsIGNhcHN1bGVBLnJhZGl1cyk7XG59XG5cbmV4cG9ydCB7XG4gIGNhcHN1bGVWc1BvaW50LFxuICBjYXBzdWxlVnNTcGhlcmUsXG4gIGNhcHN1bGVWc0FhYmIsXG4gIGNhcHN1bGVWc09iYixcbiAgY2Fwc3VsZVZzQ2Fwc3VsZSxcbn07XG4iLCIvKipcbiAqIFRoaXMgbW9kdWxlIGRlZmluZXMgdXRpbGl0eSBtZXRob2RzIGZvciBjYWxjdWxhdGluZyBhIGNvbnRhY3QgcG9pbnQgYmV0d2VlbiBvcmllbnRlZCBib3VuZGluZ1xuICogYm94ZXMgYW5kIG90aGVyIHNoYXBlcy5cbiAqXG4gKiAtIEVhY2ggb2YgdGhlc2UgZnVuY3Rpb25zIGFzc3VtZXMgdGhhdCB0aGUgb2JqZWN0cyBhcmUgYWN0dWFsbHkgY29sbGlkaW5nLlxuICogLSBUaGUgcmVzdWx0aW5nIGNvbnRhY3QgcG9pbnQgbWF5IGJlIGFueXdoZXJlIHdpdGhpbiB0aGUgaW50ZXJzZWN0aW9uIG9mIHRoZSB0d28gb2JqZWN0cy5cbiAqL1xuXG5pbXBvcnQge1xuICBmaW5kUG9pQmV0d2VlblNlZ21lbnRBbmRQbGFuZVJlZ2lvbixcbiAgZmluZENsb3Nlc3RQb2ludEZyb21PYmJUb1BvaW50LFxuICBmaW5kU3F1YXJlZERpc3RhbmNlQmV0d2VlblNlZ21lbnRzLFxuICBmaW5kQ2xvc2VzdFBvaW50c0Zyb21TZWdtZW50VG9TZWdtZW50LFxuICB0bXBWZWMxXG59IGZyb20gJy4uLy4uLy4uL3V0aWwnO1xuaW1wb3J0IHthYWJiQ29sbGlzaW9uRGV0ZWN0aW9uLCBvYmJDb2xsaXNpb25EZXRlY3Rpb259IGZyb20gJy4uLy4uL2NvbGxpc2lvbi1kZXRlY3Rpb24nO1xuaW1wb3J0IHtMaW5lU2VnbWVudH0gZnJvbSAnLi4vLi4vY29sbGlkYWJsZXMnO1xuaW1wb3J0ICogYXMgYWFiYkNvbnRhY3RDYWxjdWxhdGlvbiBmcm9tICcuL2FhYmItY29udGFjdC1jYWxjdWxhdGlvbic7XG5cbi8vIFRPRE86IFRoZXJlIGFyZSBtb3JlIGVmZmljaWVudCAoYnV0IGZhciBtb3JlIGNvbXBsaWNhdGVkKSBhbGdvcml0aG1zIGZvciBmaW5kaW5nIHRoZSBwb2ludCBvZlxuLy8gaW50ZXJzZWN0aW9uIHdpdGggT0JCcy4gUG9ydCBvdmVyIHNvbWUgb3RoZXIgcHJlLWV4aXN0aW5nIHNvbHV0aW9ucyBmb3IgdGhlc2UuXG5cbi8qKlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0UG9pbnQgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0Tm9ybWFsIE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7T2JifSBvYmJcbiAqIEBwYXJhbSB7dmVjM30gcG9pbnRcbiAqL1xuZnVuY3Rpb24gb2JiVnNQb2ludChjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIG9iYiwgcG9pbnQpIHtcbiAgdmVjMy5jb3B5KGNvbnRhY3RQb2ludCwgcG9pbnQpO1xuICBmaW5kT2JiTm9ybWFsRnJvbUNvbnRhY3RQb2ludChjb250YWN0Tm9ybWFsLCBjb250YWN0UG9pbnQsIG9iYik7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIGNsb3Nlc3QgcG9pbnQgYW55d2hlcmUgaW5zaWRlIHRoZSBPQkIgdG8gdGhlIGNlbnRlciBvZiB0aGUgc3BoZXJlLlxuICpcbiAqIEBwYXJhbSB7dmVjM30gY29udGFjdFBvaW50IE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7dmVjM30gY29udGFjdE5vcm1hbCBPdXRwdXQgcGFyYW0uXG4gKiBAcGFyYW0ge09iYn0gb2JiXG4gKiBAcGFyYW0ge1NwaGVyZX0gc3BoZXJlXG4gKi9cbmZ1bmN0aW9uIG9iYlZzU3BoZXJlKGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgb2JiLCBzcGhlcmUpIHtcbiAgZmluZENsb3Nlc3RQb2ludEZyb21PYmJUb1BvaW50KGNvbnRhY3RQb2ludCwgb2JiLCBzcGhlcmUuY2VudGVyT2ZWb2x1bWUpO1xuICB2ZWMzLnN1YnRyYWN0KGNvbnRhY3ROb3JtYWwsIHNwaGVyZS5jZW50ZXJPZlZvbHVtZSwgY29udGFjdFBvaW50KTtcbiAgdmVjMy5ub3JtYWxpemUoY29udGFjdE5vcm1hbCwgY29udGFjdE5vcm1hbCk7XG59XG5cbi8qKlxuICogTk9URTogVGhpcyBpbXBsZW1lbnRhdGlvbiBjaGVhdHMgYnkgY2hlY2tpbmcgd2hldGhlciB2ZXJ0aWNlcyBmcm9tIG9uZSBzaGFwZSBsaWUgd2l0aGluIHRoZVxuICogb3RoZXIuIER1ZSB0byB0aGUgdHVubmVsbGluZyBwcm9ibGVtLCBpdCBpcyBwb3NzaWJsZSB0aGF0IGludGVyc2VjdGlvbiBvY2N1cnMgd2l0aG91dCBhbnlcbiAqIHZlcnRpY2VzIGx5aW5nIHdpdGhpbiB0aGUgb3RoZXIgc2hhcGUuIEhvd2V2ZXIsIChBKSB0aGlzIGlzIHVubGlrZWx5LCBhbmQgKEIpIHdlIGFyZSBpZ25vcmluZyB0aGVcbiAqIHR1bm5lbGxpbmcgcHJvYmxlbSBmb3IgdGhlIHJlc3Qgb2YgdGhpcyBjb2xsaXNpb24gc3lzdGVtIGFueXdheS5cbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3RQb2ludCBPdXRwdXQgcGFyYW0uXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3ROb3JtYWwgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHtPYmJ9IG9iYlxuICogQHBhcmFtIHtBYWJifSBhYWJiXG4gKi9cbmZ1bmN0aW9uIG9iYlZzQWFiYihjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIG9iYiwgYWFiYikge1xuICByZXR1cm4gX29iYlZzQm94SGVscGVyKGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgb2JiLCBhYWJiLCBhYWJiQ29sbGlzaW9uRGV0ZWN0aW9uLmFhYmJWc1BvaW50LFxuICAgICAgYWFiYkNvbnRhY3RDYWxjdWxhdGlvbi5maW5kQWFiYk5vcm1hbEZyb21Db250YWN0UG9pbnQpO1xufVxuXG4vKipcbiAqIE5PVEU6IFRoaXMgaW1wbGVtZW50YXRpb24gY2hlYXRzIGJ5IGNoZWNraW5nIHdoZXRoZXIgdmVydGljZXMgZnJvbSBvbmUgc2hhcGUgbGllIHdpdGhpbiB0aGVcbiAqIG90aGVyLiBEdWUgdG8gdGhlIHR1bm5lbGxpbmcgcHJvYmxlbSwgaXQgaXMgcG9zc2libGUgdGhhdCBpbnRlcnNlY3Rpb24gb2NjdXJzIHdpdGhvdXQgYW55XG4gKiB2ZXJ0aWNlcyBseWluZyB3aXRoaW4gdGhlIG90aGVyIHNoYXBlLiBIb3dldmVyLCAoQSkgdGhpcyBpcyB1bmxpa2VseSwgYW5kIChCKSB3ZSBhcmUgaWdub3JpbmcgdGhlXG4gKiB0dW5uZWxsaW5nIHByb2JsZW0gZm9yIHRoZSByZXN0IG9mIHRoaXMgY29sbGlzaW9uIHN5c3RlbSBhbnl3YXkuXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0UG9pbnQgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0Tm9ybWFsIE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7T2JifSBvYmJBXG4gKiBAcGFyYW0ge09iYn0gb2JiQlxuICovXG5mdW5jdGlvbiBvYmJWc09iYihjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIG9iYkEsIG9iYkIpIHtcbiAgcmV0dXJuIF9vYmJWc0JveEhlbHBlcihjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIG9iYkEsIG9iYkIsIG9iYkNvbGxpc2lvbkRldGVjdGlvbi5vYmJWc1BvaW50LFxuICAgICAgZmluZE9iYk5vcm1hbEZyb21Db250YWN0UG9pbnQpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7dmVjM30gY29udGFjdFBvaW50IE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7dmVjM30gY29udGFjdE5vcm1hbCBPdXRwdXQgcGFyYW0uXG4gKiBAcGFyYW0ge09iYn0gb2JiXG4gKiBAcGFyYW0ge09iYnxBYWJifSBvdGhlclxuICogQHBhcmFtIHtGdW5jdGlvbn0gb3RoZXJWc1BvaW50Q29sbGlzaW9uRGV0ZWN0aW9uQ2FsbGJhY2tcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZpbmRPdGhlck5vcm1hbEZyb21Db250YWN0UG9pbnRcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9vYmJWc0JveEhlbHBlcihjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIG9iYiwgb3RoZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJWc1BvaW50Q29sbGlzaW9uRGV0ZWN0aW9uQ2FsbGJhY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAgZmluZE90aGVyTm9ybWFsRnJvbUNvbnRhY3RQb2ludCkge1xuICAvLyBDaGVjayB3aGV0aGVyIGFueSB2ZXJ0aWNlcyBmcm9tIEEgbGllIHdpdGhpbiBCJ3MgYm91bmRzLlxuICBpZiAob2JiLnNvbWVWZXJ0ZXgodmVydGV4ID0+IG90aGVyVnNQb2ludENvbGxpc2lvbkRldGVjdGlvbkNhbGxiYWNrKG90aGVyLCB2ZXJ0ZXgpLFxuICAgICAgICAgIGNvbnRhY3RQb2ludCkpIHtcbiAgICBmaW5kT3RoZXJOb3JtYWxGcm9tQ29udGFjdFBvaW50KGNvbnRhY3ROb3JtYWwsIGNvbnRhY3RQb2ludCwgb3RoZXIpO1xuICAgIHZlYzMubmVnYXRlKGNvbnRhY3ROb3JtYWwsIGNvbnRhY3ROb3JtYWwpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIENoZWNrIHdoZXRoZXIgYW55IHZlcnRpY2VzIGZyb20gQiBsaWUgd2l0aGluIEEncyBib3VuZHMuXG4gIGlmIChvdGhlci5zb21lVmVydGV4KHZlcnRleCA9PiBvYmJDb2xsaXNpb25EZXRlY3Rpb24ub2JiVnNQb2ludChvYmIsIHZlcnRleCksIGNvbnRhY3RQb2ludCkpIHtcbiAgICBmaW5kT2JiTm9ybWFsRnJvbUNvbnRhY3RQb2ludChjb250YWN0Tm9ybWFsLCBjb250YWN0UG9pbnQsIG9iYik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gV2UgYXNzdW1lIHRoYXQgYSB2ZXJ0ZXgtdG8tZmFjZSBjb2xsaXNpb24gd291bGQgaGF2ZSBiZWVuIGRldGVjdGVkIGJ5IG9uZSBvZiB0aGUgdHdvIGFib3ZlXG4gIC8vIGNoZWNrcy4gQW55IGVkZ2UtdG8tZWRnZSBjb2xsaXNpb24gbXVzdCBpbnZvbHZlIGJvdGggYW4gZWRnZSBmcm9tIEEgdGhyb3VnaCBhIGZhY2Ugb2YgQiBhbmRcbiAgLy8gdmljZSB2ZXJzYS4gU28gaXQgaXMgc3VmZmljaWVudCB0byBvbmx5IGNoZWNrIHRoZSBlZGdlcyBvZiBvbmUgYW5kIHRoZSBmYWNlcyBvZiB0aGUgb3RoZXIuXG4gIG90aGVyLnNvbWVFZGdlKGVkZ2UgPT5cbiAgICAgIG9iYi5zb21lRmFjZShmYWNlID0+IGZpbmRQb2lCZXR3ZWVuU2VnbWVudEFuZFBsYW5lUmVnaW9uKGNvbnRhY3RQb2ludCwgZWRnZSwgLi4uZmFjZSkpKTtcbiAgZmluZE9iYk5vcm1hbEZyb21Db250YWN0UG9pbnQoY29udGFjdE5vcm1hbCwgY29udGFjdFBvaW50LCBvYmIpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7dmVjM30gY29udGFjdFBvaW50IE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7dmVjM30gY29udGFjdE5vcm1hbCBPdXRwdXQgcGFyYW0uXG4gKiBAcGFyYW0ge09iYn0gb2JiXG4gKiBAcGFyYW0ge0NhcHN1bGV9IGNhcHN1bGVcbiAqL1xuZnVuY3Rpb24gb2JiVnNDYXBzdWxlKGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgb2JiLCBjYXBzdWxlKSB7XG4gIC8vIHRtcFZlYzEgaXMgdGhlIHBvaW50IG9uIHRoZSBjYXBzdWxlIHNlZ21lbnQgdGhhdCBpcyBjbG9zZXN0IHRvIHRoZSBPQkIuXG5cbiAgLy9cbiAgLy8gQ2hlY2sgdGhlIGVkZ2VzLlxuICAvL1xuXG4gIGNvbnN0IHNlZ21lbnQgPSBuZXcgTGluZVNlZ21lbnQodmVjMy5jcmVhdGUoKSwgdmVjMy5jcmVhdGUoKSk7XG4gIGNvbnN0IHNxdWFyZWRSYWRpdXMgPSBjYXBzdWxlLnJhZGl1cyAqIGNhcHN1bGUucmFkaXVzO1xuICBjb25zdCBhcmVJbnRlcnNlY3RpbmcgPSBvYmIuc29tZUVkZ2UoZWRnZSA9PlxuICAgICAgZmluZFNxdWFyZWREaXN0YW5jZUJldHdlZW5TZWdtZW50cyhjYXBzdWxlLnNlZ21lbnQsIGVkZ2UpIDwgc3F1YXJlZFJhZGl1cywgc2VnbWVudCk7XG5cbiAgaWYgKGFyZUludGVyc2VjdGluZykge1xuICAgIGZpbmRDbG9zZXN0UG9pbnRzRnJvbVNlZ21lbnRUb1NlZ21lbnQodG1wVmVjMSwgY29udGFjdFBvaW50LCBjYXBzdWxlLnNlZ21lbnQsIHNlZ21lbnQpO1xuICAgIHZlYzMuc3VidHJhY3QoY29udGFjdE5vcm1hbCwgdG1wVmVjMSwgY29udGFjdFBvaW50KTtcbiAgICB2ZWMzLm5vcm1hbGl6ZShjb250YWN0Tm9ybWFsLCBjb250YWN0Tm9ybWFsKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvL1xuICAvLyBDaGVjayB0aGUgZmFjZXMuXG4gIC8vXG5cbiAgb2JiLnNvbWVQdXNoZWRPdXRGYWNlKGZhY2UgPT5cbiAgICAgIGZpbmRQb2lCZXR3ZWVuU2VnbWVudEFuZFBsYW5lUmVnaW9uKHRtcFZlYzEsIGNhcHN1bGUuc2VnbWVudCwgLi4uZmFjZSksIGNhcHN1bGUucmFkaXVzKTtcblxuICBmaW5kT2JiTm9ybWFsRnJvbUNvbnRhY3RQb2ludChjb250YWN0Tm9ybWFsLCB0bXBWZWMxLCBvYmIpO1xuXG4gIC8vIE5PVEU6IFRoaXMgYXNzdW1lcyB0aGF0IHRoZSBhbmdsZSBiZXR3ZWVuIHRoZSBjYXBzdWxlIHNlZ21lbnQgYW5kIHRoZSBmYWNlIHBsYW5lIGlzIG5vdCBvYmxpcXVlXG4gIC8vIGFuZCB0aGF0IHRoZSBkZXB0aCBvZiBwZW5ldHJhdGlvbiBpcyBzaGFsbG93LiBXaGVuIGJvdGggb2YgdGhlc2UgY29uZGl0aW9ucyBhcmUgbm90IHRydWUsIHRoZVxuICAvLyBjb250YWN0IHBvaW50IHdpbGwgYmUgb2Zmc2V0IGZyb20gdGhlIGludGVyc2VjdGlvbiBwb2ludCBvbiB0aGUgcHVzaGVkLW91dCBmYWNlLlxuICB2ZWMzLnNjYWxlQW5kQWRkKGNvbnRhY3RQb2ludCwgdG1wVmVjMSwgY29udGFjdE5vcm1hbCwgLWNhcHN1bGUucmFkaXVzKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3ROb3JtYWwgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0UG9pbnRcbiAqIEBwYXJhbSB7T2JifSBvYmJcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGZpbmRPYmJOb3JtYWxGcm9tQ29udGFjdFBvaW50KGNvbnRhY3ROb3JtYWwsIGNvbnRhY3RQb2ludCwgb2JiKSB7XG4gIC8vIENhbGN1bGF0ZSB0aGUgZGlzcGxhY2VtZW50IGFsb25nIGVhY2ggYXhpcy5cbiAgY29uc3QgcHJvamVjdGlvbnMgPSBbXTtcbiAgdmVjMy5zdWJ0cmFjdCh0bXBWZWMxLCBjb250YWN0UG9pbnQsIG9iYi5jZW50ZXJPZlZvbHVtZSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgcHJvamVjdGlvbnNbaV0gPSB2ZWMzLmRvdChvYmIuYXhlc1tpXSwgdG1wVmVjMSk7XG4gIH1cblxuICAvLyBEZXRlcm1pbmUgd2hpY2ggZmFjZSB0aGUgbm9ybWFsIGlzIHBvaW50aW5nIGF3YXkgZnJvbS5cbiAgdmVjMy5zZXQoY29udGFjdE5vcm1hbCwgMCwgMCwgMCk7XG4gIGNvbnN0IHhEaXN0YW5jZUZyb21GYWNlID0gb2JiLmhhbGZTaWRlTGVuZ3Roc1swXSAtIE1hdGguYWJzKHByb2plY3Rpb25zWzBdKTtcbiAgY29uc3QgeURpc3RhbmNlRnJvbUZhY2UgPSBvYmIuaGFsZlNpZGVMZW5ndGhzWzFdIC0gTWF0aC5hYnMocHJvamVjdGlvbnNbMV0pO1xuICBjb25zdCB6RGlzdGFuY2VGcm9tRmFjZSA9IG9iYi5oYWxmU2lkZUxlbmd0aHNbMl0gLSBNYXRoLmFicyhwcm9qZWN0aW9uc1syXSk7XG4gIC8vIEFzc3VtZSB0aGF0IHRoZSBwb2ludCBpcyBjb250YWN0aW5nIHdoaWNoZXZlciBmYWNlIGl0J3MgY2xvc2VzdCB0by5cbiAgaWYgKHhEaXN0YW5jZUZyb21GYWNlIDw9IHlEaXN0YW5jZUZyb21GYWNlKSB7XG4gICAgaWYgKHhEaXN0YW5jZUZyb21GYWNlIDw9IHpEaXN0YW5jZUZyb21GYWNlKSB7XG4gICAgICBjb250YWN0Tm9ybWFsWzBdID0gcHJvamVjdGlvbnNbMF0gPiAwID8gMSA6IC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250YWN0Tm9ybWFsWzJdID0gcHJvamVjdGlvbnNbMl0gPiAwID8gMSA6IC0xO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoeURpc3RhbmNlRnJvbUZhY2UgPD0gekRpc3RhbmNlRnJvbUZhY2UpIHtcbiAgICAgIGNvbnRhY3ROb3JtYWxbMV0gPSBwcm9qZWN0aW9uc1sxXSA+IDAgPyAxIDogLTE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRhY3ROb3JtYWxbMl0gPSBwcm9qZWN0aW9uc1syXSA+IDAgPyAxIDogLTE7XG4gICAgfVxuICB9XG5cbiAgLy8gQXBwbHkgdGhlIE9CQidzIG9yaWVudGF0aW9uIHRvIHRoZSBub3JtYWwuXG4gIHZlYzMudHJhbnNmb3JtUXVhdChjb250YWN0Tm9ybWFsLCBjb250YWN0Tm9ybWFsLCBvYmIub3JpZW50YXRpb24pO1xufVxuXG5leHBvcnQge1xuICBvYmJWc1BvaW50LFxuICBvYmJWc1NwaGVyZSxcbiAgb2JiVnNBYWJiLFxuICBvYmJWc09iYixcbiAgb2JiVnNDYXBzdWxlLFxuICBmaW5kT2JiTm9ybWFsRnJvbUNvbnRhY3RQb2ludCxcbn07XG4iLCIvKipcbiAqIFRoaXMgbW9kdWxlIGRlZmluZXMgdXRpbGl0eSBtZXRob2RzIGZvciBjYWxjdWxhdGluZyBhIGNvbnRhY3QgcG9pbnQgYmV0d2VlbiBzcGhlcmVzIGFuZCBvdGhlclxuICogc2hhcGVzLlxuICpcbiAqIC0gRWFjaCBvZiB0aGVzZSBmdW5jdGlvbnMgYXNzdW1lcyB0aGF0IHRoZSBvYmplY3RzIGFyZSBhY3R1YWxseSBjb2xsaWRpbmcuXG4gKiAtIFRoZSByZXN1bHRpbmcgY29udGFjdCBwb2ludCBtYXkgYmUgYW55d2hlcmUgd2l0aGluIHRoZSBpbnRlcnNlY3Rpb24gb2YgdGhlIHR3byBvYmplY3RzLlxuICovXG5cbmltcG9ydCB7ZmluZENsb3Nlc3RQb2ludEZyb21BYWJiU3VyZmFjZVRvUG9pbnR9IGZyb20gJy4uLy4uLy4uL3V0aWwnO1xuaW1wb3J0IHtmaW5kQWFiYk5vcm1hbEZyb21Db250YWN0UG9pbnR9IGZyb20gJy4vYWFiYi1jb250YWN0LWNhbGN1bGF0aW9uJztcbmltcG9ydCAqIGFzIG9iYkNvbnRhY3RDYWxjdWxhdGlvbiBmcm9tICcuL29iYi1jb250YWN0LWNhbGN1bGF0aW9uJztcbmltcG9ydCAqIGFzIGNhcHN1bGVDb250YWN0Q2FsY3VsYXRpb24gZnJvbSAnLi9jYXBzdWxlLWNvbnRhY3QtY2FsY3VsYXRpb24nO1xuXG4vKipcbiAqIEBwYXJhbSB7dmVjM30gY29udGFjdFBvaW50IE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7dmVjM30gY29udGFjdE5vcm1hbCBPdXRwdXQgcGFyYW0uXG4gKiBAcGFyYW0ge1NwaGVyZX0gc3BoZXJlXG4gKiBAcGFyYW0ge3ZlYzN9IHBvaW50XG4gKi9cbmZ1bmN0aW9uIHNwaGVyZVZzUG9pbnQoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBzcGhlcmUsIHBvaW50KSB7XG4gIHZlYzMuY29weShjb250YWN0UG9pbnQsIHBvaW50KTtcbiAgLy8gQXNzdW1lIHRoYXQgdGhlIHBvaW50IGlzIGNvbnRhY3RpbmcgdGhlIGNsb3Nlc3QgcG9pbnQgb24gdGhlIHN1cmZhY2Ugb2YgdGhlIHNwaGVyZS5cbiAgdmVjMy5zdWJ0cmFjdChjb250YWN0Tm9ybWFsLCBwb2ludCwgc3BoZXJlLmNlbnRlck9mVm9sdW1lKTtcbiAgdmVjMy5ub3JtYWxpemUoY29udGFjdE5vcm1hbCwgY29udGFjdE5vcm1hbCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0UG9pbnQgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0Tm9ybWFsIE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7U3BoZXJlfSBzcGhlcmVBXG4gKiBAcGFyYW0ge1NwaGVyZX0gc3BoZXJlQlxuICovXG5mdW5jdGlvbiBzcGhlcmVWc1NwaGVyZShjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIHNwaGVyZUEsIHNwaGVyZUIpIHtcbiAgdmVjMy5zdWJ0cmFjdChjb250YWN0Tm9ybWFsLCBzcGhlcmVCLmNlbnRlck9mVm9sdW1lLCBzcGhlcmVBLmNlbnRlck9mVm9sdW1lKTtcbiAgdmVjMy5ub3JtYWxpemUoY29udGFjdE5vcm1hbCwgY29udGFjdE5vcm1hbCk7XG4gIC8vIFRoZSBwb2ludCBvbiB0aGUgc3VyZmFjZSBvZiBzcGhlcmUgQSB0aGF0IGlzIGNsb3Nlc3QgdG8gdGhlIGNlbnRlciBvZiBzcGhlcmUgQi5cbiAgdmVjMy5zY2FsZUFuZEFkZChjb250YWN0UG9pbnQsIHNwaGVyZUEuY2VudGVyT2ZWb2x1bWUsIGNvbnRhY3ROb3JtYWwsIHNwaGVyZUEucmFkaXVzKTtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgY2xvc2VzdCBwb2ludCBvbiB0aGUgc3VyZmFjZSBvZiB0aGUgQUFCQiB0byB0aGUgc3BoZXJlIGNlbnRlci5cbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3RQb2ludCBPdXRwdXQgcGFyYW0uXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3ROb3JtYWwgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHtTcGhlcmV9IHNwaGVyZVxuICogQHBhcmFtIHtBYWJifSBhYWJiXG4gKi9cbmZ1bmN0aW9uIHNwaGVyZVZzQWFiYihjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIHNwaGVyZSwgYWFiYikge1xuICBmaW5kQ2xvc2VzdFBvaW50RnJvbUFhYmJTdXJmYWNlVG9Qb2ludChjb250YWN0UG9pbnQsIGFhYmIsIHNwaGVyZS5jZW50ZXJPZlZvbHVtZSk7XG4gIGZpbmRBYWJiTm9ybWFsRnJvbUNvbnRhY3RQb2ludChjb250YWN0Tm9ybWFsLCBjb250YWN0UG9pbnQsIGFhYmIpO1xuICB2ZWMzLm5lZ2F0ZShjb250YWN0Tm9ybWFsLCBjb250YWN0Tm9ybWFsKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3RQb2ludCBPdXRwdXQgcGFyYW0uXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3ROb3JtYWwgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHtTcGhlcmV9IHNwaGVyZVxuICogQHBhcmFtIHtPYmJ9IG9iYlxuICovXG5mdW5jdGlvbiBzcGhlcmVWc09iYihjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIHNwaGVyZSwgb2JiKSB7XG4gIG9iYkNvbnRhY3RDYWxjdWxhdGlvbi5vYmJWc1NwaGVyZShjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIG9iYiwgc3BoZXJlKTtcbiAgdmVjMy5uZWdhdGUoY29udGFjdE5vcm1hbCwgY29udGFjdE5vcm1hbCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0UG9pbnQgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0Tm9ybWFsIE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7U3BoZXJlfSBzcGhlcmVcbiAqIEBwYXJhbSB7Q2Fwc3VsZX0gY2Fwc3VsZVxuICovXG5mdW5jdGlvbiBzcGhlcmVWc0NhcHN1bGUoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBzcGhlcmUsIGNhcHN1bGUpIHtcbiAgY2Fwc3VsZUNvbnRhY3RDYWxjdWxhdGlvbi5jYXBzdWxlVnNTcGhlcmUoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBjYXBzdWxlLCBzcGhlcmUpO1xuICB2ZWMzLm5lZ2F0ZShjb250YWN0Tm9ybWFsLCBjb250YWN0Tm9ybWFsKTtcbn1cblxuZXhwb3J0IHtcbiAgc3BoZXJlVnNQb2ludCxcbiAgc3BoZXJlVnNTcGhlcmUsXG4gIHNwaGVyZVZzQWFiYixcbiAgc3BoZXJlVnNPYmIsXG4gIHNwaGVyZVZzQ2Fwc3VsZSxcbn07XG4iLCJleHBvcnQgKiBmcm9tICcuL2NvbGxpZGFibGVzJztcbmV4cG9ydCAqIGZyb20gJy4vY29sbGlzaW9uLWRldGVjdGlvbic7XG5leHBvcnQgKiBmcm9tICcuL2NvbnRhY3QtY2FsY3VsYXRpb24nO1xuXG5leHBvcnQgKiBmcm9tICcuL3NyYy9jb2xsaWRhYmxlLWZhY3Rvcmllcyc7XG5leHBvcnQgKiBmcm9tICcuL3NyYy9jb2xsaWRhYmxlLXBoeXNpY3Mtam9iJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2NvbGxpZGFibGUtc3RvcmUnO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvY29sbGlzaW9uLWhhbmRsZXInO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvY29sbGlzaW9uLXV0aWxzJztcbiIsIi8qKlxuICogVGhpcyBtb2R1bGUgZGVmaW5lcyBhIHNldCBvZiBmYWN0b3J5IGZ1bmN0aW9ucyBmb3IgY3JlYXRpbmcgQ29sbGlkYWJsZSBpbnN0YW5jZXMuXG4gKi9cblxuaW1wb3J0IHtcbiAgQ2Fwc3VsZSxcbiAgT2JiLFxuICBTcGhlcmVcbn0gZnJvbSAnLi4vY29sbGlkYWJsZXMnO1xuaW1wb3J0IHtfZ2VvbWV0cnl9IGZyb20gJy4uLy4uL3V0aWwnO1xuXG4vKipcbiAqIEBwYXJhbSB7Q29sbGlkYWJsZVNoYXBlQ29uZmlnfSBwYXJhbXNcbiAqIEBwYXJhbSB7Q29sbGlkYWJsZVBoeXNpY3NKb2J9IFtwaHlzaWNzSm9iXVxuICogQHJldHVybnMge0NvbGxpZGFibGV9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNvbGxpZGFibGVGcm9tUmVuZGVyYWJsZVNoYXBlKHBhcmFtcywgcGh5c2ljc0pvYikge1xuICByZXR1cm4gX2NvbGxpZGFibGVDcmVhdG9yc1twYXJhbXMuY29sbGlkYWJsZVNoYXBlSWRdKHBhcmFtcywgcGh5c2ljc0pvYik7XG59XG5cbi8qKlxuICogVGhpcyBhc3N1bWVzIHRoZSBiYXNlIFJlbmRlcmFibGVTaGFwZSBoYXMgYSBzaWRlIGxlbmd0aCBvZiBvbmUgdW5pdC5cbiAqXG4gKiBAcGFyYW0ge0NvbGxpZGFibGVTaGFwZUNvbmZpZ30gcGFyYW1zXG4gKiBAcGFyYW0ge0NvbGxpZGFibGVQaHlzaWNzSm9ifSBbcGh5c2ljc0pvYl1cbiAqIEByZXR1cm5zIHtDb2xsaWRhYmxlfVxuICovXG5mdW5jdGlvbiBjcmVhdGVPYmJGcm9tUmVuZGVyYWJsZVNoYXBlKHBhcmFtcywgcGh5c2ljc0pvYikge1xuICBjb25zdCBoYWxmUmFuZ2VYID0gcGFyYW1zLnNjYWxlWzBdIC8gMjtcbiAgY29uc3QgaGFsZlJhbmdlWSA9IHBhcmFtcy5zY2FsZVsxXSAvIDI7XG4gIGNvbnN0IGhhbGZSYW5nZVogPSBwYXJhbXMuc2NhbGVbMl0gLyAyO1xuICByZXR1cm4gbmV3IE9iYihoYWxmUmFuZ2VYLCBoYWxmUmFuZ2VZLCBoYWxmUmFuZ2VaLCBwYXJhbXMuaXNTdGF0aW9uYXJ5LCBwaHlzaWNzSm9iKTtcbn1cblxuLyoqXG4gKiBUaGlzIGFzc3VtZXMgdGhlIGJhc2UgUmVuZGVyYWJsZVNoYXBlIGhhcyBhIFwicmFkaXVzXCIgb2Ygb25lIHVuaXQuXG4gKlxuICogQHBhcmFtIHtDb2xsaWRhYmxlU2hhcGVDb25maWd9IHBhcmFtc1xuICogQHBhcmFtIHtDb2xsaWRhYmxlUGh5c2ljc0pvYn0gW3BoeXNpY3NKb2JdXG4gKiBAcmV0dXJucyB7Q29sbGlkYWJsZX1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlU3BoZXJlRnJvbVJlbmRlcmFibGVTaGFwZShwYXJhbXMsIHBoeXNpY3NKb2IpIHtcbiAgY29uc3QgcmFkaXVzID0gcGFyYW1zLnJhZGl1cyB8fCB2ZWMzLmxlbmd0aChwYXJhbXMuc2NhbGUpIC8gTWF0aC5zcXJ0KDMpO1xuICByZXR1cm4gbmV3IFNwaGVyZSgwLCAwLCAwLCByYWRpdXMsIHBhcmFtcy5pc1N0YXRpb25hcnksIHBoeXNpY3NKb2IpO1xufVxuXG4vKipcbiAqIFRoZSByYWRpdXMgb2YgdGhlIGNyZWF0ZWQgY2Fwc3VsZSB3aWxsIGJlIGFuIGF2ZXJhZ2UgZnJvbSB0aGUgdHdvIHNob3J0ZXN0IHNpZGVzLlxuICpcbiAqIFRoZXJlIGFyZSB0d28gbW9kZXM6IGVpdGhlciB3ZSB1c2Ugc2NhbGUsIG9yIHdlIHVzZSByYWRpdXMgYW5kIGNhcHN1bGVFbmRQb2ludHNEaXN0YW5jZS5cbiAqXG4gKiBAcGFyYW0ge0NvbGxpZGFibGVTaGFwZUNvbmZpZ30gcGFyYW1zXG4gKiBAcGFyYW0ge0NvbGxpZGFibGVQaHlzaWNzSm9ifSBbcGh5c2ljc0pvYl1cbiAqIEByZXR1cm5zIHtDb2xsaWRhYmxlfVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYXBzdWxlRnJvbVJlbmRlcmFibGVTaGFwZShwYXJhbXMsIHBoeXNpY3NKb2IpIHtcbiAgY29uc3Qgc2NhbGUgPSBwYXJhbXMuc2NhbGU7XG4gIGNvbnN0IGNhcHN1bGVFbmRQb2ludHNEaXN0YW5jZSA9IHBhcmFtcy5jYXBzdWxlRW5kUG9pbnRzRGlzdGFuY2U7XG4gIGNvbnN0IGlzU3RhdGlvbmFyeSA9IHBhcmFtcy5pc1N0YXRpb25hcnk7XG4gIGxldCByYWRpdXMgPSBwYXJhbXMucmFkaXVzO1xuXG4gIGxldCBoYWxmRGlzdGFuY2U7XG5cbiAgLy8gVGhlcmUgYXJlIHR3byBtb2RlczogZWl0aGVyIHdlIHVzZSBzY2FsZSwgb3Igd2UgdXNlIHJhZGl1cyBhbmQgY2Fwc3VsZUVuZFBvaW50c0Rpc3RhbmNlLlxuICBpZiAodHlwZW9mIHJhZGl1cyA9PT0gJ251bWJlcicgJiYgdHlwZW9mIGNhcHN1bGVFbmRQb2ludHNEaXN0YW5jZSA9PT0gJ251bWJlcicpIHtcbiAgICBoYWxmRGlzdGFuY2UgPSBjYXBzdWxlRW5kUG9pbnRzRGlzdGFuY2UgLyAyO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGNvcHkgPSB2ZWMzLmNsb25lKHNjYWxlKTtcbiAgICBjb3B5LnNvcnQoKTtcblxuICAgIGNvbnN0IGxlbmd0aCA9IGNvcHlbMl07XG4gICAgcmFkaXVzID0gKGNvcHlbMF0gKyBjb3B5WzFdKSAvIDI7XG4gICAgaGFsZkRpc3RhbmNlID0gbGVuZ3RoIC8gMiAtIHJhZGl1cztcbiAgfVxuXG4gIGNvbnN0IG9yaWVudGF0aW9uID0gcXVhdC5jcmVhdGUoKTtcbiAgaWYgKHNjYWxlWzBdID4gc2NhbGVbMV0pIHtcbiAgICBpZiAoc2NhbGVbMF0gPiBzY2FsZVsyXSkge1xuICAgICAgdmVjMy5yb3RhdGVZKG9yaWVudGF0aW9uLCBvcmllbnRhdGlvbiwgX2dlb21ldHJ5LkhBTEZfUEkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBEbyBub3RoaW5nOyB0aGUgY2Fwc3VsZSBkZWZhdWx0cyB0byBiZWluZyBhbGlnbmVkIHdpdGggdGhlIHotYXhpcy5cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHNjYWxlWzFdID4gc2NhbGVbMl0pIHtcbiAgICAgIHZlYzMucm90YXRlWChvcmllbnRhdGlvbiwgb3JpZW50YXRpb24sIC1fZ2VvbWV0cnkuSEFMRl9QSSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIERvIG5vdGhpbmc7IHRoZSBjYXBzdWxlIGRlZmF1bHRzIHRvIGJlaW5nIGFsaWduZWQgd2l0aCB0aGUgei1heGlzLlxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGNhcHN1bGUgPSBuZXcgQ2Fwc3VsZShoYWxmRGlzdGFuY2UsIHJhZGl1cywgaXNTdGF0aW9uYXJ5LCBwaHlzaWNzSm9iKTtcbiAgY2Fwc3VsZS5vcmllbnRhdGlvbiA9IG9yaWVudGF0aW9uO1xuXG4gIHJldHVybiBjYXBzdWxlO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Q29sbGlkYWJsZVNoYXBlQ29uZmlnfSBwYXJhbXNcbiAqIEBwYXJhbSB7Q29sbGlkYWJsZVBoeXNpY3NKb2J9IFtwaHlzaWNzSm9iXVxuICogQHJldHVybnMge0NvbGxpZGFibGV9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVNwaGVyZU9yQ2Fwc3VsZUZyb21SZW5kZXJhYmxlU2hhcGUocGFyYW1zLCBwaHlzaWNzSm9iKSB7XG4gIGNvbnN0IHNjYWxlID0gcGFyYW1zLnNjYWxlO1xuICBjb25zdCByYWRpdXMgPSBwYXJhbXMucmFkaXVzO1xuICBjb25zdCBjYXBzdWxlRW5kUG9pbnRzRGlzdGFuY2UgPSBwYXJhbXMuY2Fwc3VsZUVuZFBvaW50c0Rpc3RhbmNlO1xuXG4gIGNvbnN0IGhhbGZMZW5ndGhYID0gc2NhbGVbMF0gKiByYWRpdXM7XG4gIGNvbnN0IGhhbGZMZW5ndGhZID0gc2NhbGVbMV0gKiByYWRpdXM7XG4gIGNvbnN0IGhhbGZMZW5ndGhaID0gc2NhbGVbMl0gKiAocmFkaXVzICsgY2Fwc3VsZUVuZFBvaW50c0Rpc3RhbmNlKSAvIDI7XG5cbiAgY29uc3QgbWluTGVuZ3RoID0gTWF0aC5taW4oTWF0aC5taW4oaGFsZkxlbmd0aFgsIGhhbGZMZW5ndGhZKSwgaGFsZkxlbmd0aFopO1xuICBjb25zdCBtYXhMZW5ndGggPSBNYXRoLm1heChNYXRoLm1heChoYWxmTGVuZ3RoWCwgaGFsZkxlbmd0aFkpLCBoYWxmTGVuZ3RoWik7XG5cbiAgaWYgKG1heExlbmd0aCAvIG1pbkxlbmd0aCA+PSBfU1BIRVJFX1ZTX0NBUFNVTEVfQVNQRUNUX1JBVElPX1RIUkVTSE9MRCkge1xuICAgIHJldHVybiBjcmVhdGVDYXBzdWxlRnJvbVJlbmRlcmFibGVTaGFwZShwYXJhbXMsIHBoeXNpY3NKb2IpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjcmVhdGVTcGhlcmVGcm9tUmVuZGVyYWJsZVNoYXBlKHBhcmFtcywgcGh5c2ljc0pvYik7XG4gIH1cbn1cblxuY29uc3QgX1NQSEVSRV9WU19DQVBTVUxFX0FTUEVDVF9SQVRJT19USFJFU0hPTEQgPSAyO1xuXG5jb25zdCBfY29sbGlkYWJsZUNyZWF0b3JzID0ge1xuICAnQ1VCRSc6IGNyZWF0ZU9iYkZyb21SZW5kZXJhYmxlU2hhcGUsXG4gICdTUEhFUkVfT1JfQ0FQU1VMRSc6IGNyZWF0ZVNwaGVyZU9yQ2Fwc3VsZUZyb21SZW5kZXJhYmxlU2hhcGUsXG4gICdTUEhFUkUnOiBjcmVhdGVTcGhlcmVGcm9tUmVuZGVyYWJsZVNoYXBlLFxuICAnQ0FQU1VMRSc6IGNyZWF0ZUNhcHN1bGVGcm9tUmVuZGVyYWJsZVNoYXBlLFxufTtcblxuZXhwb3J0IHtcbiAgY3JlYXRlQ2Fwc3VsZUZyb21SZW5kZXJhYmxlU2hhcGUsXG4gIGNyZWF0ZUNvbGxpZGFibGVGcm9tUmVuZGVyYWJsZVNoYXBlLFxuICBjcmVhdGVPYmJGcm9tUmVuZGVyYWJsZVNoYXBlLFxuICBjcmVhdGVTcGhlcmVGcm9tUmVuZGVyYWJsZVNoYXBlLFxuICBjcmVhdGVTcGhlcmVPckNhcHN1bGVGcm9tUmVuZGVyYWJsZVNoYXBlLFxufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBDb2xsaWRhYmxlU2hhcGVDb25maWdcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb2xsaWRhYmxlU2hhcGVJZCBUaGUgSUQgb2YgdGhlIHR5cGUgb2YgY29sbGlkYWJsZSBzaGFwZS5cbiAqIEBwcm9wZXJ0eSB7dmVjM30gW3NjYWxlXVxuICogQHByb3BlcnR5IHtib29sZWFufSBbaXNTdGF0aW9uYXJ5PWZhbHNlXSBXaGV0aGVyIHRoZSBjb2xsaWRhYmxlIGlzIGZpeGVkIGluIHBsYWNlLlxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge0NvbGxpZGFibGVTaGFwZUNvbmZpZ30gU3BoZXJpY2FsQ29sbGlkYWJsZVNoYXBlUGFyYW1zXG4gKiBAcHJvcGVydHkge251bWJlcn0gcmFkaXVzXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7U3BoZXJpY2FsQ29sbGlkYWJsZVNoYXBlUGFyYW1zfSBDYXBzdWxlQ29sbGlkYWJsZVNoYXBlUGFyYW1zXG4gKiBAcHJvcGVydHkge251bWJlcn0gY2Fwc3VsZUVuZFBvaW50c0Rpc3RhbmNlIFRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBjZW50ZXJzIG9mIHRoZSBzcGhlcmVzIG9uIGVpdGhlciBlbmRcbiAqIG9mIHRoZSBjYXBzdWxlLlxuICovXG4iLCJpbXBvcnQge2NyZWF0ZUNvbGxpZGFibGVGcm9tUmVuZGVyYWJsZVNoYXBlfSBmcm9tICcuL2NvbGxpZGFibGUtZmFjdG9yaWVzJztcbmltcG9ydCB7Y29sbGlkYWJsZVN0b3JlfSBmcm9tICcuL2NvbGxpZGFibGUtc3RvcmUnO1xuaW1wb3J0IHtQaHlzaWNzSm9ifSBmcm9tICcuLi8uLi9zcmMvcGh5c2ljcy1qb2InO1xuaW1wb3J0IHtjcmVhdGVGb3JDb2xsaWRhYmxlfSBmcm9tICcuLi8uLi91dGlsJztcblxuLyoqXG4gKiBBIENvbGxpZGFibGVQaHlzaWNzSm9iIGV4dGVuZHMgdGhlIHN0YW5kYXJkIFBoeXNpY3NKb2Igd2l0aCBhIGNvbGxpZGFibGUgZ2VvbWV0cnkuXG4gKi9cbmNsYXNzIENvbGxpZGFibGVQaHlzaWNzSm9iIGV4dGVuZHMgUGh5c2ljc0pvYiB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0NvbGxpZGFibGVTaGFwZUNvbmZpZ30gY29sbGlkYWJsZVBhcmFtc1xuICAgKiBAcGFyYW0ge1BoeXNpY3NTdGF0ZX0gc3RhdGVcbiAgICogQHBhcmFtIHtBcnJheS48Rm9yY2VBcHBsaWVyPn0gZm9yY2VBcHBsaWVyc1xuICAgKiBAcGFyYW0ge09iamVjdH0gY29udHJvbGxlclxuICAgKiBAcGFyYW0ge0NvbGxpc2lvbkhhbmRsZXJ9IGNvbGxpc2lvbkhhbmRsZXJcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvbGxpZGFibGVQYXJhbXMsIHN0YXRlLCBmb3JjZUFwcGxpZXJzLCBjb250cm9sbGVyLCBjb2xsaXNpb25IYW5kbGVyKSB7XG4gICAgc3VwZXIoZm9yY2VBcHBsaWVycywgc3RhdGUpO1xuXG4gICAgY29sbGlkYWJsZVBhcmFtcy5zY2FsZSA9IGNvbGxpZGFibGVQYXJhbXMuc2NhbGUgfHwgdmVjMy5mcm9tVmFsdWVzKDEsIDEsIDEpO1xuICAgIHRoaXMuY29sbGlkYWJsZSA9IGNyZWF0ZUNvbGxpZGFibGVGcm9tUmVuZGVyYWJsZVNoYXBlKGNvbGxpZGFibGVQYXJhbXMsIHRoaXMpO1xuICAgIHRoaXMuY3VycmVudFN0YXRlLnVucm90YXRlZEluZXJ0aWFUZW5zb3IgPVxuICAgICAgICBjcmVhdGVGb3JDb2xsaWRhYmxlKHRoaXMuY29sbGlkYWJsZSwgdGhpcy5jdXJyZW50U3RhdGUubWFzcyk7XG4gICAgdGhpcy5jdXJyZW50U3RhdGUudXBkYXRlRGVwZW5kZW50RmllbGRzKCk7XG4gICAgdGhpcy5pc0F0UmVzdCA9IGZhbHNlO1xuICAgIHRoaXMuY29udHJvbGxlciA9IGNvbnRyb2xsZXI7XG4gICAgdGhpcy5fY29sbGlzaW9uSGFuZGxlciA9IGNvbGxpc2lvbkhhbmRsZXI7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtGb3JjZUFwcGxpZXJ9IGZvcmNlQXBwbGllclxuICAgKi9cbiAgYWRkRm9yY2VBcHBsaWVyKGZvcmNlQXBwbGllcikge1xuICAgIHN1cGVyLmFkZEZvcmNlQXBwbGllcihmb3JjZUFwcGxpZXIpO1xuICAgIHRoaXMuaXNBdFJlc3QgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0ZvcmNlQXBwbGllcn0gZm9yY2VBcHBsaWVyXG4gICAqL1xuICByZW1vdmVGb3JjZUFwcGxpZXIoZm9yY2VBcHBsaWVyKSB7XG4gICAgc3VwZXIucmVtb3ZlRm9yY2VBcHBsaWVyKGZvcmNlQXBwbGllcik7XG4gICAgdGhpcy5pc0F0UmVzdCA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgY2FsbGJhY2sgaXMgdHJpZ2dlcmVkIGluIHJlc3BvbnNlIHRvIGEgY29sbGlzaW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge0NvbGxpc2lvbn0gY29sbGlzaW9uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoaXMgbmVlZHMgdGhlIHN0YW5kYXJkIGNvbGxpc2lvbiByZXN0aXR1dGlvbiB0byBwcm9jZWVkLlxuICAgKi9cbiAgaGFuZGxlQ29sbGlzaW9uKGNvbGxpc2lvbikge1xuICAgIHJldHVybiB0aGlzLl9jb2xsaXNpb25IYW5kbGVyKGNvbGxpc2lvbik7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydFRpbWVdXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhcnQoc3RhcnRUaW1lKSB7XG4gICAgc3VwZXIuc3RhcnQoc3RhcnRUaW1lKTtcbiAgICBjb2xsaWRhYmxlU3RvcmUucmVnaXN0ZXJDb2xsaWRhYmxlKHRoaXMuY29sbGlkYWJsZSk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBmaW5pc2goKSB7XG4gICAgc3VwZXIuZmluaXNoKCk7XG4gICAgY29sbGlkYWJsZVN0b3JlLnVucmVnaXN0ZXJDb2xsaWRhYmxlKHRoaXMuY29sbGlkYWJsZSk7XG4gIH1cblxuICAvKiogQHJldHVybnMge3ZlYzN9ICovXG4gIGdldCBwb3NpdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50U3RhdGUucG9zaXRpb247XG4gIH1cblxuICAvKiogQHBhcmFtIHt2ZWMzfSB2YWx1ZSAqL1xuICBzZXQgcG9zaXRpb24odmFsdWUpIHtcbiAgICB0aGlzLmN1cnJlbnRTdGF0ZS5wb3NpdGlvbiA9IHZlYzMuY2xvbmUodmFsdWUpO1xuICAgIHRoaXMuY29sbGlkYWJsZS5wb3NpdGlvbiA9IHZlYzMuY2xvbmUodmFsdWUpO1xuICB9XG59XG5cbmV4cG9ydCB7Q29sbGlkYWJsZVBoeXNpY3NKb2J9O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtGdW5jdGlvbn0gQ29sbGlzaW9uSGFuZGxlclxuICogQHBhcmFtIHtDb2xsaXNpb259IGNvbGxpc2lvblxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhpcyBuZWVkcyB0aGUgc3RhbmRhcmQgY29sbGlzaW9uIHJlc3RpdHV0aW9uIHRvIHByb2NlZWQuXG4gKi9cbiIsImltcG9ydCB7ZGV0ZWN0Qm91bmRpbmdWb2x1bWVJbnRlcnNlY3Rpb259IGZyb20gJy4vY29sbGlzaW9uLXV0aWxzJztcblxuLy8gVE9ETzogSW1wbGVtZW50IHNvbWUgZm9ybSBvZiBib3VuZGluZyB2b2x1bWUgaGllcmFyY2h5IHRvIG1ha2Ugc2VhcmNoaW5nIGZvciBwb3RlbnRpYWwgY29sbGlzaW9uc1xuLy8gbW9yZSBlZmZpY2llbnQuXG5cbi8qKlxuICogVGhpcyBjbGFzcyByZWdpc3RlcnMgYW5kIHJldHJpZXZlcyBhbGwgQ29sbGlkYWJsZXMgd2l0aGluIGEgc2NlbmUuXG4gKi9cbmNsYXNzIENvbGxpZGFibGVTdG9yZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2NvbGxpZGFibGVzID0gW107XG4gIH1cblxuICAvKipcbiAgICogQ2FjaGVzIHRoZSBnaXZlbiBwcm9ncmFtIHdyYXBwZXIuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGlzIGlkZW1wb3RlbnQ7IGEgZ2l2ZW4gcHJvZ3JhbSB3aWxsIG9ubHkgYmUgY2FjaGVkIG9uY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7Q29sbGlkYWJsZX0gY29sbGlkYWJsZVxuICAgKi9cbiAgcmVnaXN0ZXJDb2xsaWRhYmxlKGNvbGxpZGFibGUpIHtcbiAgICB0aGlzLl9jb2xsaWRhYmxlcy5wdXNoKGNvbGxpZGFibGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Q29sbGlkYWJsZX0gY29sbGlkYWJsZVxuICAgKi9cbiAgdW5yZWdpc3RlckNvbGxpZGFibGUoY29sbGlkYWJsZSkge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fY29sbGlkYWJsZXMuaW5kZXhPZihjb2xsaWRhYmxlKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgdGhpcy5fY29sbGlkYWJsZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtDb2xsaWRhYmxlfSBjb2xsaWRhYmxlXG4gICAqIEByZXR1cm5zIHtBcnJheS48Q29sbGlkYWJsZT59XG4gICAqL1xuICBnZXRQb3NzaWJsZUNvbGxpc2lvbnNGb3JDb2xsaWRhYmxlKGNvbGxpZGFibGUpIHtcbiAgICByZXR1cm4gdGhpcy5fY29sbGlkYWJsZXMuZmlsdGVyKG90aGVyID0+XG4gICAgICBjb2xsaWRhYmxlICE9PSBvdGhlciAmJlxuICAgICAgZGV0ZWN0Qm91bmRpbmdWb2x1bWVJbnRlcnNlY3Rpb24oY29sbGlkYWJsZSwgb3RoZXIpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7QXJyYXkuPENvbGxpc2lvbj59XG4gICAqL1xuICBnZXRQb3NzaWJsZUNvbGxpc2lvbnNGb3JBbGxDb2xsaWRhYmxlcygpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMCwgY291bnQgPSB0aGlzLl9jb2xsaWRhYmxlcy5sZW5ndGg7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICBjb25zdCBjb2xsaWRhYmxlQSA9IHRoaXMuX2NvbGxpZGFibGVzW2ldO1xuICAgICAgZm9yIChsZXQgaiA9IGkgKyAxOyBqIDwgY291bnQ7IGorKykge1xuICAgICAgICBjb25zdCBjb2xsaWRhYmxlQiA9IHRoaXMuX2NvbGxpZGFibGVzW2pdO1xuICAgICAgICBpZiAoZGV0ZWN0Qm91bmRpbmdWb2x1bWVJbnRlcnNlY3Rpb24oY29sbGlkYWJsZUEsIGNvbGxpZGFibGVCKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHtjb2xsaWRhYmxlQTogY29sbGlkYWJsZUEsIGNvbGxpZGFibGVCOiBjb2xsaWRhYmxlQn0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG4gIGZvckVhY2goY2FsbGJhY2spIHtcbiAgICB0aGlzLl9jb2xsaWRhYmxlcy5mb3JFYWNoKGNhbGxiYWNrKTtcbiAgfVxufVxuXG5jb25zdCBjb2xsaWRhYmxlU3RvcmUgPSBuZXcgQ29sbGlkYWJsZVN0b3JlKCk7XG5leHBvcnQge2NvbGxpZGFibGVTdG9yZX07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gQ29sbGlzaW9uXG4gKiBAcHJvcGVydHkge0NvbGxpZGFibGV9IGNvbGxpZGFibGVBXG4gKiBAcHJvcGVydHkge0NvbGxpZGFibGV9IGNvbGxpZGFibGVCXG4gKiBAcHJvcGVydHkge3ZlYzN9IFtjb250YWN0UG9pbnRdIEluIHdvcmxkIGNvb3JkaW5hdGVzLlxuICogQHByb3BlcnR5IHt2ZWMzfSBbY29udGFjdE5vcm1hbF0gUG9pbnRzIGF3YXkgZnJvbSBib2R5IEEgYW5kIHRvd2FyZCBib2R5IEIuXG4gKiBAcHJvcGVydHkge251bWJlcn0gW3RpbWVdXG4gKi9cbiIsImltcG9ydCB7XG4gIGFyZVZlYzNzQ2xvc2UsXG4gIHRtcFZlYzEsXG4gIHRtcFZlYzIsXG4gIHRtcFZlYzMsXG4gIHRtcFZlYzQsXG59IGZyb20gJy4uLy4uL3V0aWwnO1xuXG5pbXBvcnQge2NvbGxpZGFibGVTdG9yZX0gZnJvbSAnLi9jb2xsaWRhYmxlLXN0b3JlJztcbmltcG9ydCB7ZGV0ZWN0SW50ZXJzZWN0aW9uLCBjYWxjdWxhdGVDb250YWN0fSBmcm9tICcuL2NvbGxpc2lvbi11dGlscyc7XG5cbi8qKlxuICogVGhpcyBtb2R1bGUgZGVmaW5lcyBhIGNvbGxpc2lvbiBwaXBlbGluZS5cbiAqXG4gKiBUaGVzZSBmdW5jdGlvbnMgd2lsbCBkZXRlY3QgY29sbGlzaW9ucyBiZXR3ZWVuIGNvbGxpZGFibGUgYm9kaWVzIGFuZCB1cGRhdGUgdGhlaXIgbW9tZW50YSBpblxuICogcmVzcG9uc2UgdG8gdGhlIGNvbGxpc2lvbnMuXG4gKlxuICogLSBDb25zaXN0cyBvZiBhbiBlZmZpY2llbnQgYnJvYWQtcGhhc2UgY29sbGlzaW9uIGRldGVjdGlvbiBzdGVwIGZvbGxvd2VkIGJ5IGEgcHJlY2lzZVxuICogICBuYXJyb3ctcGhhc2Ugc3RlcC5cbiAqIC0gQ2FsY3VsYXRlcyB0aGUgcG9zaXRpb24sIHN1cmZhY2Ugbm9ybWFsLCBhbmQgdGltZSBvZiBlYWNoIGNvbnRhY3QuXG4gKiAtIENhbGN1bGF0ZXMgdGhlIGltcHVsc2Ugb2YgYSBjb2xsaXNpb24gYW5kIHVwZGF0ZXMgdGhlIGJvZGllcycgbGluZWFyIGFuZCBhbmd1bGFyIG1vbWVudGEgaW5cbiAqICAgcmVzcG9uc2UuXG4gKiAtIEFwcGxpZXMgQ291bG9tYiBmcmljdGlvbiB0byBjb2xsaWRpbmcgYm9kaWVzLlxuICogLSBTdWItZGl2aWRlcyB0aGUgdGltZSBzdGVwIHRvIG1vcmUgcHJlY2lzZWx5IGRldGVybWluZSB3aGVuIGFuZCB3aGVyZSBhIGNvbGxpc2lvbiBvY2N1cnMuXG4gKiAtIFN1cHBvcnRzIG11bHRpcGxlIGNvbGxpc2lvbnMgd2l0aCBhIHNpbmdsZSBib2R5IGluIGEgc2luZ2xlIHRpbWUgc3RlcC5cbiAqIC0gRWZmaWNpZW50bHkgc3VwcG9ydHMgYm9kaWVzIGNvbWluZyB0byByZXN0IGFnYWluc3QgZWFjaCBvdGhlci5cbiAqIC0gQm9kaWVzIHdpbGwgbmV2ZXIgcGVuZXRyYXRlIG9uZSBhbm90aGVyLlxuICogLSBUaGlzIGRvZXMgbm90IGFkZHJlc3MgdGhlIHR1bm5lbGxpbmcgcHJvYmxlbS4gVGhhdCBpcywgaXQgaXMgcG9zc2libGUgZm9yIHR3byBmYXN0LW1vdmluZ1xuICogICBib2RpZXMgdG8gcGFzcyB0aHJvdWdoIGVhY2ggb3RoZXIgYXMgbG9uZyBhcyB0aGV5IGRpZCBub3QgaW50ZXJzZWN0IGVhY2ggb3RoZXIgZHVyaW5nIGFueSB0aW1lXG4gKiAgIHN0ZXAuXG4gKiAtIFRoaXMgb25seSBzdXBwb3J0cyBjb2xsaXNpb25zIGJldHdlZW4gY2VydGFpbiB0eXBlcyBvZiBzaGFwZXMuIEZvcnR1bmF0ZWx5LCB0aGlzIHNldCBwcm92aWRlc1xuICogICByZWFzb25hYmxlIGFwcHJveGltYXRpb25zIGZvciBtb3N0IG90aGVyIHNoYXBlcy4gVGhlIHN1cHBvcnRlZCB0eXBlcyBvZiBzaGFwZXMgYXJlOiBzcGhlcmVzLFxuICogICBjYXBzdWxlcywgQUFCQnMsIGFuZCBPQkJzLlxuICpcbiAqICMjIE9iamVjdHMgdGhhdCBjb21lIHRvIHJlc3RcbiAqXG4gKiBBbiBpbXBvcnRhbnQgZWZmaWNpZW5jeSBpbXByb3ZlbWVudCBpcyB0byBub3QgcHJvY2VzcyBvYmplY3RzIHRocm91Z2ggdGhlIHBoeXNpY3MgZW5naW5lIHBpcGVsaW5lXG4gKiBhZnRlciB0aGV5IGhhdmUgY29tZSB0byByZXN0LiBUaGUgaXNBdFJlc3QgZmllbGQgaW5kaWNhdGVzIHdoZW4gYSBib2R5IGhhcyBjb21lIHRvIHJlc3QuXG4gKlxuICogaXNBdFJlc3QgaXMgc2V0IHRvIHRydWUgYWZ0ZXIgYSBwaHlzaWNzIGZyYW1lIGlzIGZpbmlzaGVkIGlmIHRoZSBjb2xsaXNpb25zLCBmb3JjZXMsIHBvc2l0aW9uLFxuICogYW5kIG9yaWVudGF0aW9uIG9mIGEgam9iIGhhdmUgbm90IGNoYW5nZWQgZnJvbSB0aGUgcHJldmlvdXMgdG8gdGhlIGN1cnJlbnQgc3RhdGUuXG4gKlxuICogaXNBdFJlc3QgaXMgc2V0IHRvIGZhbHNlIGZyb20gdHdvIHBvc3NpYmxlIGV2ZW50czogYWZ0ZXIgYSBwaHlzaWNzIGZyYW1lIGlzIGZpbmlzaGVkIGlmIHRoZVxuICogY29sbGlzaW9ucyBoYXZlIGNoYW5nZWQgZnJvbSB0aGUgcHJldmlvdXMgdG8gdGhlIGN1cnJlbnQgc3RhdGUsIG9yIHdoZW4gYSBmb3JjZSBpcyBhZGRlZCB0b1xuICogcmVtb3ZlZCBmcm9tIHRoZSBqb2IuXG4gKlxuICogIyMgQ29sbGlzaW9uIGNhbGN1bGF0aW9ucyBkbyBub3QgY29uc2lkZXIgdmVsb2NpdHlcbiAqXG4gKiBDb2xsaXNpb24gZGV0ZWN0aW9uIHdvcmtzIGJ5IHdhaXRpbmcgdW50aWwgdHdvIGJvZGllcyBpbnRlcnNlY3QuIEhvd2V2ZXIsIGJlY2F1c2UgdGltZSBmcmFtZXMgYXJlXG4gKiBub3QgaW5maW5pdGVseSBzbWFsbCwgd2hlbiBhbiBpbnRlcnNlY3Rpb24gaXMgZGV0ZWN0ZWQsIGl0J3MgYWxyZWFkeSBwYXN0IHRoZSBleGFjdCBpbnN0YW5jZSBvZlxuICogY29sbGlzaW9uLiBUbyBhbGxldmlhdGUgcHJvYmxlbXMgZnJvbSB0aGlzLCB0aGUgdmVsb2NpdHkgb2YgZWFjaCBib2R5IGNhbiBiZSBjb25zaWRlcmVkIHdoZW5cbiAqIGNhbGN1bGF0aW5nIHRoZSBjb2xsaXNpb24gdGltZSwgcG9zaXRpb24sIGFuZCBjb250YWN0IG5vcm1hbC4gSG93ZXZlciwgdGFraW5nIHZlbG9jaXR5IGludG9cbiAqIGFjY291bnQgbWFrZXMgdGhlIGNvbnRhY3QgY2FsY3VsYXRpb25zIG11Y2ggbW9yZSBjb21wbGV4LCBzbyB3ZSBkbyBub3QgY29uc2lkZXIgdmVsb2NpdHkgaW4gb3VyXG4gKiBjYWxjdWxhdGlvbnMuXG4gKlxuICogQSBub3RhYmxlIGNvbnNlcXVlbmNlIG9mIHRoaXMgaXMgdGhhdCB0aGUgY2FsY3VsYXRlZCBjb250YWN0IG5vcm1hbHMgY2FuIGJlIGluY29ycmVjdC4gQ29uc2lkZXJcbiAqIHRoZSBmb2xsb3dpbmcgbW92aW5nIHNxdWFyZXMuIEF0IHRpbWUgdDIgdGhleSBhcmUgZm91bmQgdG8gaGF2ZSBjb2xsaWRlZC4gVGhlIGNhbGN1bGF0ZWQgY29udGFjdFxuICogcG9pbnQgd2lsbCBiZSBzb21ld2hlcmUgd2l0aGluIHRoZSBpbnRlcnNlY3Rpb24gb2YgdGhlIGNvcm5lcnMuIEJ1dCB0aGUgY2FsY3VsYXRlZCBjb250YWN0IG5vcm1hbFxuICogd2lsbCBwb2ludCB1cHdhcmRzLCB3aGlsZSB0aGUgdHJ1ZSBjb250YWN0IG5vcm1hbCBzaG91bGQgcG9pbnQgdG8gdGhlIHJpZ2h0LiBUaGlzIGlzIGJlY2F1c2UgdGhlXG4gKiBjb250YWN0IGNhbGN1bGF0aW9ucyBkbyBub3QgY29uc2lkZXIgdmVsb2NpdHkgYW5kIGluc3RlYWQgb25seSBjb25zaWRlciB0aGUgc2hhbGxvd2VzdCBkaXJlY3Rpb25cbiAqIG9mIG92ZXJsYXAuXG4gKlxuICogLy8gVGltZSB0MVxuICogICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLS0rXG4gKiAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgfFxuICogICAgICAgICAgICAgICAgPC0tIHwgICAgICBCICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgIHxcbiAqICArLS0tLS0tLS0tLS0tKyAgICB8ICAgICAgICAgICAgfFxuICogIHwgICAgICAgICAgICB8ICAgICstLS0tLS0tLS0tLS0rXG4gKiAgfCAgICAgICAgICAgIHxcbiAqICB8ICAgICAgQSAgICAgfCAtLT5cbiAqICB8ICAgICAgICAgICAgfFxuICogIHwgICAgICAgICAgICB8XG4gKiAgKy0tLS0tLS0tLS0tLStcbiAqXG4gKiAvLyBUaW1lIHQyXG4gKiAgICAgICAgICstLS0tLS0tLS0tLS0rXG4gKiAgICAgICAgIHwgICAgICAgICAgICB8XG4gKiAgICAgICAgIHwgICAgICAgICAgICB8XG4gKiAgICAgICAgIHwgICAgICBCICAgICB8XG4gKiAgICAgICAgIHwgICAgICAgICAgICB8XG4gKiAgKy0tLS0tLS0tLS0tLSsgICAgICB8XG4gKiAgfCAgICAgICstLS0tLXwtLS0tLS0rXG4gKiAgfCAgICAgICAgICAgIHxcbiAqICB8ICAgICAgQSAgICAgfFxuICogIHwgICAgICAgICAgICB8XG4gKiAgfCAgICAgICAgICAgIHxcbiAqICArLS0tLS0tLS0tLS0tK1xuICovXG5cbi8qKlxuICogRGV0ZWN0IGFuZCBoYW5kbGUgYW55IGNvbGxpc2lvbnMgYmV0d2VlbiBhIGdpdmVuIGpvYiBhbmQgYWxsIG90aGVyIGNvbGxpZGFibGUgYm9kaWVzLlxuICpcbiAqIEBwYXJhbSB7Q29sbGlkYWJsZVBoeXNpY3NKb2J9IGpvYlxuICogQHBhcmFtIHtET01IaWdoUmVzVGltZVN0YW1wfSBlbGFwc2VkVGltZVxuICogQHBhcmFtIHtQaHlzaWNzQ29uZmlnfSBwaHlzaWNzUGFyYW1zXG4gKi9cbmZ1bmN0aW9uIGhhbmRsZUNvbGxpc2lvbnNGb3JKb2Ioam9iLCBlbGFwc2VkVGltZSwgcGh5c2ljc1BhcmFtcykge1xuICBjb25zdCBjb2xsaWRhYmxlID0gam9iLmNvbGxpZGFibGU7XG5cbiAgLy8gQ2xlYXIgYW55IHByZXZpb3VzIGNvbGxpc2lvbiBpbmZvLlxuICBjb2xsaWRhYmxlLnByZXZpb3VzQ29sbGlzaW9ucyA9IGNvbGxpZGFibGUuY29sbGlzaW9ucztcbiAgY29sbGlkYWJsZS5jb2xsaXNpb25zID0gW107XG5cbiAgLy8gRmluZCBhbGwgY29sbGlkaW5nIGNvbGxpZGFibGVzLlxuICBjb25zdCBjb2xsaWRpbmdDb2xsaWRhYmxlcyA9IGZpbmRJbnRlcnNlY3RpbmdDb2xsaWRhYmxlc0ZvckNvbGxpZGFibGUoY29sbGlkYWJsZSk7XG5cbiAgLy8gU3RvcmUgdGhlIHRpbWUgb2YgY29sbGlzaW9uIGZvciBlYWNoIGNvbGxpc2lvbi5cbiAgY29uc3QgY29sbGlzaW9ucyA9IF9yZWNvcmRDb2xsaXNpb25zKGNvbGxpZGFibGUsIGNvbGxpZGluZ0NvbGxpZGFibGVzLCBlbGFwc2VkVGltZSk7XG5cbiAgLy8gQ2FsY3VsYXRlIHRoZSBwb2ludHMgb2YgY29udGFjdCBmb3IgZWFjaCBjb2xsaXNpb24uXG4gIF9jYWxjdWxhdGVQb2ludHNPZkNvbnRhY3QoY29sbGlzaW9ucyk7XG5cbiAgLy8gQ29sbGlzaW9uIHJlc29sdXRpb24uXG4gIF9yZXNvbHZlQ29sbGlzaW9ucyhjb2xsaXNpb25zLCBwaHlzaWNzUGFyYW1zKTtcbn1cblxuLyoqXG4gKiBGaW5kcyBhbGwgb3RoZXIgY29sbGlkYWJsZXMgdGhhdCBpbnRlcnNlY3Qgd2l0aCB0aGUgZ2l2ZW4gY29sbGlkYWJsZS5cbiAqXG4gKiBAcGFyYW0ge0NvbGxpZGFibGV9IGNvbGxpZGFibGVcbiAqIEByZXR1cm5zIHtBcnJheS48Q29sbGlkYWJsZT59XG4gKi9cbmZ1bmN0aW9uIGZpbmRJbnRlcnNlY3RpbmdDb2xsaWRhYmxlc0ZvckNvbGxpZGFibGUoY29sbGlkYWJsZSkge1xuICAvLyBCcm9hZC1waGFzZSBjb2xsaXNpb24gZGV0ZWN0aW9uIChwYWlycyB3aG9zZSBib3VuZGluZyB2b2x1bWVzIGludGVyc2VjdCkuXG4gIGNvbnN0IGNvbGxpZGluZ0NvbGxpZGFibGVzID0gY29sbGlkYWJsZVN0b3JlLmdldFBvc3NpYmxlQ29sbGlzaW9uc0ZvckNvbGxpZGFibGUoY29sbGlkYWJsZSk7XG5cbiAgLy8gTmFycm93LXBoYXNlIGNvbGxpc2lvbiBkZXRlY3Rpb24gKHBhaXJzIHRoYXQgYWN0dWFsbHkgaW50ZXJzZWN0KS5cbiAgcmV0dXJuIF9kZXRlY3RQcmVjaXNlQ29sbGlzaW9uc0Zyb21Db2xsaWRpbmdDb2xsaWRhYmxlcyhjb2xsaWRhYmxlLCBjb2xsaWRpbmdDb2xsaWRhYmxlcyk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtBcnJheS48Q29sbGlkYWJsZVBoeXNpY3NKb2I+fSBqb2JzXG4gKi9cbmZ1bmN0aW9uIGRldGVybWluZUpvYnNBdFJlc3Qoam9icykge1xuICBqb2JzLmZvckVhY2goam9iID0+IGpvYi5pc0F0UmVzdCA9IF9pc0pvYkF0UmVzdChqb2IpKTtcbn1cblxuZnVuY3Rpb24gcmVjb3JkT2xkQ29sbGlzaW9uc0ZvckRldk1vZGVGb3JBbGxDb2xsaWRhYmxlcygpIHtcbiAgY29sbGlkYWJsZVN0b3JlLmZvckVhY2goX3JlY29yZE9sZENvbGxpc2lvbnNGb3JEZXZNb2RlRm9yQ29sbGlkYWJsZSk7XG59XG5cbi8qKlxuICogTG9ncyBhIHdhcm5pbmcgbWVzc2FnZSBmb3IgYW55IHBhaXIgb2Ygb2JqZWN0cyB0aGF0IGludGVyc2VjdC5cbiAqL1xuZnVuY3Rpb24gY2hlY2tUaGF0Tm9PYmplY3RzQ29sbGlkZSgpIHtcbiAgLy8gQnJvYWQtcGhhc2UgY29sbGlzaW9uIGRldGVjdGlvbiAocGFpcnMgd2hvc2UgYm91bmRpbmcgdm9sdW1lcyBpbnRlcnNlY3QpLlxuICBsZXQgY29sbGlzaW9ucyA9IGNvbGxpZGFibGVTdG9yZS5nZXRQb3NzaWJsZUNvbGxpc2lvbnNGb3JBbGxDb2xsaWRhYmxlcygpO1xuXG4gIC8vIE5hcnJvdy1waGFzZSBjb2xsaXNpb24gZGV0ZWN0aW9uIChwYWlycyB0aGF0IGFjdHVhbGx5IGludGVyc2VjdCkuXG4gIGNvbGxpc2lvbnMgPSBfZGV0ZWN0UHJlY2lzZUNvbGxpc2lvbnNGcm9tQ29sbGlzaW9ucyhjb2xsaXNpb25zKTtcblxuICBjb2xsaXNpb25zLmZvckVhY2goY29sbGlzaW9uID0+IHtcbiAgICBjb25zb2xlLndhcm4oJ09iamVjdHMgc3RpbGwgaW50ZXJzZWN0IGFmdGVyIGNvbGxpc2lvbiByZXNvbHV0aW9uJywgY29sbGlzaW9uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGNvbGxpc2lvbiBvYmplY3RzIHRoYXQgcmVjb3JkIHRoZSB0aW1lIG9mIGNvbGxpc2lvbiBhbmQgdGhlIGNvbGxpZGFibGVzIGluIHRoZSBjb2xsaXNpb24uXG4gKlxuICogQWxzbyByZWNvcmQgcmVmZXJlbmNlcyB0byB0aGVzZSBjb2xsaXNpb25zIG9uIHRoZSBjb2xsaWRhYmxlcy5cbiAqXG4gKiBAcGFyYW0ge0NvbGxpZGFibGV9IGNvbGxpZGFibGVcbiAqIEBwYXJhbSB7QXJyYXkuPENvbGxpZGFibGU+fSBjb2xsaWRpbmdDb2xsaWRhYmxlc1xuICogQHBhcmFtIHtET01IaWdoUmVzVGltZVN0YW1wfSBlbGFwc2VkVGltZVxuICogQHJldHVybnMge0FycmF5LjxDb2xsaXNpb24+fVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX3JlY29yZENvbGxpc2lvbnMoY29sbGlkYWJsZSwgY29sbGlkaW5nQ29sbGlkYWJsZXMsIGVsYXBzZWRUaW1lKSB7XG4gIHJldHVybiBjb2xsaWRpbmdDb2xsaWRhYmxlcy5tYXAob3RoZXIgPT4ge1xuICAgIGNvbnN0IGNvbGxpc2lvbiA9IHtcbiAgICAgIGNvbGxpZGFibGVBOiBjb2xsaWRhYmxlLFxuICAgICAgY29sbGlkYWJsZUI6IG90aGVyLFxuICAgICAgdGltZTogZWxhcHNlZFRpbWVcbiAgICB9O1xuXG4gICAgLy8gUmVjb3JkIHRoZSBmYWN0IHRoYXQgdGhlc2Ugb2JqZWN0cyBjb2xsaWRlZCAodGhlIE1vZGVsQ29udHJvbGxlciBtYXkgd2FudCB0byBoYW5kbGUgdGhpcykuXG4gICAgY29sbGlzaW9uLmNvbGxpZGFibGVBLmNvbGxpc2lvbnMucHVzaChjb2xsaXNpb24pO1xuICAgIGNvbGxpc2lvbi5jb2xsaWRhYmxlQi5jb2xsaXNpb25zLnB1c2goY29sbGlzaW9uKTtcblxuICAgIHJldHVybiBjb2xsaXNpb247XG4gIH0pO1xufVxuXG4vKipcbiAqIE5hcnJvdy1waGFzZSBjb2xsaXNpb24gZGV0ZWN0aW9uLlxuICpcbiAqIEdpdmVuIGEgbGlzdCBvZiBwb3NzaWJsZSBjb2xsaXNpb24gcGFpcnMsIGZpbHRlciBvdXQgd2hpY2ggcGFpcnMgYXJlIGFjdHVhbGx5IGNvbGxpZGluZy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5LjxDb2xsaXNpb24+fSBjb2xsaXNpb25zXG4gKiBAcmV0dXJucyB7QXJyYXkuPENvbGxpc2lvbj59XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfZGV0ZWN0UHJlY2lzZUNvbGxpc2lvbnNGcm9tQ29sbGlzaW9ucyhjb2xsaXNpb25zKSB7XG4gIHJldHVybiBjb2xsaXNpb25zLmZpbHRlcihjb2xsaXNpb24gPT4ge1xuICAgIC8vIFRPRE86XG4gICAgLy8gLSBVc2UgdGVtcG9yYWwgYmlzZWN0aW9uIHdpdGggZGlzY3JldGUgc3ViLXRpbWUgc3RlcHMgdG8gZmluZCB0aW1lIG9mIGNvbGxpc2lvbiAodXNlXG4gICAgLy8gICAgICAgeC12cy15LXNwZWNpZmljIGludGVyc2VjdGlvbiBkZXRlY3Rpb24gbWV0aG9kcykuXG4gICAgLy8gLSBNYWtlIHN1cmUgdGhlIGNvbGxpc2lvbiBvYmplY3QgaXMgc2V0IHVwIHdpdGggdGhlIFwicHJldmlvdXNTdGF0ZVwiIGZyb20gdGhlIHN1Yi1zdGVwXG4gICAgLy8gICBiZWZvcmUgY29sbGlzaW9uIGFuZCB0aGUgdGltZSBmcm9tIHRoZSBzdWItc3RlcCBhZnRlciBjb2xsaXNpb24gKGRldGVybWluZWQgZnJvbSB0aGVcbiAgICAvLyAgIHByZXZpb3VzIHRlbXBvcmFsIGJpc2VjdGlvbiBzZWFyY2guLi4pXG5cbiAgICByZXR1cm4gZGV0ZWN0SW50ZXJzZWN0aW9uKGNvbGxpc2lvbi5jb2xsaWRhYmxlQSwgY29sbGlzaW9uLmNvbGxpZGFibGVCKTtcbiAgfSk7XG59XG5cbi8qKlxuICogTmFycm93LXBoYXNlIGNvbGxpc2lvbiBkZXRlY3Rpb24uXG4gKlxuICogR2l2ZW4gYSBsaXN0IG9mIHBvc3NpYmxlIGNvbGxpc2lvbiBwYWlycywgZmlsdGVyIG91dCB3aGljaCBwYWlycyBhcmUgYWN0dWFsbHkgY29sbGlkaW5nLlxuICpcbiAqIEBwYXJhbSB7Q29sbGlkYWJsZX0gY29sbGlkYWJsZVxuICogQHBhcmFtIHtBcnJheS48Q29sbGlkYWJsZT59IGNvbGxpZGluZ0NvbGxpZGFibGVzXG4gKiBAcmV0dXJucyB7QXJyYXkuPENvbGxpZGFibGU+fVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX2RldGVjdFByZWNpc2VDb2xsaXNpb25zRnJvbUNvbGxpZGluZ0NvbGxpZGFibGVzKGNvbGxpZGFibGUsIGNvbGxpZGluZ0NvbGxpZGFibGVzKSB7XG4gIHJldHVybiBjb2xsaWRpbmdDb2xsaWRhYmxlcy5maWx0ZXIob3RoZXIgPT4ge1xuICAgIC8vIFRPRE86XG4gICAgLy8gLSBVc2UgdGVtcG9yYWwgYmlzZWN0aW9uIHdpdGggZGlzY3JldGUgc3ViLXRpbWUgc3RlcHMgdG8gZmluZCB0aW1lIG9mIGNvbGxpc2lvbiAodXNlXG4gICAgLy8gICAgICAgeC12cy15LXNwZWNpZmljIGludGVyc2VjdGlvbiBkZXRlY3Rpb24gbWV0aG9kcykuXG4gICAgLy8gLSBNYWtlIHN1cmUgdGhlIGNvbGxpc2lvbiBvYmplY3QgaXMgc2V0IHVwIHdpdGggdGhlIFwicHJldmlvdXNTdGF0ZVwiIGZyb20gdGhlIHN1Yi1zdGVwXG4gICAgLy8gICBiZWZvcmUgY29sbGlzaW9uIGFuZCB0aGUgdGltZSBmcm9tIHRoZSBzdWItc3RlcCBhZnRlciBjb2xsaXNpb24gKGRldGVybWluZWQgZnJvbSB0aGVcbiAgICAvLyAgIHByZXZpb3VzIHRlbXBvcmFsIGJpc2VjdGlvbiBzZWFyY2guLi4pXG5cbiAgICByZXR1cm4gZGV0ZWN0SW50ZXJzZWN0aW9uKGNvbGxpZGFibGUsIG90aGVyKTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlIHRoZSBpbnRlcnNlY3Rpb24gcG9zaXRpb24gYW5kIGNvbnRhY3Qgbm9ybWFsIG9mIGVhY2ggY29sbGlzaW9uLlxuICpcbiAqIEBwYXJhbSB7QXJyYXkuPENvbGxpc2lvbj59IGNvbGxpc2lvbnNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9jYWxjdWxhdGVQb2ludHNPZkNvbnRhY3QoY29sbGlzaW9ucykge1xuICBjb2xsaXNpb25zLmZvckVhY2goY2FsY3VsYXRlQ29udGFjdCk7XG59XG5cbi8qKlxuICogVXBkYXRlcyB0aGUgbGluZWFyIGFuZCBhbmd1bGFyIG1vbWVudGEgb2YgZWFjaCBib2R5IGluIHJlc3BvbnNlIHRvIGl0cyBjb2xsaXNpb24uXG4gKlxuICogQHBhcmFtIHtBcnJheS48Q29sbGlzaW9uPn0gY29sbGlzaW9uc1xuICogQHBhcmFtIHtQaHlzaWNzQ29uZmlnfSBwaHlzaWNzUGFyYW1zXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfcmVzb2x2ZUNvbGxpc2lvbnMoY29sbGlzaW9ucywgcGh5c2ljc1BhcmFtcykge1xuICBjb2xsaXNpb25zLmZvckVhY2goY29sbGlzaW9uID0+IHtcbiAgICAvLyBJZiBuZWl0aGVyIHBoeXNpY3Mgam9iIG5lZWRzIHRoZSBzdGFuZGFyZCBjb2xsaXNpb24gcmVzdGl0dXRpb24sIHRoZW4gZG9uJ3QgZG8gaXQuXG4gICAgaWYgKF9ub3RpZnlQaHlzaWNzSm9ic09mQ29sbGlzaW9uKGNvbGxpc2lvbikpIHtcbiAgICAgIGlmIChjb2xsaXNpb24uY29sbGlkYWJsZUEucGh5c2ljc0pvYiAmJiBjb2xsaXNpb24uY29sbGlkYWJsZUIucGh5c2ljc0pvYikge1xuICAgICAgICAvLyBOZWl0aGVyIG9mIHRoZSBjb2xsaWRhYmxlcyBpcyBzdGF0aW9uYXJ5LlxuICAgICAgICBfcmVzb2x2ZUNvbGxpc2lvbihjb2xsaXNpb24sIHBoeXNpY3NQYXJhbXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gT25lIG9mIHRoZSB0d28gY29sbGlkYWJsZXMgaXMgc3RhdGlvbmFyeS5cbiAgICAgICAgX3Jlc29sdmVDb2xsaXNpb25XaXRoU3RhdGlvbmFyeU9iamVjdChjb2xsaXNpb24sIHBoeXNpY3NQYXJhbXMpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtDb2xsaXNpb259IGNvbGxpc2lvblxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgb25lIG9mIHRoZSBQaHlzaWNzSm9icyBuZWVkIHRoZSBzdGFuZGFyZCBjb2xsaXNpb24gcmVzdGl0dXRpb24gdG9cbiAqIHByb2NlZWQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfbm90aWZ5UGh5c2ljc0pvYnNPZkNvbGxpc2lvbihjb2xsaXNpb24pIHtcbiAgcmV0dXJuIGNvbGxpc2lvbi5jb2xsaWRhYmxlQS5waHlzaWNzSm9iLmhhbmRsZUNvbGxpc2lvbihjb2xsaXNpb24pIHx8XG4gICAgICBjb2xsaXNpb24uY29sbGlkYWJsZUIucGh5c2ljc0pvYi5oYW5kbGVDb2xsaXNpb24oY29sbGlzaW9uKVxufVxuXG4vKipcbiAqIFJlc29sdmUgYSBjb2xsaXNpb24gYmV0d2VlbiB0d28gbW92aW5nLCBwaHlzaWNzLWJhc2VkIG9iamVjdHMuXG4gKlxuICogVGhpcyBpcyBiYXNlZCBvbiBjb2xsaXNpb24tcmVzcG9uc2UgYWxnb3JpdGhtcyBmcm9tIFdpa2lwZWRpYVxuICogKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbGxpc2lvbl9yZXNwb25zZSNJbXB1bHNlLWJhc2VkX3JlYWN0aW9uX21vZGVsKS5cbiAqXG4gKiBAcGFyYW0ge0NvbGxpc2lvbn0gY29sbGlzaW9uXG4gKiBAcGFyYW0ge1BoeXNpY3NDb25maWd9IHBoeXNpY3NQYXJhbXNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9yZXNvbHZlQ29sbGlzaW9uKGNvbGxpc2lvbiwgcGh5c2ljc1BhcmFtcykge1xuICBjb25zdCBjb2xsaWRhYmxlQSA9IGNvbGxpc2lvbi5jb2xsaWRhYmxlQTtcbiAgY29uc3QgY29sbGlkYWJsZUIgPSBjb2xsaXNpb24uY29sbGlkYWJsZUI7XG4gIGNvbnN0IHByZXZpb3VzU3RhdGVBID0gY29sbGlkYWJsZUEucGh5c2ljc0pvYi5wcmV2aW91c1N0YXRlO1xuICBjb25zdCBwcmV2aW91c1N0YXRlQiA9IGNvbGxpZGFibGVCLnBoeXNpY3NKb2IucHJldmlvdXNTdGF0ZTtcbiAgY29uc3QgbmV4dFN0YXRlQSA9IGNvbGxpZGFibGVBLnBoeXNpY3NKb2IuY3VycmVudFN0YXRlO1xuICBjb25zdCBuZXh0U3RhdGVCID0gY29sbGlkYWJsZUIucGh5c2ljc0pvYi5jdXJyZW50U3RhdGU7XG4gIGNvbnN0IGNlbnRlckEgPSBjb2xsaWRhYmxlQS5jZW50ZXJPZk1hc3M7XG4gIGNvbnN0IGNlbnRlckIgPSBjb2xsaWRhYmxlQi5jZW50ZXJPZk1hc3M7XG4gIGNvbnN0IGNvbnRhY3RQb2ludCA9IGNvbGxpc2lvbi5jb250YWN0UG9pbnQ7XG5cbiAgY29uc3QgY29udGFjdFBvaW50T2Zmc2V0QSA9IHRtcFZlYzM7XG4gIHZlYzMuc3VidHJhY3QoY29udGFjdFBvaW50T2Zmc2V0QSwgY29udGFjdFBvaW50LCBjZW50ZXJBKTtcbiAgY29uc3QgY29udGFjdFBvaW50T2Zmc2V0QiA9IHRtcFZlYzQ7XG4gIHZlYzMuc3VidHJhY3QoY29udGFjdFBvaW50T2Zmc2V0QiwgY29udGFjdFBvaW50LCBjZW50ZXJCKTtcblxuICAvL1xuICAvLyBDYWxjdWxhdGUgdGhlIHJlbGF0aXZlIHZlbG9jaXR5IG9mIHRoZSBib2RpZXMgYXQgdGhlIHBvaW50IG9mIGNvbnRhY3QuXG4gIC8vXG4gIC8vIFdlIHVzZSB0aGUgdmVsb2NpdHkgZnJvbSB0aGUgcHJldmlvdXMgc3RhdGUsIHNpbmNlIGl0IGlzIHRoZSB2ZWxvY2l0eSB0aGF0IGxlZCB0byB0aGVcbiAgLy8gY29sbGlzaW9uLlxuICAvL1xuXG4gIGNvbnN0IHZlbG9jaXR5QSA9IHRtcFZlYzE7XG4gIHZlYzMuY3Jvc3ModG1wVmVjMSwgcHJldmlvdXNTdGF0ZUEuYW5ndWxhclZlbG9jaXR5LCBjb250YWN0UG9pbnRPZmZzZXRBKTtcbiAgdmVjMy5hZGQodmVsb2NpdHlBLCBwcmV2aW91c1N0YXRlQS52ZWxvY2l0eSwgdG1wVmVjMSk7XG5cbiAgY29uc3QgdmVsb2NpdHlCID0gdG1wVmVjMjtcbiAgdmVjMy5jcm9zcyh0bXBWZWMyLCBwcmV2aW91c1N0YXRlQi5hbmd1bGFyVmVsb2NpdHksIGNvbnRhY3RQb2ludE9mZnNldEIpO1xuICB2ZWMzLmFkZCh2ZWxvY2l0eUIsIHByZXZpb3VzU3RhdGVCLnZlbG9jaXR5LCB0bXBWZWMyKTtcblxuICBjb25zdCByZWxhdGl2ZVZlbG9jaXR5ID0gdmVjMy5jcmVhdGUoKTtcbiAgdmVjMy5zdWJ0cmFjdChyZWxhdGl2ZVZlbG9jaXR5LCB2ZWxvY2l0eUIsIHZlbG9jaXR5QSk7XG5cbiAgaWYgKHZlYzMuZG90KHJlbGF0aXZlVmVsb2NpdHksIGNvbGxpc2lvbi5jb250YWN0Tm9ybWFsKSA+PSAwKSB7XG4gICAgLy8gSWYgdGhlIHJlbGF0aXZlIHZlbG9jaXR5IGlzIG5vdCBwb2ludGluZyBhZ2FpbnN0IHRoZSBub3JtYWwsIHRoZW4gdGhlIG5vcm1hbCB3YXMgY2FsY3VsYXRlZFxuICAgIC8vIGluY29ycmVjdGx5ICh0aGlzIGlzIGxpa2VseSBkdWUgdG8gdGhlIHRpbWUgc3RlcCBiZWluZyB0b28gbGFyZ2UgYW5kIHRoZSBmYWN0IHRoYXQgb3VyXG4gICAgLy8gY29udGFjdCBjYWxjdWxhdGlvbnMgZG9uJ3QgY29uc2lkZXIgdmVsb2NpdHkpLiBTbyB1cGRhdGUgdGhlIGNvbnRhY3Qgbm9ybWFsIHRvIGJlIGluIHRoZVxuICAgIC8vIGRpcmVjdGlvbiBvZiB0aGUgcmVsYXRpdmUgdmVsb2NpdHkuXG5cbiAgICAvLyBUT0RPOiBDaGVjayB0aGF0IHRoaXMgd29ya3MgYXMgZXhwZWN0ZWQuXG5cbiAgICAvLyBjb25zb2xlLndhcm4oJ05vbi1jb2xsaXNpb24gYmVjYXVzZSBvYmplY3RzIGFyZSBtb3ZpbmcgYXdheSBmcm9tIGVhY2ggb3RoZXIuJyk7XG5cbiAgICB2ZWMzLmNvcHkoY29sbGlzaW9uLmNvbnRhY3ROb3JtYWwsIHJlbGF0aXZlVmVsb2NpdHkpO1xuICAgIHZlYzMubm9ybWFsaXplKGNvbGxpc2lvbi5jb250YWN0Tm9ybWFsLCBjb2xsaXNpb24uY29udGFjdE5vcm1hbCk7XG4gICAgdmVjMy5uZWdhdGUoY29sbGlzaW9uLmNvbnRhY3ROb3JtYWwsIGNvbGxpc2lvbi5jb250YWN0Tm9ybWFsKTtcbiAgfVxuXG4gIF9hcHBseUltcHVsc2VGcm9tQ29sbGlzaW9uKGNvbGxpc2lvbiwgcmVsYXRpdmVWZWxvY2l0eSwgY29udGFjdFBvaW50T2Zmc2V0QSxcbiAgICAgIGNvbnRhY3RQb2ludE9mZnNldEIsIHBoeXNpY3NQYXJhbXMpO1xuXG4gIC8vIE5PVEU6IFRoaXMgc3RhdGUgcmV2ZXJzaW9uIGlzIG9ubHkgYXBwbGllZCB0byBjb2xsaWRhYmxlQS4gVGhpcyBhc3N1bWVzIHRoYXQgb25seSBBIGlzIG1vdmluZ1xuICAvLyBkdXJpbmcgdGhpcyBpdGVyYXRpb24gb2YgdGhlIGNvbGxpc2lvbiBwaXBlbGluZS5cblxuICAvLyBSZXZlcnQgdG8gdGhlIHBvc2l0aW9uIGFuZCBvcmllbnRhdGlvbiBmcm9tIGltbWVkaWF0ZWx5IGJlZm9yZSB0aGUgY29sbGlzaW9uLlxuICB2ZWMzLmNvcHkobmV4dFN0YXRlQS5wb3NpdGlvbiwgcHJldmlvdXNTdGF0ZUEucG9zaXRpb24pO1xuICBxdWF0LmNvcHkobmV4dFN0YXRlQS5vcmllbnRhdGlvbiwgcHJldmlvdXNTdGF0ZUEub3JpZW50YXRpb24pO1xuXG4gIC8vIEFsc28gcmV2ZXJ0IHRoZSBjb2xsaWRhYmxlcycgcG9zaXRpb24gYW5kIG9yaWVudGF0aW9uLlxuICBjb2xsaWRhYmxlQS5wb3NpdGlvbiA9IHByZXZpb3VzU3RhdGVBLnBvc2l0aW9uO1xuICBjb2xsaWRhYmxlQS5vcmllbnRhdGlvbiA9IHByZXZpb3VzU3RhdGVBLm9yaWVudGF0aW9uO1xuXG4gIG5leHRTdGF0ZUEudXBkYXRlRGVwZW5kZW50RmllbGRzKCk7XG4gIG5leHRTdGF0ZUIudXBkYXRlRGVwZW5kZW50RmllbGRzKCk7XG59XG5cbi8qKlxuICogUmVzb2x2ZSBhIGNvbGxpc2lvbiBiZXR3ZWVuIG9uZSBtb3ZpbmcsIHBoeXNpY3MtYmFzZWQgb2JqZWN0IGFuZCBvbmUgc3RhdGlvbmFyeSBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtDb2xsaXNpb259IGNvbGxpc2lvblxuICogQHBhcmFtIHtQaHlzaWNzQ29uZmlnfSBwaHlzaWNzUGFyYW1zXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfcmVzb2x2ZUNvbGxpc2lvbldpdGhTdGF0aW9uYXJ5T2JqZWN0KGNvbGxpc2lvbiwgcGh5c2ljc1BhcmFtcykge1xuICBjb25zdCBjb250YWN0Tm9ybWFsID0gY29sbGlzaW9uLmNvbnRhY3ROb3JtYWw7XG5cbiAgbGV0IHBoeXNpY3NDb2xsaWRhYmxlO1xuICBpZiAoY29sbGlzaW9uLmNvbGxpZGFibGVBLnBoeXNpY3NKb2IpIHtcbiAgICBwaHlzaWNzQ29sbGlkYWJsZSA9IGNvbGxpc2lvbi5jb2xsaWRhYmxlQTtcbiAgfSBlbHNlIHtcbiAgICBwaHlzaWNzQ29sbGlkYWJsZSA9IGNvbGxpc2lvbi5jb2xsaWRhYmxlQjtcbiAgICB2ZWMzLm5lZ2F0ZShjb250YWN0Tm9ybWFsLCBjb250YWN0Tm9ybWFsKTtcbiAgfVxuXG4gIGNvbnN0IHByZXZpb3VzU3RhdGUgPSBwaHlzaWNzQ29sbGlkYWJsZS5waHlzaWNzSm9iLnByZXZpb3VzU3RhdGU7XG4gIGNvbnN0IG5leHRTdGF0ZSA9IHBoeXNpY3NDb2xsaWRhYmxlLnBoeXNpY3NKb2IuY3VycmVudFN0YXRlO1xuICBjb25zdCBjZW50ZXIgPSBwaHlzaWNzQ29sbGlkYWJsZS5jZW50ZXJPZk1hc3M7XG4gIGNvbnN0IGNvbnRhY3RQb2ludCA9IGNvbGxpc2lvbi5jb250YWN0UG9pbnQ7XG5cbiAgY29uc3QgY29udGFjdFBvaW50T2Zmc2V0ID0gdG1wVmVjMztcbiAgdmVjMy5zdWJ0cmFjdChjb250YWN0UG9pbnRPZmZzZXQsIGNvbnRhY3RQb2ludCwgY2VudGVyKTtcblxuICAvLyBDYWxjdWxhdGUgdGhlIHJlbGF0aXZlIHZlbG9jaXR5IG9mIHRoZSBib2RpZXMgYXQgdGhlIHBvaW50IG9mIGNvbnRhY3QuIFdlIHVzZSB0aGUgdmVsb2NpdHkgZnJvbVxuICAvLyB0aGUgcHJldmlvdXMgc3RhdGUsIHNpbmNlIGl0IGlzIHRoZSB2ZWxvY2l0eSB0aGF0IGxlZCB0byB0aGUgY29sbGlzaW9uLlxuICBjb25zdCB2ZWxvY2l0eSA9IHZlYzMuY3JlYXRlKCk7XG4gIHZlYzMuY3Jvc3ModG1wVmVjMSwgcHJldmlvdXNTdGF0ZS5hbmd1bGFyVmVsb2NpdHksIGNvbnRhY3RQb2ludE9mZnNldCk7XG4gIHZlYzMuYWRkKHZlbG9jaXR5LCBwcmV2aW91c1N0YXRlLnZlbG9jaXR5LCB0bXBWZWMxKTtcblxuICBpZiAodmVjMy5kb3QodmVsb2NpdHksIGNvbnRhY3ROb3JtYWwpIDw9IDApIHtcbiAgICAvLyBJZiB0aGUgcmVsYXRpdmUgdmVsb2NpdHkgaXMgbm90IHBvaW50aW5nIGFnYWluc3QgdGhlIG5vcm1hbCwgdGhlbiB0aGUgbm9ybWFsIHdhcyBjYWxjdWxhdGVkXG4gICAgLy8gaW5jb3JyZWN0bHkgKHRoaXMgaXMgbGlrZWx5IGR1ZSB0byB0aGUgdGltZSBzdGVwIGJlaW5nIHRvbyBsYXJnZSBhbmQgdGhlIGZhY3QgdGhhdCBvdXJcbiAgICAvLyBjb250YWN0IGNhbGN1bGF0aW9ucyBkb24ndCBjb25zaWRlciB2ZWxvY2l0eSkuIFNvIHVwZGF0ZSB0aGUgY29udGFjdCBub3JtYWwgdG8gYmUgaW4gdGhlXG4gICAgLy8gZGlyZWN0aW9uIG9mIHRoZSByZWxhdGl2ZSB2ZWxvY2l0eS5cblxuICAgIC8vIFRPRE86IENoZWNrIHRoYXQgdGhpcyB3b3JrcyBhcyBleHBlY3RlZC5cblxuICAgIGNvbnNvbGUud2FybignTm9uLWNvbGxpc2lvbiBiZWNhdXNlIG9iamVjdCBpcyBtb3ZpbmcgYXdheSBmcm9tIHN0YXRpb25hcnkgb2JqZWN0LicpO1xuXG4gICAgdmVjMy5jb3B5KGNvbGxpc2lvbi5jb250YWN0Tm9ybWFsLCB2ZWxvY2l0eSk7XG4gICAgdmVjMy5ub3JtYWxpemUoY29sbGlzaW9uLmNvbnRhY3ROb3JtYWwsIGNvbGxpc2lvbi5jb250YWN0Tm9ybWFsKTtcbiAgICB2ZWMzLm5lZ2F0ZShjb2xsaXNpb24uY29udGFjdE5vcm1hbCwgY29sbGlzaW9uLmNvbnRhY3ROb3JtYWwpO1xuICB9XG5cbiAgX2FwcGx5SW1wdWxzZUZyb21Db2xsaXNpb25XaXRoU3RhdGlvbmFyeU9iamVjdChwaHlzaWNzQ29sbGlkYWJsZSwgY29sbGlzaW9uLCB2ZWxvY2l0eSxcbiAgICAgIGNvbnRhY3RQb2ludE9mZnNldCwgcGh5c2ljc1BhcmFtcyk7XG5cbiAgLy8gUmV2ZXJ0IHRvIHRoZSBwb3NpdGlvbiBhbmQgb3JpZW50YXRpb24gZnJvbSBpbW1lZGlhdGVseSBiZWZvcmUgdGhlIGNvbGxpc2lvbi5cbiAgdmVjMy5jb3B5KG5leHRTdGF0ZS5wb3NpdGlvbiwgcHJldmlvdXNTdGF0ZS5wb3NpdGlvbik7XG4gIHF1YXQuY29weShuZXh0U3RhdGUub3JpZW50YXRpb24sIHByZXZpb3VzU3RhdGUub3JpZW50YXRpb24pO1xuXG4gIC8vIEFsc28gcmV2ZXJ0IHRoZSBjb2xsaWRhYmxlJ3MgcG9zaXRpb24gYW5kIG9yaWVudGF0aW9uLlxuICBwaHlzaWNzQ29sbGlkYWJsZS5wb3NpdGlvbiA9IHByZXZpb3VzU3RhdGUucG9zaXRpb247XG4gIHBoeXNpY3NDb2xsaWRhYmxlLm9yaWVudGF0aW9uID0gcHJldmlvdXNTdGF0ZS5vcmllbnRhdGlvbjtcblxuICBuZXh0U3RhdGUudXBkYXRlRGVwZW5kZW50RmllbGRzKCk7XG59XG5cbi8qKlxuICogVGhpcyBpcyBiYXNlZCBvbiBjb2xsaXNpb24tcmVzcG9uc2UgYWxnb3JpdGhtcyBmcm9tIFdpa2lwZWRpYVxuICogKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbGxpc2lvbl9yZXNwb25zZSNJbXB1bHNlLWJhc2VkX3JlYWN0aW9uX21vZGVsKS4gVGhpcyBhbGdvcml0aG1cbiAqIGhhcyBiZWVuIHNpbXBsaWZpZWQgYnkgYXNzdW1pbmcgdGhlIHN0YXRpb25hcnkgYm9keSBoYXMgaW5maW5pdGUgbWFzcyBhbmQgemVybyB2ZWxvY2l0eS5cbiAqXG4gKiBAcGFyYW0ge0NvbGxpc2lvbn0gY29sbGlzaW9uXG4gKiBAcGFyYW0ge3ZlYzN9IHJlbGF0aXZlVmVsb2NpdHlcbiAqIEBwYXJhbSB7dmVjM30gY29udGFjdFBvaW50T2Zmc2V0QVxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0UG9pbnRPZmZzZXRCXG4gKiBAcGFyYW0ge1BoeXNpY3NDb25maWd9IHBoeXNpY3NQYXJhbXNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9hcHBseUltcHVsc2VGcm9tQ29sbGlzaW9uKGNvbGxpc2lvbiwgcmVsYXRpdmVWZWxvY2l0eSwgY29udGFjdFBvaW50T2Zmc2V0QSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhY3RQb2ludE9mZnNldEIsIHBoeXNpY3NQYXJhbXMpIHtcbiAgY29uc3QgY29sbGlkYWJsZUEgPSBjb2xsaXNpb24uY29sbGlkYWJsZUE7XG4gIGNvbnN0IGNvbGxpZGFibGVCID0gY29sbGlzaW9uLmNvbGxpZGFibGVCO1xuXG4gIGNvbnN0IHN0YXRlQSA9IGNvbGxpZGFibGVBLnBoeXNpY3NKb2IuY3VycmVudFN0YXRlO1xuICBjb25zdCBzdGF0ZUIgPSBjb2xsaWRhYmxlQi5waHlzaWNzSm9iLmN1cnJlbnRTdGF0ZTtcblxuICBjb25zdCBjb250YWN0Tm9ybWFsID0gY29sbGlzaW9uLmNvbnRhY3ROb3JtYWw7XG5cbiAgLy9cbiAgLy8gQ2FsY3VsYXRlIGFuZCBhcHBseSB0aGUgbWFpbiBjb2xsaXNpb24gaW1wdWxzZS5cbiAgLy9cblxuICB2ZWMzLnNjYWxlKHRtcFZlYzEsIHJlbGF0aXZlVmVsb2NpdHksIC0oMSArIHBoeXNpY3NQYXJhbXMuY29lZmZpY2llbnRPZlJlc3RpdHV0aW9uKSk7XG4gIGNvbnN0IG51bWVyYXRvciA9IHZlYzMuZG90KHRtcFZlYzEsIGNvbnRhY3ROb3JtYWwpO1xuXG4gIHZlYzMuY3Jvc3ModG1wVmVjMSwgY29udGFjdFBvaW50T2Zmc2V0QSwgY29udGFjdE5vcm1hbCk7XG4gIHZlYzMudHJhbnNmb3JtTWF0Myh0bXBWZWMxLCB0bXBWZWMxLCBzdGF0ZUEuaW52ZXJzZUluZXJ0aWFUZW5zb3IpO1xuICB2ZWMzLmNyb3NzKHRtcFZlYzEsIHRtcFZlYzEsIGNvbnRhY3RQb2ludE9mZnNldEEpO1xuXG4gIHZlYzMuY3Jvc3ModG1wVmVjMiwgY29udGFjdFBvaW50T2Zmc2V0QiwgY29udGFjdE5vcm1hbCk7XG4gIHZlYzMudHJhbnNmb3JtTWF0Myh0bXBWZWMyLCB0bXBWZWMyLCBzdGF0ZUIuaW52ZXJzZUluZXJ0aWFUZW5zb3IpO1xuICB2ZWMzLmNyb3NzKHRtcFZlYzIsIHRtcFZlYzIsIGNvbnRhY3RQb2ludE9mZnNldEIpO1xuXG4gIHZlYzMuYWRkKHRtcFZlYzEsIHRtcFZlYzEsIHRtcFZlYzIpO1xuICBjb25zdCBkZW5vbWluYXRvciA9IHZlYzMuZG90KHRtcFZlYzEsIGNvbnRhY3ROb3JtYWwpICsgc3RhdGVBLmludmVyc2VNYXNzICsgc3RhdGVCLmludmVyc2VNYXNzO1xuXG4gIGNvbnN0IGltcHVsc2VNYWduaXR1ZGUgPSBudW1lcmF0b3IgLyBkZW5vbWluYXRvcjtcblxuICBfYXBwbHlJbXB1bHNlKHN0YXRlQSwgLWltcHVsc2VNYWduaXR1ZGUsIGNvbnRhY3ROb3JtYWwsIGNvbnRhY3RQb2ludE9mZnNldEEpO1xuICBfYXBwbHlJbXB1bHNlKHN0YXRlQiwgaW1wdWxzZU1hZ25pdHVkZSwgY29udGFjdE5vcm1hbCwgY29udGFjdFBvaW50T2Zmc2V0Qik7XG5cbiAgLy9cbiAgLy8gQ2FsY3VsYXRlIGFuZCBhcHBseSBhIGR5bmFtaWMgZnJpY3Rpb24gaW1wdWxzZS5cbiAgLy9cblxuICBjb25zdCBmcmljdGlvbkltcHVsc2VNYWduaXR1ZGUgPSBpbXB1bHNlTWFnbml0dWRlICogcGh5c2ljc1BhcmFtcy5jb2VmZmljaWVudE9mRnJpY3Rpb247XG5cbiAgY29uc3QgdGFuZ2VudCA9IHRtcFZlYzI7XG4gIHZlYzMuc2NhbGUodG1wVmVjMSwgY29udGFjdE5vcm1hbCwgdmVjMy5kb3QocmVsYXRpdmVWZWxvY2l0eSwgY29udGFjdE5vcm1hbCkpO1xuICB2ZWMzLnN1YnRyYWN0KHRhbmdlbnQsIHJlbGF0aXZlVmVsb2NpdHksIHRtcFZlYzEpO1xuICB2ZWMzLm5vcm1hbGl6ZSh0YW5nZW50LCB0YW5nZW50KTtcblxuICBfYXBwbHlJbXB1bHNlKHN0YXRlQSwgZnJpY3Rpb25JbXB1bHNlTWFnbml0dWRlLCB0YW5nZW50LCBjb250YWN0UG9pbnRPZmZzZXRBKTtcbiAgX2FwcGx5SW1wdWxzZShzdGF0ZUIsIC1mcmljdGlvbkltcHVsc2VNYWduaXR1ZGUsIHRhbmdlbnQsIGNvbnRhY3RQb2ludE9mZnNldEIpO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgYmFzZWQgb24gY29sbGlzaW9uLXJlc3BvbnNlIGFsZ29yaXRobXMgZnJvbSBXaWtpcGVkaWFcbiAqIChodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db2xsaXNpb25fcmVzcG9uc2UjSW1wdWxzZS1iYXNlZF9yZWFjdGlvbl9tb2RlbCkuIFRoaXMgYWxnb3JpdGhtXG4gKiBoYXMgYmVlbiBzaW1wbGlmaWVkIGJ5IGFzc3VtaW5nIHRoZSBzdGF0aW9uYXJ5IGJvZHkgaGFzIGluZmluaXRlIG1hc3MgYW5kIHplcm8gdmVsb2NpdHkuXG4gKlxuICogQHBhcmFtIHtDb2xsaWRhYmxlfSBwaHlzaWNzQ29sbGlkYWJsZVxuICogQHBhcmFtIHtDb2xsaXNpb259IGNvbGxpc2lvblxuICogQHBhcmFtIHt2ZWMzfSB2ZWxvY2l0eVxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0UG9pbnRPZmZzZXRcbiAqIEBwYXJhbSB7UGh5c2ljc0NvbmZpZ30gcGh5c2ljc1BhcmFtc1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX2FwcGx5SW1wdWxzZUZyb21Db2xsaXNpb25XaXRoU3RhdGlvbmFyeU9iamVjdChwaHlzaWNzQ29sbGlkYWJsZSwgY29sbGlzaW9uLCB2ZWxvY2l0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFjdFBvaW50T2Zmc2V0LCBwaHlzaWNzUGFyYW1zKSB7XG4gIGNvbnN0IHN0YXRlID0gcGh5c2ljc0NvbGxpZGFibGUucGh5c2ljc0pvYi5jdXJyZW50U3RhdGU7XG4gIGNvbnN0IGNvbnRhY3ROb3JtYWwgPSBjb2xsaXNpb24uY29udGFjdE5vcm1hbDtcblxuICAvL1xuICAvLyBDYWxjdWxhdGUgYW5kIGFwcGx5IHRoZSBtYWluIGNvbGxpc2lvbiBpbXB1bHNlLlxuICAvL1xuXG4gIHZlYzMuc2NhbGUodG1wVmVjMSwgdmVsb2NpdHksIC0oMSArIHBoeXNpY3NQYXJhbXMuY29lZmZpY2llbnRPZlJlc3RpdHV0aW9uKSk7XG4gIGNvbnN0IG51bWVyYXRvciA9IHZlYzMuZG90KHRtcFZlYzEsIGNvbnRhY3ROb3JtYWwpO1xuXG4gIHZlYzMuY3Jvc3ModG1wVmVjMSwgY29udGFjdFBvaW50T2Zmc2V0LCBjb250YWN0Tm9ybWFsKTtcbiAgdmVjMy50cmFuc2Zvcm1NYXQzKHRtcFZlYzEsIHRtcFZlYzEsIHN0YXRlLmludmVyc2VJbmVydGlhVGVuc29yKTtcbiAgdmVjMy5jcm9zcyh0bXBWZWMxLCB0bXBWZWMxLCBjb250YWN0UG9pbnRPZmZzZXQpO1xuICBjb25zdCBkZW5vbWluYXRvciA9IHZlYzMuZG90KHRtcFZlYzEsIGNvbnRhY3ROb3JtYWwpICsgc3RhdGUuaW52ZXJzZU1hc3M7XG5cbiAgY29uc3QgaW1wdWxzZU1hZ25pdHVkZSA9IG51bWVyYXRvciAvIGRlbm9taW5hdG9yO1xuXG4gIF9hcHBseUltcHVsc2Uoc3RhdGUsIGltcHVsc2VNYWduaXR1ZGUsIGNvbnRhY3ROb3JtYWwsIGNvbnRhY3RQb2ludE9mZnNldCk7XG5cbiAgLy9cbiAgLy8gQ2FsY3VsYXRlIGFuZCBhcHBseSBhIGR5bmFtaWMgZnJpY3Rpb24gaW1wdWxzZS5cbiAgLy9cblxuICBjb25zdCBmcmljdGlvbkltcHVsc2VNYWduaXR1ZGUgPSBpbXB1bHNlTWFnbml0dWRlICogcGh5c2ljc1BhcmFtcy5jb2VmZmljaWVudE9mRnJpY3Rpb247XG5cbiAgY29uc3QgdGFuZ2VudCA9IHRtcFZlYzI7XG4gIHZlYzMuc2NhbGUodG1wVmVjMSwgY29udGFjdE5vcm1hbCwgdmVjMy5kb3QodmVsb2NpdHksIGNvbnRhY3ROb3JtYWwpKTtcbiAgdmVjMy5zdWJ0cmFjdCh0YW5nZW50LCB2ZWxvY2l0eSwgdG1wVmVjMSk7XG4gIHZlYzMubm9ybWFsaXplKHRhbmdlbnQsIHRhbmdlbnQpO1xuXG4gIF9hcHBseUltcHVsc2Uoc3RhdGUsIGZyaWN0aW9uSW1wdWxzZU1hZ25pdHVkZSwgdGFuZ2VudCwgY29udGFjdFBvaW50T2Zmc2V0KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1BoeXNpY3NTdGF0ZX0gc3RhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbXB1bHNlTWFnbml0dWRlXG4gKiBAcGFyYW0ge3ZlYzN9IGltcHVsc2VEaXJlY3Rpb25cbiAqIEBwYXJhbSB7dmVjM30gY29udGFjdFBvaW50T2Zmc2V0XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfYXBwbHlJbXB1bHNlKHN0YXRlLCBpbXB1bHNlTWFnbml0dWRlLCBpbXB1bHNlRGlyZWN0aW9uLCBjb250YWN0UG9pbnRPZmZzZXQpIHtcbiAgLy8gQ2FsY3VsYXRlIHRoZSB1cGRhdGVkIGxpbmVhciBtb21lbnRhLlxuICBjb25zdCBmaW5hbExpbmVhck1vbWVudHVtID0gdmVjMy5jcmVhdGUoKTtcbiAgdmVjMy5zY2FsZUFuZEFkZChmaW5hbExpbmVhck1vbWVudHVtLCBzdGF0ZS5tb21lbnR1bSwgaW1wdWxzZURpcmVjdGlvbiwgaW1wdWxzZU1hZ25pdHVkZSk7XG5cbiAgLy8gQ2FsY3VsYXRlIHRoZSB1cGRhdGVkIGFuZ3VsYXIgbW9tZW50YS5cbiAgY29uc3QgZmluYWxBbmd1bGFyTW9tZW50dW0gPSB2ZWMzLmNyZWF0ZSgpO1xuICB2ZWMzLmNyb3NzKHRtcFZlYzEsIGNvbnRhY3RQb2ludE9mZnNldCwgaW1wdWxzZURpcmVjdGlvbik7XG4gIHZlYzMuc2NhbGVBbmRBZGQoZmluYWxBbmd1bGFyTW9tZW50dW0sIHN0YXRlLmFuZ3VsYXJNb21lbnR1bSwgdG1wVmVjMSwgaW1wdWxzZU1hZ25pdHVkZSk7XG5cbiAgLy8gQXBwbHkgdGhlIHVwZGF0ZWQgbW9tZW50YS5cbiAgdmVjMy5jb3B5KHN0YXRlLm1vbWVudHVtLCBmaW5hbExpbmVhck1vbWVudHVtKTtcbiAgdmVjMy5jb3B5KHN0YXRlLmFuZ3VsYXJNb21lbnR1bSwgZmluYWxBbmd1bGFyTW9tZW50dW0pO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Q29sbGlkYWJsZVBoeXNpY3NKb2J9IGpvYlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfaXNKb2JBdFJlc3Qoam9iKSB7XG4gIHJldHVybiBhcmVWZWMzc0Nsb3NlKGpvYi5jdXJyZW50U3RhdGUucG9zaXRpb24sIGpvYi5wcmV2aW91c1N0YXRlLnBvc2l0aW9uKSAmJlxuICAgICAgYXJlVmVjM3NDbG9zZShqb2IuY3VycmVudFN0YXRlLnZlbG9jaXR5LCBqb2IucHJldmlvdXNTdGF0ZS52ZWxvY2l0eSkgJiZcbiAgICAgIGFyZVZlYzNzQ2xvc2Uoam9iLmN1cnJlbnRTdGF0ZS5vcmllbnRhdGlvbiwgam9iLnByZXZpb3VzU3RhdGUub3JpZW50YXRpb24pICYmXG4gICAgICBfZG9Db2xsaXNpb25zTWF0Y2goam9iLmNvbGxpZGFibGUuY29sbGlzaW9ucywgam9iLmNvbGxpZGFibGUucHJldmlvdXNDb2xsaXNpb25zKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5LjxDb2xsaXNpb24+fSBjb2xsaXNpb25zQVxuICogQHBhcmFtIHtBcnJheS48Q29sbGlzaW9uPn0gY29sbGlzaW9uc0JcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX2RvQ29sbGlzaW9uc01hdGNoKGNvbGxpc2lvbnNBLCBjb2xsaXNpb25zQikge1xuICBjb25zdCBjb3VudCA9IGNvbGxpc2lvbnNBLmxlbmd0aDtcblxuICBpZiAoY291bnQgIT09IGNvbGxpc2lvbnNCLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgIGNvbnN0IGNvbGxpc2lvbkEgPSBjb2xsaXNpb25zQVtpXTtcbiAgICBjb25zdCBjb2xsaXNpb25CID0gY29sbGlzaW9uc0JbaV07XG4gICAgaWYgKGNvbGxpc2lvbkEuY29sbGlkYWJsZUEgIT09IGNvbGxpc2lvbkIuY29sbGlkYWJsZUEgfHxcbiAgICAgICAgY29sbGlzaW9uQS5jb2xsaWRhYmxlQiAhPT0gY29sbGlzaW9uQi5jb2xsaWRhYmxlQiB8fFxuICAgICAgICAhYXJlVmVjM3NDbG9zZShjb2xsaXNpb25BLmNvbnRhY3RQb2ludCwgY29sbGlzaW9uQi5jb250YWN0UG9pbnQpIHx8XG4gICAgICAgICFhcmVWZWMzc0Nsb3NlKGNvbGxpc2lvbkEuY29udGFjdE5vcm1hbCwgY29sbGlzaW9uQi5jb250YWN0Tm9ybWFsKSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogQHBhcmFtIHtDb2xsaWRhYmxlfSBjb2xsaWRhYmxlXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfcmVjb3JkT2xkQ29sbGlzaW9uc0ZvckRldk1vZGVGb3JDb2xsaWRhYmxlKGNvbGxpZGFibGUpIHtcbiAgaWYgKCFjb2xsaWRhYmxlLmV4dHJhUHJldmlvdXNDb2xsaXNpb25zKSB7XG4gICAgY29sbGlkYWJsZS5leHRyYVByZXZpb3VzQ29sbGlzaW9ucyA9IFtdO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDM7IGkgPiAwOyBpLS0pIHtcbiAgICBjb2xsaWRhYmxlLmV4dHJhUHJldmlvdXNDb2xsaXNpb25zW2ldID0gY29sbGlkYWJsZS5leHRyYVByZXZpb3VzQ29sbGlzaW9uc1tpIC0gMV07XG4gIH1cbiAgY29sbGlkYWJsZS5leHRyYVByZXZpb3VzQ29sbGlzaW9uc1swXSA9IGNvbGxpZGFibGUucHJldmlvdXNDb2xsaXNpb25zO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Q29sbGlzaW9ufSBjb2xsaXNpb25cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQ29udHJvbGxlclxuICogQHJldHVybnMge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0T3RoZXJDb250cm9sbGVyRnJvbUNvbGxpc2lvbihjb2xsaXNpb24sIHRoaXNDb250cm9sbGVyKSB7XG4gIGNvbnN0IGNvbnRyb2xsZXJBID0gY29sbGlzaW9uLmNvbGxpZGFibGVBLnBoeXNpY3NKb2IuY29udHJvbGxlcjtcbiAgY29uc3QgY29udHJvbGxlckIgPSBjb2xsaXNpb24uY29sbGlkYWJsZUIucGh5c2ljc0pvYi5jb250cm9sbGVyO1xuICBpZiAoY29udHJvbGxlckEgPT09IHRoaXNDb250cm9sbGVyKSB7XG4gICAgcmV0dXJuIGNvbnRyb2xsZXJCO1xuICB9IGVsc2UgaWYgKGNvbnRyb2xsZXJCID09PSB0aGlzQ29udHJvbGxlcikge1xuICAgIHJldHVybiBjb250cm9sbGVyQTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05laXRoZXIgY29sbGlkYWJsZSBjb3JyZXNwb25kcyB0byB0aGUgZ2l2ZW4gY29udHJvbGxlcicpO1xuICB9XG59XG5cbmV4cG9ydCB7XG4gIGhhbmRsZUNvbGxpc2lvbnNGb3JKb2IsXG4gIGZpbmRJbnRlcnNlY3RpbmdDb2xsaWRhYmxlc0ZvckNvbGxpZGFibGUsXG4gIGRldGVybWluZUpvYnNBdFJlc3QsXG4gIHJlY29yZE9sZENvbGxpc2lvbnNGb3JEZXZNb2RlRm9yQWxsQ29sbGlkYWJsZXMsXG4gIGNoZWNrVGhhdE5vT2JqZWN0c0NvbGxpZGUsXG4gIGdldE90aGVyQ29udHJvbGxlckZyb21Db2xsaXNpb24sXG59O1xuIiwiaW1wb3J0IHtcbiAgQWFiYixcbiAgQ2Fwc3VsZSxcbiAgT2JiLFxuICBTcGhlcmVcbn0gZnJvbSAnLi4vY29sbGlkYWJsZXMnO1xuXG5pbXBvcnQge1xuICBhYWJiQ29sbGlzaW9uRGV0ZWN0aW9uLFxuICBjYXBzdWxlQ29sbGlzaW9uRGV0ZWN0aW9uLFxuICBvYmJDb2xsaXNpb25EZXRlY3Rpb24sXG4gIHNwaGVyZUNvbGxpc2lvbkRldGVjdGlvbixcbn0gZnJvbSAnLi4vY29sbGlzaW9uLWRldGVjdGlvbic7XG5cbmltcG9ydCB7XG4gIGFhYmJDb250YWN0Q2FsY3VsYXRpb24sXG4gIGNhcHN1bGVDb250YWN0Q2FsY3VsYXRpb24sXG4gIG9iYkNvbnRhY3RDYWxjdWxhdGlvbixcbiAgc3BoZXJlQ29udGFjdENhbGN1bGF0aW9uLFxufSBmcm9tICcuLi9jb250YWN0LWNhbGN1bGF0aW9uJztcblxuLyoqXG4gKiBUaGlzIG1vZHVsZSBkZWZpbmVzIGEgY29sbGVjdGlvbiBvZiBzdGF0aWMgdXRpbGl0eSBmdW5jdGlvbnMgZm9yIGRldGVjdGluZyBhbmQgcmVzcG9uZGluZyB0b1xuICogY29sbGlzaW9ucy5cbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7Q29sbGlkYWJsZX0gYVxuICogQHBhcmFtIHtDb2xsaWRhYmxlfSBiXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gZGV0ZWN0SW50ZXJzZWN0aW9uKGEsIGIpIHtcbiAgaWYgKGEgaW5zdGFuY2VvZiBTcGhlcmUpIHtcbiAgICBpZiAoYiBpbnN0YW5jZW9mIFNwaGVyZSkge1xuICAgICAgcmV0dXJuIHNwaGVyZUNvbGxpc2lvbkRldGVjdGlvbi5zcGhlcmVWc1NwaGVyZShhLCBiKTtcbiAgICB9IGVsc2UgaWYgKGIgaW5zdGFuY2VvZiBBYWJiKSB7XG4gICAgICByZXR1cm4gc3BoZXJlQ29sbGlzaW9uRGV0ZWN0aW9uLnNwaGVyZVZzQWFiYihhLCBiKTtcbiAgICB9IGVsc2UgaWYgKGIgaW5zdGFuY2VvZiBDYXBzdWxlKSB7XG4gICAgICByZXR1cm4gc3BoZXJlQ29sbGlzaW9uRGV0ZWN0aW9uLnNwaGVyZVZzQ2Fwc3VsZShhLCBiKTtcbiAgICB9IGVsc2UgaWYgKGIgaW5zdGFuY2VvZiBPYmIpIHtcbiAgICAgIHJldHVybiBzcGhlcmVDb2xsaXNpb25EZXRlY3Rpb24uc3BoZXJlVnNPYmIoYSwgYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzcGhlcmVDb2xsaXNpb25EZXRlY3Rpb24uc3BoZXJlVnNQb2ludChhLCBiKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoYSBpbnN0YW5jZW9mIEFhYmIpIHtcbiAgICBpZiAoYiBpbnN0YW5jZW9mIFNwaGVyZSkge1xuICAgICAgcmV0dXJuIGFhYmJDb2xsaXNpb25EZXRlY3Rpb24uYWFiYlZzU3BoZXJlKGEsIGIpO1xuICAgIH0gZWxzZSBpZiAoYiBpbnN0YW5jZW9mIEFhYmIpIHtcbiAgICAgIHJldHVybiBhYWJiQ29sbGlzaW9uRGV0ZWN0aW9uLmFhYmJWc0FhYmIoYSwgYik7XG4gICAgfSBlbHNlIGlmIChiIGluc3RhbmNlb2YgQ2Fwc3VsZSkge1xuICAgICAgcmV0dXJuIGFhYmJDb2xsaXNpb25EZXRlY3Rpb24uYWFiYlZzQ2Fwc3VsZShhLCBiKTtcbiAgICB9IGVsc2UgaWYgKGIgaW5zdGFuY2VvZiBPYmIpIHtcbiAgICAgIHJldHVybiBhYWJiQ29sbGlzaW9uRGV0ZWN0aW9uLmFhYmJWc09iYihhLCBiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGFhYmJDb2xsaXNpb25EZXRlY3Rpb24uYWFiYlZzUG9pbnQoYSwgYik7XG4gICAgfVxuICB9IGVsc2UgaWYgKGEgaW5zdGFuY2VvZiBDYXBzdWxlKSB7XG4gICAgaWYgKGIgaW5zdGFuY2VvZiBTcGhlcmUpIHtcbiAgICAgIHJldHVybiBjYXBzdWxlQ29sbGlzaW9uRGV0ZWN0aW9uLmNhcHN1bGVWc1NwaGVyZShhLCBiKTtcbiAgICB9IGVsc2UgaWYgKGIgaW5zdGFuY2VvZiBBYWJiKSB7XG4gICAgICByZXR1cm4gY2Fwc3VsZUNvbGxpc2lvbkRldGVjdGlvbi5jYXBzdWxlVnNBYWJiKGEsIGIpO1xuICAgIH0gZWxzZSBpZiAoYiBpbnN0YW5jZW9mIENhcHN1bGUpIHtcbiAgICAgIHJldHVybiBjYXBzdWxlQ29sbGlzaW9uRGV0ZWN0aW9uLmNhcHN1bGVWc0NhcHN1bGUoYSwgYik7XG4gICAgfSBlbHNlIGlmIChiIGluc3RhbmNlb2YgT2JiKSB7XG4gICAgICByZXR1cm4gY2Fwc3VsZUNvbGxpc2lvbkRldGVjdGlvbi5jYXBzdWxlVnNPYmIoYSwgYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjYXBzdWxlQ29sbGlzaW9uRGV0ZWN0aW9uLmNhcHN1bGVWc1BvaW50KGEsIGIpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChhIGluc3RhbmNlb2YgT2JiKSB7XG4gICAgaWYgKGIgaW5zdGFuY2VvZiBTcGhlcmUpIHtcbiAgICAgIHJldHVybiBvYmJDb2xsaXNpb25EZXRlY3Rpb24ub2JiVnNTcGhlcmUoYSwgYik7XG4gICAgfSBlbHNlIGlmIChiIGluc3RhbmNlb2YgQWFiYikge1xuICAgICAgcmV0dXJuIG9iYkNvbGxpc2lvbkRldGVjdGlvbi5vYmJWc0FhYmIoYSwgYik7XG4gICAgfSBlbHNlIGlmIChiIGluc3RhbmNlb2YgQ2Fwc3VsZSkge1xuICAgICAgcmV0dXJuIG9iYkNvbGxpc2lvbkRldGVjdGlvbi5vYmJWc0NhcHN1bGUoYSwgYik7XG4gICAgfSBlbHNlIGlmIChiIGluc3RhbmNlb2YgT2JiKSB7XG4gICAgICByZXR1cm4gb2JiQ29sbGlzaW9uRGV0ZWN0aW9uLm9iYlZzT2JiKGEsIGIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb2JiQ29sbGlzaW9uRGV0ZWN0aW9uLm9iYlZzUG9pbnQoYSwgYik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChiIGluc3RhbmNlb2YgU3BoZXJlKSB7XG4gICAgICByZXR1cm4gc3BoZXJlQ29sbGlzaW9uRGV0ZWN0aW9uLnNwaGVyZVZzUG9pbnQoYiwgYSk7XG4gICAgfSBlbHNlIGlmIChiIGluc3RhbmNlb2YgQWFiYikge1xuICAgICAgcmV0dXJuIGFhYmJDb2xsaXNpb25EZXRlY3Rpb24uYWFiYlZzUG9pbnQoYiwgYSk7XG4gICAgfSBlbHNlIGlmIChiIGluc3RhbmNlb2YgQ2Fwc3VsZSkge1xuICAgICAgcmV0dXJuIGNhcHN1bGVDb2xsaXNpb25EZXRlY3Rpb24uY2Fwc3VsZVZzUG9pbnQoYiwgYSk7XG4gICAgfSBlbHNlIGlmIChiIGluc3RhbmNlb2YgT2JiKSB7XG4gICAgICByZXR1cm4gb2JiQ29sbGlzaW9uRGV0ZWN0aW9uLm9iYlZzUG9pbnQoYiwgYSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0NvbGxpc2lvbn0gY29sbGlzaW9uXG4gKi9cbmZ1bmN0aW9uIGNhbGN1bGF0ZUNvbnRhY3QoY29sbGlzaW9uKSB7XG4gIGNvbnN0IGEgPSBjb2xsaXNpb24uY29sbGlkYWJsZUE7XG4gIGNvbnN0IGIgPSBjb2xsaXNpb24uY29sbGlkYWJsZUI7XG4gIGNvbnN0IGNvbnRhY3RQb2ludCA9IHZlYzMuY3JlYXRlKCk7XG4gIGNvbnN0IGNvbnRhY3ROb3JtYWwgPSB2ZWMzLmNyZWF0ZSgpO1xuXG4gIGlmIChhIGluc3RhbmNlb2YgU3BoZXJlKSB7XG4gICAgaWYgKGIgaW5zdGFuY2VvZiBTcGhlcmUpIHtcbiAgICAgIHNwaGVyZUNvbnRhY3RDYWxjdWxhdGlvbi5zcGhlcmVWc1NwaGVyZShjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIGEsIGIpO1xuICAgIH0gZWxzZSBpZiAoYiBpbnN0YW5jZW9mIEFhYmIpIHtcbiAgICAgIHNwaGVyZUNvbnRhY3RDYWxjdWxhdGlvbi5zcGhlcmVWc0FhYmIoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBhLCBiKTtcbiAgICB9IGVsc2UgaWYgKGIgaW5zdGFuY2VvZiBDYXBzdWxlKSB7XG4gICAgICBzcGhlcmVDb250YWN0Q2FsY3VsYXRpb24uc3BoZXJlVnNDYXBzdWxlKGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgYSwgYik7XG4gICAgfSBlbHNlIGlmIChiIGluc3RhbmNlb2YgT2JiKSB7XG4gICAgICBzcGhlcmVDb250YWN0Q2FsY3VsYXRpb24uc3BoZXJlVnNPYmIoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBhLCBiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3BoZXJlQ29udGFjdENhbGN1bGF0aW9uLnNwaGVyZVZzUG9pbnQoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBhLCBiKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoYSBpbnN0YW5jZW9mIEFhYmIpIHtcbiAgICBpZiAoYiBpbnN0YW5jZW9mIFNwaGVyZSkge1xuICAgICAgYWFiYkNvbnRhY3RDYWxjdWxhdGlvbi5hYWJiVnNTcGhlcmUoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBhLCBiKTtcbiAgICB9IGVsc2UgaWYgKGIgaW5zdGFuY2VvZiBBYWJiKSB7XG4gICAgICBhYWJiQ29udGFjdENhbGN1bGF0aW9uLmFhYmJWc0FhYmIoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBhLCBiKTtcbiAgICB9IGVsc2UgaWYgKGIgaW5zdGFuY2VvZiBDYXBzdWxlKSB7XG4gICAgICBhYWJiQ29udGFjdENhbGN1bGF0aW9uLmFhYmJWc0NhcHN1bGUoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBhLCBiKTtcbiAgICB9IGVsc2UgaWYgKGIgaW5zdGFuY2VvZiBPYmIpIHtcbiAgICAgIGFhYmJDb250YWN0Q2FsY3VsYXRpb24uYWFiYlZzT2JiKGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgYSwgYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFhYmJDb250YWN0Q2FsY3VsYXRpb24uYWFiYlZzUG9pbnQoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBhLCBiKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoYSBpbnN0YW5jZW9mIENhcHN1bGUpIHtcbiAgICBpZiAoYiBpbnN0YW5jZW9mIFNwaGVyZSkge1xuICAgICAgY2Fwc3VsZUNvbnRhY3RDYWxjdWxhdGlvbi5jYXBzdWxlVnNTcGhlcmUoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBhLCBiKTtcbiAgICB9IGVsc2UgaWYgKGIgaW5zdGFuY2VvZiBBYWJiKSB7XG4gICAgICBjYXBzdWxlQ29udGFjdENhbGN1bGF0aW9uLmNhcHN1bGVWc0FhYmIoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBhLCBiKTtcbiAgICB9IGVsc2UgaWYgKGIgaW5zdGFuY2VvZiBDYXBzdWxlKSB7XG4gICAgICBjYXBzdWxlQ29udGFjdENhbGN1bGF0aW9uLmNhcHN1bGVWc0NhcHN1bGUoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBhLCBiKTtcbiAgICB9IGVsc2UgaWYgKGIgaW5zdGFuY2VvZiBPYmIpIHtcbiAgICAgIGNhcHN1bGVDb250YWN0Q2FsY3VsYXRpb24uY2Fwc3VsZVZzT2JiKGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgYSwgYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhcHN1bGVDb250YWN0Q2FsY3VsYXRpb24uY2Fwc3VsZVZzUG9pbnQoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBhLCBiKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoYSBpbnN0YW5jZW9mIE9iYikge1xuICAgIGlmIChiIGluc3RhbmNlb2YgU3BoZXJlKSB7XG4gICAgICBvYmJDb250YWN0Q2FsY3VsYXRpb24ub2JiVnNTcGhlcmUoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBhLCBiKTtcbiAgICB9IGVsc2UgaWYgKGIgaW5zdGFuY2VvZiBBYWJiKSB7XG4gICAgICBvYmJDb250YWN0Q2FsY3VsYXRpb24ub2JiVnNBYWJiKGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgYSwgYik7XG4gICAgfSBlbHNlIGlmIChiIGluc3RhbmNlb2YgQ2Fwc3VsZSkge1xuICAgICAgb2JiQ29udGFjdENhbGN1bGF0aW9uLm9iYlZzQ2Fwc3VsZShjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIGEsIGIpO1xuICAgIH0gZWxzZSBpZiAoYiBpbnN0YW5jZW9mIE9iYikge1xuICAgICAgb2JiQ29udGFjdENhbGN1bGF0aW9uLm9iYlZzT2JiKGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgYSwgYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9iYkNvbnRhY3RDYWxjdWxhdGlvbi5vYmJWc1BvaW50KGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgYSwgYik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChiIGluc3RhbmNlb2YgU3BoZXJlKSB7XG4gICAgICBzcGhlcmVDb250YWN0Q2FsY3VsYXRpb24uc3BoZXJlVnNQb2ludChjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIGIsIGEpO1xuICAgIH0gZWxzZSBpZiAoYiBpbnN0YW5jZW9mIEFhYmIpIHtcbiAgICAgIGFhYmJDb250YWN0Q2FsY3VsYXRpb24uYWFiYlZzUG9pbnQoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBiLCBhKTtcbiAgICB9IGVsc2UgaWYgKGIgaW5zdGFuY2VvZiBDYXBzdWxlKSB7XG4gICAgICBjYXBzdWxlQ29udGFjdENhbGN1bGF0aW9uLmNhcHN1bGVWc1BvaW50KGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgYiwgYSk7XG4gICAgfSBlbHNlIGlmIChiIGluc3RhbmNlb2YgT2JiKSB7XG4gICAgICBvYmJDb250YWN0Q2FsY3VsYXRpb24ub2JiVnNQb2ludChjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIGIsIGEpO1xuICAgIH0gZWxzZSB7fVxuICAgIHZlYzMubmVnYXRlKGNvbnRhY3ROb3JtYWwsIGNvbnRhY3ROb3JtYWwpO1xuICB9XG5cbiAgY29sbGlzaW9uLmNvbnRhY3RQb2ludCA9IGNvbnRhY3RQb2ludDtcbiAgY29sbGlzaW9uLmNvbnRhY3ROb3JtYWwgPSBjb250YWN0Tm9ybWFsO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Q29sbGlkYWJsZX0gYVxuICogQHBhcmFtIHtDb2xsaWRhYmxlfSBiXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gZGV0ZWN0Qm91bmRpbmdWb2x1bWVJbnRlcnNlY3Rpb24oYSwgYikge1xuICByZXR1cm4gZGV0ZWN0SW50ZXJzZWN0aW9uKGEuYm91bmRpbmdWb2x1bWUsIGIuYm91bmRpbmdWb2x1bWUpO1xufVxuXG5leHBvcnQge1xuICBkZXRlY3RJbnRlcnNlY3Rpb24sXG4gIGNhbGN1bGF0ZUNvbnRhY3QsXG4gIGRldGVjdEJvdW5kaW5nVm9sdW1lSW50ZXJzZWN0aW9uLFxufTtcbiIsIi8qKlxuICogVGhpcyBtb2R1bGUgcmUtZXhwb3J0cyBhbGwgb2YgdGhlIGV4cG9ydHMgaW4gdGhlIGdyYWZ4IGZyYW1ld29yay4gVGhpcyBtYWtlcyB0aGUgZW50aXJlIGZyYW1ld29ya1xuICogY29udmVuaWVudGx5IGFjY2Vzc2libGUgdmlhIHRoaXMgc2luZ2xlIG1vZHVsZS5cbiAqL1xuXG5leHBvcnQgKiBmcm9tICcuL2NvbGxpc2lvbnMnO1xuZXhwb3J0ICogZnJvbSAnLi9pbnRlZ3JhdG9yJztcbmV4cG9ydCAqIGZyb20gJy4vdXRpbCc7XG5cbmV4cG9ydCAqIGZyb20gJy4vc3JjL3BoeXNpY3MtZW5naW5lJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL3BoeXNpY3Mtam9iJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL3BoeXNpY3Mtc3RhdGUnO1xuIiwiZXhwb3J0ICogZnJvbSAnLi9zcmMvaW50ZWdyYXRvcic7XG5leHBvcnQgKiBmcm9tICcuL3NyYy9yazQtaW50ZWdyYXRvcic7XG4iLCIvKipcbiAqIFRoaXMgY2xhc3MgbnVtZXJpY2FsbHkgaW50ZWdyYXRlcyB0aGUgZXF1YXRpb25zIG9mIG1vdGlvbi4gVGhhdCBpcywgYW4gaW50ZWdyYXRvciBpbXBsZW1lbnRzXG4gKiBwaHlzaWNzIHNpbXVsYXRpb25zIGJ5IHVwZGF0aW5nIHBvc2l0aW9uIGFuZCB2ZWxvY2l0eSB2YWx1ZXMgZm9yIGVhY2ggdGltZSBzdGVwLlxuICpcbiAqIEBhYnN0cmFjdFxuICovXG5jbGFzcyBJbnRlZ3JhdG9yIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLy8gSW50ZWdyYXRvciBpcyBhbiBhYnN0cmFjdCBjbGFzcy4gSXQgc2hvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQgZGlyZWN0bHkuXG4gICAgaWYgKG5ldy50YXJnZXQgPT09IEludGVncmF0b3IpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb25zdHJ1Y3QgSW50ZWdyYXRvciBpbnN0YW5jZXMgZGlyZWN0bHknKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW50ZWdyYXRlIHRoZSBzdGF0ZSBmcm9tIHQgdG8gdCArIGR0LlxuICAgKlxuICAgKiBAcGFyYW0ge1BoeXNpY3NKb2J9IGpvYlxuICAgKiBAcGFyYW0ge251bWJlcn0gdCBUb3RhbCBlbGFwc2VkIHRpbWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkdCBEdXJhdGlvbiBvZiB0aGUgY3VycmVudCB0aW1lIHN0ZXAuXG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgaW50ZWdyYXRlKGpvYiwgdCwgZHQpIHtcbiAgICAvLyBFeHRlbmRpbmcgY2xhc3NlcyBzaG91bGQgaW1wbGVtZW50IHRoaXMgbWV0aG9kLlxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7UGh5c2ljc0Rlcml2YXRpdmV9XG4gICAqL1xuICBzdGF0aWMgY3JlYXRlRGVyaXZhdGl2ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdmVsb2NpdHk6IHZlYzMuY3JlYXRlKCksXG4gICAgICBmb3JjZTogdmVjMy5jcmVhdGUoKSxcbiAgICAgIHNwaW46IHF1YXQuY3JlYXRlKCksXG4gICAgICB0b3JxdWU6IHZlYzMuY3JlYXRlKClcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCB7SW50ZWdyYXRvcn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUGh5c2ljc0Rlcml2YXRpdmVcbiAqIEBwcm9wZXJ0eSB7dmVjM30gdmVsb2NpdHkgRGVyaXZhdGl2ZSBvZiBwb3NpdGlvbi5cbiAqIEBwcm9wZXJ0eSB7dmVjM30gZm9yY2UgRGVyaXZhdGl2ZSBvZiBtb21lbnR1bS5cbiAqIEBwcm9wZXJ0eSB7cXVhdH0gc3BpbiBEZXJpdmF0aXZlIG9mIG9yaWVudGF0aW9uLlxuICogQHByb3BlcnR5IHt2ZWMzfSB0b3JxdWUgRGVyaXZhdGl2ZSBvZiBhbmd1bGFyIG1vbWVudHVtLlxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gRm9yY2VBcHBsaWVyT3V0cHV0XG4gKiBAcHJvcGVydHkge3ZlYzN9IGZvcmNlXG4gKiBAcHJvcGVydHkge3ZlYzN9IHRvcnF1ZVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gRm9yY2VBcHBsaWVySW5wdXRcbiAqIEBwcm9wZXJ0eSB7UGh5c2ljc1N0YXRlfSBzdGF0ZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkdFxuICovXG4iLCJpbXBvcnQge19nZW9tZXRyeSwgX3V0aWx9IGZyb20gJy4uLy4uL3V0aWwnO1xuaW1wb3J0IHtJbnRlZ3JhdG9yfSBmcm9tICcuL2ludGVncmF0b3InO1xuaW1wb3J0IHtQaHlzaWNzU3RhdGV9IGZyb20gJy4uLy4uL3NyYy9waHlzaWNzLXN0YXRlJztcblxuLy8gVE9ETzogQWNjb3VudCBmb3IgdGhlIGZhY3QgdGhhdCBjb2xsaXNpb25zIHRha2UgcGxhY2UgYmV0d2VlbiB0aW1lIHN0ZXBzOyBpbnRlZ3JhdGlvbiBzaG91bGRcbi8vIHJlYWxseSBjb25zaWRlciB0aGUgcHJldmlvdXMgc3RhdGUgYXMgYmVpbmcgdGhlIHRpbWUgYW5kIHN0YXRlIGF0IHRoZSBtb21lbnQgb2YgY29sbGlzaW9uLlxuXG4vKipcbiAqIFRoaXMgY2xhc3MgbnVtZXJpY2FsbHkgaW50ZWdyYXRlcyB0aGUgZXF1YXRpb25zIG9mIG1vdGlvbi4gVGhhdCBpcywgdGhpcyBpbXBsZW1lbnRzIHBoeXNpY3NcbiAqIHNpbXVsYXRpb25zIGJ5IHVwZGF0aW5nIHBvc2l0aW9uIGFuZCB2ZWxvY2l0eSB2YWx1ZXMgZm9yIGVhY2ggdGltZSBzdGVwLlxuICpcbiAqIFRoaXMgaW50ZWdyYXRvciBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgY2xhc3NpY2FsIFJ1bmdlLUt1dHRhIG1ldGhvZCAoUks0KVxuICogKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1J1bmdlX2t1dHRhKS5cbiAqXG4gKiBUaGlzIGludGVncmF0b3IgY2F1c2VzIGVuZXJneSB0byBiZSBsb3N0IGF0IGEgc21hbGwgcmF0ZS4gVGhpcyBpcyBhIGNvbW1vbiBwcm9ibGVtIGZvciBudW1lcmljYWxcbiAqIGludGVncmF0b3JzLCBhbmQgaXMgdXN1YWxseSBuZWdsaWdpYmxlLlxuICovXG5jbGFzcyBSSzRJbnRlZ3JhdG9yIGV4dGVuZHMgSW50ZWdyYXRvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgaWYgKF91dGlsLmlzSW5EZXZNb2RlKSB7XG4gICAgICB0aGlzLl93cmFwRm9yRGV2TW9kZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbnRlZ3JhdGUgdGhlIHN0YXRlIGZyb20gdCB0byB0ICsgZHQuXG4gICAqXG4gICAqIEBwYXJhbSB7UGh5c2ljc0pvYn0gam9iXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0IFRvdGFsIGVsYXBzZWQgdGltZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGR0IER1cmF0aW9uIG9mIHRoZSBjdXJyZW50IHRpbWUgc3RlcC5cbiAgICovXG4gIGludGVncmF0ZShqb2IsIHQsIGR0KSB7XG4gICAgY29uc3Qgc3RhdGUgPSBqb2IuY3VycmVudFN0YXRlO1xuICAgIF90ZW1wU3RhdGUuY29weShzdGF0ZSk7XG5cbiAgICBfY2FsY3VsYXRlRGVyaXZhdGl2ZShfYSwgX3RlbXBTdGF0ZSwgam9iLCB0LCAwLCBfRU1QVFlfREVSSVZBVElWRSk7XG4gICAgX2NhbGN1bGF0ZURlcml2YXRpdmUoX2IsIF90ZW1wU3RhdGUsIGpvYiwgdCwgZHQgKiAwLjUsIF9hKTtcbiAgICBfY2FsY3VsYXRlRGVyaXZhdGl2ZShfYywgX3RlbXBTdGF0ZSwgam9iLCB0LCBkdCAqIDAuNSwgX2IpO1xuICAgIF9jYWxjdWxhdGVEZXJpdmF0aXZlKF9kLCBfdGVtcFN0YXRlLCBqb2IsIHQsIGR0LCBfYyk7XG5cbiAgICBfY2FsY3VsYXRlVmVjM0Rlcml2YXRpdmVXZWlnaHRlZFN1bShcbiAgICAgICAgX3Bvc2l0aW9uRGVyaXZhdGl2ZSwgX2EudmVsb2NpdHksIF9iLnZlbG9jaXR5LCBfYy52ZWxvY2l0eSwgX2QudmVsb2NpdHkpO1xuICAgIF9jYWxjdWxhdGVWZWMzRGVyaXZhdGl2ZVdlaWdodGVkU3VtKFxuICAgICAgICBfbW9tZW50dW1EZXJpdmF0aXZlLCBfYS5mb3JjZSwgX2IuZm9yY2UsIF9jLmZvcmNlLCBfZC5mb3JjZSk7XG4gICAgX2NhbGN1bGF0ZVF1YXREZXJpdmF0aXZlV2VpZ2h0ZWRTdW0oX29yaWVudGF0aW9uRGVyaXZhdGl2ZSwgX2Euc3BpbiwgX2Iuc3BpbiwgX2Muc3BpbiwgX2Quc3Bpbik7XG4gICAgX2NhbGN1bGF0ZVZlYzNEZXJpdmF0aXZlV2VpZ2h0ZWRTdW0oXG4gICAgICAgIF9hbmd1bGFyTW9tZW50dW1EZXJpdmF0aXZlLCBfYS50b3JxdWUsIF9iLnRvcnF1ZSwgX2MudG9ycXVlLCBfZC50b3JxdWUpO1xuXG4gICAgdmVjMy5zY2FsZUFuZEFkZChzdGF0ZS5wb3NpdGlvbiwgc3RhdGUucG9zaXRpb24sIF9wb3NpdGlvbkRlcml2YXRpdmUsIGR0KTtcbiAgICB2ZWMzLnNjYWxlQW5kQWRkKHN0YXRlLm1vbWVudHVtLCBzdGF0ZS5tb21lbnR1bSwgX21vbWVudHVtRGVyaXZhdGl2ZSwgZHQpO1xuICAgIF9nZW9tZXRyeS5zY2FsZUFuZEFkZFF1YXQoc3RhdGUub3JpZW50YXRpb24sIHN0YXRlLm9yaWVudGF0aW9uLCBfb3JpZW50YXRpb25EZXJpdmF0aXZlLCBkdCk7XG4gICAgdmVjMy5zY2FsZUFuZEFkZChzdGF0ZS5hbmd1bGFyTW9tZW50dW0sIHN0YXRlLmFuZ3VsYXJNb21lbnR1bSwgX2FuZ3VsYXJNb21lbnR1bURlcml2YXRpdmUsIGR0KTtcblxuICAgIHN0YXRlLnVwZGF0ZURlcGVuZGVudEZpZWxkcygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFdyYXBzIHRoZSBpbnRlZ3JhdGUgbWV0aG9kIGFuZCBjaGVjayBmb3IgTmFOIHZhbHVlcyBhZnRlciBlYWNoIGludGVncmF0aW9uLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3dyYXBGb3JEZXZNb2RlKCkge1xuICAgIGNvbnN0IHVuZ3VhcmRlZEludGVncmF0ZSA9IHRoaXMuaW50ZWdyYXRlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5pbnRlZ3JhdGUgPSAoam9iLCB0LCBkdCkgPT4ge1xuICAgICAgdW5ndWFyZGVkSW50ZWdyYXRlKGpvYiwgdCwgZHQpO1xuICAgICAgX2NoZWNrRm9yU3RhdGVFcnJvcihqb2IuY3VycmVudFN0YXRlKTtcbiAgICB9O1xuICB9XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlIHRoZSBkZXJpdmF0aXZlIGZyb20gdGhlIGdpdmVuIHN0YXRlIHdpdGggdGhlIGdpdmVuIHRpbWUgc3RlcC5cbiAqXG4gKiBAcGFyYW0ge1BoeXNpY3NEZXJpdmF0aXZlfSBvdXRcbiAqIEBwYXJhbSB7UGh5c2ljc1N0YXRlfSBzdGF0ZVxuICogQHBhcmFtIHtQaHlzaWNzSm9ifSBqb2JcbiAqIEBwYXJhbSB7bnVtYmVyfSB0XG4gKiBAcGFyYW0ge251bWJlcn0gZHRcbiAqIEBwYXJhbSB7UGh5c2ljc0Rlcml2YXRpdmV9IGRcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9jYWxjdWxhdGVEZXJpdmF0aXZlKG91dCwgc3RhdGUsIGpvYiwgdCwgZHQsIGQpIHtcbiAgdmVjMy5zY2FsZUFuZEFkZChzdGF0ZS5wb3NpdGlvbiwgc3RhdGUucG9zaXRpb24sIGQudmVsb2NpdHksIGR0KTtcbiAgdmVjMy5zY2FsZUFuZEFkZChzdGF0ZS5tb21lbnR1bSwgc3RhdGUubW9tZW50dW0sIGQuZm9yY2UsIGR0KTtcbiAgX2dlb21ldHJ5LnNjYWxlQW5kQWRkUXVhdChzdGF0ZS5vcmllbnRhdGlvbiwgc3RhdGUub3JpZW50YXRpb24sIGQuc3BpbiwgZHQpO1xuICB2ZWMzLnNjYWxlQW5kQWRkKHN0YXRlLmFuZ3VsYXJNb21lbnR1bSwgc3RhdGUuYW5ndWxhck1vbWVudHVtLCBkLnRvcnF1ZSwgZHQpO1xuXG4gIHN0YXRlLnVwZGF0ZURlcGVuZGVudEZpZWxkcygpO1xuXG4gIG91dC52ZWxvY2l0eSA9IHN0YXRlLnZlbG9jaXR5O1xuICBvdXQuc3BpbiA9IHN0YXRlLnNwaW47XG4gIHZlYzMuc2V0KG91dC5mb3JjZSwgMCwgMCwgMCk7XG4gIHZlYzMuc2V0KG91dC50b3JxdWUsIDAsIDAsIDApO1xuXG4gIF9mb3JjZUFwcGxpZXJPdXRwdXQuZm9yY2UgPSBvdXQuZm9yY2U7XG4gIF9mb3JjZUFwcGxpZXJPdXRwdXQudG9ycXVlID0gb3V0LnRvcnF1ZTtcbiAgX2ZvcmNlQXBwbGllcklucHV0LnN0YXRlID0gc3RhdGU7XG4gIF9mb3JjZUFwcGxpZXJJbnB1dC50ID0gdCArIGR0O1xuICBfZm9yY2VBcHBsaWVySW5wdXQuZHQgPSBkdDtcblxuICBqb2IuYXBwbHlGb3JjZXMoX2ZvcmNlQXBwbGllck91dHB1dCwgX2ZvcmNlQXBwbGllcklucHV0KTtcbn1cblxuY29uc3QgX0VNUFRZX0RFUklWQVRJVkUgPSBJbnRlZ3JhdG9yLmNyZWF0ZURlcml2YXRpdmUoKTtcblxuY29uc3QgX3RlbXBTdGF0ZSA9IG5ldyBQaHlzaWNzU3RhdGUoKTtcbmNvbnN0IF9hID0gSW50ZWdyYXRvci5jcmVhdGVEZXJpdmF0aXZlKCk7XG5jb25zdCBfYiA9IEludGVncmF0b3IuY3JlYXRlRGVyaXZhdGl2ZSgpO1xuY29uc3QgX2MgPSBJbnRlZ3JhdG9yLmNyZWF0ZURlcml2YXRpdmUoKTtcbmNvbnN0IF9kID0gSW50ZWdyYXRvci5jcmVhdGVEZXJpdmF0aXZlKCk7XG5cbmNvbnN0IF9wb3NpdGlvbkRlcml2YXRpdmUgPSB2ZWMzLmNyZWF0ZSgpO1xuY29uc3QgX21vbWVudHVtRGVyaXZhdGl2ZSA9IHZlYzMuY3JlYXRlKCk7XG5jb25zdCBfb3JpZW50YXRpb25EZXJpdmF0aXZlID0gcXVhdC5jcmVhdGUoKTtcbmNvbnN0IF9hbmd1bGFyTW9tZW50dW1EZXJpdmF0aXZlID0gdmVjMy5jcmVhdGUoKTtcblxuY29uc3QgX2ZvcmNlQXBwbGllck91dHB1dCA9IHt9O1xuY29uc3QgX2ZvcmNlQXBwbGllcklucHV0ID0ge307XG5cbi8qKlxuICogQHBhcmFtIHt2ZWMzfSBvdXRcbiAqIEBwYXJhbSB7dmVjM30gYVxuICogQHBhcmFtIHt2ZWMzfSBiXG4gKiBAcGFyYW0ge3ZlYzN9IGNcbiAqIEBwYXJhbSB7dmVjM30gZFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX2NhbGN1bGF0ZVZlYzNEZXJpdmF0aXZlV2VpZ2h0ZWRTdW0ob3V0LCBhLCBiLCBjLCBkKSB7XG4gIG91dFswXSA9IDEgLyA2ICogKGFbMF0gKyAyICogKGJbMF0gKyBjWzBdKSArIGRbMF0pO1xuICBvdXRbMV0gPSAxIC8gNiAqIChhWzFdICsgMiAqIChiWzFdICsgY1sxXSkgKyBkWzFdKTtcbiAgb3V0WzJdID0gMSAvIDYgKiAoYVsyXSArIDIgKiAoYlsyXSArIGNbMl0pICsgZFsyXSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtxdWF0fSBvdXRcbiAqIEBwYXJhbSB7cXVhdH0gYVxuICogQHBhcmFtIHtxdWF0fSBiXG4gKiBAcGFyYW0ge3F1YXR9IGNcbiAqIEBwYXJhbSB7cXVhdH0gZFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX2NhbGN1bGF0ZVF1YXREZXJpdmF0aXZlV2VpZ2h0ZWRTdW0ob3V0LCBhLCBiLCBjLCBkKSB7XG4gIG91dFswXSA9IDEgLyA2ICogKGFbMF0gKyAyICogKGJbMF0gKyBjWzBdKSArIGRbMF0pO1xuICBvdXRbMV0gPSAxIC8gNiAqIChhWzFdICsgMiAqIChiWzFdICsgY1sxXSkgKyBkWzFdKTtcbiAgb3V0WzJdID0gMSAvIDYgKiAoYVsyXSArIDIgKiAoYlsyXSArIGNbMl0pICsgZFsyXSk7XG4gIG91dFszXSA9IDEgLyA2ICogKGFbM10gKyAyICogKGJbM10gKyBjWzNdKSArIGRbM10pO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7UGh5c2ljc1N0YXRlfSBzdGF0ZVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX2NoZWNrRm9yU3RhdGVFcnJvcihzdGF0ZSkge1xuICBjb25zdCBlcnJvclByb3BlcnRpZXMgPSBbXG4gICAgJ3Bvc2l0aW9uJyxcbiAgICAnbW9tZW50dW0nLFxuICAgICdvcmllbnRhdGlvbicsXG4gICAgJ2FuZ3VsYXJNb21lbnR1bScsXG4gIF0uZmlsdGVyKHByb3BlcnR5ID0+IF9jb250YWluc05hTihzdGF0ZVtwcm9wZXJ0eV0pKTtcbiAgY29uc3QgcHJvcGVydHkgPSBlcnJvclByb3BlcnRpZXNbMF07XG4gIGlmIChwcm9wZXJ0eSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgJHtwcm9wZXJ0eX0gY29udGFpbnMgYSBOYU4gdmFsdWUgYWZ0ZXIgaW50ZWdyYXRpbmc6ICR7c3RhdGVbcHJvcGVydHldfWApO1xuICB9XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBnaXZlbiB2ZWN0b3IgY29udGFpbnMgYSBOYU4gdmFsdWUuXG4gKlxuICogQHBhcmFtIHt2ZWMzfSB2XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfY29udGFpbnNOYU4odikge1xuICByZXR1cm4gaXNOYU4odlswXSkgfHwgaXNOYU4odlsxXSkgfHwgaXNOYU4odlsyXSk7XG59XG5cbmNvbnN0IHJrNEludGVncmF0b3IgPSBuZXcgUks0SW50ZWdyYXRvcigpO1xuXG5leHBvcnQge3JrNEludGVncmF0b3J9O1xuIiwiaW1wb3J0IHtGcmFtZUxhdGVuY3lQcm9maWxlciwgUGVyc2lzdGVudEFuaW1hdGlvbkpvYn0gZnJvbSAnbHNsLWFuaW1hdGV4JztcbmltcG9ydCB7X3V0aWx9IGZyb20gJy4uL3V0aWwnO1xuXG5pbXBvcnQge1xuICBjaGVja1RoYXROb09iamVjdHNDb2xsaWRlLFxuICBDb2xsaWRhYmxlUGh5c2ljc0pvYixcbiAgZGV0ZXJtaW5lSm9ic0F0UmVzdCxcbiAgaGFuZGxlQ29sbGlzaW9uc0ZvckpvYixcbiAgcmVjb3JkT2xkQ29sbGlzaW9uc0ZvckRldk1vZGVGb3JBbGxDb2xsaWRhYmxlcyxcbn0gZnJvbSAnLi4vY29sbGlzaW9ucyc7XG5pbXBvcnQge1BoeXNpY3NTdGF0ZX0gZnJvbSAnLi9waHlzaWNzLXN0YXRlJztcbmltcG9ydCB7cms0SW50ZWdyYXRvcn0gZnJvbSAnLi4vaW50ZWdyYXRvcic7XG5cbmNvbnN0IF9GUkFNRV9MQVRFTkNZX0xPR19QRVJJT0QgPSA1MDAwO1xuY29uc3QgX0xBVEVOQ1lfTE9HX0xBQkVMID0gJ1BoeXNpY3MgZnJhbWUgZHVyYXRpb24nO1xuXG4vKipcbiAqIFRoaXMgcGh5c2ljcyBlbmdpbmUgc2ltdWxhdGVzIGhpZ2gtcGVyZm9ybWFuY2UsIHRocmVlLWRpbWVuc2lvbmFsIHJpZ2lkLWJvZHkgZHluYW1pY3MuXG4gKlxuICogTm90YWJsZSBmZWF0dXJlczpcbiAqIC0gSW5jbHVkZXMgY29sbGlzaW9uIGRldGVjdGlvbiB3aXRoIGltcHVsc2UtYmFzZWQgcmVzb2x1dGlvbi5cbiAqIC0gRGVjb3VwbGVzIHRoZSBwaHlzaWNzIHNpbXVsYXRpb24gYW5kIGFuaW1hdGlvbiByZW5kZXJpbmcgdGltZSBzdGVwcywgYW5kIHVzZXMgYSBmaXhlZCB0aW1lc3RlcFxuICogZm9yIHRoZSBwaHlzaWNzIGxvb3AuIFRoaXMgZ2l2ZXMgdXMgbnVtZXJpY2FsIHN0YWJpbGl0eSBhbmQgcHJlY2lzZSByZXByb2R1Y2liaWxpdHkuXG4gKiAtIFN1cHByZXNzZXMgbGluZWFyIGFuZCBhbmd1bGFyIG1vbWVudGEgYmVsb3cgYSBjZXJ0YWluIHRocmVzaG9sZC5cbiAqXG4gKiBUaGUgZW5naW5lIGNvbnNpc3RzIHByaW1hcmlseSBvZiBhIGNvbGxlY3Rpb24gb2YgaW5kaXZpZHVhbCBwaHlzaWNzIGpvYnMgYW5kIGFuIHVwZGF0ZSBsb29wLiBUaGlzXG4gKiB1cGRhdGUgbG9vcCBpcyBpbiB0dXJuIGNvbnRyb2xsZWQgYnkgdGhlIGFuaW1hdGlvbiBsb29wLiBIb3dldmVyLCB3aGVyZWFzIHRoZSBhbmltYXRpb24gbG9vcFxuICogcmVuZGVycyBlYWNoIGpvYiBvbmNlIHBlciBmcmFtZSBsb29wLS1yZWdhcmRsZXNzIG9mIGhvdyBtdWNoIHRpbWUgYWN0dWFsbHkgZWxhcHNlZCBzaW5jZSB0aGVcbiAqIHByZXZpb3VzIGZyYW1lLS10aGUgcGh5c2ljcyBsb29wIHVwZGF0ZXMgaXRzIGpvYnMgYXQgYSBjb25zdGFudCByYXRlLiBUbyByZWNvbmNpbGUgdGhlc2UgZnJhbWVcbiAqIHJhdGVzLCB0aGUgcGh5c2ljcyBsb29wIHJ1bnMgYXMgbWFueSB0aW1lcyBhcyBpcyBuZWVkZWQgaW4gb3JkZXIgdG8gY2F0Y2ggdXAgdG8gdGhlIHRpbWUgb2YgdGhlXG4gKiBjdXJyZW50IGFuaW1hdGlvbiBmcmFtZS4gVGhlIHBoeXNpY3MgZnJhbWUgcmF0ZSBzaG91bGQgYmUgbXVjaCBoaWdoZXIgdGhhbiB0aGUgYW5pbWF0aW9uIGZyYW1lXG4gKiByYXRlLlxuICpcbiAqIEl0IGlzIFZFUlkgSU1QT1JUQU5UIGZvciBhIFBoeXNpY3NKb2IgdG8gbWluaW1pemUgdGhlIHJ1bnRpbWUgb2YgaXRzIHVwZGF0ZSBzdGVwLlxuICpcbiAqICMjIEEgbm90ZSBvbiBqb2Igb3JkZXJcbiAqXG4gKiBUaGUgaW50ZWdyYXRpb24rY29sbGlzaW9uIHBpcGVsaW5lIGhhbmRsZSBvbmUgam9iIGF0IGEgdGltZS4gQSBjb25zZXF1ZW5jZSBvZiB0aGlzIGRlc2lnblxuICogaXMgdGhhdCBoYWxmIG9mIHRoZSBjb2xsaXNpb25zIHRlY2huaWNhbGx5IHJlcHJlc2VudCBhIGZhbHNlIGludGVyYWN0aW9uIGJldHdlZW4gdGhlIHN0YXRlIG9mIHRoZVxuICogZmlyc3Qgb2JqZWN0IGF0IHRpbWUgdCBhbmQgdGhlIHN0YXRlIG9mIHRoZSBzZWNvbmQgb2JqZWN0IGF0IHRpbWUgdCAtIDEuXG4gKlxuICogVGhpcyBpbXBsZW1lbnRhdGlvbiBwcmV2ZW50cyBhIG1vcmUgcHJvYmxlbWF0aWMgaXNzdWUuIElmIGFsbCBvYmplY3RzIHdlcmUgZmlyc3QgaW50ZWdyYXRlZCwgdGhlblxuICogYWxsIG9iamVjdHMgd2VyZSBjaGVja2VkIGZvciBjb2xsaXNpb25zLCB0aGVuIGFsbCBjb2xsaXNpb25zIHdlcmUgcmVzb2x2ZWQsIHRoZW4gdGhlIGZvbGxvd2luZ1xuICogc2NlbmFyaW8gY291bGQgYXJpc2U6XG4gKiAtIFRoZSBuZXh0IHBvc2l0aW9uIG9mIG9iamVjdCBBIGNvbGxpZGVzIHdpdGggdGhlIHByZXZpb3VzIHBvc2l0aW9uIG9mIG9iamVjdCBCLCBidXQgbm90IHdpdGggdGhlXG4gKiAgIG5leHQgcG9zaXRpb24gb2Ygb2JqZWN0IEIsIHNvIG9iamVjdCBBIG1vdmVzIHN1Y2Nlc3NmdWxseSB0byBpdHMgbmV3IHBvc2l0aW9uLlxuICogLSBUaGUgbmV4dCBwb3NpdGlvbiBvZiBvYmplY3QgQiBjb2xsaWRlcyB3aXRoIHRoZSBuZXh0IHBvc2l0aW9uIG9mIG9iamVjdCBDLCBzbyBvYmplY3RzIEIgYW5kIENcbiAqICAgYXJlIHJlc2V0IHRvIHRoZWlyIHByZXZpb3VzIHBvc2l0aW9ucy5cbiAqIC0gT2JqZWN0IEIgYW5kIEMgbm93IGludGVyc2VjdC5cbiAqL1xuY2xhc3MgUGh5c2ljc0VuZ2luZSBleHRlbmRzIFBlcnNpc3RlbnRBbmltYXRpb25Kb2Ige1xuICAvKipcbiAgICogQ2xpZW50cyBzaG91bGQgY2FsbCBQaHlzaWNzRW5naW5lLmNyZWF0ZSBpbnN0ZWFkIG9mIGluc3RhbnRpYXRpbmcgYSBQaHlzaWNzRW5naW5lIGRpcmVjdGx5LlxuICAgKlxuICAgKiBAcGFyYW0ge1BoeXNpY3NDb25maWd9IHBoeXNpY3NQYXJhbXNcbiAgICovXG4gIGNvbnN0cnVjdG9yKHBoeXNpY3NQYXJhbXMpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgaWYgKF9waHlzaWNzRW5naW5lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhblxcJ3QgaW5zdGFudGlhdGUgbXVsdGlwbGUgaW5zdGFuY2VzIG9mIFBoeXNpY3NFbmdpbmUuJyk7XG4gICAgfVxuXG4gICAgX3BoeXNpY3NFbmdpbmUgPSB0aGlzO1xuXG4gICAgdGhpcy5fcGh5c2ljc1BhcmFtcyA9IHBoeXNpY3NQYXJhbXM7XG4gICAgdGhpcy5pbnRlZ3JhdG9yID0gcms0SW50ZWdyYXRvcjtcbiAgICB0aGlzLl9lbGFwc2VkVGltZSA9IDAuMDtcbiAgICB0aGlzLl9yZW1haW5pbmdUaW1lID0gMC4wO1xuICAgIHRoaXMuX25vbkNvbGxpZGFibGVKb2JzID0gW107XG4gICAgdGhpcy5fY29sbGlkYWJsZUpvYnMgPSBbXTtcblxuICAgIGlmIChfdXRpbC5pc0luRGV2TW9kZSkge1xuICAgICAgdGhpcy5fc2V0VXBGb3JJbkRldk1vZGUoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtQaHlzaWNzQ29uZmlnfSBwaHlzaWNzUGFyYW1zXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlKHBoeXNpY3NQYXJhbXMpIHtcbiAgICBuZXcgUGh5c2ljc0VuZ2luZShwaHlzaWNzUGFyYW1zKTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuX2VsYXBzZWRUaW1lID0gMC4wO1xuICAgIHRoaXMuX3JlbWFpbmluZ1RpbWUgPSAwLjA7XG4gICAgdGhpcy5fbm9uQ29sbGlkYWJsZUpvYnMgPSBbXTtcbiAgICB0aGlzLl9jb2xsaWRhYmxlSm9icyA9IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgdGhlIGdpdmVuIFBoeXNpY3NKb2IuXG4gICAqXG4gICAqIEBwYXJhbSB7UGh5c2ljc0pvYn0gam9iXG4gICAqL1xuICBhZGRKb2Ioam9iKSB7XG4gICAgLy8gY29uc29sZS5kZWJ1ZyhgU3RhcnRpbmcgUGh5c2ljc0pvYmApO1xuXG4gICAgaWYgKGpvYiBpbnN0YW5jZW9mIENvbGxpZGFibGVQaHlzaWNzSm9iKSB7XG4gICAgICB0aGlzLl9jb2xsaWRhYmxlSm9icy5wdXNoKGpvYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX25vbkNvbGxpZGFibGVKb2JzLnB1c2goam9iKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyB0aGUgZ2l2ZW4gUGh5c2ljc0pvYi5cbiAgICpcbiAgICogVGhyb3dzIG5vIGVycm9yIGlmIHRoZSBqb2IgaXMgbm90IHJlZ2lzdGVyZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7UGh5c2ljc0pvYn0gam9iXG4gICAqL1xuICByZW1vdmVKb2Ioam9iKSB7XG4gICAgLy8gY29uc29sZS5kZWJ1ZyhgQ2FuY2VsbGluZyBQaHlzaWNzSm9iYCk7XG4gICAgdGhpcy5fcmVtb3ZlSm9iKGpvYik7XG4gIH1cblxuICAvKipcbiAgICogV3JhcHMgdGhlIGRyYXcgYW5kIHVwZGF0ZSBtZXRob2RzIGluIGEgcHJvZmlsZXIgZnVuY3Rpb24gdGhhdCB3aWxsIHRyYWNrIHRoZSBmcmFtZSBsYXRlbmNpZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0VXBGb3JJbkRldk1vZGUoKSB7XG4gICAgY29uc3QgdW53cmFwcGVkVXBkYXRlID0gdGhpcy51cGRhdGUuYmluZCh0aGlzKTtcbiAgICBjb25zdCBsYXRlbmN5UHJvZmlsZXIgPSBuZXcgRnJhbWVMYXRlbmN5UHJvZmlsZXIoX0ZSQU1FX0xBVEVOQ1lfTE9HX1BFUklPRCwgXG4gICAgICAgIHRoaXMuX3BoeXNpY3NQYXJhbXMudGltZVN0ZXBEdXJhdGlvbiwgX0xBVEVOQ1lfTE9HX0xBQkVMKTtcbiAgICBsYXRlbmN5UHJvZmlsZXIuc3RhcnQoKTtcblxuICAgIHRoaXMudXBkYXRlID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgIGNvbnN0IGJlZm9yZVRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgIHVud3JhcHBlZFVwZGF0ZSguLi5hcmdzKTtcbiAgICAgIGNvbnN0IGRlbHRhVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpIC0gYmVmb3JlVGltZTtcbiAgICAgIGxhdGVuY3lQcm9maWxlci5yZWNvcmRGcmFtZUxhdGVuY3koZGVsdGFUaW1lKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgcGh5c2ljcyBzdGF0ZSBmb3IgdGhlIGN1cnJlbnQgYW5pbWF0aW9uIHVwZGF0ZSBmcmFtZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01IaWdoUmVzVGltZVN0YW1wfSBjdXJyZW50VGltZVxuICAgKiBAcGFyYW0ge0RPTUhpZ2hSZXNUaW1lU3RhbXB9IGRlbHRhVGltZVxuICAgKi9cbiAgdXBkYXRlKGN1cnJlbnRUaW1lLCBkZWx0YVRpbWUpIHtcbiAgICB0aGlzLl9yZW1haW5pbmdUaW1lICs9IGRlbHRhVGltZTtcblxuICAgIC8vIFJ1biBhcyBtYW55IGNvbnN0YW50LWludGVydmFsIHBoeXNpY3MgdXBkYXRlcyBhcyBhcmUgbmVlZGVkIGZvciB0aGUgZ2l2ZW4gYW5pbWF0aW9uIGZyYW1lXG4gICAgLy8gaW50ZXJ2YWwuXG4gICAgd2hpbGUgKHRoaXMuX3JlbWFpbmluZ1RpbWUgPj0gdGhpcy5fcGh5c2ljc1BhcmFtcy50aW1lU3RlcER1cmF0aW9uKSB7XG4gICAgICB0aGlzLl91cGRhdGVUb05leHRQaHlzaWNzRnJhbWUoKTtcbiAgICAgIHRoaXMuX2VsYXBzZWRUaW1lICs9IHRoaXMuX3BoeXNpY3NQYXJhbXMudGltZVN0ZXBEdXJhdGlvbjtcbiAgICAgIHRoaXMuX3JlbWFpbmluZ1RpbWUgLT0gdGhpcy5fcGh5c2ljc1BhcmFtcy50aW1lU3RlcER1cmF0aW9uO1xuICAgIH1cblxuICAgIC8vIENhbGN1bGF0ZSB0aGUgaW50ZXJtZWRpYXRlIHBoeXNpY3Mgc3RhdGUgdG8gdXNlIGZvciByZW5kZXJpbmcgdGhlIGN1cnJlbnQgYW5pbWF0aW9uIGZyYW1lLlxuICAgIGNvbnN0IHBhcnRpYWxSYXRpbyA9IHRoaXMuX3JlbWFpbmluZ1RpbWUgLyB0aGlzLl9waHlzaWNzUGFyYW1zLnRpbWVTdGVwRHVyYXRpb247XG4gICAgdGhpcy5fc2V0UGFydGlhbFN0YXRlRm9yUmVuZGVyVGltZVN0ZXBGb3JBbGxKb2JzKHBhcnRpYWxSYXRpbyk7XG4gIH1cblxuICBfdXBkYXRlVG9OZXh0UGh5c2ljc0ZyYW1lKCkge1xuICAgIGlmIChfdXRpbC5pc0luRGV2TW9kZSkge1xuICAgICAgdGhpcy5fcmVjb3JkT2xkU3RhdGVzRm9yQWxsSm9ic0ZvckRldk1vZGUoKTtcbiAgICAgIHJlY29yZE9sZENvbGxpc2lvbnNGb3JEZXZNb2RlRm9yQWxsQ29sbGlkYWJsZXMoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9ub25Db2xsaWRhYmxlSm9icy5mb3JFYWNoKHRoaXMuX2ludGVncmF0ZVBoeXNpY3NTdGF0ZUZvckpvYi5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLl9jb2xsaWRhYmxlSm9icy5mb3JFYWNoKGpvYiA9PiB7XG4gICAgICBpZiAoIWpvYi5pc0F0UmVzdCkge1xuICAgICAgICB0aGlzLl9pbnRlZ3JhdGVQaHlzaWNzU3RhdGVGb3JDb2xsaWRhYmxlSm9iKGpvYik7XG4gICAgICAgIGhhbmRsZUNvbGxpc2lvbnNGb3JKb2Ioam9iLCB0aGlzLl9lbGFwc2VkVGltZSwgdGhpcy5fcGh5c2ljc1BhcmFtcyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoX3V0aWwuaXNJbkRldk1vZGUpIHtcbiAgICAgIGNoZWNrVGhhdE5vT2JqZWN0c0NvbGxpZGUoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9zdXBwcmVzc0xvd01vbWVudGFGb3JBbGxKb2JzKCk7XG5cbiAgICBkZXRlcm1pbmVKb2JzQXRSZXN0KHRoaXMuX2NvbGxpZGFibGVKb2JzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIHRoZSBnaXZlbiBqb2IgZnJvbSB0aGUgY29sbGVjdGlvbiBvZiBhY3RpdmUgam9icyBpZiBpdCBleGlzdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7UGh5c2ljc0pvYn0gam9iXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbaW5kZXg9LTFdXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVtb3ZlSm9iKGpvYiwgaW5kZXggPSAtMSkge1xuICAgIGlmIChqb2IgaW5zdGFuY2VvZiBDb2xsaWRhYmxlUGh5c2ljc0pvYikge1xuICAgICAgX3JlbW92ZUpvYkZyb21Db2xsZWN0aW9uKGpvYiwgaW5kZXgsIHRoaXMuX2NvbGxpZGFibGVKb2JzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3JlbW92ZUpvYkZyb21Db2xsZWN0aW9uKGpvYiwgaW5kZXgsIHRoaXMuX25vbkNvbGxpZGFibGVKb2JzKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHRoZSBjdXJyZW50IHBoeXNpY3Mgc3RhdGUgZm9yIGEgam9iIGZvciB0aGUgY3VycmVudCBwaHlzaWNzIHVwZGF0ZSBmcmFtZS5cbiAgICpcbiAgICogVGhpcyBpbmNsdWRlcyBhcHBseWluZyBhbGwgZm9yY2VzIHRoYXQgaGF2ZSBiZWVuIHJlZ2lzdGVyZWQgd2l0aCB0aGUgcGh5c2ljcyBqb2IuXG4gICAqXG4gICAqIEBwYXJhbSB7Q29sbGlkYWJsZVBoeXNpY3NKb2J9IGpvYlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2ludGVncmF0ZVBoeXNpY3NTdGF0ZUZvckNvbGxpZGFibGVKb2Ioam9iKSB7XG4gICAgdGhpcy5faW50ZWdyYXRlUGh5c2ljc1N0YXRlRm9ySm9iKGpvYik7XG5cbiAgICAvLyBVcGRhdGUgdGhlIGNvbGxpZGFibGUncyBwb3NpdGlvbiBhbmQgb3JpZW50YXRpb24uXG4gICAgam9iLmNvbGxpZGFibGUucG9zaXRpb24gPSBqb2IuY3VycmVudFN0YXRlLnBvc2l0aW9uO1xuICAgIGpvYi5jb2xsaWRhYmxlLm9yaWVudGF0aW9uID0gam9iLmN1cnJlbnRTdGF0ZS5vcmllbnRhdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGN1cnJlbnQgcGh5c2ljcyBzdGF0ZSBmb3IgYSBqb2IgZm9yIHRoZSBjdXJyZW50IHBoeXNpY3MgdXBkYXRlIGZyYW1lLlxuICAgKlxuICAgKiBUaGlzIGluY2x1ZGVzIGFwcGx5aW5nIGFsbCBmb3JjZXMgdGhhdCBoYXZlIGJlZW4gcmVnaXN0ZXJlZCB3aXRoIHRoZSBwaHlzaWNzIGpvYi5cbiAgICpcbiAgICogQHBhcmFtIHtQaHlzaWNzSm9ifSBqb2JcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbnRlZ3JhdGVQaHlzaWNzU3RhdGVGb3JKb2Ioam9iKSB7XG4gICAgam9iLnByZXZpb3VzU3RhdGUuY29weShqb2IuY3VycmVudFN0YXRlKTtcbiAgICB0aGlzLmludGVncmF0b3IuaW50ZWdyYXRlKGpvYiwgdGhpcy5fZWxhcHNlZFRpbWUsIHRoaXMuX3BoeXNpY3NQYXJhbXMudGltZVN0ZXBEdXJhdGlvbik7XG4gIH1cblxuICBfc3VwcHJlc3NMb3dNb21lbnRhRm9yQWxsSm9icygpIHtcbiAgICB0aGlzLl9jb2xsaWRhYmxlSm9icy5mb3JFYWNoKGpvYiA9PiBfc3VwcHJlc3NMb3dNb21lbnRhRm9ySm9iKGpvYixcbiAgICAgICAgdGhpcy5fcGh5c2ljc1BhcmFtcy5sb3dNb21lbnR1bVN1cHByZXNzaW9uVGhyZXNob2xkLFxuICAgICAgICB0aGlzLl9waHlzaWNzUGFyYW1zLmxvd0FuZ3VsYXJNb21lbnR1bVN1cHByZXNzaW9uVGhyZXNob2xkKSk7XG4gICAgdGhpcy5fbm9uQ29sbGlkYWJsZUpvYnMuZm9yRWFjaChqb2IgPT4gX3N1cHByZXNzTG93TW9tZW50YUZvckpvYihqb2IsXG4gICAgICAgIHRoaXMuX3BoeXNpY3NQYXJhbXMubG93TW9tZW50dW1TdXBwcmVzc2lvblRocmVzaG9sZCxcbiAgICAgICAgdGhpcy5fcGh5c2ljc1BhcmFtcy5sb3dBbmd1bGFyTW9tZW50dW1TdXBwcmVzc2lvblRocmVzaG9sZCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGUgaW50ZXJtZWRpYXRlIHBoeXNpY3Mgc3RhdGUgdG8gdXNlIGZvciByZW5kZXJpbmcgdGhlIGN1cnJlbnQgYW5pbWF0aW9uIGZyYW1lLiBUaGVcbiAgICogZ2l2ZW4gcmF0aW8gc3BlY2lmaWVzIGhvdyBmYXIgdGhlIGN1cnJlbnQgcmVuZGVyIGZyYW1lIGlzIGJldHdlZW4gdGhlIHByZXZpb3VzIGFuZCBjdXJyZW50XG4gICAqIHBoeXNpY3MgdXBkYXRlIGZyYW1lcy5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHBhcnRpYWxSYXRpb1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NldFBhcnRpYWxTdGF0ZUZvclJlbmRlclRpbWVTdGVwRm9yQWxsSm9icyhwYXJ0aWFsUmF0aW8pIHtcbiAgICB0aGlzLl9jb2xsaWRhYmxlSm9icy5mb3JFYWNoKF9zZXRQYXJ0aWFsU3RhdGVGb3JSZW5kZXJUaW1lU3RlcEZvckpvYi5iaW5kKG51bGwsIHBhcnRpYWxSYXRpbykpO1xuICAgIHRoaXMuX25vbkNvbGxpZGFibGVKb2JzLmZvckVhY2goX3NldFBhcnRpYWxTdGF0ZUZvclJlbmRlclRpbWVTdGVwRm9ySm9iLmJpbmQobnVsbCwgcGFydGlhbFJhdGlvKSk7XG4gIH1cblxuICBfcmVjb3JkT2xkU3RhdGVzRm9yQWxsSm9ic0ZvckRldk1vZGUoKSB7XG4gICAgdGhpcy5fY29sbGlkYWJsZUpvYnMuZm9yRWFjaChfcmVjb3JkT2xkU3RhdGVzRm9ySm9iKTtcbiAgICB0aGlzLl9ub25Db2xsaWRhYmxlSm9icy5mb3JFYWNoKF9yZWNvcmRPbGRTdGF0ZXNGb3JKb2IpO1xuICB9XG5cbiAgZHJhdygpIHt9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtQaHlzaWNzRW5naW5lfVxuICAgKi9cbiAgc3RhdGljIGdldCBpbnN0YW5jZSgpIHtcbiAgICBpZiAoIV9waHlzaWNzRW5naW5lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhblxcJ3QgYWNjZXNzIFBoeXNpY3NFbmdpbmUuaW5zdGFuY2UgYmVmb3JlIGl0IGhhcyBiZWVuIGluc3RhbnRpYXRlZC4nKTtcbiAgICB9XG4gICAgcmV0dXJuIF9waHlzaWNzRW5naW5lO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtQaHlzaWNzSm9ifSBqb2JcbiAqIEBwYXJhbSB7bnVtYmVyfSBsb3dNb21lbnR1bVN1cHByZXNzaW9uVGhyZXNob2xkXG4gKiBAcGFyYW0ge251bWJlcn0gbG93QW5ndWxhck1vbWVudHVtU3VwcHJlc3Npb25UaHJlc2hvbGRcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9zdXBwcmVzc0xvd01vbWVudGFGb3JKb2Ioam9iLCBsb3dNb21lbnR1bVN1cHByZXNzaW9uVGhyZXNob2xkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb3dBbmd1bGFyTW9tZW50dW1TdXBwcmVzc2lvblRocmVzaG9sZCkge1xuICBjb25zdCBjdXJyZW50U3RhdGUgPSBqb2IuY3VycmVudFN0YXRlO1xuXG4gIGlmICh2ZWMzLnNxdWFyZWRMZW5ndGgoY3VycmVudFN0YXRlLm1vbWVudHVtKSA8IGxvd01vbWVudHVtU3VwcHJlc3Npb25UaHJlc2hvbGQpIHtcbiAgICB2ZWMzLnNldChjdXJyZW50U3RhdGUubW9tZW50dW0sIDAsIDAsIDApO1xuICB9XG5cbiAgaWYgKHZlYzMuc3F1YXJlZExlbmd0aChjdXJyZW50U3RhdGUuYW5ndWxhck1vbWVudHVtKSA8IGxvd0FuZ3VsYXJNb21lbnR1bVN1cHByZXNzaW9uVGhyZXNob2xkKSB7XG4gICAgdmVjMy5zZXQoY3VycmVudFN0YXRlLmFuZ3VsYXJNb21lbnR1bSwgMCwgMCwgMCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1BoeXNpY3NKb2J9IGpvYlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge0FycmF5LjxQaHlzaWNzSm9iPn0gam9ic1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX3JlbW92ZUpvYkZyb21Db2xsZWN0aW9uKGpvYiwgaW5kZXgsIGpvYnMpIHtcbiAgaWYgKGluZGV4ID49IDApIHtcbiAgICBqb2JzLnNwbGljZShpbmRleCwgMSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgY291bnQgPSBqb2JzLmxlbmd0aDtcbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBjb3VudDsgaW5kZXgrKykge1xuICAgICAgaWYgKGpvYnNbaW5kZXhdID09PSBqb2IpIHtcbiAgICAgICAgam9icy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gcGFydGlhbFJhdGlvXG4gKiBAcGFyYW0ge1BoeXNpY3NKb2J9IGpvYlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX3NldFBhcnRpYWxTdGF0ZUZvclJlbmRlclRpbWVTdGVwRm9ySm9iKHBhcnRpYWxSYXRpbywgam9iKSB7XG4gIGpvYi5yZW5kZXJTdGF0ZS5sZXJwKGpvYi5wcmV2aW91c1N0YXRlLCBqb2IuY3VycmVudFN0YXRlLCBwYXJ0aWFsUmF0aW8pO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7UGh5c2ljc0pvYn0gam9iXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfcmVjb3JkT2xkU3RhdGVzRm9ySm9iKGpvYikge1xuICBpZiAoIWpvYi5leHRyYVByZXZpb3VzU3RhdGVzKSB7XG4gICAgam9iLmV4dHJhUHJldmlvdXNTdGF0ZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgam9iLmV4dHJhUHJldmlvdXNTdGF0ZXNbaV0gPSBuZXcgUGh5c2ljc1N0YXRlKCk7XG4gICAgfVxuICB9XG5cbiAgZm9yIChsZXQgaSA9IDM7IGkgPiAwOyBpLS0pIHtcbiAgICBqb2IuZXh0cmFQcmV2aW91c1N0YXRlc1tpXS5jb3B5KGpvYi5leHRyYVByZXZpb3VzU3RhdGVzW2kgLSAxXSk7XG4gIH1cbiAgam9iLmV4dHJhUHJldmlvdXNTdGF0ZXNbMF0uY29weShqb2IucHJldmlvdXNTdGF0ZSk7XG59XG5cbmxldCBfcGh5c2ljc0VuZ2luZSA9IG51bGw7XG5cbmV4cG9ydCB7UGh5c2ljc0VuZ2luZX07XG4iLCJpbXBvcnQge2FuaW1hdG9yfSBmcm9tICdsc2wtYW5pbWF0ZXgnO1xuaW1wb3J0IHtQaHlzaWNzRW5naW5lfSBmcm9tICcuL3BoeXNpY3MtZW5naW5lJztcbmltcG9ydCB7UGh5c2ljc1N0YXRlfSBmcm9tICcuL3BoeXNpY3Mtc3RhdGUnO1xuaW1wb3J0IHtfdXRpbH0gZnJvbSAnLi4vdXRpbCc7XG5cbi8qKlxuICogQSBQaHlzaWNzSm9iIG1haW50YWlucyBhIGN1cnJlbnQgZm9yY2UvbW9tZW50dW0gc3RhdGUgYW5kIGRlZmluZXMgYSBtZXRob2QgZm9yIGFwcGx5aW5nIGZvcmNlcyBhdFxuICogYSBnaXZlbiBwaHlzaWNzIHRpbWUgc3RlcC5cbiAqL1xuY2xhc3MgUGh5c2ljc0pvYiB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0FycmF5LjxGb3JjZUFwcGxpZXI+fSBbZm9yY2VBcHBsaWVyc11cbiAgICogQHBhcmFtIHtQaHlzaWNzU3RhdGV9IFtzdGF0ZV1cbiAgICovXG4gIGNvbnN0cnVjdG9yKGZvcmNlQXBwbGllcnMsIHN0YXRlKSB7XG4gICAgZm9yY2VBcHBsaWVycyA9IGZvcmNlQXBwbGllcnMgfHwgW107XG4gICAgc3RhdGUgPSBzdGF0ZSB8fCBuZXcgUGh5c2ljc1N0YXRlKCk7XG5cbiAgICB0aGlzLnN0YXJ0VGltZSA9IG51bGw7XG4gICAgdGhpcy5jdXJyZW50U3RhdGUgPSBzdGF0ZTtcbiAgICB0aGlzLnByZXZpb3VzU3RhdGUgPSBudWxsO1xuICAgIHRoaXMucmVuZGVyU3RhdGUgPSBudWxsO1xuICAgIHRoaXMuX2ZvcmNlQXBwbGllcnMgPSBmb3JjZUFwcGxpZXJzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Rm9yY2VBcHBsaWVyT3V0cHV0fSBvdXRwdXRQYXJhbXNcbiAgICogQHBhcmFtIHtGb3JjZUFwcGxpZXJJbnB1dH0gaW5wdXRQYXJhbXNcbiAgICovXG4gIGFwcGx5Rm9yY2VzKG91dHB1dFBhcmFtcywgaW5wdXRQYXJhbXMpIHtcbiAgICB0aGlzLl9mb3JjZUFwcGxpZXJzLmZvckVhY2goZm9yY2VBcHBsaWVyID0+IGZvcmNlQXBwbGllcihvdXRwdXRQYXJhbXMsIGlucHV0UGFyYW1zKSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtGb3JjZUFwcGxpZXJ9IGZvcmNlQXBwbGllclxuICAgKiBAcGFyYW0ge251bWJlcn0gW2luZGV4PTBdIFRoZSBpbmRleCB0byBhZGQgdGhlIGdpdmVuIGZvcmNlIGFwcGxpZXIgaW4gdGhlIGN1cnJlbnQgbGlzdCBvZlxuICAgKiBhcHBsaWVycy5cbiAgICovXG4gIGFkZEZvcmNlQXBwbGllcihmb3JjZUFwcGxpZXIsIGluZGV4ID0gMCkge1xuICAgIHRoaXMuX2ZvcmNlQXBwbGllcnMuc3BsaWNlKGluZGV4LCAwLCBmb3JjZUFwcGxpZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Rm9yY2VBcHBsaWVyfSBmb3JjZUFwcGxpZXJcbiAgICovXG4gIHJlbW92ZUZvcmNlQXBwbGllcihmb3JjZUFwcGxpZXIpIHtcbiAgICB0aGlzLl9mb3JjZUFwcGxpZXJzLnNwbGljZSh0aGlzLl9mb3JjZUFwcGxpZXJzLmluZGV4T2YoZm9yY2VBcHBsaWVyKSwgMSk7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIHRoaXMgUGh5c2ljc0pvYiBhbmQgYWxsIG9mIGl0cyBkZXNjZW5kYW50IGNoaWxkIGpvYnMgd2l0aCB0aGUgcGh5c2ljcyBlbmdpbmUuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnRUaW1lXVxuICAgKi9cbiAgc3RhcnQoc3RhcnRUaW1lKSB7XG4gICAgdGhpcy5zdGFydFRpbWUgPSBzdGFydFRpbWUgfHwgYW5pbWF0b3IuY3VycmVudFRpbWU7XG5cbiAgICBjb25zdCBwcmV2aW91c1N0YXRlID0gbmV3IFBoeXNpY3NTdGF0ZSgpO1xuICAgIHByZXZpb3VzU3RhdGUuY29weSh0aGlzLmN1cnJlbnRTdGF0ZSk7XG4gICAgY29uc3QgcmVuZGVyU3RhdGUgPSBuZXcgUGh5c2ljc1N0YXRlKCk7XG4gICAgcmVuZGVyU3RhdGUuY29weSh0aGlzLmN1cnJlbnRTdGF0ZSk7XG5cbiAgICB0aGlzLnByZXZpb3VzU3RhdGUgPSBwcmV2aW91c1N0YXRlO1xuICAgIHRoaXMucmVuZGVyU3RhdGUgPSByZW5kZXJTdGF0ZTtcblxuICAgIGlmIChfdXRpbC5pc0luRGV2TW9kZSkge1xuICAgICAgLy8gSXQgaXMgdXNlZnVsIGZvciBkZWJ1Z2dpbmcgdG8gYmUgYWJsZSB0byB0cmFjZSB0aGUgc3RhdGVzIGJhY2sgdG8gdGhlaXIgam9icy5cbiAgICAgIHRoaXMuY3VycmVudFN0YXRlLmpvYiA9IHRoaXM7XG4gICAgICB0aGlzLnByZXZpb3VzU3RhdGUuam9iID0gdGhpcztcbiAgICAgIHRoaXMucmVuZGVyU3RhdGUuam9iID0gdGhpcztcbiAgICB9XG5cbiAgICBQaHlzaWNzRW5naW5lLmluc3RhbmNlLmFkZEpvYih0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVbnJlZ2lzdGVycyB0aGlzIFBoeXNpY3NKb2IgYW5kIGFsbCBvZiBpdHMgZGVzY2VuZGFudCBjaGlsZCBqb2JzIHdpdGggdGhlIHBoeXNpY3MgZW5naW5lLlxuICAgKlxuICAgKiBUaHJvd3Mgbm8gZXJyb3IgaWYgdGhlIGpvYiBpcyBub3QgcmVnaXN0ZXJlZC5cbiAgICovXG4gIGZpbmlzaCgpIHtcbiAgICBQaHlzaWNzRW5naW5lLmluc3RhbmNlLnJlbW92ZUpvYih0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0VGltZV1cbiAgICovXG4gIHJlc3RhcnQoc3RhcnRUaW1lKSB7XG4gICAgdGhpcy5maW5pc2goKTtcbiAgICB0aGlzLnN0YXJ0KHN0YXJ0VGltZSk7XG4gIH1cbn1cblxuZXhwb3J0IHtQaHlzaWNzSm9ifTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7RnVuY3Rpb259IEZvcmNlQXBwbGllclxuICogQHByb3BlcnR5IHt2ZWMzfSBmb3JjZSBPdXRwdXQuXG4gKiBAcHJvcGVydHkge3ZlYzN9IHRvcnF1ZSBPdXRwdXQuXG4gKiBAcHJvcGVydHkge1BoeXNpY3NTdGF0ZX0gc3RhdGUgSW5wdXQuXG4gKiBAcHJvcGVydHkge251bWJlcn0gdCBJbnB1dC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkdCBJbnB1dC5cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFBoeXNpY3NDb25maWdcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB0aW1lU3RlcER1cmF0aW9uXG4gKiBAcHJvcGVydHkge251bWJlcn0gZ3Jhdml0eVxuICogQHByb3BlcnR5IHt2ZWMzfSBfZ3Jhdml0eVZlY1xuICogQHByb3BlcnR5IHtudW1iZXJ9IGxpbmVhckRyYWdDb2VmZmljaWVudFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGFuZ3VsYXJEcmFnQ29lZmZpY2llbnRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBjb2VmZmljaWVudE9mUmVzdGl0dXRpb25cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBjb2VmZmljaWVudE9mRnJpY3Rpb25cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBsb3dNb21lbnR1bVN1cHByZXNzaW9uVGhyZXNob2xkXG4gKiBAcHJvcGVydHkge251bWJlcn0gbG93QW5ndWxhck1vbWVudHVtU3VwcHJlc3Npb25UaHJlc2hvbGRcbiAqL1xuIiwiaW1wb3J0IHtyb3RhdGVUZW5zb3IsIGNyZWF0ZUJveEluZXJ0aWFUZW5zb3J9IGZyb20gJy4uL3V0aWwnO1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgcmVwcmVzZW50cyB0aGUgc3RhdGUgb2YgYW4gb2JqZWN0IHRoYXQgaXMgbmVlZGVkIGZvciBhIHBoeXNpY3Mgc2ltdWxhdGlvbiAoc3VjaCBhc1xuICogcG9zaXRpb24sIG1vbWVudHVtLCBhbmQgbWFzcykuXG4gKi9cbmNsYXNzIFBoeXNpY3NTdGF0ZSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0R5bmFtaWNzQ29uZmlnfSBbZHluYW1pY3NQYXJhbXM9e31dXG4gICAqL1xuICBjb25zdHJ1Y3RvcihkeW5hbWljc1BhcmFtcyA9IHt9KSB7XG4gICAgY29uc3QgcG9zaXRpb24gPSBkeW5hbWljc1BhcmFtcy5wb3NpdGlvbiB8fCB2ZWMzLmNyZWF0ZSgpO1xuICAgIGNvbnN0IG1vbWVudHVtID0gZHluYW1pY3NQYXJhbXMubW9tZW50dW0gfHwgdmVjMy5jcmVhdGUoKTtcbiAgICBjb25zdCBvcmllbnRhdGlvbiA9IGR5bmFtaWNzUGFyYW1zLm9yaWVudGF0aW9uIHx8IHF1YXQuY3JlYXRlKCk7XG4gICAgY29uc3QgYW5ndWxhck1vbWVudHVtID0gZHluYW1pY3NQYXJhbXMuYW5ndWxhck1vbWVudHVtIHx8IHZlYzMuY3JlYXRlKCk7XG4gICAgY29uc3QgbWFzcyA9IGR5bmFtaWNzUGFyYW1zLm1hc3MgfHwgMTtcbiAgICBjb25zdCB1bnJvdGF0ZWRJbmVydGlhVGVuc29yID0gZHluYW1pY3NQYXJhbXMudW5yb3RhdGVkSW5lcnRpYVRlbnNvciB8fCBjcmVhdGVCb3hJbmVydGlhVGVuc29yKDEsIDEsIDEsIG1hc3MpO1xuXG4gICAgLy8gQ29uc3RhbnQgZmllbGRzLlxuXG4gICAgdGhpcy5tYXNzID0gbWFzcztcbiAgICB0aGlzLmludmVyc2VNYXNzID0gMSAvIG1hc3M7XG4gICAgdGhpcy51bnJvdGF0ZWRJbmVydGlhVGVuc29yID0gdW5yb3RhdGVkSW5lcnRpYVRlbnNvcjtcblxuICAgIC8vIEluZGVwZW5kZW50IGZpZWxkcy5cblxuICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgICB0aGlzLm1vbWVudHVtID0gbW9tZW50dW07XG4gICAgdGhpcy5vcmllbnRhdGlvbiA9IG9yaWVudGF0aW9uO1xuICAgIHRoaXMuYW5ndWxhck1vbWVudHVtID0gYW5ndWxhck1vbWVudHVtO1xuXG4gICAgLy8gRGVwZW5kZW50IGZpZWxkcy5cblxuICAgIC8vIExpbmVhciB2ZWxvY2l0eS5cbiAgICB0aGlzLnZlbG9jaXR5ID0gdmVjMy5jcmVhdGUoKTtcbiAgICAvLyBRdWF0ZXJuaW9uLWJhc2VkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSByYXRlIG9mIGNoYW5nZSBpbiBvcmllbnRhdGlvbi5cbiAgICB0aGlzLnNwaW4gPSBxdWF0LmNyZWF0ZSgpO1xuICAgIC8vIFZlY3Rvci1iYXNlZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgYW5ndWxhciB2ZWxvY2l0eS5cbiAgICB0aGlzLmFuZ3VsYXJWZWxvY2l0eSA9IHZlYzMuY3JlYXRlKCk7XG4gICAgLy8gVGhlIGludmVyc2UgaW5lcnRpYSB0ZW5zb3Igcm90YXRlZCB0byB0aGUgd29ybGQgY29vcmRpbmF0ZSBmcmFtZS5cbiAgICB0aGlzLmludmVyc2VJbmVydGlhVGVuc29yID0gbWF0My5jcmVhdGUoKTtcblxuICAgIHRoaXMudXBkYXRlRGVwZW5kZW50RmllbGRzKCk7XG4gIH1cblxuICB1cGRhdGVEZXBlbmRlbnRGaWVsZHMoKSB7Ly8gVE9ETzogVGVzdCB0aGlzIHNvbWVob3cuLi5cbiAgICAvLyBVcGRhdGUgbGluZWFyIHZlbG9jaXR5LlxuICAgIHZlYzMuc2NhbGUodGhpcy52ZWxvY2l0eSwgdGhpcy5tb21lbnR1bSwgdGhpcy5pbnZlcnNlTWFzcyk7XG5cbiAgICAvLyBVcGRhdGUgYW5ndWxhciB2ZWxvY2l0eS5cbiAgICBxdWF0Lm5vcm1hbGl6ZSh0aGlzLm9yaWVudGF0aW9uLCB0aGlzLm9yaWVudGF0aW9uKTtcbiAgICByb3RhdGVUZW5zb3IodGhpcy5pbnZlcnNlSW5lcnRpYVRlbnNvciwgdGhpcy51bnJvdGF0ZWRJbmVydGlhVGVuc29yLCB0aGlzLm9yaWVudGF0aW9uKTtcbiAgICBtYXQzLmludmVydCh0aGlzLmludmVyc2VJbmVydGlhVGVuc29yLCB0aGlzLnVucm90YXRlZEluZXJ0aWFUZW5zb3IpO1xuICAgIHZlYzMudHJhbnNmb3JtTWF0Myh0aGlzLmFuZ3VsYXJWZWxvY2l0eSwgdGhpcy5hbmd1bGFyTW9tZW50dW0sIHRoaXMuaW52ZXJzZUluZXJ0aWFUZW5zb3IpO1xuICAgIHF1YXQuc2V0KHRoaXMuc3BpbiwgdGhpcy5hbmd1bGFyVmVsb2NpdHlbMF0sIHRoaXMuYW5ndWxhclZlbG9jaXR5WzFdLFxuICAgICAgICB0aGlzLmFuZ3VsYXJWZWxvY2l0eVsyXSwgMCk7XG4gICAgcXVhdC5zY2FsZSh0aGlzLnNwaW4sIHRoaXMuc3BpbiwgMC41KTtcbiAgICBxdWF0Lm11bHRpcGx5KHRoaXMuc3BpbiwgdGhpcy5zcGluLCB0aGlzLm9yaWVudGF0aW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIGEgZGVlcCBjb3B5LlxuICAgKlxuICAgKiBAcGFyYW0ge1BoeXNpY3NTdGF0ZX0gb3RoZXJcbiAgICovXG4gIGNvcHkob3RoZXIpIHtcbiAgICB0aGlzLm1hc3MgPSBvdGhlci5tYXNzO1xuICAgIHRoaXMuaW52ZXJzZU1hc3MgPSBvdGhlci5pbnZlcnNlTWFzcztcbiAgICBtYXQzLmNvcHkodGhpcy51bnJvdGF0ZWRJbmVydGlhVGVuc29yLCBvdGhlci51bnJvdGF0ZWRJbmVydGlhVGVuc29yKTtcbiAgICBtYXQzLmNvcHkodGhpcy5pbnZlcnNlSW5lcnRpYVRlbnNvciwgb3RoZXIuaW52ZXJzZUluZXJ0aWFUZW5zb3IpO1xuICAgIHZlYzMuY29weSh0aGlzLnBvc2l0aW9uLCBvdGhlci5wb3NpdGlvbik7XG4gICAgdmVjMy5jb3B5KHRoaXMubW9tZW50dW0sIG90aGVyLm1vbWVudHVtKTtcbiAgICBxdWF0LmNvcHkodGhpcy5vcmllbnRhdGlvbiwgb3RoZXIub3JpZW50YXRpb24pO1xuICAgIHZlYzMuY29weSh0aGlzLmFuZ3VsYXJNb21lbnR1bSwgb3RoZXIuYW5ndWxhck1vbWVudHVtKTtcbiAgICB2ZWMzLmNvcHkodGhpcy52ZWxvY2l0eSwgb3RoZXIudmVsb2NpdHkpO1xuICAgIHF1YXQuY29weSh0aGlzLnNwaW4sIG90aGVyLnNwaW4pO1xuICAgIHZlYzMuY29weSh0aGlzLmFuZ3VsYXJWZWxvY2l0eSwgb3RoZXIuYW5ndWxhclZlbG9jaXR5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1BoeXNpY3NTdGF0ZX0gYVxuICAgKiBAcGFyYW0ge1BoeXNpY3NTdGF0ZX0gYlxuICAgKiBAcGFyYW0ge251bWJlcn0gcGFydGlhbFJhdGlvXG4gICAqL1xuICBsZXJwKGEsIGIsIHBhcnRpYWxSYXRpbykge1xuICAgIHZlYzMubGVycCh0aGlzLnBvc2l0aW9uLCBhLnBvc2l0aW9uLCBiLnBvc2l0aW9uLCBwYXJ0aWFsUmF0aW8pO1xuICAgIHZlYzMubGVycCh0aGlzLm1vbWVudHVtLCBhLm1vbWVudHVtLCBiLm1vbWVudHVtLCBwYXJ0aWFsUmF0aW8pO1xuICAgIHF1YXQuc2xlcnAodGhpcy5vcmllbnRhdGlvbiwgYS5vcmllbnRhdGlvbiwgYi5vcmllbnRhdGlvbiwgcGFydGlhbFJhdGlvKTtcbiAgICBxdWF0Lm5vcm1hbGl6ZSh0aGlzLm9yaWVudGF0aW9uLCB0aGlzLm9yaWVudGF0aW9uKTtcbiAgICB2ZWMzLmxlcnAodGhpcy5hbmd1bGFyTW9tZW50dW0sIGEuYW5ndWxhck1vbWVudHVtLCBiLmFuZ3VsYXJNb21lbnR1bSwgcGFydGlhbFJhdGlvKTtcbiAgICB0aGlzLnVwZGF0ZURlcGVuZGVudEZpZWxkcygpO1xuICB9XG59XG5cbmV4cG9ydCB7UGh5c2ljc1N0YXRlfTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBEeW5hbWljc0NvbmZpZ1xuICogQHByb3BlcnR5IHt2ZWMzfSBbcG9zaXRpb25dXG4gKiBAcHJvcGVydHkge3ZlYzN9IFttb21lbnR1bV1cbiAqIEBwcm9wZXJ0eSB7cXVhdH0gW29yaWVudGF0aW9uXVxuICogQHByb3BlcnR5IHt2ZWMzfSBbYW5ndWxhck1vbWVudHVtXVxuICogQHByb3BlcnR5IHtudW1iZXJ9IFttYXNzXVxuICogQHByb3BlcnR5IHttYXQzfSBbdW5yb3RhdGVkSW5lcnRpYVRlbnNvcl1cbiAqL1xuIiwiZXhwb3J0ICogZnJvbSAnLi9zcmMvZm9yY2UtdXRpbHMnO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvZ2VvbWV0cnknO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvaW5lcnRpYS10ZW5zb3ItdXRpbHMnO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvdXRpbCc7XG4iLCIvKipcbiAqIFRoaXMgbW9kdWxlIGRlZmluZXMgYSBjb2xsZWN0aW9uIG9mIHN0YXRpYyBnZW5lcmFsIHV0aWxpdHkgZnVuY3Rpb25zIGZvciBjYWxjdWxhdGluZyBmb3JjZXMuXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge0dyYXZpdHlBcHBsaWVyQ29uZmlnfSBjb25maWdcbiAqIEBwYXJhbSB7Rm9yY2VBcHBsaWVyT3V0cHV0fSBvdXRwdXRcbiAqIEBwYXJhbSB7Rm9yY2VBcHBsaWVySW5wdXR9IGlucHV0XG4gKi9cbmZ1bmN0aW9uIGFwcGx5R3Jhdml0eShjb25maWcsIG91dHB1dCwgaW5wdXQpIHtcbiAgdmVjMy5zY2FsZUFuZEFkZChvdXRwdXQuZm9yY2UsIG91dHB1dC5mb3JjZSwgY29uZmlnLl9ncmF2aXR5VmVjLCBpbnB1dC5zdGF0ZS5tYXNzKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0xpbmVhckRyYWdBcHBsaWVyQ29uZmlnfSBjb25maWdcbiAqIEBwYXJhbSB7Rm9yY2VBcHBsaWVyT3V0cHV0fSBvdXRwdXRcbiAqIEBwYXJhbSB7Rm9yY2VBcHBsaWVySW5wdXR9IGlucHV0XG4gKi9cbmZ1bmN0aW9uIGFwcGx5TGluZWFyRHJhZyhjb25maWcsIG91dHB1dCwgaW5wdXQpIHtcbiAgY29uc3QgZHJhZ01hZ25pdHVkZSA9IC12ZWMzLnNxdWFyZWRMZW5ndGgoaW5wdXQuc3RhdGUudmVsb2NpdHkpICogY29uZmlnLmxpbmVhckRyYWdDb2VmZmljaWVudDtcbiAgdmVjMy5ub3JtYWxpemUoX3ZlYzMsIGlucHV0LnN0YXRlLnZlbG9jaXR5KTtcbiAgdmVjMy5zY2FsZUFuZEFkZChvdXRwdXQuZm9yY2UsIG91dHB1dC5mb3JjZSwgX3ZlYzMsIGRyYWdNYWduaXR1ZGUpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7QW5ndWxhckRyYWdBcHBsaWVyQ29uZmlnfSBjb25maWdcbiAqIEBwYXJhbSB7Rm9yY2VBcHBsaWVyT3V0cHV0fSBvdXRwdXRcbiAqIEBwYXJhbSB7Rm9yY2VBcHBsaWVySW5wdXR9IGlucHV0XG4gKi9cbmZ1bmN0aW9uIGFwcGx5QW5ndWxhckRyYWcoY29uZmlnLCBvdXRwdXQsIGlucHV0KSB7XG4gIHZlYzMuc2NhbGVBbmRBZGQob3V0cHV0LnRvcnF1ZSwgb3V0cHV0LnRvcnF1ZSwgaW5wdXQuc3RhdGUuYW5ndWxhclZlbG9jaXR5LFxuICAgICAgY29uZmlnLmFuZ3VsYXJEcmFnQ29lZmZpY2llbnQpO1xufVxuXG4vKipcbiAqIEFwcGxpZXMgYSBzaW1wbGUgbGluZWFyIHNwcmluZyBmb3JjZSAodXNpbmcgSG9va2UncyBsYXcpLlxuICpcbiAqIGZvcmNlID0gZGlzcGxhY2VtZW50ICogY29lZmZpY2llbnRcbiAqXG4gKiBAcGFyYW0ge0xpbmVhclNwcmluZ0ZvcmNlQXBwbGllckNvbmZpZ30gY29uZmlnXG4gKiBAcGFyYW0ge0ZvcmNlQXBwbGllck91dHB1dH0gb3V0cHV0XG4gKiBAcGFyYW0ge0ZvcmNlQXBwbGllcklucHV0fSBpbnB1dFxuICovXG5mdW5jdGlvbiBhcHBseUxpbmVhclNwcmluZ0ZvcmNlKGNvbmZpZywgb3V0cHV0LCBpbnB1dCkge1xuICB2ZWMzLnN1YnRyYWN0KF92ZWMzLCBjb25maWcuZ2V0SW50ZW5kZWRQb3NpdGlvbigpLCBpbnB1dC5zdGF0ZS5wb3NpdGlvbik7XG4gIHZlYzMuc2NhbGVBbmRBZGQob3V0cHV0LmZvcmNlLCBvdXRwdXQuZm9yY2UsIF92ZWMzLCBjb25maWcuc3ByaW5nQ29lZmZpY2llbnQpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7U3ByaW5nRGFtcGluZ0FwcGxpZXJDb25maWd9IGNvbmZpZ1xuICogQHBhcmFtIHtGb3JjZUFwcGxpZXJPdXRwdXR9IG91dHB1dFxuICogQHBhcmFtIHtGb3JjZUFwcGxpZXJJbnB1dH0gaW5wdXRcbiAqL1xuZnVuY3Rpb24gYXBwbHlTcHJpbmdEYW1waW5nKGNvbmZpZywgb3V0cHV0LCBpbnB1dCkge1xuICB2ZWMzLnNjYWxlKF92ZWMzLCBpbnB1dC5zdGF0ZS52ZWxvY2l0eSwgLWNvbmZpZy5kYW1waW5nQ29lZmZpY2llbnQpO1xuICB2ZWMzLmFkZChvdXRwdXQuZm9yY2UsIG91dHB1dC5mb3JjZSwgX3ZlYzMpO1xufVxuXG5jb25zdCBfdmVjMyA9IHZlYzMuY3JlYXRlKCk7XG5cbmV4cG9ydCB7XG4gIGFwcGx5QW5ndWxhckRyYWcsXG4gIGFwcGx5R3Jhdml0eSxcbiAgYXBwbHlMaW5lYXJEcmFnLFxuICBhcHBseUxpbmVhclNwcmluZ0ZvcmNlLFxuICBhcHBseVNwcmluZ0RhbXBpbmcsXG59XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gR3Jhdml0eUFwcGxpZXJDb25maWdcbiAqIEBwcm9wZXJ0eSB7dmVjM30gX2dyYXZpdHlWZWNcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IExpbmVhckRyYWdBcHBsaWVyQ29uZmlnXG4gKiBAcHJvcGVydHkge251bWJlcn0gbGluZWFyRHJhZ0NvZWZmaWNpZW50XG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBBbmd1bGFyRHJhZ0FwcGxpZXJDb25maWdcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBhbmd1bGFyRHJhZ0NvZWZmaWNpZW50XG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBMaW5lYXJTcHJpbmdGb3JjZUFwcGxpZXJDb25maWdcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzcHJpbmdDb2VmZmljaWVudFxuICogQHByb3BlcnR5IHtGdW5jdGlvbi48dmVjMz59IGdldEludGVuZGVkUG9zaXRpb25cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFNwcmluZ0RhbXBpbmdBcHBsaWVyQ29uZmlnXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGFtcGluZ0NvZWZmaWNpZW50XG4gKi9cbiIsIi8qKlxuICogVGhpcyBtb2R1bGUgZGVmaW5lcyBhIGNvbGxlY3Rpb24gb2Ygc3RhdGljIGdlb21ldHJ5IHV0aWxpdHkgZnVuY3Rpb25zLlxuICovXG5cbmNvbnN0IEVQU0lMT04gPSAwLjAwMDAwMDE7XG5jb25zdCBIQUxGX1BJID0gTWF0aC5QSSAvIDI7XG5jb25zdCBUV09fUEkgPSBNYXRoLlBJICogMjtcblxuLyoqXG4gKiBGaW5kcyB0aGUgbWluaW11bSBzcXVhcmVkIGRpc3RhbmNlIGJldHdlZW4gdHdvIGxpbmUgc2VnbWVudHMuXG4gKlxuICogQHBhcmFtIHtMaW5lU2VnbWVudH0gc2VnbWVudEFcbiAqIEBwYXJhbSB7TGluZVNlZ21lbnR9IHNlZ21lbnRCXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5mdW5jdGlvbiBmaW5kU3F1YXJlZERpc3RhbmNlQmV0d2VlblNlZ21lbnRzKHNlZ21lbnRBLCBzZWdtZW50Qikge1xuICBmaW5kQ2xvc2VzdFBvaW50c0Zyb21TZWdtZW50VG9TZWdtZW50KF9zZWdtZW50RGlzdGFuY2VfdG1wVmVjQSwgX3NlZ21lbnREaXN0YW5jZV90bXBWZWNCLFxuICAgICAgc2VnbWVudEEsIHNlZ21lbnRCKTtcbiAgcmV0dXJuIHZlYzMuc3F1YXJlZERpc3RhbmNlKF9zZWdtZW50RGlzdGFuY2VfdG1wVmVjQSwgX3NlZ21lbnREaXN0YW5jZV90bXBWZWNCKTtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgbWluaW11bSBzcXVhcmVkIGRpc3RhbmNlIGJldHdlZW4gYSBsaW5lIHNlZ21lbnQgYW5kIGEgcG9pbnQuXG4gKlxuICogQHBhcmFtIHtMaW5lU2VnbWVudH0gc2VnbWVudFxuICogQHBhcmFtIHt2ZWMzfSBwb2ludFxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZnVuY3Rpb24gZmluZFNxdWFyZWREaXN0YW5jZUZyb21TZWdtZW50VG9Qb2ludChzZWdtZW50LCBwb2ludCkge1xuICBmaW5kQ2xvc2VzdFBvaW50T25TZWdtZW50VG9Qb2ludChfc2VnbWVudERpc3RhbmNlX3RtcFZlY0EsIHNlZ21lbnQsIHBvaW50KTtcbiAgcmV0dXJuIHZlYzMuc3F1YXJlZERpc3RhbmNlKF9zZWdtZW50RGlzdGFuY2VfdG1wVmVjQSwgcG9pbnQpO1xufVxuXG5jb25zdCBfc2VnbWVudERpc3RhbmNlX3RtcFZlY0EgPSB2ZWMzLmNyZWF0ZSgpO1xuY29uc3QgX3NlZ21lbnREaXN0YW5jZV90bXBWZWNCID0gdmVjMy5jcmVhdGUoKTtcblxuLyoqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dHB1dFBvaW50IE91dHB1dCBwYXJhbWV0ZXIuXG4gKiBAcGFyYW0ge0FhYmJ9IGFhYmJcbiAqIEBwYXJhbSB7dmVjM30gdGFyZ2V0UG9pbnRcbiAqL1xuZnVuY3Rpb24gZmluZENsb3Nlc3RQb2ludEZyb21BYWJiVG9Qb2ludChvdXRwdXRQb2ludCwgYWFiYiwgdGFyZ2V0UG9pbnQpIHtcbiAgb3V0cHV0UG9pbnRbMF0gPSBhYWJiLm1pblggPiB0YXJnZXRQb2ludFswXVxuICAgICAgPyBhYWJiLm1pblhcbiAgICAgIDogYWFiYi5tYXhYIDwgdGFyZ2V0UG9pbnRbMF1cbiAgICAgICAgICA/IGFhYmIubWF4WFxuICAgICAgICAgIDogdGFyZ2V0UG9pbnRbMF07XG4gIG91dHB1dFBvaW50WzFdID0gYWFiYi5taW5ZID4gdGFyZ2V0UG9pbnRbMV1cbiAgICAgID8gYWFiYi5taW5ZXG4gICAgICA6IGFhYmIubWF4WSA8IHRhcmdldFBvaW50WzFdXG4gICAgICAgICAgPyBhYWJiLm1heFlcbiAgICAgICAgICA6IHRhcmdldFBvaW50WzFdO1xuICBvdXRwdXRQb2ludFsyXSA9IGFhYmIubWluWiA+IHRhcmdldFBvaW50WzJdXG4gICAgICA/IGFhYmIubWluWlxuICAgICAgOiBhYWJiLm1heFogPCB0YXJnZXRQb2ludFsyXVxuICAgICAgICAgID8gYWFiYi5tYXhaXG4gICAgICAgICAgOiB0YXJnZXRQb2ludFsyXTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dHB1dFBvaW50IE91dHB1dCBwYXJhbWV0ZXIuXG4gKiBAcGFyYW0ge0FhYmJ9IGFhYmJcbiAqIEBwYXJhbSB7dmVjM30gdGFyZ2V0UG9pbnRcbiAqL1xuZnVuY3Rpb24gZmluZENsb3Nlc3RQb2ludEZyb21BYWJiU3VyZmFjZVRvUG9pbnQob3V0cHV0UG9pbnQsIGFhYmIsIHRhcmdldFBvaW50KSB7XG4gIGZpbmRDbG9zZXN0UG9pbnRGcm9tQWFiYlRvUG9pbnQob3V0cHV0UG9pbnQsIGFhYmIsIHRhcmdldFBvaW50KTtcblxuICAvLyBJZiB0aGUgY2FsY3VsYXRlZCBwb2ludCBsaWVzIHdpdGhpbiB0aGUgQUFCQiwgdGhlbiB3ZSBuZWVkIHRvIGFkanVzdCBvbmUgY29vcmRpbmF0ZSB0byBsaWVcbiAgLy8gYWxvbmcgdGhlIGVkZ2Ugb2YgdGhlIEFBQkIuXG4gIGlmIChhYWJiVnNQb2ludChhYWJiLCBvdXRwdXRQb2ludCkpIHtcbiAgICAvLyBDYWxjdWxhdGUgdGhlIGNsb3Nlc3QgdmVydGV4LlxuICAgIF90bXBWZWMxWzBdID0gdGFyZ2V0UG9pbnRbMF0gLSBhYWJiLm1pblggPCBhYWJiLm1heFggLSB0YXJnZXRQb2ludFswXVxuICAgICAgICA/IGFhYmIubWluWFxuICAgICAgICA6IGFhYmIubWF4WDtcbiAgICBfdG1wVmVjMVsxXSA9IHRhcmdldFBvaW50WzFdIC0gYWFiYi5taW5ZIDwgYWFiYi5tYXhZIC0gdGFyZ2V0UG9pbnRbMV1cbiAgICAgICAgPyBhYWJiLm1pbllcbiAgICAgICAgOiBhYWJiLm1heFk7XG4gICAgX3RtcFZlYzFbMl0gPSB0YXJnZXRQb2ludFsyXSAtIGFhYmIubWluWiA8IGFhYmIubWF4WiAtIHRhcmdldFBvaW50WzJdXG4gICAgICAgID8gYWFiYi5taW5aXG4gICAgICAgIDogYWFiYi5tYXhaO1xuXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBkaXN0YW5jZSB0byB0aGUgdmVydGV4IGFsb25nIGVhY2ggZGltZW5zaW9uLlxuICAgIF90bXBWZWMyWzBdID0gX3RtcFZlYzFbMF0gLSBvdXRwdXRQb2ludFswXTtcbiAgICBfdG1wVmVjMlswXSA9IF90bXBWZWMyWzBdIDwgMCA/IC1fdG1wVmVjMlswXSA6IF90bXBWZWMyWzBdO1xuICAgIF90bXBWZWMyWzFdID0gX3RtcFZlYzFbMV0gLSBvdXRwdXRQb2ludFsxXTtcbiAgICBfdG1wVmVjMlsxXSA9IF90bXBWZWMyWzFdIDwgMSA/IC1fdG1wVmVjMlsxXSA6IF90bXBWZWMyWzFdO1xuICAgIF90bXBWZWMyWzJdID0gX3RtcFZlYzFbMl0gLSBvdXRwdXRQb2ludFsyXTtcbiAgICBfdG1wVmVjMlsyXSA9IF90bXBWZWMyWzJdIDwgMiA/IC1fdG1wVmVjMlsyXSA6IF90bXBWZWMyWzJdO1xuXG4gICAgLy8gRGV0ZXJtaW5lIGFsb25nIHdoaWNoIGRpbWVuc2lvbiB0aGUgcG9pbnQgaXMgY2xvc2VzdCB0byB0aGUgQUFCQi5cbiAgICBjb25zdCBpbmRleCA9IF90bXBWZWMyWzBdIDwgX3RtcFZlYzJbMV1cbiAgICAgICAgPyAoX3RtcFZlYzJbMF0gPCBfdG1wVmVjMlsyXVxuICAgICAgICAgICAgPyAwXG4gICAgICAgICAgICA6IDIpXG4gICAgICAgIDogKF90bXBWZWMyWzFdIDwgX3RtcFZlYzJbMl1cbiAgICAgICAgICAgID8gMVxuICAgICAgICAgICAgOiAyKTtcblxuICAgIG91dHB1dFBvaW50W2luZGV4XSA9IF90bXBWZWMxW2luZGV4XTtcbiAgfVxufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBwb2ludCBvZiBpbnRlcnNlY3Rpb24gYmV0d2VlbiBhIGxpbmUgc2VnbWVudCBhbmQgYSBjb3BsYW5hciBxdWFkcmlsYXRlcmFsLlxuICpcbiAqIFRoaXMgYXNzdW1lcyB0aGUgcmVnaW9uIGlzIG5vdCBkZWdlbmVyYXRlIChoYXMgbm9uLXplcm8gc2lkZSBsZW5ndGhzKS5cbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IHBvaSBPdXRwdXQgcGFyYW0uIE51bGwgaWYgdGhlcmUgaXMgbm8gaW50ZXJzZWN0aW9uLlxuICogQHBhcmFtIHtMaW5lU2VnbWVudH0gc2VnbWVudFxuICogQHBhcmFtIHt2ZWMzfSBwbGFuZVZlcnRleDFcbiAqIEBwYXJhbSB7dmVjM30gcGxhbmVWZXJ0ZXgyXG4gKiBAcGFyYW0ge3ZlYzN9IHBsYW5lVmVydGV4M1xuICogQHBhcmFtIHt2ZWMzfSBwbGFuZVZlcnRleDRcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZXJlIGlzIGFuIGludGVyc2VjdGlvbi5cbiAqL1xuZnVuY3Rpb24gZmluZFBvaUJldHdlZW5TZWdtZW50QW5kUGxhbmVSZWdpb24ocG9pLCBzZWdtZW50LCBwbGFuZVZlcnRleDEsIHBsYW5lVmVydGV4MiwgcGxhbmVWZXJ0ZXgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhbmVWZXJ0ZXg0KSB7XG4gIHJldHVybiBmaW5kUG9pQmV0d2VlblNlZ21lbnRBbmRUcmlhbmdsZShwb2ksIHNlZ21lbnQsIHBsYW5lVmVydGV4MSwgcGxhbmVWZXJ0ZXgyLCBwbGFuZVZlcnRleDMpIHx8XG4gICAgICBmaW5kUG9pQmV0d2VlblNlZ21lbnRBbmRUcmlhbmdsZShwb2ksIHNlZ21lbnQsIHBsYW5lVmVydGV4MSwgcGxhbmVWZXJ0ZXgzLCBwbGFuZVZlcnRleDQpO1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBwb2ludCBvZiBpbnRlcnNlY3Rpb24gYmV0d2VlbiBhIGxpbmUgc2VnbWVudCBhbmQgYSB0cmlhbmdsZS5cbiAqXG4gKiBUaGlzIGFzc3VtZXMgdGhlIHRyaWFuZ2xlIGlzIG5vdCBkZWdlbmVyYXRlIChoYXMgbm9uLXplcm8gc2lkZSBsZW5ndGhzKS5cbiAqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBPcmlnaW5hbGx5IGJhc2VkIG9uIERhbiBTdW5kYXkncyBhbGdvcml0aG1zIGF0IGh0dHA6Ly9nZW9tYWxnb3JpdGhtcy5jb20vYTA2LV9pbnRlcnNlY3QtMi5odG1sLlxuICpcbiAqIENvcHlyaWdodCAyMDAxIHNvZnRTdXJmZXIsIDIwMTIgRGFuIFN1bmRheVxuICogVGhpcyBjb2RlIG1heSBiZSBmcmVlbHkgdXNlZCBhbmQgbW9kaWZpZWQgZm9yIGFueSBwdXJwb3NlXG4gKiBwcm92aWRpbmcgdGhhdCB0aGlzIGNvcHlyaWdodCBub3RpY2UgaXMgaW5jbHVkZWQgd2l0aCBpdC5cbiAqIFNvZnRTdXJmZXIgbWFrZXMgbm8gd2FycmFudHkgZm9yIHRoaXMgY29kZSwgYW5kIGNhbm5vdCBiZSBoZWxkXG4gKiBsaWFibGUgZm9yIGFueSByZWFsIG9yIGltYWdpbmVkIGRhbWFnZSByZXN1bHRpbmcgZnJvbSBpdHMgdXNlLlxuICogVXNlcnMgb2YgdGhpcyBjb2RlIG11c3QgdmVyaWZ5IGNvcnJlY3RuZXNzIGZvciB0aGVpciBhcHBsaWNhdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IHBvaSBPdXRwdXQgcGFyYW0uIE51bGwgaWYgdGhlcmUgaXMgbm8gaW50ZXJzZWN0aW9uLlxuICogQHBhcmFtIHtMaW5lU2VnbWVudH0gc2VnbWVudFxuICogQHBhcmFtIHt2ZWMzfSB0cmlhbmdsZVZlcnRleDFcbiAqIEBwYXJhbSB7dmVjM30gdHJpYW5nbGVWZXJ0ZXgyXG4gKiBAcGFyYW0ge3ZlYzN9IHRyaWFuZ2xlVmVydGV4M1xuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlcmUgaXMgYW4gaW50ZXJzZWN0aW9uLlxuICovXG5mdW5jdGlvbiBmaW5kUG9pQmV0d2VlblNlZ21lbnRBbmRUcmlhbmdsZShwb2ksIHNlZ21lbnQsIHRyaWFuZ2xlVmVydGV4MSwgdHJpYW5nbGVWZXJ0ZXgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJpYW5nbGVWZXJ0ZXgzKSB7XG4gIC8vXG4gIC8vIEZpbmQgdGhlIHBvaW50IG9mIGludGVyc2VjdGlvbiBiZXR3ZWVuIHRoZSBzZWdtZW50IGFuZCB0aGUgdHJpYW5nbGUncyBwbGFuZS5cbiAgLy9cblxuICAvLyBGaXJzdCB0cmlhbmdsZSBlZGdlLlxuICB2ZWMzLnN1YnRyYWN0KF90bXBWZWMxLCB0cmlhbmdsZVZlcnRleDIsIHRyaWFuZ2xlVmVydGV4MSk7XG4gIC8vIFNlY29uZCB0cmlhbmdsZSBlZGdlLlxuICB2ZWMzLnN1YnRyYWN0KF90bXBWZWMyLCB0cmlhbmdsZVZlcnRleDMsIHRyaWFuZ2xlVmVydGV4MSk7XG4gIC8vIFRyaWFuZ2xlIG5vcm1hbC5cbiAgdmVjMy5jcm9zcyhfdG1wVmVjMywgX3RtcFZlYzEsIF90bXBWZWMyKTtcbiAgLy8gVHJpYW5nbGUgdG8gc2VnbWVudC5cbiAgdmVjMy5zdWJ0cmFjdChfdG1wVmVjNCwgc2VnbWVudC5zdGFydCwgdHJpYW5nbGVWZXJ0ZXgxKTtcblxuICBjb25zdCBub3JtYWxUb1NlZ21lbnRQcm9qID0gdmVjMy5kb3QoX3RtcFZlYzMsIHNlZ21lbnQuZGlyKTtcblxuICBpZiAobm9ybWFsVG9TZWdtZW50UHJvaiA8IEVQU0lMT04gJiYgbm9ybWFsVG9TZWdtZW50UHJvaiA+IC1FUFNJTE9OKSB7XG4gICAgLy8gVGhlIGxpbmUgc2VnbWVudCBpcyBwYXJhbGxlbCB0byB0aGUgdHJpYW5nbGUuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3Qgbm9ybWFsVG9EaWZmUHJvaiA9IC12ZWMzLmRvdChfdG1wVmVjMywgX3RtcFZlYzQpO1xuICBjb25zdCBzZWdtZW50Tm9ybWFsaXplZERpc3RhbmNlID0gbm9ybWFsVG9EaWZmUHJvaiAvIG5vcm1hbFRvU2VnbWVudFByb2o7XG5cbiAgaWYgKHNlZ21lbnROb3JtYWxpemVkRGlzdGFuY2UgPCAwIHx8IHNlZ21lbnROb3JtYWxpemVkRGlzdGFuY2UgPiAxKSB7XG4gICAgLy8gVGhlIGxpbmUgc2VnbWVudCBlbmRzIGJlZm9yZSBpbnRlcnNlY3RpbmcgdGhlIHBsYW5lLlxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZlYzMuc2NhbGVBbmRBZGQocG9pLCBzZWdtZW50LnN0YXJ0LCBzZWdtZW50LmRpciwgc2VnbWVudE5vcm1hbGl6ZWREaXN0YW5jZSk7XG5cbiAgLy9cbiAgLy8gRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIHBvaW50IG9mIGludGVyc2VjdGlvbiBsaWVzIHdpdGhpbiB0aGUgdHJpYW5nbGUuXG4gIC8vXG5cbiAgY29uc3QgZWRnZTFEb3RFZGdlMSA9IHZlYzMuZG90KF90bXBWZWMxLCBfdG1wVmVjMSk7XG4gIGNvbnN0IGVkZ2UxRG90RWRnZTIgPSB2ZWMzLmRvdChfdG1wVmVjMSwgX3RtcFZlYzIpO1xuICBjb25zdCBlZGdlMkRvdEVkZ2UyID0gdmVjMy5kb3QoX3RtcFZlYzIsIF90bXBWZWMyKTtcbiAgLy8gVHJpYW5nbGUgdG8gcG9pbnQgb2YgaW50ZXJzZWN0aW9uLlxuICB2ZWMzLnN1YnRyYWN0KF90bXBWZWMzLCBwb2ksIHRyaWFuZ2xlVmVydGV4MSk7XG4gIGNvbnN0IGRpZmZEb3RFZGdlMSA9IHZlYzMuZG90KF90bXBWZWMzLCBfdG1wVmVjMSk7XG4gIGNvbnN0IGRpZmZEb3RFZGdlMiA9IHZlYzMuZG90KF90bXBWZWMzLCBfdG1wVmVjMik7XG4gIGNvbnN0IGRlbm9taW5hdG9yID0gZWRnZTFEb3RFZGdlMiAqIGVkZ2UxRG90RWRnZTIgLSBlZGdlMURvdEVkZ2UxICogZWRnZTJEb3RFZGdlMjtcblxuICAvLyBDaGVjayB0aGUgdHJpYW5nbGUncyBwYXJhbWV0cmljIGNvb3JkaW5hdGVzLlxuICBjb25zdCBzID0gKGVkZ2UxRG90RWRnZTIgKiBkaWZmRG90RWRnZTIgLSBlZGdlMkRvdEVkZ2UyICogZGlmZkRvdEVkZ2UxKSAvIGRlbm9taW5hdG9yO1xuICBpZiAocyA8IDAgfHwgcyA+IDEpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgdCA9IChlZGdlMURvdEVkZ2UyICogZGlmZkRvdEVkZ2UxIC0gZWRnZTFEb3RFZGdlMSAqIGRpZmZEb3RFZGdlMikgLyBkZW5vbWluYXRvcjtcbiAgaWYgKHQgPCAwIHx8IHMgKyB0ID4gMSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIE9yaWdpbmFsbHkgYmFzZWQgb24gSnVra2EgSnlsw6Rua2kncyBhbGdvcml0aG0gYXRcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9qdWovTWF0aEdlb0xpYi9ibG9iLzEwOTNlMzlkOTFkZWY3ZmY2OTA1ZmI3NDg5ODkzMTkwZDdkODEzNTMvc3JjL0dlb21ldHJ5L09CQi5jcHAuXG4gKlxuICogQ29weXJpZ2h0IDIwMTEgSnVra2EgSnlsw6Rua2lcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dHB1dFBvaW50IE91dHB1dCBwYXJhbWV0ZXIuXG4gKiBAcGFyYW0ge09iYn0gb2JiXG4gKiBAcGFyYW0ge3ZlYzN9IHRhcmdldFBvaW50XG4gKi9cbmZ1bmN0aW9uIGZpbmRDbG9zZXN0UG9pbnRGcm9tT2JiVG9Qb2ludChvdXRwdXRQb2ludCwgb2JiLCB0YXJnZXRQb2ludCkge1xuICB2ZWMzLnN1YnRyYWN0KF90bXBWZWMxLCB0YXJnZXRQb2ludCwgb2JiLmNlbnRlck9mVm9sdW1lKTtcbiAgdmVjMy5jb3B5KG91dHB1dFBvaW50LCBvYmIuY2VudGVyT2ZWb2x1bWUpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkrKykge1xuICAgIC8vIENvbXB1dGUgdGhlIGRpc3BsYWNlbWVudCBhbG9uZyB0aGlzIGF4aXMuXG4gICAgbGV0IHByb2plY3Rpb24gPSB2ZWMzLmRvdChvYmIuYXhlc1tpXSwgX3RtcFZlYzEpO1xuICAgIHByb2plY3Rpb24gPSBwcm9qZWN0aW9uID4gb2JiLmhhbGZTaWRlTGVuZ3Roc1tpXSA/IG9iYi5oYWxmU2lkZUxlbmd0aHNbaV0gOlxuICAgICAgICAocHJvamVjdGlvbiA8IC1vYmIuaGFsZlNpZGVMZW5ndGhzW2ldID8gLW9iYi5oYWxmU2lkZUxlbmd0aHNbaV0gOiBwcm9qZWN0aW9uKTtcbiAgICB2ZWMzLnNjYWxlQW5kQWRkKG91dHB1dFBvaW50LCBvdXRwdXRQb2ludCwgb2JiLmF4ZXNbaV0sIHByb2plY3Rpb24pO1xuICB9XG59XG5cbi8qKlxuICogRmluZHMgdGhlIGNsb3Nlc3QgcG9zaXRpb24gb24gb25lIGxpbmUgc2VnbWVudCB0byB0aGUgb3RoZXIgbGluZSBzZWdtZW50LCBhbmQgdmljZSB2ZXJzYS5cbiAqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBPcmlnaW5hbGx5IGJhc2VkIG9uIEp1a2thIEp5bMOkbmtpJ3MgYWxnb3JpdGhtIGF0XG4gKiBodHRwczovL2dpdGh1Yi5jb20vanVqL01hdGhHZW9MaWIvYmxvYi9mZjJkMzQ4YTE2NzAwOGM4MzFhZTMwNDQ4M2I4MjQ2NDdmNzFmYmY2L3NyYy9HZW9tZXRyeS9MaW5lU2VnbWVudC5jcHAuXG4gKlxuICogQ29weXJpZ2h0IDIwMTEgSnVra2EgSnlsw6Rua2lcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IGNsb3Nlc3RBIE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7dmVjM30gY2xvc2VzdEIgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHtMaW5lU2VnbWVudH0gc2VnbWVudEFcbiAqIEBwYXJhbSB7TGluZVNlZ21lbnR9IHNlZ21lbnRCXG4gKi9cbmZ1bmN0aW9uIGZpbmRDbG9zZXN0UG9pbnRzRnJvbVNlZ21lbnRUb1NlZ21lbnQoY2xvc2VzdEEsIGNsb3Nlc3RCLCBzZWdtZW50QSwgc2VnbWVudEIpIHtcbiAgY29uc3Qge2Rpc3RBLCBkaXN0Qn0gPSBmaW5kQ2xvc2VzdFBvaW50c0Zyb21MaW5lVG9MaW5lKFxuICAgICAgc2VnbWVudEEuc3RhcnQsIHNlZ21lbnRBLmRpciwgc2VnbWVudEIuc3RhcnQsIHNlZ21lbnRCLmRpcik7XG5cbiAgY29uc3QgaXNEaXN0QUluQm91bmRzID0gZGlzdEEgPj0gMCAmJiBkaXN0QSA8PSAxO1xuICBjb25zdCBpc0Rpc3RCSW5Cb3VuZHMgPSBkaXN0QiA+PSAwICYmIGRpc3RCIDw9IDE7XG5cbiAgaWYgKGlzRGlzdEFJbkJvdW5kcykge1xuICAgIGlmIChpc0Rpc3RCSW5Cb3VuZHMpIHtcbiAgICAgIC8vIFRoZSBkaXN0YW5jZXMgYWxvbmcgYm90aCBsaW5lIHNlZ21lbnRzIGFyZSB3aXRoaW4gYm91bmRzLlxuICAgICAgdmVjMy5zY2FsZUFuZEFkZChjbG9zZXN0QSwgc2VnbWVudEEuc3RhcnQsIHNlZ21lbnRBLmRpciwgZGlzdEEpO1xuICAgICAgdmVjMy5zY2FsZUFuZEFkZChjbG9zZXN0Qiwgc2VnbWVudEIuc3RhcnQsIHNlZ21lbnRCLmRpciwgZGlzdEIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPbmx5IHRoZSBkaXN0YW5jZSBhbG9uZyB0aGUgZmlyc3QgbGluZSBzZWdtZW50IGlzIHdpdGhpbiBib3VuZHMuXG4gICAgICBpZiAoZGlzdEIgPCAwKSB7XG4gICAgICAgIHZlYzMuY29weShjbG9zZXN0Qiwgc2VnbWVudEIuc3RhcnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmVjMy5jb3B5KGNsb3Nlc3RCLCBzZWdtZW50Qi5lbmQpO1xuICAgICAgfVxuICAgICAgZmluZENsb3Nlc3RQb2ludE9uU2VnbWVudFRvUG9pbnQoY2xvc2VzdEEsIHNlZ21lbnRBLCBjbG9zZXN0Qik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChpc0Rpc3RCSW5Cb3VuZHMpIHtcbiAgICAgIC8vIE9ubHkgdGhlIGRpc3RhbmNlIGFsb25nIHRoZSBzZWNvbmQgbGluZSBzZWdtZW50IGlzIHdpdGhpbiBib3VuZHMuXG4gICAgICBpZiAoZGlzdEEgPCAwKSB7XG4gICAgICAgIHZlYzMuY29weShjbG9zZXN0QSwgc2VnbWVudEEuc3RhcnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmVjMy5jb3B5KGNsb3Nlc3RBLCBzZWdtZW50QS5lbmQpO1xuICAgICAgfVxuICAgICAgZmluZENsb3Nlc3RQb2ludE9uU2VnbWVudFRvUG9pbnQoY2xvc2VzdEIsIHNlZ21lbnRCLCBjbG9zZXN0QSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE5laXRoZXIgb2YgdGhlIGRpc3RhbmNlcyBhbG9uZyBlaXRoZXIgbGluZSBzZWdtZW50IGFyZSB3aXRoaW4gYm91bmRzLlxuICAgICAgaWYgKGRpc3RBIDwgMCkge1xuICAgICAgICB2ZWMzLmNvcHkoY2xvc2VzdEEsIHNlZ21lbnRBLnN0YXJ0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZlYzMuY29weShjbG9zZXN0QSwgc2VnbWVudEEuZW5kKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRpc3RCIDwgMCkge1xuICAgICAgICB2ZWMzLmNvcHkoY2xvc2VzdEIsIHNlZ21lbnRCLnN0YXJ0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZlYzMuY29weShjbG9zZXN0Qiwgc2VnbWVudEIuZW5kKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgYWx0Q2xvc2VzdEEgPSB2ZWMzLmNyZWF0ZSgpO1xuICAgICAgY29uc3QgYWx0Q2xvc2VzdEIgPSB2ZWMzLmNyZWF0ZSgpO1xuXG4gICAgICBmaW5kQ2xvc2VzdFBvaW50T25TZWdtZW50VG9Qb2ludChhbHRDbG9zZXN0QSwgc2VnbWVudEEsIGNsb3Nlc3RCKTtcbiAgICAgIGZpbmRDbG9zZXN0UG9pbnRPblNlZ21lbnRUb1BvaW50KGFsdENsb3Nlc3RCLCBzZWdtZW50QiwgY2xvc2VzdEEpO1xuXG4gICAgICBpZiAodmVjMy5zcXVhcmVkRGlzdGFuY2UoYWx0Q2xvc2VzdEEsIGNsb3Nlc3RCKSA8XG4gICAgICAgICAgdmVjMy5zcXVhcmVkRGlzdGFuY2UoYWx0Q2xvc2VzdEIsIGNsb3Nlc3RBKSkge1xuICAgICAgICB2ZWMzLmNvcHkoY2xvc2VzdEEsIGFsdENsb3Nlc3RBKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZlYzMuY29weShjbG9zZXN0QiwgYWx0Q2xvc2VzdEIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBjbG9zZXN0IHBvc2l0aW9uIG9uIGEgbGluZSBzZWdtZW50IHRvIGEgcG9pbnQuXG4gKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogT3JpZ2luYWxseSBiYXNlZCBvbiBKdWtrYSBKeWzDpG5raSdzIGFsZ29yaXRobSBhdFxuICogaHR0cHM6Ly9naXRodWIuY29tL2p1ai9NYXRoR2VvTGliL2Jsb2IvZmYyZDM0OGExNjcwMDhjODMxYWUzMDQ0ODNiODI0NjQ3ZjcxZmJmNi9zcmMvR2VvbWV0cnkvTGluZVNlZ21lbnQuY3BwLlxuICpcbiAqIENvcHlyaWdodCAyMDExIEp1a2thIEp5bMOkbmtpXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBjbG9zZXN0UG9pbnQgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHtMaW5lU2VnbWVudH0gc2VnbWVudFxuICogQHBhcmFtIHt2ZWMzfSBwb2ludFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZmluZENsb3Nlc3RQb2ludE9uU2VnbWVudFRvUG9pbnQoY2xvc2VzdFBvaW50LCBzZWdtZW50LCBwb2ludCkge1xuICBjb25zdCBkaXJTcXVhcmVkTGVuZ3RoID0gdmVjMy5zcXVhcmVkTGVuZ3RoKHNlZ21lbnQuZGlyKTtcblxuICBpZiAoIWRpclNxdWFyZWRMZW5ndGgpIHtcbiAgICAvLyBUaGUgcG9pbnQgaXMgYXQgdGhlIHNlZ21lbnQgc3RhcnQuXG4gICAgdmVjMy5jb3B5KGNsb3Nlc3RQb2ludCwgc2VnbWVudC5zdGFydCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBwcm9qZWN0aW9uIG9mIHRoZSBwb2ludCBvbnRvIHRoZSBsaW5lIGV4dGVuZGluZyB0aHJvdWdoIHRoZSBzZWdtZW50LlxuICAgIHZlYzMuc3VidHJhY3QoX3RtcFZlYzEsIHBvaW50LCBzZWdtZW50LnN0YXJ0KTtcbiAgICBjb25zdCB0ID0gdmVjMy5kb3QoX3RtcFZlYzEsIHNlZ21lbnQuZGlyKSAvIGRpclNxdWFyZWRMZW5ndGg7XG5cbiAgICBpZiAodCA8IDApIHtcbiAgICAgIC8vIFRoZSBwb2ludCBwcm9qZWN0cyBiZXlvbmQgdGhlIHNlZ21lbnQgc3RhcnQuXG4gICAgICB2ZWMzLmNvcHkoY2xvc2VzdFBvaW50LCBzZWdtZW50LnN0YXJ0KTtcbiAgICB9IGVsc2UgaWYgKHQgPiAxKSB7XG4gICAgICAvLyBUaGUgcG9pbnQgcHJvamVjdHMgYmV5b25kIHRoZSBzZWdtZW50IGVuZC5cbiAgICAgIHZlYzMuY29weShjbG9zZXN0UG9pbnQsIHNlZ21lbnQuZW5kKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhlIHBvaW50IHByb2plY3RzIGJldHdlZW4gdGhlIHN0YXJ0IGFuZCBlbmQgb2YgdGhlIHNlZ21lbnQuXG4gICAgICB2ZWMzLnNjYWxlQW5kQWRkKGNsb3Nlc3RQb2ludCwgc2VnbWVudC5zdGFydCwgc2VnbWVudC5kaXIsIHQpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBjbG9zZXN0IHBvc2l0aW9uIG9uIG9uZSBsaW5lIHRvIHRoZSBvdGhlciBsaW5lLCBhbmQgdmljZSB2ZXJzYS5cbiAqXG4gKiBUaGUgcG9zaXRpb25zIGFyZSByZXByZXNlbnRlZCBhcyBzY2FsYXItdmFsdWUgZGlzdGFuY2VzIGZyb20gdGhlIFwic3RhcnRcIiBwb3NpdGlvbnMgb2YgZWFjaCBsaW5lLlxuICogVGhlc2UgYXJlIHNjYWxlZCBhY2NvcmRpbmcgdG8gdGhlIGdpdmVuIGRpcmVjdGlvbiB2ZWN0b3JzLlxuICpcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIE9yaWdpbmFsbHkgYmFzZWQgb24gSnVra2EgSnlsw6Rua2kncyBhbGdvcml0aG0gYXRcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9qdWovTWF0aEdlb0xpYi9ibG9iL2ZmMmQzNDhhMTY3MDA4YzgzMWFlMzA0NDgzYjgyNDY0N2Y3MWZiZjYvc3JjL0dlb21ldHJ5L0xpbmUuY3BwLlxuICpcbiAqIENvcHlyaWdodCAyMDExIEp1a2thIEp5bMOkbmtpXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBzdGFydEEgVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIGxpbmUgQS5cbiAqIEBwYXJhbSB7dmVjM30gZGlyQSBUaGUgKHVubm9ybWFsaXplZCkgZGlyZWN0aW9uIG9mIGxpbmUgQS4gQ2Fubm90IGJlIHplcm8uXG4gKiBAcGFyYW0ge3ZlYzN9IHN0YXJ0QiBUaGUgc3RhcnQgcG9zaXRpb24gb2YgbGluZSBCLlxuICogQHBhcmFtIHt2ZWMzfSBkaXJCIFRoZSAodW5ub3JtYWxpemVkKSBkaXJlY3Rpb24gb2YgbGluZSBCLiBDYW5ub3QgYmUgemVyby5cbiAqIEByZXR1cm5zIHt7ZGlzdEE6IE51bWJlciwgZGlzdEI6IE51bWJlcn19XG4gKi9cbmZ1bmN0aW9uIGZpbmRDbG9zZXN0UG9pbnRzRnJvbUxpbmVUb0xpbmUoc3RhcnRBLCBkaXJBLCBzdGFydEIsIGRpckIpIHtcbiAgdmVjMy5zdWJ0cmFjdChfdG1wVmVjMSwgc3RhcnRBLCBzdGFydEIpO1xuICBjb25zdCBkaXJCRG90RGlyQVRvQiA9IHZlYzMuZG90KGRpckIsIF90bXBWZWMxKTtcbiAgY29uc3QgZGlyQURvdERpckFUb0IgPSB2ZWMzLmRvdChkaXJBLCBfdG1wVmVjMSk7XG5cbiAgY29uc3Qgc3FyTGVuRGlyQiA9IHZlYzMuc3F1YXJlZExlbmd0aChkaXJCKTtcbiAgY29uc3Qgc3FyTGVuRGlyQSA9IHZlYzMuc3F1YXJlZExlbmd0aChkaXJBKTtcblxuICBjb25zdCBkaXJBRG90RGlyQiA9IHZlYzMuZG90KGRpckEsIGRpckIpO1xuXG4gIGNvbnN0IGRlbm9taW5hdG9yID0gc3FyTGVuRGlyQSAqIHNxckxlbkRpckIgLSBkaXJBRG90RGlyQiAqIGRpckFEb3REaXJCO1xuXG4gIGNvbnN0IGRpc3RBID0gZGVub21pbmF0b3IgPCBFUFNJTE9OXG4gICAgICA/IDBcbiAgICAgIDogKGRpckFEb3REaXJCICogZGlyQkRvdERpckFUb0IgLSBzcXJMZW5EaXJCICogZGlyQURvdERpckFUb0IpIC8gZGVub21pbmF0b3I7XG4gIGNvbnN0IGRpc3RCID0gKGRpckJEb3REaXJBVG9CICsgZGlyQURvdERpckIgKiBkaXN0QSkgLyBzcXJMZW5EaXJCO1xuXG4gIHJldHVybiB7XG4gICAgZGlzdEE6IGRpc3RBLFxuICAgIGRpc3RCOiBkaXN0QlxuICB9O1xufVxuXG4vKipcbiAqIEEgZ29vZCBkZXNjcmlwdGlvbiBvZiB3aHkgd2UgbmVlZCB0aGVzZSBzcGVjaWFsIG9wZXJhdGlvbnMgZm9yIHJvdGF0aW5nIHRlbnNvcnMgY2FuIGJlIGZvdW5kXG4gKiBoZXJlOiBodHRwOi8vd3d3LnJhbmR5Z2F1bC5uZXQvMjAxNC8wNC8wOS90cmFuc2Zvcm1hdGlvbnMtY2hhbmdlLW9mLWJhc2lzLW1hdHJpeC8uXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXRwdXQgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHttYXQzfSB0ZW5zb3JcbiAqIEBwYXJhbSB7cXVhdH0gcm90YXRpb25cbiAqL1xuZnVuY3Rpb24gcm90YXRlVGVuc29yKG91dHB1dCwgdGVuc29yLCByb3RhdGlvbikgey8vIFRPRE86IFRlc3QgdGhpcyBzb21laG93Li4uXG4gIG1hdDMuZnJvbVF1YXQoX3RtcE1hdCwgcm90YXRpb24pO1xuICBtYXQzLm11bHRpcGx5KG91dHB1dCwgX3RtcE1hdCwgdGVuc29yKTtcbiAgbWF0My5pbnZlcnQoX3RtcE1hdCwgX3RtcE1hdCk7XG4gIG1hdDMubXVsdGlwbHkob3V0cHV0LCBvdXRwdXQsIF90bXBNYXQpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7QWFiYn0gYWFiYlxuICogQHBhcmFtIHt2ZWMzfSBwb2ludFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGFhYmJWc1BvaW50KGFhYmIsIHBvaW50KSB7XG4gIHJldHVybiBwb2ludFswXSA+PSBhYWJiLm1pblggJiYgcG9pbnRbMF0gPD0gYWFiYi5tYXhYICYmXG4gICAgICBwb2ludFsxXSA+PSBhYWJiLm1pblkgJiYgcG9pbnRbMV0gPD0gYWFiYi5tYXhZICYmXG4gICAgICBwb2ludFsyXSA+PSBhYWJiLm1pblogJiYgcG9pbnRbMl0gPD0gYWFiYi5tYXhaXG59XG5cbi8qKlxuICogQHBhcmFtIHtxdWF0fSBvdXRcbiAqIEBwYXJhbSB7cXVhdH0gYVxuICogQHBhcmFtIHtxdWF0fSBiXG4gKiBAcGFyYW0ge251bWJlcn0gc2NhbGVcbiAqIEByZXR1cm5zIHtxdWF0fVxuICovXG5mdW5jdGlvbiBzY2FsZUFuZEFkZFF1YXQob3V0LCBhLCBiLCBzY2FsZSkge1xuICByZXR1cm4gcXVhdC5zZXQob3V0LFxuICAgICAgYVswXSArIGJbMF0gKiBzY2FsZSxcbiAgICAgIGFbMV0gKyBiWzFdICogc2NhbGUsXG4gICAgICBhWzJdICsgYlsyXSAqIHNjYWxlLFxuICAgICAgYVszXSArIGJbM10gKiBzY2FsZSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHt2ZWMzfSBhXG4gKiBAcGFyYW0ge3ZlYzN9IGJcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBhcmVWZWMzc0Nsb3NlKGEsIGIpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICBpZiAoYVtpXSAtIGJbaV0gPiBFUFNJTE9OIHx8IGJbaV0gLSBhW2ldID4gRVBTSUxPTikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gUmUtdXNlZCBhY3Jvc3MgdGhlIGdlb21ldHJ5IHV0aWxpdHkgZnVuY3Rpb25zLCBzbyB3ZSBkb24ndCBpbnN0YW50aWF0ZSBhcyBtYW55IHZlYzMgb2JqZWN0cy5cbmNvbnN0IF90bXBWZWMxID0gdmVjMy5jcmVhdGUoKTtcbmNvbnN0IF90bXBWZWMyID0gdmVjMy5jcmVhdGUoKTtcbmNvbnN0IF90bXBWZWMzID0gdmVjMy5jcmVhdGUoKTtcbmNvbnN0IF90bXBWZWM0ID0gdmVjMy5jcmVhdGUoKTtcbmNvbnN0IF90bXBNYXQgPSBtYXQzLmNyZWF0ZSgpO1xuXG4vLyBFeHBvc2VkIHRvIGNvbnN1bWVycywgc28gdGhleSBkb24ndCBoYXZlIHRvIGluc3RhbnRpYXRlIGFzIG1hbnkgdmVjMyBvYmplY3RzLlxuY29uc3QgdG1wVmVjMSA9IHZlYzMuY3JlYXRlKCk7XG5jb25zdCB0bXBWZWMyID0gdmVjMy5jcmVhdGUoKTtcbmNvbnN0IHRtcFZlYzMgPSB2ZWMzLmNyZWF0ZSgpO1xuY29uc3QgdG1wVmVjNCA9IHZlYzMuY3JlYXRlKCk7XG5cbmNvbnN0IF9nZW9tZXRyeSA9IHtcbiAgRVBTSUxPTixcbiAgSEFMRl9QSSxcbiAgVFdPX1BJLFxuICBzY2FsZUFuZEFkZFF1YXQsXG59O1xuXG5leHBvcnQge1xuICBfZ2VvbWV0cnksXG4gIHRtcFZlYzEsXG4gIHRtcFZlYzIsXG4gIHRtcFZlYzMsXG4gIHRtcFZlYzQsXG4gIGZpbmRTcXVhcmVkRGlzdGFuY2VCZXR3ZWVuU2VnbWVudHMsXG4gIGZpbmRTcXVhcmVkRGlzdGFuY2VGcm9tU2VnbWVudFRvUG9pbnQsXG4gIGZpbmRDbG9zZXN0UG9pbnRGcm9tQWFiYlRvUG9pbnQsXG4gIGZpbmRDbG9zZXN0UG9pbnRGcm9tQWFiYlN1cmZhY2VUb1BvaW50LFxuICBmaW5kUG9pQmV0d2VlblNlZ21lbnRBbmRUcmlhbmdsZSxcbiAgZmluZFBvaUJldHdlZW5TZWdtZW50QW5kUGxhbmVSZWdpb24sXG4gIGZpbmRDbG9zZXN0UG9pbnRGcm9tT2JiVG9Qb2ludCxcbiAgZmluZENsb3Nlc3RQb2ludHNGcm9tU2VnbWVudFRvU2VnbWVudCxcbiAgZmluZENsb3Nlc3RQb2ludE9uU2VnbWVudFRvUG9pbnQsXG4gIGZpbmRDbG9zZXN0UG9pbnRzRnJvbUxpbmVUb0xpbmUsXG4gIHJvdGF0ZVRlbnNvcixcbiAgYWFiYlZzUG9pbnQsXG4gIGFyZVZlYzNzQ2xvc2UsXG59O1xuIiwiLyoqXG4gKiBUaGlzIG1vZHVsZSBkZWZpbmVzIGEgY29sbGVjdGlvbiBvZiBzdGF0aWMgdXRpbGl0eSBmdW5jdGlvbnMgZm9yIGNhbGN1bGF0aW5nIGluZXJ0aWEgdGVuc29ycy5cbiAqL1xuXG5pbXBvcnQge19nZW9tZXRyeSwgcm90YXRlVGVuc29yfSBmcm9tICcuL2dlb21ldHJ5JztcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzXG4gKiBAcGFyYW0ge251bWJlcn0gbWFzc1xuICogQHJldHVybnMge21hdDN9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVNwaGVyZUluZXJ0aWFUZW5zb3IocmFkaXVzLCBtYXNzKSB7Ly8gVE9ETzogVGVzdCB0aGlzIHNvbWVob3cuLi5cbiAgY29uc3QgdGVuc29yID0gbWF0My5jcmVhdGUoKTtcbiAgY29uc3QgbW9tZW50ID0gMiAvIDUgKiBtYXNzICogcmFkaXVzICogcmFkaXVzO1xuICB0ZW5zb3JbMF0gPSBtb21lbnQ7XG4gIHRlbnNvcls0XSA9IG1vbWVudDtcbiAgdGVuc29yWzhdID0gbW9tZW50O1xuICByZXR1cm4gdGVuc29yO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSByYW5nZVhcbiAqIEBwYXJhbSB7bnVtYmVyfSByYW5nZVlcbiAqIEBwYXJhbSB7bnVtYmVyfSByYW5nZVpcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXNzXG4gKiBAcmV0dXJucyB7bWF0M31cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQm94SW5lcnRpYVRlbnNvcihyYW5nZVgsIHJhbmdlWSwgcmFuZ2VaLCBtYXNzKSB7Ly8gVE9ETzogVGVzdCB0aGlzIHNvbWVob3cuLi5cbiAgY29uc3QgdGVuc29yID0gbWF0My5jcmVhdGUoKTtcbiAgY29uc3QgdG1wID0gbWFzcyAvIDEyO1xuICBjb25zdCB4UmFuZ2VTcXVhcmVkID0gcmFuZ2VYICogcmFuZ2VYO1xuICBjb25zdCB5UmFuZ2VTcXVhcmVkID0gcmFuZ2VZICogcmFuZ2VZO1xuICBjb25zdCB6UmFuZ2VTcXVhcmVkID0gcmFuZ2VaICogcmFuZ2VaO1xuICB0ZW5zb3JbMF0gPSB0bXAgKiAoeVJhbmdlU3F1YXJlZCArIHpSYW5nZVNxdWFyZWQpO1xuICB0ZW5zb3JbNF0gPSB0bXAgKiAoeFJhbmdlU3F1YXJlZCArIHlSYW5nZVNxdWFyZWQpO1xuICB0ZW5zb3JbOF0gPSB0bXAgKiAoeFJhbmdlU3F1YXJlZCArIHpSYW5nZVNxdWFyZWQpO1xuICByZXR1cm4gdGVuc29yO1xufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIE9yaWdpbmFsbHkgYmFzZWQgb24gQm9qYW4gTG92cm92aWMncyBhbGdvcml0aG0gYXRcbiAqIGh0dHA6Ly93d3cuZ2FtZWRldi5uZXQvcGFnZS9yZXNvdXJjZXMvXy90ZWNobmljYWwvbWF0aC1hbmQtcGh5c2ljcy9jYXBzdWxlLWluZXJ0aWEtdGVuc29yLXIzODU2LlxuICpcbiAqIENvcHlyaWdodCAyMDE0IEJvamFuIExvdnJvdmljXG4gKlxuICogR2FtZURldi5uZXQgT3BlbiBMaWNlbnNlXG4gKiAoaHR0cDovL3d3dy5nYW1lZGV2Lm5ldC9wYWdlL3Jlc291cmNlcy9fL2dkbmV0aGVscC9nYW1lZGV2bmV0LW9wZW4tbGljZW5zZS1yMjk1NilcbiAqXG4gKiBURVJNUyBBTkQgQ09ORElUSU9OUyBGT1IgVVNFLCBSRVBST0RVQ1RJT04sIEFORCBESVNUUklCVVRJT05cbiAqXG4gKiAxLiBEZWZpbml0aW9ucy5cbiAqXG4gKiBcIkFydGljbGVcIiBzaGFsbCByZWZlciB0byBhbnkgYm9keSBvZiB0ZXh0IHdyaXR0ZW4gYnkgQXV0aG9yIHdoaWNoIGRlc2NyaWJlcyBhbmQgZG9jdW1lbnRzIHRoZSB1c2VcbiAqIGFuZC9vciBvcGVyYXRpb24gb2YgU291cmNlLiBJdCBzcGVjaWZpY2FsbHkgZG9lcyBub3QgcmVmZXIgdG8gYW55IGFjY29tcGFueWluZyBTb3VyY2UgZWl0aGVyXG4gKiBlbWJlZGRlZCB3aXRoaW4gdGhlIGJvZHkgb2YgdGV4dCBvciBhdHRhY2hlZCB0byB0aGUgYXJ0aWNsZSBhcyBhIGZpbGUuXG4gKlxuICogXCJBdXRob3JcIiBtZWFucyB0aGUgaW5kaXZpZHVhbCBvciBlbnRpdHkgdGhhdCBvZmZlcnMgdGhlIFdvcmsgdW5kZXIgdGhlIHRlcm1zIG9mIHRoaXMgTGljZW5zZS5cbiAqXG4gKiBcIkxpY2Vuc2VcIiBzaGFsbCBtZWFuIHRoZSB0ZXJtcyBhbmQgY29uZGl0aW9ucyBmb3IgdXNlLCByZXByb2R1Y3Rpb24sIGFuZCBkaXN0cmlidXRpb24gYXMgZGVmaW5lZFxuICogYnkgU2VjdGlvbnMgMSB0aHJvdWdoIDkgb2YgdGhpcyBkb2N1bWVudC5cbiAqXG4gKiBcIkxpY2Vuc29yXCIgc2hhbGwgbWVhbiB0aGUgY29weXJpZ2h0IG93bmVyIG9yIGVudGl0eSBhdXRob3JpemVkIGJ5IHRoZSBjb3B5cmlnaHQgb3duZXIgdGhhdCBpc1xuICogZ3JhbnRpbmcgdGhlIExpY2Vuc2UuXG4gKlxuICogXCJZb3VcIiAob3IgXCJZb3VyXCIpIHNoYWxsIG1lYW4gYW4gaW5kaXZpZHVhbCBvciBlbnRpdHkgZXhlcmNpc2luZyBwZXJtaXNzaW9ucyBncmFudGVkIGJ5IHRoaXNcbiAqIExpY2Vuc2UuXG4gKlxuICogXCJTb3VyY2VcIiBzaGFsbCBpbmNsdWRlIGFsbCBzb2Z0d2FyZSB0ZXh0IHNvdXJjZSBjb2RlIGFuZCBjb25maWd1cmF0aW9uIGZpbGVzIHVzZWQgdG8gY3JlYXRlXG4gKiBleGVjdXRhYmxlIHNvZnR3YXJlXG4gKlxuICogXCJPYmplY3RcIiBzaGFsbCBtZWFuIGFueSBTb3VyY2Ugd2hpY2ggaGFzIGJlZW4gY29udmVydGVkIGludG8gYSBtYWNoaW5lIGV4ZWN1dGFibGUgc29mdHdhcmVcbiAqXG4gKiBcIldvcmtcIiBjb25zaXN0cyBvZiBib3RoIHRoZSBBcnRpY2xlIGFuZCBTb3VyY2VcbiAqXG4gKiBcIlB1Ymxpc2hlclwiIHJlZmVycyB0byBHYW1lRGV2Lm5ldCBMTENcbiAqXG4gKiBUaGlzIGFncmVlbWVudCBpcyBiZXR3ZWVuIFlvdSBhbmQgQXV0aG9yLCB0aGUgb3duZXIgYW5kIGNyZWF0b3Igb2YgdGhlIFdvcmsgbG9jYXRlZCBhdFxuICogR2FtZWRldi5uZXQuXG4gKlxuICogMi4gRmFpciBEZWFsaW5nIFJpZ2h0cy5cbiAqXG4gKiBOb3RoaW5nIGluIHRoaXMgTGljZW5zZSBpcyBpbnRlbmRlZCB0byByZWR1Y2UsIGxpbWl0LCBvciByZXN0cmljdCBhbnkgdXNlcyBmcmVlIGZyb20gY29weXJpZ2h0IG9yXG4gKiByaWdodHMgYXJpc2luZyBmcm9tIGxpbWl0YXRpb25zIG9yIGV4Y2VwdGlvbnMgdGhhdCBhcmUgcHJvdmlkZWQgZm9yIGluIGNvbm5lY3Rpb24gd2l0aCB0aGVcbiAqIGNvcHlyaWdodCBwcm90ZWN0aW9uIHVuZGVyIGNvcHlyaWdodCBsYXcgb3Igb3RoZXIgYXBwbGljYWJsZSBsYXdzLlxuICpcbiAqIDMuIEdyYW50IG9mIENvcHlyaWdodCBMaWNlbnNlLlxuICpcbiAqIFN1YmplY3QgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zIG9mIHRoaXMgTGljZW5zZSwgdGhlIEF1dGhvciBoZXJlYnkgZ3JhbnRzIHRvIFlvdSBhIHBlcnBldHVhbCxcbiAqIHdvcmxkd2lkZSwgbm9uLWV4Y2x1c2l2ZSwgbm8tY2hhcmdlLCByb3lhbHR5LWZyZWUsIGlycmV2b2NhYmxlIGNvcHlyaWdodCBsaWNlbnNlIHRvIHRoZSBXb3JrXG4gKiB1bmRlciB0aGUgZm9sbG93aW5nIHN0YXRlZCB0ZXJtczpcbiAqIFlvdSBtYXkgbm90IHJlcHJvZHVjZSB0aGUgQXJ0aWNsZSBvbiBhbnkgb3RoZXIgd2Vic2l0ZSBvdXRzaWRlIG9mIEdhbWVkZXYubmV0IHdpdGhvdXQgZXhwcmVzc1xuICogd3JpdHRlbiBwZXJtaXNzaW9uIGZyb20gdGhlIEF1dGhvclxuICogWW91IG1heSB1c2UsIGNvcHksIGxpbmssIG1vZGlmeSBhbmQgZGlzdHJpYnV0ZSB1bmRlciBZb3VyIG93biB0ZXJtcywgYmluYXJ5IE9iamVjdCBjb2RlIHZlcnNpb25zXG4gKiBiYXNlZCBvbiB0aGUgV29yayBpbiB5b3VyIG93biBzb2Z0d2FyZVxuICogWW91IG1heSByZXByb2R1Y2UsIHByZXBhcmUgZGVyaXZhdGl2ZSBXb3JrcyBvZiwgcHVibGljbHkgZGlzcGxheSwgcHVibGljbHkgcGVyZm9ybSwgc3VibGljZW5zZSxcbiAqIGFuZCBkaXN0cmlidXRlIHRoZSBTb3VyY2UgYW5kIHN1Y2ggZGVyaXZhdGl2ZSBTb3VyY2UgaW4gU291cmNlIGZvcm0gb25seSBhcyBwYXJ0IG9mIGEgbGFyZ2VyXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRpb24gYW5kIHByb3ZpZGVkIHRoYXQgYXR0cmlidXRpb24gdG8gdGhlIG9yaWdpbmFsIEF1dGhvciBpcyBncmFudGVkLlxuICogVGhlIG9yaWdpbiBvZiB0aGlzIFdvcmsgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdCBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGVcbiAqIG9yaWdpbmFsIFNvdXJjZS4gSWYgeW91IHVzZSB0aGlzIFNvdXJjZSBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IG9mIHRoZSBBdXRob3IgbmFtZSB3b3VsZFxuICogYmUgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbiAqXG4gKiA0LiBSZXN0cmljdGlvbnMuXG4gKlxuICogVGhlIGxpY2Vuc2UgZ3JhbnRlZCBpbiBTZWN0aW9uIDMgYWJvdmUgaXMgZXhwcmVzc2x5IG1hZGUgc3ViamVjdCB0byBhbmQgbGltaXRlZCBieSB0aGUgZm9sbG93aW5nXG4gKiByZXN0cmljdGlvbnM6XG4gKiBBbHRlcmVkIFNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZCBhcyBiZWluZ1xuICogdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuICogVGhpcyBMaWNlbnNlIG11c3QgYmUgdmlzaWJseSBsaW5rZWQgdG8gZnJvbSBhbnkgb25saW5lIGRpc3RyaWJ1dGlvbiBvZiB0aGUgQXJ0aWNsZSBieSBVUkkgYW5kXG4gKiB1c2luZyB0aGUgZGVzY3JpcHRpdmUgdGV4dCBcIkxpY2Vuc2VkIHVuZGVyIHRoZSBHYW1lRGV2Lm5ldCBPcGVuIExpY2Vuc2VcIlxuICogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgQXV0aG9yIG9mIHRoaXMgV29yaywgbm9yIGFueSBvZiB0aGVpciB0cmFkZW1hcmtzIG9yIHNlcnZpY2UgbWFya3MsIG1heSBiZVxuICogdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgV29yayB3aXRob3V0IGV4cHJlc3MgcHJpb3IgcGVybWlzc2lvbiBvZlxuICogdGhlIEF1dGhvclxuICogRXhjZXB0IGFzIGV4cHJlc3NseSBzdGF0ZWQgaGVyZWluLCBub3RoaW5nIGluIHRoaXMgTGljZW5zZSBncmFudHMgYW55IGxpY2Vuc2UgdG8gQXV0aG9yJ3NcbiAqIHRyYWRlbWFya3MsIGNvcHlyaWdodHMsIHBhdGVudHMsIHRyYWRlIHNlY3JldHMgb3IgYW55IG90aGVyIGludGVsbGVjdHVhbCBwcm9wZXJ0eS4gTm8gbGljZW5zZSBpc1xuICogZ3JhbnRlZCB0byB0aGUgdHJhZGVtYXJrcyBvZiBBdXRob3IgZXZlbiBpZiBzdWNoIG1hcmtzIGFyZSBpbmNsdWRlZCBpbiB0aGUgV29yay4gTm90aGluZyBpbiB0aGlzXG4gKiBMaWNlbnNlIHNoYWxsIGJlIGludGVycHJldGVkIHRvIHByb2hpYml0IEF1dGhvciBmcm9tIGxpY2Vuc2luZyB1bmRlciB0ZXJtcyBkaWZmZXJlbnQgZnJvbSB0aGlzXG4gKiBMaWNlbnNlIGFueSBXb3JrIHRoYXQgQXV0aG9yIG90aGVyd2lzZSB3b3VsZCBoYXZlIGEgcmlnaHQgdG8gbGljZW5zZS5cbiAqXG4gKiA1LiBHcmFudCBvZiBQYXRlbnQgTGljZW5zZS5cbiAqXG4gKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB0aGlzIExpY2Vuc2UsIGVhY2ggQ29udHJpYnV0b3IgaGVyZWJ5IGdyYW50cyB0byBZb3UgYVxuICogcGVycGV0dWFsLCB3b3JsZHdpZGUsIG5vbi1leGNsdXNpdmUsIG5vLWNoYXJnZSwgcm95YWx0eS1mcmVlLCBpcnJldm9jYWJsZSAoZXhjZXB0IGFzIHN0YXRlZCBpblxuICogdGhpcyBzZWN0aW9uKSBwYXRlbnQgbGljZW5zZSB0byBtYWtlLCBoYXZlIG1hZGUsIHVzZSwgb2ZmZXIgdG8gc2VsbCwgc2VsbCwgaW1wb3J0LCBhbmQgb3RoZXJ3aXNlXG4gKiB0cmFuc2ZlciB0aGUgV29yaywgd2hlcmUgc3VjaCBsaWNlbnNlIGFwcGxpZXMgb25seSB0byB0aG9zZSBwYXRlbnQgY2xhaW1zIGxpY2Vuc2FibGUgYnkgc3VjaFxuICogQ29udHJpYnV0b3IgdGhhdCBhcmUgbmVjZXNzYXJpbHkgaW5mcmluZ2VkIGJ5IHRoZWlyIENvbnRyaWJ1dGlvbihzKSBhbG9uZSBvciBieSBjb21iaW5hdGlvbiBvZlxuICogdGhlaXIgQ29udHJpYnV0aW9uKHMpIHdpdGggdGhlIFdvcmsgdG8gd2hpY2ggc3VjaCBDb250cmlidXRpb24ocykgd2FzIHN1Ym1pdHRlZC4gSWYgWW91IGluc3RpdHV0ZVxuICogcGF0ZW50IGxpdGlnYXRpb24gYWdhaW5zdCBhbnkgZW50aXR5IChpbmNsdWRpbmcgYSBjcm9zcy1jbGFpbSBvciBjb3VudGVyY2xhaW0gaW4gYSBsYXdzdWl0KVxuICogYWxsZWdpbmcgdGhhdCB0aGUgV29yayBvciBTb3VyY2UgaW5jb3Jwb3JhdGVkIHdpdGhpbiB0aGUgV29yayBjb25zdGl0dXRlcyBkaXJlY3Qgb3IgY29udHJpYnV0b3J5XG4gKiBwYXRlbnQgaW5mcmluZ2VtZW50LCB0aGVuIGFueSBwYXRlbnQgbGljZW5zZXMgZ3JhbnRlZCB0byBZb3UgdW5kZXIgdGhpcyBMaWNlbnNlIGZvciB0aGF0IFdvcmtcbiAqIHNoYWxsIHRlcm1pbmF0ZSBhcyBvZiB0aGUgZGF0ZSBzdWNoIGxpdGlnYXRpb24gaXMgZmlsZWQuXG4gKlxuICogNi4gTGltaXRhdGlvbiBvZiBMaWFiaWxpdHkuXG4gKlxuICogSW4gbm8gZXZlbnQgYW5kIHVuZGVyIG5vIGxlZ2FsIHRoZW9yeSwgd2hldGhlciBpbiB0b3J0IChpbmNsdWRpbmcgbmVnbGlnZW5jZSksIGNvbnRyYWN0LCBvclxuICogb3RoZXJ3aXNlLCB1bmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgKHN1Y2ggYXMgZGVsaWJlcmF0ZSBhbmQgZ3Jvc3NseSBuZWdsaWdlbnQgYWN0cykgb3JcbiAqIGFncmVlZCB0byBpbiB3cml0aW5nLCBzaGFsbCBhbnkgQXV0aG9yIG9yIFB1Ymxpc2hlciBiZSBsaWFibGUgdG8gWW91IGZvciBkYW1hZ2VzLCBpbmNsdWRpbmcgYW55XG4gKiBkaXJlY3QsIGluZGlyZWN0LCBzcGVjaWFsLCBpbmNpZGVudGFsLCBvciBjb25zZXF1ZW50aWFsIGRhbWFnZXMgb2YgYW55IGNoYXJhY3RlciBhcmlzaW5nIGFzIGFcbiAqIHJlc3VsdCBvZiB0aGlzIExpY2Vuc2Ugb3Igb3V0IG9mIHRoZSB1c2Ugb3IgaW5hYmlsaXR5IHRvIHVzZSB0aGUgV29yayAoaW5jbHVkaW5nIGJ1dCBub3QgbGltaXRlZFxuICogdG8gZGFtYWdlcyBmb3IgbG9zcyBvZiBnb29kd2lsbCwgd29yayBzdG9wcGFnZSwgY29tcHV0ZXIgZmFpbHVyZSBvciBtYWxmdW5jdGlvbiwgb3IgYW55IGFuZCBhbGxcbiAqIG90aGVyIGNvbW1lcmNpYWwgZGFtYWdlcyBvciBsb3NzZXMpLCBldmVuIGlmIHN1Y2ggQXV0aG9yIGhhcyBiZWVuIGFkdmlzZWQgb2YgdGhlIHBvc3NpYmlsaXR5IG9mXG4gKiBzdWNoIGRhbWFnZXMuXG4gKlxuICogNy4gRElTQ0xBSU1FUiBPRiBXQVJSQU5UWVxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVFxuICogTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkRcbiAqIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4gKiBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbiAqXG4gKiA4LiBQdWJsaXNoZXIuXG4gKlxuICogVGhlIHBhcnRpZXMgaGVyZWJ5IGNvbmZpcm0gdGhhdCB0aGUgUHVibGlzaGVyIHNoYWxsIG5vdCwgdW5kZXIgYW55IGNpcmN1bXN0YW5jZXMsIGJlIHJlc3BvbnNpYmxlXG4gKiBmb3IgYW5kIHNoYWxsIG5vdCBoYXZlIGFueSBsaWFiaWxpdHkgaW4gcmVzcGVjdCBvZiB0aGUgc3ViamVjdCBtYXR0ZXIgb2YgdGhpcyBMaWNlbnNlLiBUaGVcbiAqIFB1Ymxpc2hlciBtYWtlcyBubyB3YXJyYW50eSB3aGF0c29ldmVyIGluIGNvbm5lY3Rpb24gd2l0aCB0aGUgV29yayBhbmQgc2hhbGwgbm90IGJlIGxpYWJsZSB0byBZb3VcbiAqIG9yIGFueSBwYXJ0eSBvbiBhbnkgbGVnYWwgdGhlb3J5IGZvciBhbnkgZGFtYWdlcyB3aGF0c29ldmVyLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIGFueVxuICogZ2VuZXJhbCwgc3BlY2lhbCwgaW5jaWRlbnRhbCBvciBjb25zZXF1ZW50aWFsIGRhbWFnZXMgYXJpc2luZyBpbiBjb25uZWN0aW9uIHRvIHRoaXMgbGljZW5zZS4gVGhlXG4gKiBQdWJsaXNoZXIgcmVzZXJ2ZXMgdGhlIHJpZ2h0IHRvIGNlYXNlIG1ha2luZyB0aGUgV29yayBhdmFpbGFibGUgdG8gWW91IGF0IGFueSB0aW1lIHdpdGhvdXQgbm90aWNlXG4gKlxuICogOS4gVGVybWluYXRpb25cbiAqXG4gKiBUaGlzIExpY2Vuc2UgYW5kIHRoZSByaWdodHMgZ3JhbnRlZCBoZXJldW5kZXIgd2lsbCB0ZXJtaW5hdGUgYXV0b21hdGljYWxseSB1cG9uIGFueSBicmVhY2ggYnkgWW91XG4gKiBvZiB0aGUgdGVybXMgb2YgdGhpcyBMaWNlbnNlLiBJbmRpdmlkdWFscyBvciBlbnRpdGllcyB3aG8gaGF2ZSByZWNlaXZlZCBEZXJpdmlhdGl2ZSBXb3JrcyBmcm9tXG4gKiBZb3UgdW5kZXIgdGhpcyBMaWNlbnNlLCBob3dldmVyLCB3aWxsIG5vdCBoYXZlIHRoZWlyIGxpY2Vuc2VzIHRlcm1pbmF0ZWQgcHJvdmlkZWQgc3VjaFxuICogaW5kaXZpZHVhbHMgb3IgZW50aXRpZXMgcmVtYWluIGluIGZ1bGwgY29tcGxpYW5jZSB3aXRoIHRob3NlIGxpY2Vuc2VzLiBTZWN0aW9ucyAxLCAyLCA2LCA3LCA4IGFuZFxuICogOSB3aWxsIHN1cnZpdmUgYW55IHRlcm1pbmF0aW9uIG9mIHRoaXMgTGljZW5zZS5cbiAqIFN1YmplY3QgdG8gdGhlIGFib3ZlIHRlcm1zIGFuZCBjb25kaXRpb25zLCB0aGUgbGljZW5zZSBncmFudGVkIGhlcmUgaXMgcGVycGV0dWFsIChmb3IgdGhlXG4gKiBkdXJhdGlvbiBvZiB0aGUgYXBwbGljYWJsZSBjb3B5cmlnaHQgaW4gdGhlIFdvcmspLiBOb3R3aXRoc3RhbmRpbmcgdGhlIGFib3ZlLCBMaWNlbnNvciByZXNlcnZlc1xuICogdGhlIHJpZ2h0IHRvIHJlbGVhc2UgdGhlIFdvcmsgdW5kZXIgZGlmZmVyZW50IGxpY2Vuc2UgdGVybXMgb3IgdG8gc3RvcCBkaXN0cmlidXRpbmcgdGhlIFdvcmsgYXRcbiAqIGFueSB0aW1lOyBwcm92aWRlZCwgaG93ZXZlciB0aGF0IGFueSBzdWNoIGVsZWN0aW9uIHdpbGwgbm90IHNlcnZlIHRvIHdpdGhkcmF3IHRoaXMgTGljZW5zZSAob3JcbiAqIGFueSBvdGhlciBsaWNlbnNlIHRoYXQgaGFzIGJlZW4sIG9yIGlzIHJlcXVpcmVkIHRvIGJlLCBncmFudGVkIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGlzIExpY2Vuc2UpLFxuICogYW5kIHRoaXMgTGljZW5zZSB3aWxsIGNvbnRpbnVlIGluIGZ1bGwgZm9yY2UgYW5kIGVmZmVjdCB1bmxlc3MgdGVybWluYXRlZCBhcyBzdGF0ZWQgYWJvdmUuXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGhhbGZEaXN0YW5jZVxuICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1c1xuICogQHBhcmFtIHtudW1iZXJ9IG1hc3NcbiAqIEByZXR1cm5zIHttYXQzfVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYXBzdWxlSW5lcnRpYVRlbnNvcihoYWxmRGlzdGFuY2UsIHJhZGl1cywgbWFzcykgey8vIFRPRE86IFRlc3QgdGhpcyBzb21laG93Li4uXG4gIGNvbnN0IHRlbnNvciA9IG1hdDMuY3JlYXRlKCk7XG5cbiAgY29uc3QgY3lsaW5kZXJIZWlnaHQgPSBoYWxmRGlzdGFuY2UgKiAyO1xuICBjb25zdCByYWRpdXNTcXVhcmVkID0gcmFkaXVzICogcmFkaXVzO1xuICBjb25zdCBjeWxpbmRlclZvbHVtZSA9IE1hdGguUEkgKiByYWRpdXNTcXVhcmVkICogY3lsaW5kZXJIZWlnaHQ7XG4gIGNvbnN0IGhlbWlzcGhlcmVDb21iaW5lZFZvbHVtZSA9IDQgLyAzICogTWF0aC5QSSAqIHJhZGl1c1NxdWFyZWQ7XG4gIGNvbnN0IGN5bGluZGVyTWFzcyA9IGN5bGluZGVyVm9sdW1lIC8gKGN5bGluZGVyVm9sdW1lICogaGVtaXNwaGVyZUNvbWJpbmVkVm9sdW1lKSAqIG1hc3M7XG4gIGNvbnN0IGhlbWlzcGhlcmVNYXNzID0gKG1hc3MgLSBjeWxpbmRlck1hc3MpIC8gMjtcblxuICAvLyBDb250cmlidXRpb24gZnJvbSB0aGUgY3lsaW5kZXIuXG4gIHRlbnNvcls0XSA9IHJhZGl1c1NxdWFyZWQgKiBjeWxpbmRlck1hc3MgLyAyO1xuICB0ZW5zb3JbMF0gPSB0ZW5zb3JbNF0gLyAyICsgY3lsaW5kZXJNYXNzICogY3lsaW5kZXJIZWlnaHQgKiBjeWxpbmRlckhlaWdodCAvIDEyO1xuICB0ZW5zb3JbOF0gPSB0ZW5zb3JbMF07XG5cbiAgLy8gQ29udHJpYnV0aW9ucyBmcm9tIHRoZSBoZW1pc3BoZXJlcy5cbiAgY29uc3QgdG1wMSA9IGhlbWlzcGhlcmVNYXNzICogMiAqIHJhZGl1c1NxdWFyZWQgLyA1O1xuICB0ZW5zb3JbNF0gKz0gdG1wMSAqIDI7XG4gIGNvbnN0IHRtcDIgPVxuICAgICAgKHRtcDEgKyBoZW1pc3BoZXJlTWFzcyAqIChoYWxmRGlzdGFuY2UgKiBoYWxmRGlzdGFuY2UgKyAzIC8gOCAqIGN5bGluZGVySGVpZ2h0ICogcmFkaXVzKSkgKiAyO1xuICB0ZW5zb3JbMF0gKz0gdG1wMjtcbiAgdGVuc29yWzhdICs9IHRtcDI7XG5cbiAgLy8gVGhlIGFib3ZlIGNhbGN1bGF0aW9ucyBhc3N1bWUgdGhlIGNhcHN1bGUgaXMgYWxpZ25lZCBhbG9uZyB0aGUgeS1heGlzLiBIb3dldmVyLCBvdXIgZGVmYXVsdFxuICAvLyBjYXBzdWxlIG9yaWVudGF0aW9uIGlzIGFsaWduZWQgYWxvbmcgdGhlIHotYXhpcy5cbiAgY29uc3Qgcm90YXRpb24gPSBxdWF0LmNyZWF0ZSgpO1xuICBxdWF0LnJvdGF0ZVgocm90YXRpb24sIHJvdGF0aW9uLCBfZ2VvbWV0cnkuSEFMRl9QSSk7XG4gIHJvdGF0ZVRlbnNvcih0ZW5zb3IsIHRlbnNvciwgcm90YXRpb24pO1xuXG4gIHJldHVybiB0ZW5zb3I7XG59XG5cbi8qKlxuICogQHBhcmFtIHtDb2xsaWRhYmxlfSBjb2xsaWRhYmxlXG4gKiBAcGFyYW0ge251bWJlcn0gbWFzc1xuICogQHJldHVybnMge21hdDN9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUZvckNvbGxpZGFibGUoY29sbGlkYWJsZSwgbWFzcykge1xuICBzd2l0Y2ggKGNvbGxpZGFibGUuY29uc3RydWN0b3IubmFtZSkge1xuICAgIGNhc2UgJ1NwaGVyZSc6XG4gICAgICByZXR1cm4gY3JlYXRlU3BoZXJlSW5lcnRpYVRlbnNvcihjb2xsaWRhYmxlLnJhZGl1cywgbWFzcyk7XG4gICAgY2FzZSAnQWFiYic6XG4gICAgICByZXR1cm4gY3JlYXRlQm94SW5lcnRpYVRlbnNvcihjb2xsaWRhYmxlLnJhbmdlWCwgY29sbGlkYWJsZS5yYW5nZVksIGNvbGxpZGFibGUucmFuZ2VaLCBtYXNzKTtcbiAgICBjYXNlICdDYXBzdWxlJzpcbiAgICAgIHJldHVybiBjcmVhdGVDYXBzdWxlSW5lcnRpYVRlbnNvcihjb2xsaWRhYmxlLmhhbGZEaXN0YW5jZSwgY29sbGlkYWJsZS5yYWRpdXMsIG1hc3MpO1xuICAgIGNhc2UgJ09iYic6XG4gICAgICByZXR1cm4gY3JlYXRlQm94SW5lcnRpYVRlbnNvcihjb2xsaWRhYmxlLmhhbGZTaWRlTGVuZ3Roc1swXSAqIDIsXG4gICAgICAgICAgY29sbGlkYWJsZS5oYWxmU2lkZUxlbmd0aHNbMV0gKiAyLCBjb2xsaWRhYmxlLmhhbGZTaWRlTGVuZ3Roc1syXSAqIDIsIG1hc3MpO1xuICB9XG59XG5cbmV4cG9ydCB7XG4gIGNyZWF0ZVNwaGVyZUluZXJ0aWFUZW5zb3IsXG4gIGNyZWF0ZUJveEluZXJ0aWFUZW5zb3IsXG4gIGNyZWF0ZUNhcHN1bGVJbmVydGlhVGVuc29yLFxuICBjcmVhdGVGb3JDb2xsaWRhYmxlLFxufTtcbiIsIi8qKlxuICogVGhpcyBtb2R1bGUgZGVmaW5lcyBhIGNvbGxlY3Rpb24gb2Ygc3RhdGljIGdlbmVyYWwgdXRpbGl0eSBmdW5jdGlvbnMuXG4gKi9cblxuLy8gVE9ETzogVGhpcyBzaG91bGQgYmUgc2V0IGZyb20gc29tZXdoZXJlIGVsc2UgKHByb2JhYmx5IGFzIGEgcGFyYW0gdG8gY29udHJvbGxlciBsaWtlIGJlZm9yZTsgYnV0IHRoZW4gSSBuZWVkIHRvIG1ha2UgdGhpcyB1cGRhdGFibGUpXG5jb25zdCBpc0luRGV2TW9kZSA9IHRydWU7XG5cbmNvbnN0IF91dGlsID0ge1xuICBpc0luRGV2TW9kZTogaXNJbkRldk1vZGVcbn07XG5cbmV4cG9ydCB7XG4gIF91dGlsLFxufTtcbiIsImV4cG9ydCAqIGZyb20gJy4vc3JjL2NhbWVyYSc7XG5leHBvcnQgKiBmcm9tICcuL3NyYy9maXJzdC1wZXJzb24tY2FtZXJhJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2ZpeGVkLWNhbWVyYSc7XG5leHBvcnQgKiBmcm9tICcuL3NyYy9maXhlZC1mb2xsb3ctY2FtZXJhJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2ZvbGxvdy1jYW1lcmEnO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvdGhpcmQtcGVyc29uLWNhbWVyYSc7XG5leHBvcnQgKiBmcm9tICcuL3NyYy9vdmVyaGVhZC1jYW1lcmEnO1xuIiwiaW1wb3J0IHsgUGVyc2lzdGVudEFuaW1hdGlvbkpvYiB9IGZyb20gJ2xzbC1hbmltYXRleCc7XG5cbi8vIFRPRE86IE1ha2UgdGhlIHJvdGF0aW9uIHF1YXRlcm5pb24gYmFzZWQgd2l0aCA2RG9GLlxuXG4vLyBUT0RPOiBBZGQgc3VwcG9ydCBmb3Igc2NyaXB0aW5nIHRoZSBjYW1lcmEgdG8gZm9sbG93IGEgY3VydmU6XG4vLyAoaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9iYjIwMzkwOCh2PXhuYWdhbWVzdHVkaW8uMzEpLmFzcHgpXG5cbi8qKlxuICogVGhpcyBjbGFzcyBkZWZpbmVzIGNvbW1vbiBjYW1lcmEgbG9naWMuXG4gKlxuICogQGFic3RyYWN0XG4gKi9cbmNsYXNzIENhbWVyYSBleHRlbmRzIFBlcnNpc3RlbnRBbmltYXRpb25Kb2Ige1xuICAvKipcbiAgICogSWYgb2xkQ2FtZXJhIGlzIGdpdmVuLCB0aGVuIHRoZSBzdGF0ZSBvZiB0aGUgbmV3IGNhbWVyYSB3aWxsIGJlIGluaXRpYWxpemVkIHRvIG1hdGNoIHRoYXQgb2ZcbiAgICogdGhlIG9sZCBjYW1lcmEuIFRoaXMgZW5hYmxlcyBhIHNtb290aCB0cmFuc2l0aW9uIHdoZW4gY2hhbmdpbmcgY2FtZXJhcy5cbiAgICpcbiAgICogQHBhcmFtIHtDYW1lcmFDb25maWd9IGNhbWVyYVBhcmFtc1xuICAgKiBAcGFyYW0ge0NhbWVyYX0gW29sZENhbWVyYV1cbiAgICovXG4gIGNvbnN0cnVjdG9yKGNhbWVyYVBhcmFtcywgb2xkQ2FtZXJhKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIC8vIENhbWVyYSBpcyBhbiBhYnN0cmFjdCBjbGFzcy4gSXQgc2hvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQgZGlyZWN0bHkuXG4gICAgaWYgKG5ldy50YXJnZXQgPT09IENhbWVyYSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnN0cnVjdCBDYW1lcmEgaW5zdGFuY2VzIGRpcmVjdGx5Jyk7XG4gICAgfVxuXG4gICAgdGhpcy5fY2FtZXJhUGFyYW1zID0gY2FtZXJhUGFyYW1zO1xuICAgIHRoaXMuX2ZvdlkgPSBudWxsO1xuICAgIHRoaXMuX2FzcGVjdFJhdGlvID0gbnVsbDtcbiAgICB0aGlzLl96TmVhciA9IG51bGw7XG4gICAgdGhpcy5fekZhciA9IG51bGw7XG4gICAgdGhpcy5fcG9zaXRpb24gPSB2ZWMzLmNyZWF0ZSgpO1xuICAgIHRoaXMuX29yaWVudGF0aW9uID0gcXVhdC5jcmVhdGUoKTsgLy8gVE9ETzogVXNlIHRoaXMuXG4gICAgdGhpcy5fdmlld01hdHJpeCA9IG1hdDQuY3JlYXRlKCk7XG4gICAgdGhpcy5fcHJvamVjdGlvbk1hdHJpeCA9IG1hdDQuY3JlYXRlKCk7XG4gICAgdGhpcy5fdmlld1Byb2plY3Rpb25NYXRyaXggPSBtYXQ0LmNyZWF0ZSgpO1xuXG4gICAgdGhpcy5fbWF0Y2hPbGRDYW1lcmEob2xkQ2FtZXJhKTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuX3NldFBlcnNwZWN0aXZlKHRoaXMuX2NhbWVyYVBhcmFtcy5mb3ZZLCB0aGlzLl9jYW1lcmFQYXJhbXMuZGVmYXVsdEFzcGVjdFJhdGlvLFxuICAgICAgdGhpcy5fY2FtZXJhUGFyYW1zLnpOZWFyLCB0aGlzLl9jYW1lcmFQYXJhbXMuekZhcik7XG4gIH1cblxuICAvLyBUT0RPOiBDYWxsIHRoaXMgYWZ0ZXIgYWRkaW5nIHN1cHBvcnQgZm9yIGR5bmFtaWNhbGx5IHN3aXRjaGluZyBjYW1lcmFzLlxuICBkZXN0cm95KCkge31cblxuICAvKipcbiAgICogU2V0IHRoaXMgY2FtZXJhJ3Mgb3JpZW50YXRpb24gYW5kIHBvc2l0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge3ZlYzN9IGV5ZSBUaGUgY2FtZXJhIHBvc2l0aW9uLlxuICAgKiBAcGFyYW0ge3ZlYzN9IHRhcmdldCBUaGUgZm9jYWwgcG9pbnQuXG4gICAqIEBwYXJhbSB7dmVjM30gdXAgVGhlIGxvY2FsIHVwIGRpcmVjdGlvbi5cbiAgICogQHBhcmFtIHt2ZWMzfSB2aWV3RGlyZWN0aW9uIFRoZSAobm9ybWFsaXplZCkgZGlyZWN0aW9uIHRoZSBjYW1lcmEgaXMgbG9va2luZy5cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX3NldFBvc2l0aW9uQW5kTG9va0F0KGV5ZSwgdGFyZ2V0LCB1cCwgdmlld0RpcmVjdGlvbikge1xuICAgIHZlYzMuY29weSh0aGlzLl9wb3NpdGlvbiwgZXllKTtcbiAgICB0aGlzLl9zZXRMb29rQXRGcm9tQ3VycmVudFBvc2l0aW9uKHRhcmdldCwgdXAsIHZpZXdEaXJlY3Rpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGlzIGNhbWVyYSdzIG9yaWVudGF0aW9uLCBidXQgZG8gbm90IGNoYW5nZSBpdHMgcG9zaXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7dmVjM30gdGFyZ2V0IFRoZSBmb2NhbCBwb2ludC5cbiAgICogQHBhcmFtIHt2ZWMzfSB1cCBUaGUgbG9jYWwgdXAgZGlyZWN0aW9uLlxuICAgKiBAcGFyYW0ge3ZlYzN9IHZpZXdEaXJlY3Rpb24gVGhlIChub3JtYWxpemVkKSBkaXJlY3Rpb24gdGhlIGNhbWVyYSBpcyBsb29raW5nLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfc2V0TG9va0F0RnJvbUN1cnJlbnRQb3NpdGlvbih0YXJnZXQsIHVwLCB2aWV3RGlyZWN0aW9uKSB7XG4gICAgbWF0NC5sb29rQXQodGhpcy5fdmlld01hdHJpeCwgdGhpcy5fcG9zaXRpb24sIHRhcmdldCwgdXApO1xuICAgIHF1YXQucm90YXRpb25Ubyh0aGlzLl9vcmllbnRhdGlvbiwgdGhpcy5fY2FtZXJhUGFyYW1zLl9kZWZhdWx0TG9va0F0RGlyZWN0aW9uLCB2aWV3RGlyZWN0aW9uKTsgLy8gVE9ETzogQ2hlY2sgdGhpczsgbWlnaHQgbmVlZCB0byBzd2FwIGFyZ3VtZW50cy5cbiAgICB0aGlzLl91cGRhdGVWaWV3UHJvamVjdGlvbk1hdHJpeCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRyYW5zbGF0ZSB0aGlzIGNhbWVyYSBieSB0aGUgZ2l2ZW4gYW1vdW50IGZyb20gaXRzIGN1cnJlbnQgcG9zaXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7dmVjM30gdHJhbnNsYXRpb25cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX3RyYW5zbGF0ZSh0cmFuc2xhdGlvbikge1xuICAgIHZlYzMuYWRkKHRoaXMuX3Bvc2l0aW9uLCB0aGlzLl9wb3NpdGlvbiwgdHJhbnNsYXRpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJvdGF0ZSB0aGlzIGNhbWVyYSBieSB0aGUgZ2l2ZW4gYW1vdW50IGZyb20gaXRzIGN1cnJlbnQgb3JpZW50YXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7cXVhdH0gcm90YXRpb25cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX3JvdGF0ZShyb3RhdGlvbikge1xuICAgIC8vIFRPRE9cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gZm92WSBJbiByYWRpYW5zLlxuICAgKiBAcGFyYW0ge251bWJlcn0gYXNwZWN0UmF0aW8gV2lkdGggLyBoZWlnaHQuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB6TmVhclxuICAgKiBAcGFyYW0ge251bWJlcn0gekZhclxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfc2V0UGVyc3BlY3RpdmUoZm92WSwgYXNwZWN0UmF0aW8sIHpOZWFyLCB6RmFyKSB7XG4gICAgdGhpcy5fZm92WSA9IGZvdlk7XG4gICAgdGhpcy5fYXNwZWN0UmF0aW8gPSBhc3BlY3RSYXRpbztcbiAgICB0aGlzLl96TmVhciA9IHpOZWFyO1xuICAgIHRoaXMuX3pGYXIgPSB6RmFyO1xuICAgIHRoaXMuX3VwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZS1jYWxjdWxhdGVzIHRoZSB2aWV3LXByb2plY3Rpb24gbWF0cml4LiBUaGlzIHNob3VsZCBiZSBjYWxsZWQgYW55IHRpbWUgZWl0aGVyIHRoZSB2aWV3IG9yXG4gICAqIHByb2plY3Rpb24gbWF0cmljZXMgaXMgdXBkYXRlZC5cbiAgICpcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX3VwZGF0ZVByb2plY3Rpb25NYXRyaXgoKSB7XG4gICAgbWF0NC5wZXJzcGVjdGl2ZShcbiAgICAgIHRoaXMuX3Byb2plY3Rpb25NYXRyaXgsIHRoaXMuX2ZvdlksIHRoaXMuX2FzcGVjdFJhdGlvLCB0aGlzLl96TmVhciwgdGhpcy5fekZhcik7XG4gICAgdGhpcy5fdXBkYXRlVmlld1Byb2plY3Rpb25NYXRyaXgoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZS1jYWxjdWxhdGVzIHRoZSB2aWV3LXByb2plY3Rpb24gbWF0cml4LiBUaGlzIHNob3VsZCBiZSBjYWxsZWQgYW55IHRpbWUgZWl0aGVyIHRoZSB2aWV3IG9yXG4gICAqIHByb2plY3Rpb24gbWF0cmljZXMgaXMgdXBkYXRlZC5cbiAgICpcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX3VwZGF0ZVZpZXdQcm9qZWN0aW9uTWF0cml4KCkge1xuICAgIG1hdDQubXVsdGlwbHkodGhpcy5fdmlld1Byb2plY3Rpb25NYXRyaXgsIHRoaXMuX3Byb2plY3Rpb25NYXRyaXgsIHRoaXMuX3ZpZXdNYXRyaXgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RE9NSGlnaFJlc1RpbWVTdGFtcH0gY3VycmVudFRpbWVcbiAgICogQHBhcmFtIHtET01IaWdoUmVzVGltZVN0YW1wfSBkZWx0YVRpbWVcbiAgICogQGFic3RyYWN0XG4gICAqL1xuICB1cGRhdGUoY3VycmVudFRpbWUsIGRlbHRhVGltZSkge1xuICAgIC8vIEV4dGVuZGluZyBjbGFzc2VzIHNob3VsZCBpbXBsZW1lbnQgdGhpcyBtZXRob2QuXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZCcpO1xuICB9XG5cbiAgZHJhdygpIHt9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmb3ZZIFRoZSB2ZXJ0aWNhbCBmaWVsZCBvZiB2aWV3LCBpbiByYWRpYW5zLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBzZXQgZm92KGZvdlkpIHtcbiAgICB0aGlzLl9mb3ZZID0gZm92WTtcbiAgICB0aGlzLl91cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGFzcGVjdFJhdGlvIFdpZHRoIC8gaGVpZ2h0LlxuICAgKi9cbiAgc2V0IGFzcGVjdFJhdGlvKGFzcGVjdFJhdGlvKSB7XG4gICAgdGhpcy5fc2V0UGVyc3BlY3RpdmUodGhpcy5fY2FtZXJhUGFyYW1zLmZvdlksIGFzcGVjdFJhdGlvLCB0aGlzLl9jYW1lcmFQYXJhbXMuek5lYXIsXG4gICAgICB0aGlzLl9jYW1lcmFQYXJhbXMuekZhcik7XG4gIH1cblxuICAvKiogQHJldHVybnMge3ZlYzN9ICovXG4gIGdldCBwb3NpdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fcG9zaXRpb247XG4gIH1cbiAgLyoqIEByZXR1cm5zIHtxdWF0fSAqL1xuICBnZXQgb3JpZW50YXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX29yaWVudGF0aW9uO1xuICB9XG4gIC8qKiBAcmV0dXJucyB7bWF0NH0gKi9cbiAgZ2V0IHZpZXdNYXRyaXgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZpZXdNYXRyaXg7XG4gIH1cbiAgLyoqIEByZXR1cm5zIHttYXQ0fSAqL1xuICBnZXQgcHJvamVjdGlvbk1hdHJpeCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcHJvamVjdGlvbk1hdHJpeDtcbiAgfVxuICAvKiogQHJldHVybnMge21hdDR9ICovXG4gIGdldCB2aWV3UHJvamVjdGlvbk1hdHJpeCgpIHsgLy8gVE9ETzogU3RvcCB1c2luZyB0aGUgYWJvdmUgdHdvIGdldHRlcnMgYW5kIHVzZSB0aGlzIGluc3RlYWQ/XG4gICAgcmV0dXJuIHRoaXMuX3ZpZXdQcm9qZWN0aW9uTWF0cml4O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGlzIGNhbWVyYSdzIHN0YXRlIHRvIG1hdGNoIHRoZSBnaXZlbiBvbGQgY2FtZXJhLlxuICAgKlxuICAgKiBAcGFyYW0ge0NhbWVyYX0gb2xkQ2FtZXJhXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9tYXRjaE9sZENhbWVyYShvbGRDYW1lcmEpIHtcbiAgICBpZiAoIW9sZENhbWVyYSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9mb3ZZID0gb2xkQ2FtZXJhLl9mb3ZZO1xuICAgIHRoaXMuX2FzcGVjdFJhdGlvID0gb2xkQ2FtZXJhLl9hc3BlY3RSYXRpbztcbiAgICB0aGlzLl96TmVhciA9IG9sZENhbWVyYS5fek5lYXI7XG4gICAgdGhpcy5fekZhciA9IG9sZENhbWVyYS5fekZhcjtcbiAgICB2ZWMzLmNvcHkodGhpcy5fcG9zaXRpb24sIG9sZENhbWVyYS5fcG9zaXRpb24pO1xuICAgIHZlYzMuY29weSh0aGlzLl9vcmllbnRhdGlvbiwgb2xkQ2FtZXJhLl9vcmllbnRhdGlvbik7XG4gICAgbWF0NC5jb3B5KHRoaXMuX3ZpZXdNYXRyaXgsIG9sZENhbWVyYS5fdmlld01hdHJpeCk7XG4gICAgbWF0NC5jb3B5KHRoaXMuX3Byb2plY3Rpb25NYXRyaXgsIG9sZENhbWVyYS5fcHJvamVjdGlvbk1hdHJpeCk7XG4gICAgbWF0NC5jb3B5KHRoaXMuX3ZpZXdQcm9qZWN0aW9uTWF0cml4LCBvbGRDYW1lcmEuX3ZpZXdQcm9qZWN0aW9uTWF0cml4KTtcbiAgfVxufVxuXG5leHBvcnQgeyBDYW1lcmEgfTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7RnVuY3Rpb259IENhbWVyYUNvbmZpZ1xuICogQHByb3BlcnR5IHtudW1iZXJ9IGZvdllcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB6TmVhclxuICogQHByb3BlcnR5IHtudW1iZXJ9IHpGYXJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkZWZhdWx0QXNwZWN0UmF0aW9cbiAqIEBwcm9wZXJ0eSB7dmVjM30gX2RlZmF1bHRMb29rQXREaXJlY3Rpb25cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEZvbGxvd0NhbWVyYUNvbmZpZ1xuICogQHByb3BlcnR5IHtudW1iZXJ9IHNwcmluZ0NvZWZmaWNpZW50XG4gKiBAcHJvcGVydHkge251bWJlcn0gZGFtcGluZ0NvZWZmaWNpZW50XG4gKiBAcHJvcGVydHkge251bWJlcn0gaW50ZW5kZWREaXN0YW5jZUZyb21UYXJnZXRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBpbnRlbmRlZFJvdGF0aW9uQW5nbGVGcm9tVGFyZ2V0XG4gKiBAcHJvcGVydHkge3ZlYzN9IGludGVuZGVkUm90YXRpb25BeGlzRnJvbVRhcmdldFxuICogQHByb3BlcnR5IHt2ZWMzfSBfaW50ZW5kZWRUcmFuc2xhdGlvbkZyb21UYXJnZXRcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEZpcnN0UGVyc29uQ2FtZXJhQ29uZmlnXG4gKiBAcHJvcGVydHkge3ZlYzN9IGludGVuZGVkRGlzcGxhY2VtZW50RnJvbVRhcmdldFxuICogQHByb3BlcnR5IHt2ZWMzfSB2aWV3RGlyZWN0aW9uXG4gKiBAcHJvcGVydHkge251bWJlcn0gdGFyZ2V0RGlzdGFuY2VcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEZpeGVkQ2FtZXJhQ29uZmlnXG4gKiBAcHJvcGVydHkge3ZlYzN9IHBvc2l0aW9uXG4gKiBAcHJvcGVydHkge3ZlYzN9IHZpZXdEaXJlY3Rpb25cbiAqIEBwcm9wZXJ0eSB7dmVjM30gX3VwXG4gKi9cbiIsImltcG9ydCB7IENhbWVyYSB9IGZyb20gJy4vY2FtZXJhJztcblxuLyoqXG4gKiBUaGlzIGNsYXNzIGRlZmluZXMgYSBmaXJzdC1wZXJzb24gY2FtZXJhLlxuICpcbiAqIEEgZmlyc3QtcGVyc29uIGNhbWVyYSBpcyBwb3NpdGlvbmVkIGF0IGEgY2hhcmFjdGVyIGFuZCBtb3ZlcyBhbmQgcm90YXRlcyB3aXRoIHRoZSBjaGFyYWN0ZXIuXG4gKi9cbmNsYXNzIEZpcnN0UGVyc29uQ2FtZXJhIGV4dGVuZHMgQ2FtZXJhIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7Q2FtZXJhVGFyZ2V0fSBjYW1lcmFUYXJnZXRcbiAgICogQHBhcmFtIHtGaXJzdFBlcnNvbkNhbWVyYUNvbmZpZ30gZmlyc3RQZXJzb25DYW1lcmFQYXJhbXNcbiAgICogQHBhcmFtIHtDYW1lcmFDb25maWd9IGNhbWVyYVBhcmFtc1xuICAgKiBAcGFyYW0ge0NhbWVyYX0gW29sZENhbWVyYV1cbiAgICovXG4gIGNvbnN0cnVjdG9yKGNhbWVyYVRhcmdldCwgZmlyc3RQZXJzb25DYW1lcmFQYXJhbXMsIGNhbWVyYVBhcmFtcywgb2xkQ2FtZXJhKSB7XG4gICAgc3VwZXIoY2FtZXJhUGFyYW1zLCBvbGRDYW1lcmEpO1xuICAgIHRoaXMuX2NhbWVyYVRhcmdldCA9IGNhbWVyYVRhcmdldDtcbiAgICB0aGlzLl9maXJzdFBlcnNvbkNhbWVyYVBhcmFtcyA9IGZpcnN0UGVyc29uQ2FtZXJhUGFyYW1zO1xuICAgIHRoaXMuX2NhbWVyYVRhcmdldCA9IGNhbWVyYVRhcmdldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0RPTUhpZ2hSZXNUaW1lU3RhbXB9IGN1cnJlbnRUaW1lXG4gICAqIEBwYXJhbSB7RE9NSGlnaFJlc1RpbWVTdGFtcH0gZGVsdGFUaW1lXG4gICAqL1xuICB1cGRhdGUoY3VycmVudFRpbWUsIGRlbHRhVGltZSkge1xuICAgIHRoaXMuX3VwZGF0ZVBvc2l0aW9uKCk7XG4gICAgdGhpcy5fdXBkYXRlT3JpZW50YXRpb24oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3VwZGF0ZVBvc2l0aW9uKCkge1xuICAgIGNvbnN0IGludGVuZGVkUG9zaXRpb24gPSB0aGlzLl9nZXRJbnRlbmRlZFBvc2l0aW9uKCk7XG4gICAgdmVjMy5jb3B5KHRoaXMuX3Bvc2l0aW9uLCBpbnRlbmRlZFBvc2l0aW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGNhbWVyYSdzIG9yaWVudGF0aW9uIHVzaW5nIHRoZSBcImxvb2sgYXRcIiBtZXRob2QgYWNjb3JkaW5nIHRvIGl0cyBwb3NpdGlvbiBhbmQgdGhlXG4gICAqIHBvc2l0aW9uIG9mIGl0cyB0YXJnZXQuXG4gICAqXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF91cGRhdGVPcmllbnRhdGlvbigpIHtcbiAgICAvLyBHZXQgdGhlIHZpZXcgZGlyZWN0aW9uLCBhbmQgdHJhbnNmb3JtIGl0IHRvIGFsaWduIHdpdGggdGhlIHRhcmdldCdzIG9yaWVudGF0aW9uLlxuICAgIGNvbnN0IHZpZXdEaXJlY3Rpb24gPSB2ZWMzLmNyZWF0ZSgpO1xuICAgIHZlYzMuY29weSh2aWV3RGlyZWN0aW9uLCB0aGlzLl9maXJzdFBlcnNvbkNhbWVyYVBhcmFtcy52aWV3RGlyZWN0aW9uKTtcbiAgICB2ZWMzLnRyYW5zZm9ybVF1YXQodmlld0RpcmVjdGlvbiwgdmlld0RpcmVjdGlvbiwgdGhpcy5fY2FtZXJhVGFyZ2V0Lm9yaWVudGF0aW9uKTtcblxuICAgIGNvbnN0IHRhcmdldCA9IHZlYzMuY3JlYXRlKCk7XG4gICAgdmVjMy5zY2FsZUFuZEFkZCh0YXJnZXQsIHRoaXMuX3Bvc2l0aW9uLCB2aWV3RGlyZWN0aW9uLFxuICAgICAgdGhpcy5fZmlyc3RQZXJzb25DYW1lcmFQYXJhbXMudGFyZ2V0RGlzdGFuY2UpO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSBcInVwXCIgYXMgdGhlIHdvcmxkIHotYXhpcy5cbiAgICBjb25zdCB1cCA9IHZlYzMuZnJvbVZhbHVlcygwLCAxLCAwKTtcblxuICAgIC8vIFRyYW5zZm9ybSBcInVwXCIgdG8gYWxpZ24gd2l0aCB0aGUgY2FtZXJhIHRhcmdldCdzIGxvY2FsIHotYXhpcy5cbiAgICB2ZWMzLnRyYW5zZm9ybVF1YXQodXAsIHVwLCB0aGlzLl9jYW1lcmFUYXJnZXQub3JpZW50YXRpb24pO1xuXG4gICAgY29uc3QgcmlnaHQgPSB2ZWMzLmNyZWF0ZSgpO1xuICAgIHZlYzMuY3Jvc3MocmlnaHQsIHZpZXdEaXJlY3Rpb24sIHVwKTtcblxuICAgIC8vIFRyYW5zZm9ybSBcInVwXCIgdG8gYWxpZ24gd2l0aCB0aGUgY2FtZXJhJ3MgbG9jYWwgei1heGlzLlxuICAgIHZlYzMuY3Jvc3ModXAsIHJpZ2h0LCB2aWV3RGlyZWN0aW9uKTtcblxuICAgIHRoaXMuX3NldFBvc2l0aW9uQW5kTG9va0F0KHRoaXMuX3Bvc2l0aW9uLCB0YXJnZXQsIHVwLCB2aWV3RGlyZWN0aW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgaW50ZW5kZWQgcG9zaXRpb24gZm9yIHRoaXMgY2FtZXJhIHRvIGJlIGluIGFjY29yZGluZyB0byB0aGUgcG9zaXRpb24gYW5kIG9yaWVudGF0aW9uIG9mIHRoZVxuICAgKiBjYW1lcmEgdGFyZ2V0LlxuICAgKlxuICAgKiBAcmV0dXJucyB7dmVjM31cbiAgICogQHByb3RlY3RlZFxuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIF9nZXRJbnRlbmRlZFBvc2l0aW9uKCkge1xuICAgIGNvbnN0IGludGVuZGVkUG9zaXRpb24gPSB2ZWMzLmNyZWF0ZSgpO1xuICAgIHZlYzMudHJhbnNmb3JtTWF0NChcbiAgICAgIGludGVuZGVkUG9zaXRpb24sXG4gICAgICB0aGlzLl9maXJzdFBlcnNvbkNhbWVyYVBhcmFtcy5pbnRlbmRlZERpc3BsYWNlbWVudEZyb21UYXJnZXQsXG4gICAgICB0aGlzLl9jYW1lcmFUYXJnZXQud29ybGRUcmFuc2Zvcm0pO1xuICAgIHJldHVybiBpbnRlbmRlZFBvc2l0aW9uO1xuICB9XG59XG5cbmV4cG9ydCB7IEZpcnN0UGVyc29uQ2FtZXJhIH07XG4iLCJpbXBvcnQge0NhbWVyYX0gZnJvbSAnLi9jYW1lcmEnO1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgZGVmaW5lcyBhIGZpeGVkIGNhbWVyYS5cbiAqXG4gKiBBIGZpeGVkIGNhbWVyYSdzIHBvc2l0aW9uIGFuZCBvcmllbnRhdGlvbiBhcmUgdXBkYXRlZCBtYW51YWxseSBhbmQgcmVtYWluIGZpeGVkIHVudGlsIGEgbGF0ZXJcbiAqIHVwZGF0ZS5cbiAqL1xuY2xhc3MgRml4ZWRDYW1lcmEgZXh0ZW5kcyBDYW1lcmEge1xuICAvKipcbiAgICogSWYgb2xkQ2FtZXJhIGlzIGdpdmVuLCB0aGVuIHRoZSBzdGF0ZSBvZiB0aGUgbmV3IGNhbWVyYSB3aWxsIGJlIGluaXRpYWxpemVkIHRvIG1hdGNoIHRoYXQgb2ZcbiAgICogdGhlIG9sZCBjYW1lcmEuIFRoaXMgZW5hYmxlcyBhIHNtb290aCB0cmFuc2l0aW9uIHdoZW4gY2hhbmdpbmcgY2FtZXJhcy5cbiAgICpcbiAgICogQHBhcmFtIHtGaXhlZENhbWVyYUNvbmZpZ30gZml4ZWRDYW1lcmFQYXJhbXNcbiAgICogQHBhcmFtIHtDYW1lcmFDb25maWd9IGNhbWVyYVBhcmFtc1xuICAgKiBAcGFyYW0ge0NhbWVyYX0gW29sZENhbWVyYV1cbiAgICovXG4gIGNvbnN0cnVjdG9yKGZpeGVkQ2FtZXJhUGFyYW1zLCBjYW1lcmFQYXJhbXMsIG9sZENhbWVyYSkge1xuICAgIHN1cGVyKGNhbWVyYVBhcmFtcywgb2xkQ2FtZXJhKTtcblxuICAgIHRoaXMuX3Bvc2l0aW9uID0gZml4ZWRDYW1lcmFQYXJhbXMucG9zaXRpb247XG4gICAgdGhpcy5fdmlld0RpcmVjdGlvbiA9IGZpeGVkQ2FtZXJhUGFyYW1zLnZpZXdEaXJlY3Rpb247XG4gICAgdGhpcy5fdXAgPSBmaXhlZENhbWVyYVBhcmFtcy5fdXA7XG4gICAgdGhpcy5fX3RhcmdldCA9IHZlYzMuY3JlYXRlKCk7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICBzdXBlci5yZXNldCgpO1xuICAgIHRoaXMuX3VwZGF0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RE9NSGlnaFJlc1RpbWVTdGFtcH0gY3VycmVudFRpbWVcbiAgICogQHBhcmFtIHtET01IaWdoUmVzVGltZVN0YW1wfSBkZWx0YVRpbWVcbiAgICovXG4gIHVwZGF0ZShjdXJyZW50VGltZSwgZGVsdGFUaW1lKSB7fVxuXG4gIF91cGRhdGUoKSB7XG4gICAgdmVjMy5ub3JtYWxpemUodGhpcy5fdmlld0RpcmVjdGlvbiwgdGhpcy5fdmlld0RpcmVjdGlvbik7XG4gICAgdmVjMy5ub3JtYWxpemUodGhpcy5fdXAsIHRoaXMuX3VwKTtcblxuICAgIC8vIFRyYW5zZm9ybSBcInVwXCIgdG8gYWxpZ24gd2l0aCB0aGUgY2FtZXJhJ3MgbG9jYWwgei1heGlzLlxuICAgIGNvbnN0IHJpZ2h0ID0gdmVjMy5jcmVhdGUoKTtcbiAgICB2ZWMzLmNyb3NzKHJpZ2h0LCB0aGlzLl92aWV3RGlyZWN0aW9uLCB0aGlzLl91cCk7XG4gICAgdmVjMy5jcm9zcyh0aGlzLl91cCwgcmlnaHQsIHRoaXMuX3ZpZXdEaXJlY3Rpb24pO1xuXG4gICAgdGhpcy5fc2V0UG9zaXRpb25BbmRMb29rQXQodGhpcy5fcG9zaXRpb24sIHRoaXMuX3RhcmdldCwgdGhpcy5fdXAsIHRoaXMuX3ZpZXdEaXJlY3Rpb24pO1xuICB9XG5cbiAgLyoqIEBwYXJhbSB7dmVjM30gbmV3RGlyZWN0aW9uICovXG4gIHNldCB2aWV3RGlyZWN0aW9uKG5ld0RpcmVjdGlvbikge1xuICAgIHZlYzMuY29weSh0aGlzLl92aWV3RGlyZWN0aW9uLCBuZXdEaXJlY3Rpb24pO1xuICAgIHRoaXMuX3VwZGF0ZSgpO1xuICB9XG5cbiAgLyoqIEBwYXJhbSB7dmVjM30gbmV3VXAgKi9cbiAgc2V0IHVwKG5ld1VwKSB7XG4gICAgdmVjMy5jb3B5KHRoaXMuX3VwLCBuZXdVcCk7XG4gICAgdGhpcy5fdXBkYXRlKCk7XG4gIH1cblxuICAvKiogQHBhcmFtIHt2ZWMzfSBuZXdQb3NpdGlvbiAqL1xuICBzZXQgcG9zaXRpb24obmV3UG9zaXRpb24pIHtcbiAgICB2ZWMzLmNvcHkodGhpcy5fcG9zaXRpb24sIG5ld1Bvc2l0aW9uKTtcbiAgICB0aGlzLl91cGRhdGUoKTtcbiAgfVxuXG4gIC8qKiBAcmV0dXJucyB7dmVjM30gKi9cbiAgLy8gVE9ETzogTG9vayBpbnRvIHdoYXRldmVyIGJ1ZyBwcmV2ZW50cyB0aGUgcGFyZW50LWNsYXNzIGdldHRlciBmcm9tIHdvcmtpbmcuXG4gIGdldCBwb3NpdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fcG9zaXRpb247XG4gIH1cblxuICAvKiogQHJldHVybnMge3ZlYzN9ICovXG4gIGdldCB2aWV3RGlyZWN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl92aWV3RGlyZWN0aW9uO1xuICB9XG4gIC8qKiBAcmV0dXJucyB7dmVjM30gKi9cbiAgZ2V0IHVwKCkge1xuICAgIHJldHVybiB0aGlzLl91cDtcbiAgfVxuICAvKipcbiAgICogQHJldHVybnMge3ZlYzN9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZXQgX3RhcmdldCgpIHtcbiAgICByZXR1cm4gdmVjMy5hZGQodGhpcy5fX3RhcmdldCwgdGhpcy5fcG9zaXRpb24sIHRoaXMuX3ZpZXdEaXJlY3Rpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Q2FtZXJhfSBvbGRDYW1lcmFcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX21hdGNoT2xkQ2FtZXJhKG9sZENhbWVyYSkge1xuICAgIHN1cGVyLl9tYXRjaE9sZENhbWVyYShvbGRDYW1lcmEpO1xuICAgIGlmIChvbGRDYW1lcmEgaW5zdGFuY2VvZiBGaXhlZENhbWVyYSkge1xuICAgICAgdmVjMy5jb3B5KHRoaXMuX3ZpZXdEaXJlY3Rpb24sIG9sZENhbWVyYS5fdmlld0RpcmVjdGlvbik7XG4gICAgICB2ZWMzLmNvcHkodGhpcy5fdXAsIG9sZENhbWVyYS5fdXApO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQge0ZpeGVkQ2FtZXJhfTtcbiIsImltcG9ydCB7Rm9sbG93Q2FtZXJhfSBmcm9tICcuL2ZvbGxvdy1jYW1lcmEnO1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgZGVmaW5lcyBhIGZpeGVkLW9mZnNldCBmb2xsb3cgY2FtZXJhLlxuICpcbiAqIFRoaXMgY2FtZXJhIGlzIHBvc2l0aW9uZWQgYXQgYSByZWxhdGl2ZSwgZml4ZWQgZGlzdGFuY2UgYW5kIHJvdGF0aW9uIGZyb20gdGhlIG9ic2VydmVkIHRhcmdldFxuICogYW5kIGZvbGxvd3MgdGhlIHRhcmdldCdzIHBvc2l0aW9uIGFuZCBvcmllbnRhdGlvbiBhdCB0aGlzIGZpeGVkIGRpc3RhbmNlLlxuICpcbiAqIEEgZm9sbG93IGNhbWVyYSByb3RhdGVzIGluIGFsbCB0aHJlZSBkaW1lbnNpb25zOyBpdCBkb2VzIG5vdCBoYXZlIGEgZml4ZWQgcm9sbC5cbiAqL1xuY2xhc3MgRml4ZWRGb2xsb3dDYW1lcmEgZXh0ZW5kcyBGb2xsb3dDYW1lcmEge1xuICAvKipcbiAgICogQHBhcmFtIHtET01IaWdoUmVzVGltZVN0YW1wfSBjdXJyZW50VGltZVxuICAgKiBAcGFyYW0ge0RPTUhpZ2hSZXNUaW1lU3RhbXB9IGRlbHRhVGltZVxuICAgKi9cbiAgdXBkYXRlKGN1cnJlbnRUaW1lLCBkZWx0YVRpbWUpIHtcbiAgICB0aGlzLl91cGRhdGVQb3NpdGlvbigpO1xuICAgIHRoaXMuX3VwZGF0ZU9yaWVudGF0aW9uKCk7XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF91cGRhdGVQb3NpdGlvbigpIHtcbiAgICBjb25zdCBpbnRlbmRlZFBvc2l0aW9uID0gdGhpcy5fZ2V0SW50ZW5kZWRQb3NpdGlvbigpO1xuICAgIHZlYzMuY29weSh0aGlzLl9wb3NpdGlvbiwgaW50ZW5kZWRQb3NpdGlvbik7XG4gIH1cbn1cblxuZXhwb3J0IHtGaXhlZEZvbGxvd0NhbWVyYX07XG4iLCJpbXBvcnQge1RoaXJkUGVyc29uQ2FtZXJhfSBmcm9tICcuL3RoaXJkLXBlcnNvbi1jYW1lcmEnO1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgZGVmaW5lcyBhbiBhYnN0cmFjdCBmb2xsb3cgY2FtZXJhLlxuICpcbiAqIFRoaXMgaXMgYSB0aGlyZC1wZXJzb24gdHlwZSBvZiBjYW1lcmEgd2hvc2Ugcm9sbCBhbHdheXMgbWF0Y2hlcyB0aGF0IG9mIHRoZSB0YXJnZXQuXG4gKi9cbmNsYXNzIEZvbGxvd0NhbWVyYSBleHRlbmRzIFRoaXJkUGVyc29uQ2FtZXJhIHtcbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgY2FtZXJhJ3Mgb3JpZW50YXRpb24gdXNpbmcgdGhlIFwibG9vayBhdFwiIG1ldGhvZCBhY2NvcmRpbmcgdG8gaXRzIHBvc2l0aW9uIGFuZCB0aGVcbiAgICogcG9zaXRpb24gb2YgaXRzIHRhcmdldC5cbiAgICpcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX3VwZGF0ZU9yaWVudGF0aW9uKCkge1xuICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuX2NhbWVyYVRhcmdldC5wb3NpdGlvbjtcblxuICAgIGNvbnN0IHZpZXdEaXJlY3Rpb24gPSB2ZWMzLmNyZWF0ZSgpO1xuICAgIHZlYzMuc3VidHJhY3Qodmlld0RpcmVjdGlvbiwgdGFyZ2V0LCB0aGlzLl9wb3NpdGlvbik7XG4gICAgdmVjMy5ub3JtYWxpemUodmlld0RpcmVjdGlvbiwgdmlld0RpcmVjdGlvbik7XG5cbiAgICAvLyBJbml0aWFsaXplIFwidXBcIiBhcyB0aGUgd29ybGQgei1heGlzLlxuICAgIGNvbnN0IHVwID0gdmVjMy5mcm9tVmFsdWVzKDAsIDEsIDApO1xuXG4gICAgLy8gVHJhbnNmb3JtIFwidXBcIiB0byBhbGlnbiB3aXRoIHRoZSBjYW1lcmEgdGFyZ2V0J3MgbG9jYWwgei1heGlzLlxuICAgIHZlYzMudHJhbnNmb3JtUXVhdCh1cCwgdXAsIHRoaXMuX2NhbWVyYVRhcmdldC5vcmllbnRhdGlvbik7XG5cbiAgICBjb25zdCByaWdodCA9IHZlYzMuY3JlYXRlKCk7XG4gICAgdmVjMy5jcm9zcyhyaWdodCwgdmlld0RpcmVjdGlvbiwgdXApO1xuXG4gICAgLy8gVHJhbnNmb3JtIFwidXBcIiB0byBhbGlnbiB3aXRoIHRoZSBjYW1lcmEncyBsb2NhbCB6LWF4aXMuXG4gICAgdmVjMy5jcm9zcyh1cCwgcmlnaHQsIHZpZXdEaXJlY3Rpb24pO1xuXG4gICAgdGhpcy5fc2V0UG9zaXRpb25BbmRMb29rQXQodGhpcy5fcG9zaXRpb24sIHRhcmdldCwgdXAsIHZpZXdEaXJlY3Rpb24pO1xuICB9XG59XG5cbmV4cG9ydCB7Rm9sbG93Q2FtZXJhfTtcbiIsImltcG9ydCB7VGhpcmRQZXJzb25DYW1lcmF9IGZyb20gJy4vdGhpcmQtcGVyc29uLWNhbWVyYSc7XG5cbi8qKlxuICogVGhpcyBjbGFzcyBkZWZpbmVzIGFuIG92ZXJoZWFkIGNhbWVyYS5cbiAqXG4gKiBBbiBvdmVyaGVhZCBjYW1lcmEgc2l0cyBhYm92ZSB0aGUgb2JzZXJ2ZWQgY2hhcmFjdGVyIGFuZCBtb3ZlcyByZWxhdGl2ZSB0byB0aGUgY2hhcmFjdGVyIHdpdGhvdXRcbiAqIHJvdGF0aW5nLlxuICpcbiAqIEFuIG92ZXJoZWFkIGNhbWVyYSdzIHJvdGF0aW9uIHdpdGggdGhlIGNoYXJhY3RlciBpbmNsdWRlcyBvbmx5IHlhdzsgaXQgaGFzIGEgZml4ZWQgcGl0Y2ggYW5kXG4gKiByb2xsLlxuICovXG5jbGFzcyBPdmVyaGVhZENhbWVyYSBleHRlbmRzIFRoaXJkUGVyc29uQ2FtZXJhIHtcbiAgLyoqXG4gICAqIElmIG9sZENhbWVyYSBpcyBnaXZlbiwgdGhlbiB0aGUgc3RhdGUgb2YgdGhlIG5ldyBjYW1lcmEgd2lsbCBiZSBpbml0aWFsaXplZCB0byBtYXRjaCB0aGF0IG9mXG4gICAqIHRoZSBvbGQgY2FtZXJhLiBUaGlzIGVuYWJsZXMgYSBzbW9vdGggdHJhbnNpdGlvbiB3aGVuIGNoYW5naW5nIGNhbWVyYXMuXG4gICAqXG4gICAqIEBwYXJhbSB7Q2FtZXJhVGFyZ2V0fSBjYW1lcmFUYXJnZXRcbiAgICogQHBhcmFtIHtGb2xsb3dDYW1lcmFDb25maWd9IGZvbGxvd0NhbWVyYVBhcmFtc1xuICAgKiBAcGFyYW0ge0NhbWVyYUNvbmZpZ30gY2FtZXJhUGFyYW1zXG4gICAqIEBwYXJhbSB7Q2FtZXJhfSBbb2xkQ2FtZXJhXVxuICAgKi9cbiAgY29uc3RydWN0b3IoY2FtZXJhVGFyZ2V0LCBmb2xsb3dDYW1lcmFQYXJhbXMsIGNhbWVyYVBhcmFtcywgb2xkQ2FtZXJhKSB7XG4gICAgc3VwZXIoY2FtZXJhVGFyZ2V0LCBmb2xsb3dDYW1lcmFQYXJhbXMsIGNhbWVyYVBhcmFtcywgb2xkQ2FtZXJhKTtcblxuICAgIHRoaXMucmVzZXQoKTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHN1cGVyLnJlc2V0KCk7XG4gIH1cblxuICAvLyBUT0RPOiBJbXBsZW1lbnQgdGhpcyFcbn1cblxuZXhwb3J0IHtPdmVyaGVhZENhbWVyYX07XG4iLCJpbXBvcnQge0NhbWVyYX0gZnJvbSAnLi9jYW1lcmEnO1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgZGVmaW5lcyBhbiBhYnN0cmFjdCB0aGlyZC1wZXJzb24gY2FtZXJhLlxuICpcbiAqIEEgdGhpcmQtcGVyc29uIGNhbWVyYSBmb2xsb3dzIGEgdGFyZ2V0IGZyb20gYSBkaXN0YW5jZS5cbiAqXG4gKiBAYWJzdHJhY3RcbiAqL1xuY2xhc3MgVGhpcmRQZXJzb25DYW1lcmEgZXh0ZW5kcyBDYW1lcmEge1xuICAvKipcbiAgICogSWYgb2xkQ2FtZXJhIGlzIGdpdmVuLCB0aGVuIHRoZSBzdGF0ZSBvZiB0aGUgbmV3IGNhbWVyYSB3aWxsIGJlIGluaXRpYWxpemVkIHRvIG1hdGNoIHRoYXQgb2ZcbiAgICogdGhlIG9sZCBjYW1lcmEuIFRoaXMgZW5hYmxlcyBhIHNtb290aCB0cmFuc2l0aW9uIHdoZW4gY2hhbmdpbmcgY2FtZXJhcy5cbiAgICpcbiAgICogQHBhcmFtIHtDYW1lcmFUYXJnZXR9IGNhbWVyYVRhcmdldFxuICAgKiBAcGFyYW0ge0ZvbGxvd0NhbWVyYUNvbmZpZ30gZm9sbG93Q2FtZXJhUGFyYW1zXG4gICAqIEBwYXJhbSB7Q2FtZXJhQ29uZmlnfSBjYW1lcmFQYXJhbXNcbiAgICogQHBhcmFtIHtDYW1lcmF9IFtvbGRDYW1lcmFdXG4gICAqL1xuICBjb25zdHJ1Y3RvcihjYW1lcmFUYXJnZXQsIGZvbGxvd0NhbWVyYVBhcmFtcywgY2FtZXJhUGFyYW1zLCBvbGRDYW1lcmEpIHtcbiAgICBzdXBlcihjYW1lcmFQYXJhbXMsIG9sZENhbWVyYSk7XG5cbiAgICAvLyBUaGlyZFBlcnNvbkNhbWVyYSBpcyBhbiBhYnN0cmFjdCBjbGFzcy4gSXQgc2hvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQgZGlyZWN0bHkuXG4gICAgaWYgKG5ldy50YXJnZXQgPT09IFRoaXJkUGVyc29uQ2FtZXJhKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29uc3RydWN0IFRoaXJkUGVyc29uQ2FtZXJhIGluc3RhbmNlcyBkaXJlY3RseScpO1xuICAgIH1cblxuICAgIHRoaXMuX2ZvbGxvd0NhbWVyYVBhcmFtcyA9IGZvbGxvd0NhbWVyYVBhcmFtcztcbiAgICB0aGlzLl9jYW1lcmFUYXJnZXQgPSBjYW1lcmFUYXJnZXQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGludGVuZGVkIHBvc2l0aW9uIGZvciB0aGlzIGNhbWVyYSB0byBiZSBpbiBhY2NvcmRpbmcgdG8gdGhlIHBvc2l0aW9uIGFuZCBvcmllbnRhdGlvbiBvZiB0aGVcbiAgICogY2FtZXJhIHRhcmdldC5cbiAgICpcbiAgICogQHJldHVybnMge3ZlYzN9XG4gICAqIEBwcm90ZWN0ZWRcbiAgICogQGFic3RyYWN0XG4gICAqL1xuICBfZ2V0SW50ZW5kZWRQb3NpdGlvbigpIHtcbiAgICBjb25zdCBpbnRlbmRlZFBvc2l0aW9uID0gdmVjMy5jcmVhdGUoKTtcbiAgICB2ZWMzLnRyYW5zZm9ybU1hdDQoXG4gICAgICAgIGludGVuZGVkUG9zaXRpb24sXG4gICAgICAgIHRoaXMuX2ZvbGxvd0NhbWVyYVBhcmFtcy5faW50ZW5kZWRUcmFuc2xhdGlvbkZyb21UYXJnZXQsXG4gICAgICAgIHRoaXMuX2NhbWVyYVRhcmdldC53b3JsZFRyYW5zZm9ybSk7XG4gICAgcmV0dXJuIGludGVuZGVkUG9zaXRpb247XG4gIH1cblxuICAvKiogQHBhcmFtIHtDYW1lcmFUYXJnZXR9IGNhbWVyYVRhcmdldCAqL1xuICBzZXQgY2FtZXJhVGFyZ2V0KGNhbWVyYVRhcmdldCkge1xuICAgIHRoaXMuX2NhbWVyYVRhcmdldCA9IGNhbWVyYVRhcmdldDtcbiAgfVxufVxuXG5leHBvcnQge1RoaXJkUGVyc29uQ2FtZXJhfTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBDYW1lcmFUYXJnZXRcbiAqIEBwcm9wZXJ0eSB7dmVjM30gcG9zaXRpb24gSW4gd29ybGQgY29vcmRpbmF0ZXMuXG4gKiBAcHJvcGVydHkge3F1YXR9IG9yaWVudGF0aW9uIFJlbGF0aXZlIHRvIHRoZSB3b3JsZCBheGVzLlxuICogQHByb3BlcnR5IHttYXQ0fSB3b3JsZFRyYW5zZm9ybSBUaGUgbW9kZWwgdHJhbnNmb3JtIG1hdHJpeCwgaW4gd29ybGQgY29vcmRpbmF0ZXMuXG4gKi9cbiIsIi8qKlxuICogVGhpcyBtb2R1bGUgcmUtZXhwb3J0cyBhbGwgb2YgdGhlIGV4cG9ydHMgaW4gdGhlIGdyYWZ4IGZyYW1ld29yay4gVGhpcyBtYWtlcyB0aGUgZW50aXJlIGZyYW1ld29ya1xuICogY29udmVuaWVudGx5IGFjY2Vzc2libGUgdmlhIHRoaXMgc2luZ2xlIG1vZHVsZS5cbiAqL1xuXG5leHBvcnQgKiBmcm9tICcuL2NhbWVyYXMnO1xuZXhwb3J0ICogZnJvbSAnLi9tb2RlbHMnO1xuZXhwb3J0ICogZnJvbSAnLi9wcm9ncmFtLXdyYXBwZXInO1xuZXhwb3J0ICogZnJvbSAnLi9yZW5kZXJhYmxlLXNoYXBlcyc7XG5leHBvcnQgKiBmcm9tICcuL3V0aWwnO1xuXG5leHBvcnQgKiBmcm9tICcuL3NyYy9ncmFmeC1jb250cm9sbGVyJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2xpZ2h0JztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL3NjZW5lJztcbiIsImV4cG9ydCAqIGZyb20gJy4vc3JjL2RlZmF1bHQtbW9kZWwnO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvaW52aXNpYmxlLW1vZGVsLWNvbnRyb2xsZXInO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvbW9kZWwnO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvbW9kZWwtY29udHJvbGxlcic7XG5leHBvcnQgKiBmcm9tICcuL3NyYy9tb2RlbC1ncm91cC1jb250cm9sbGVyJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL3N0YW5kYXJkLW1vZGVsLWNvbnRyb2xsZXInO1xuIiwiaW1wb3J0IHtjcmVhdGVCdWZmZXJGcm9tRGF0YX0gZnJvbSAnLi4vLi4vdXRpbCc7XG5pbXBvcnQge01vZGVsfSBmcm9tICcuL21vZGVsJztcblxuLyoqXG4gKiBUaGlzIGNsYXNzIGRlZmluZXMgYSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIHRoZSByaWdpZCBtb2RlbC5cbiAqXG4gKiBUaGlzIGltcGxlbWVudGF0aW9uIGFjY2VwdHMgYSBSZW5kZXJhYmxlU2hhcGUgYW5kIGFwcGxpZXMgc3RhbmRhcmQgT3BlbkdMIGJpbmRpbmcgbG9naWMgb24gdG9wXG4gKiBvZiBpdC5cbiAqL1xuY2xhc3MgRGVmYXVsdE1vZGVsIGV4dGVuZHMgTW9kZWwge1xuICAvKipcbiAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsXG4gICAqIEBwYXJhbSB7UmVuZGVyYWJsZVNoYXBlfSBzaGFwZUNvbmZpZ1xuICAgKi9cbiAgY29uc3RydWN0b3IoZ2wsIHNoYXBlQ29uZmlnKSB7XG4gICAgc3VwZXIoZ2wpO1xuICAgIHRoaXMuX3NoYXBlQ29uZmlnID0gc2hhcGVDb25maWc7XG4gICAgdGhpcy5faW5pdGlhbGl6ZUJ1ZmZlcnMoKTtcbiAgICB0aGlzLl9pbml0aWFsaXplQ29uZmlncygpO1xuICB9XG5cbiAgX2luaXRpYWxpemVCdWZmZXJzKCkge1xuICAgIC8vIENyZWF0ZSwgYmluZCwgYW5kIG1vdmUgZGF0YSBpbnRvIGJ1ZmZlcnMgZm9yIHRoZSB2ZXJ0ZXggcG9zaXRpb25zLCBub3JtYWxzLCB0ZXh0dXJlXG4gICAgLy8gY29vcmRpbmF0ZXMsIGFuZCBlbGVtZW50IGFycmF5LlxuICAgIHRoaXMuX3ZlcnRleFBvc2l0aW9uc0J1ZmZlciA9IGNyZWF0ZUJ1ZmZlckZyb21EYXRhKHRoaXMuX2dsLCB0aGlzLl9zaGFwZUNvbmZpZy52ZXJ0ZXhQb3NpdGlvbnMpO1xuICAgIHRoaXMuX3ZlcnRleE5vcm1hbHNCdWZmZXIgPSBjcmVhdGVCdWZmZXJGcm9tRGF0YSh0aGlzLl9nbCwgdGhpcy5fc2hhcGVDb25maWcudmVydGV4Tm9ybWFscyk7XG4gICAgdGhpcy5fdGV4dHVyZUNvb3JkaW5hdGVzQnVmZmVyID1cbiAgICAgICAgY3JlYXRlQnVmZmVyRnJvbURhdGEodGhpcy5fZ2wsIHRoaXMuX3NoYXBlQ29uZmlnLnRleHR1cmVDb29yZGluYXRlcyk7XG4gICAgaWYgKHRoaXMuX3NoYXBlQ29uZmlnLnZlcnRleEluZGljZXMpIHtcbiAgICAgIHRoaXMuX3ZlcnRleEluZGljZXNCdWZmZXIgPSBjcmVhdGVCdWZmZXJGcm9tRGF0YSh0aGlzLl9nbCwgdGhpcy5fc2hhcGVDb25maWcudmVydGV4SW5kaWNlcyxcbiAgICAgICAgICB0aGlzLl9nbC5FTEVNRU5UX0FSUkFZX0JVRkZFUik7XG4gICAgfVxuICB9XG5cbiAgX2luaXRpYWxpemVDb25maWdzKCkge1xuICAgIHRoaXMuX3ZlcnRleFBvc2l0aW9uc0NvbmZpZyA9IHtcbiAgICAgIGJ1ZmZlcjogdGhpcy5fdmVydGV4UG9zaXRpb25zQnVmZmVyLFxuICAgICAgc2l6ZTogMyxcbiAgICAgIHR5cGU6IHRoaXMuX2dsLkZMT0FULFxuICAgICAgbm9ybWFsaXplZDogZmFsc2UsXG4gICAgICBzdHJpZGU6IDAsXG4gICAgICBvZmZzZXQ6IDBcbiAgICB9O1xuICAgIHRoaXMuX3RleHR1cmVDb29yZGluYXRlc0NvbmZpZyA9IHtcbiAgICAgIGJ1ZmZlcjogdGhpcy5fdGV4dHVyZUNvb3JkaW5hdGVzQnVmZmVyLFxuICAgICAgc2l6ZTogMixcbiAgICAgIHR5cGU6IHRoaXMuX2dsLkZMT0FULFxuICAgICAgbm9ybWFsaXplZDogZmFsc2UsXG4gICAgICBzdHJpZGU6IDAsXG4gICAgICBvZmZzZXQ6IDBcbiAgICB9O1xuICAgIHRoaXMuX3ZlcnRleE5vcm1hbHNDb25maWcgPSB7XG4gICAgICBidWZmZXI6IHRoaXMuX3ZlcnRleE5vcm1hbHNCdWZmZXIsXG4gICAgICBzaXplOiAzLFxuICAgICAgdHlwZTogdGhpcy5fZ2wuRkxPQVQsXG4gICAgICBub3JtYWxpemVkOiBmYWxzZSxcbiAgICAgIHN0cmlkZTogMCxcbiAgICAgIG9mZnNldDogMFxuICAgIH07XG4gIH1cblxuICAvKiogQHJldHVybnMge251bWJlcn0gKi9cbiAgZ2V0IGVsZW1lbnRDb3VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2hhcGVDb25maWcuZWxlbWVudENvdW50O1xuICB9XG5cbiAgLyoqIEByZXR1cm5zIHtudW1iZXJ9ICovXG4gIGdldCBtb2RlKCkge1xuICAgIHJldHVybiB0aGlzLl9nbC5UUklBTkdMRVM7XG4gICAgLy9yZXR1cm4gdGhpcy5fZ2wuTElORV9TVFJJUDsvLyBUT0RPOiBSRU1PVkUgTUVcbiAgfVxufVxuXG5leHBvcnQge0RlZmF1bHRNb2RlbH07XG4iLCJpbXBvcnQge01vZGVsQ29udHJvbGxlcn0gZnJvbSAnLi9tb2RlbC1jb250cm9sbGVyJztcblxuLyoqXG4gKiBUaGlzIGNsYXNzIGRlZmluZXMgYW4gZXh0ZW5zaW9uIG9mIHRoZSBtb2RlbC1jb250cm9sbGVyIGNsYXNzIHRoYXQgd2lsbCBtYWludGFpbiBzdGF0ZSBidXQgd2lsbFxuICogbmV2ZXIgcmVuZGVyIGFueXRoaW5nLlxuICovXG5jbGFzcyBJbnZpc2libGVNb2RlbENvbnRyb2xsZXIgZXh0ZW5kcyBNb2RlbENvbnRyb2xsZXIge1xuICAvKipcbiAgICogQHBhcmFtIHtNb2RlbENvbnRyb2xsZXJDb25maWd9IHBhcmFtc1xuICAgKi9cbiAgY29uc3RydWN0b3IocGFyYW1zKSB7XG4gICAgc3VwZXIocGFyYW1zKTtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7fVxuXG4gIHVwZGF0ZShjdXJyZW50VGltZSwgZGVsdGFUaW1lKSB7fVxuXG4gIGRyYXcoKSB7fVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgcHJvZ3JhbSB2YXJpYWJsZXMgY29uZmlndXJhdGlvbi5cbiAgICpcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX3NldFVwUHJvZ3JhbVZhcmlhYmxlc0NvbmZpZygpIHtcbiAgICB0aGlzLl9wcm9ncmFtVmFyaWFibGVzQ29uZmlnID0ge307XG4gIH1cblxuICAvKipcbiAgICogT3ZlcnJpZGVzIHRoZSBkZWZhdWx0IG1ldGhvZCB0byBpbnN0ZWFkIGRvIG5vdGhpbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICovXG4gIF9zZXRVcFByb2dyYW1XcmFwcGVyKGlkKSB7XG4gICAgdGhpcy5fcHJvZ3JhbVdyYXBwZXJJZCA9IGlkO1xuICAgIHRoaXMuX3Byb2dyYW1XcmFwcGVyUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgICByZXR1cm4gdGhpcy5fcHJvZ3JhbVdyYXBwZXJQcm9taXNlO1xuICB9XG59XG5cbmV4cG9ydCB7SW52aXNpYmxlTW9kZWxDb250cm9sbGVyfTtcbiIsImltcG9ydCB7UGVyc2lzdGVudEFuaW1hdGlvbkpvYn0gZnJvbSAnbHNsLWFuaW1hdGV4JztcbmltcG9ydCB7XG4gIHByb2dyYW1XcmFwcGVyU3RvcmUsXG4gIHRleHR1cmVTdG9yZSxcbn0gZnJvbSAnLi4vLi4vcHJvZ3JhbS13cmFwcGVyJztcblxuLyoqXG4gKiBUaGlzIGNsYXNzIGRlZmluZXMgYSBtb2RlbC1jb250cm9sbGVyIGNsYXNzLlxuICpcbiAqIFRoaXMgc2hvdWxkIGJlIGV4dGVuZGVkIGJ5IGFsbCBjb21wb25lbnRzIHRoYXQgaGFuZGxlIG1vZGVscy0taS5lLiwgYW55dGhpbmcgdGhhdCB3aWxsIGJlXG4gKiByZW5kZXJpbmcgc2hhcGVzLlxuICpcbiAqIEBpbXBsZW1lbnRzIHtNb2RlbENvbnRyb2xsZXJJbnRlcmZhY2V9XG4gKiBAYWJzdHJhY3RcbiAqL1xuY2xhc3MgTW9kZWxDb250cm9sbGVyIGV4dGVuZHMgUGVyc2lzdGVudEFuaW1hdGlvbkpvYiB7XG4gIC8qKlxuICAgKiBQUkVDT05ESVRJT046IFRoZSBQcm9ncmFtV3JhcHBlciByZWZlcmVuY2VkIGJ5IHRoZSBnaXZlbiBwYXJhbXMgbXVzdCBoYXZlIGFscmVhZHkgYmVlblxuICAgKiByZWdpc3RlcmVkLlxuICAgKlxuICAgKiBAcGFyYW0ge01vZGVsQ29udHJvbGxlckNvbmZpZ30gcGFyYW1zXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgLy8gTW9kZWxDb250cm9sbGVyIGlzIGFuIGFic3RyYWN0IGNsYXNzLiBJdCBzaG91bGQgbm90IGJlIGluc3RhbnRpYXRlZCBkaXJlY3RseS5cbiAgICBpZiAobmV3LnRhcmdldCA9PT0gTW9kZWxDb250cm9sbGVyKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29uc3RydWN0IE1vZGVsQ29udHJvbGxlciBpbnN0YW5jZXMgZGlyZWN0bHknKTtcbiAgICB9XG5cbiAgICB0aGlzLl9nbCA9IHBhcmFtcy5nbDtcbiAgICB0aGlzLl9nZXRWaWV3TWF0cml4ID0gcGFyYW1zLmdldFZpZXdNYXRyaXg7XG4gICAgdGhpcy5fZ2V0UHJvamVjdGlvbk1hdHJpeCA9IHBhcmFtcy5nZXRQcm9qZWN0aW9uTWF0cml4O1xuICAgIHRoaXMuX2dldFBhcmVudFdvcmxkVHJhbnNmb3JtID0gcGFyYW1zLmdldFBhcmVudFdvcmxkVHJhbnNmb3JtO1xuICAgIHRoaXMuX2xvY2FsVHJhbnNmb3JtID0gbWF0NC5jcmVhdGUoKTtcbiAgICB0aGlzLl93b3JsZFRyYW5zZm9ybSA9IG1hdDQuY3JlYXRlKCk7XG4gICAgdGhpcy5fdGV4dHVyZSA9IG51bGw7XG4gICAgdGhpcy5fcHJvZ3JhbVdyYXBwZXIgPSBudWxsO1xuICAgIHRoaXMuX3Byb2dyYW1XcmFwcGVySWQgPSBudWxsO1xuICAgIHRoaXMuX2RyYXdGcmFtZUhhbmRsZXIgPSAoKSA9PiB0aGlzLmRyYXcoKTtcbiAgICB0aGlzLl9wcm9ncmFtVmFyaWFibGVzQ29uZmlnID0gbnVsbDtcblxuICAgIHRoaXMucG9zaXRpb24gPSB2ZWMzLmNyZWF0ZSgpO1xuICAgIHRoaXMuc2NhbGUgPSB2ZWMzLmZyb21WYWx1ZXMoMSwgMSwgMSk7XG5cbiAgICB0aGlzLl9zZXRVcFRleHR1cmUocGFyYW1zLnRleHR1cmVQYXRoKTtcbiAgICB0aGlzLl9zZXRVcFByb2dyYW1XcmFwcGVyKHBhcmFtcy5wcm9ncmFtV3JhcHBlcklkKTtcblxuICAgIHRoaXMuX2lzUmVhZHlQcm9taXNlID0gUHJvbWlzZS5hbGwoW1xuICAgICAgdGhpcy5fdGV4dHVyZVByb21pc2UsXG4gICAgICB0aGlzLl9wcm9ncmFtV3JhcHBlclByb21pc2UsXG4gICAgXSk7XG4gIH1cblxuICByZXNldCgpIHt9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoaXMgaXMgZG9uZSBiZWluZyB1c2VkLCBhbmQgaXMgYmVpbmcgZGVzdHJveWVkIGZyb20gbWVtb3J5LlxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICBwcm9ncmFtV3JhcHBlclN0b3JlLnVucmVnaXN0ZXJEcmF3RnJhbWVIYW5kbGVyKHRoaXMuX3Byb2dyYW1XcmFwcGVySWQsIHRoaXMuX2RyYXdGcmFtZUhhbmRsZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxzIHVwZGF0ZSwgdXBkYXRlVHJhbnNmb3JtcywgYW5kIHVwZGF0ZUNoaWxkcmVuLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUhpZ2hSZXNUaW1lU3RhbXB9IGN1cnJlbnRUaW1lXG4gICAqIEBwYXJhbSB7RE9NSGlnaFJlc1RpbWVTdGFtcH0gZGVsdGFUaW1lXG4gICAqL1xuICB1cGRhdGVTZWxmQW5kQ2hpbGRyZW4oY3VycmVudFRpbWUsIGRlbHRhVGltZSkge1xuICAgIHRoaXMudXBkYXRlKGN1cnJlbnRUaW1lLCBkZWx0YVRpbWUpO1xuICAgIHRoaXMudXBkYXRlVHJhbnNmb3JtcygpO1xuICAgIHRoaXMudXBkYXRlQ2hpbGRyZW4oY3VycmVudFRpbWUsIGRlbHRhVGltZSk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyByZWxldmFudCBzdGF0ZSBmb3IgdGhlIHN1Yi1jbGFzcy5cbiAgICpcbiAgICogLSBUaGlzIGRvZXMgbm90IHJlY3Vyc2l2ZWx5IHVwZGF0ZSBkZXNjZW5kYW50IG1vZGVsIGNvbnRyb2xsZXJzOyB0aGF0J3MgaGFuZGxlZCBieVxuICAgKiAgIHVwZGF0ZUNoaWxkcmVuLlxuICAgKiAtIFRoaXMgZG9lcyBub3QgdXBkYXRlIHRoZSBsb2NhbCBvciB3b3JsZC1jb29yZGluYXRlIHRyYW5zZm9ybXM7IHRoYXQncyBoYW5kbGVkIGJ5XG4gICAqICAgdXBkYXRlVHJhbnNmb3Jtcy5cbiAgICogLSBUaGlzIGlzIGNhbGxlZCBiZWZvcmUgdXBkYXRlTG9jYWxUcmFuc2Zvcm0gYW5kIHVwZGF0ZUNoaWxkcmVuLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUhpZ2hSZXNUaW1lU3RhbXB9IGN1cnJlbnRUaW1lXG4gICAqIEBwYXJhbSB7RE9NSGlnaFJlc1RpbWVTdGFtcH0gZGVsdGFUaW1lXG4gICAqL1xuICB1cGRhdGUoY3VycmVudFRpbWUsIGRlbHRhVGltZSkge1xuICAgIC8vIEV4dGVuZGluZyBjbGFzc2VzIHNob3VsZCBpbXBsZW1lbnQgdGhpcyBtZXRob2QuXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIHdvcmxkLWNvb3JkaW5hdGUgYW5kIGxvY2FsLWNvb3JkaW5hdGUgbW9kZWwgbWF0cmljZXMuXG4gICAqXG4gICAqIFRoaXMgaXMgY2FsbGVkIGFmdGVyIHVwZGF0ZSBhbmQgYmVmb3JlIHVwZGF0ZUNoaWxkcmVuLlxuICAgKlxuICAgKiBOT1RFOiBBbGwgb3ZlcnJpZGVzIG9mIHRoaXMgbWV0aG9kIHNob3VsZCB1cGRhdGUgW3RoaXMuX2xvY2FsVHJhbnNmb3JtXS5cbiAgICovXG4gIHVwZGF0ZVRyYW5zZm9ybXMoKSB7XG4gICAgbWF0NC5tdWx0aXBseSh0aGlzLl93b3JsZFRyYW5zZm9ybSwgdGhpcy5fZ2V0UGFyZW50V29ybGRUcmFuc2Zvcm0oKSwgdGhpcy5fbG9jYWxUcmFuc2Zvcm0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgcmVsZXZhbnQgc3RhdGUgZm9yIGFueSBjaGlsZHJlbiBtb2RlbCBjb250cm9sbGVycy5cbiAgICpcbiAgICogVGhpcyBpcyBjYWxsZWQgYWZ0ZXIgdXBkYXRlIGFuZCB1cGRhdGVMb2NhbFRyYW5zZm9ybS5cbiAgICpcbiAgICogQHBhcmFtIHtET01IaWdoUmVzVGltZVN0YW1wfSBjdXJyZW50VGltZVxuICAgKiBAcGFyYW0ge0RPTUhpZ2hSZXNUaW1lU3RhbXB9IGRlbHRhVGltZVxuICAgKi9cbiAgdXBkYXRlQ2hpbGRyZW4oY3VycmVudFRpbWUsIGRlbHRhVGltZSkge31cblxuICAvKipcbiAgICogQGFic3RyYWN0XG4gICAqL1xuICBkcmF3KCkge1xuICAgIC8vIEV4dGVuZGluZyBjbGFzc2VzIHNob3VsZCBpbXBsZW1lbnQgdGhpcyBtZXRob2QuXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG1vZGVsIHRyYW5zZm9ybSBtYXRyaXgsIGluIGxvY2FsIGNvb3JkaW5hdGVzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7bWF0NH1cbiAgICovXG4gIGdldCBsb2NhbFRyYW5zZm9ybSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbG9jYWxUcmFuc2Zvcm07XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbW9kZWwgdHJhbnNmb3JtIG1hdHJpeCwgaW4gd29ybGQgY29vcmRpbmF0ZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHttYXQ0fVxuICAgKi9cbiAgZ2V0IHdvcmxkVHJhbnNmb3JtKCkge1xuICAgIHJldHVybiB0aGlzLl93b3JsZFRyYW5zZm9ybTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhpcyBtb2RlbCBjb250cm9sbGVyIGlzIHJlYWR5IGZvciB0aGUgYXBwIHRvIHJ1bi5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAqL1xuICBnZXRJc1JlYWR5KCkge1xuICAgIHJldHVybiB0aGlzLl9pc1JlYWR5UHJvbWlzZTtcbiAgfVxuXG4gIC8qKiBAcGFyYW0ge3N0cmluZ30gaWQgKi9cbiAgc2V0IHByb2dyYW1XcmFwcGVySWQoaWQpIHtcbiAgICBwcm9ncmFtV3JhcHBlclN0b3JlLnVucmVnaXN0ZXJEcmF3RnJhbWVIYW5kbGVyKHRoaXMuX3Byb2dyYW1XcmFwcGVySWQsIHRoaXMuX2RyYXdGcmFtZUhhbmRsZXIpO1xuICAgIHRoaXMuX3NldFVwUHJvZ3JhbVdyYXBwZXIoaWQpO1xuICB9XG5cbiAgLyoqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAqL1xuICBzZXQgdGV4dHVyZVBhdGgodmFsdWUpIHtcbiAgICB0aGlzLl9zZXRVcFRleHR1cmUodmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBwcm9ncmFtIHZhcmlhYmxlcyBjb25maWd1cmF0aW9uLlxuICAgKlxuICAgKiBAcHJvdGVjdGVkXG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgX3NldFVwUHJvZ3JhbVZhcmlhYmxlc0NvbmZpZygpIHtcbiAgICAvLyBFeHRlbmRpbmcgY2xhc3NlcyBzaG91bGQgaW1wbGVtZW50IHRoaXMgbWV0aG9kLlxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3RleHR1cmVQYXRoXVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRVcFRleHR1cmUodGV4dHVyZVBhdGgpIHtcbiAgICB0aGlzLl90ZXh0dXJlUHJvbWlzZSA9IHRleHR1cmVQYXRoXG4gICAgICAgID8gdGV4dHVyZVN0b3JlLmxvYWRUZXh0dXJlKHRoaXMuX2dsLCB0ZXh0dXJlUGF0aClcbiAgICAgICAgOiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG5cbiAgICAvLyBBc3NpZ24gdGhlIGFjdHVhbCB0ZXh0dXJlLlxuICAgIHRoaXMuX3RleHR1cmVQcm9taXNlID0gdGhpcy5fdGV4dHVyZVByb21pc2VcbiAgICAgICAgLnRoZW4odGV4dHVyZSA9PiB0aGlzLl90ZXh0dXJlID0gdGV4dHVyZSlcbiAgICAgICAgLnRoZW4oKCkgPT4gdGhpcy5fc2V0VXBQcm9ncmFtVmFyaWFibGVzQ29uZmlnKCkpO1xuXG4gICAgcmV0dXJuIHRoaXMuX3RleHR1cmVQcm9taXNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRVcFByb2dyYW1XcmFwcGVyKGlkKSB7XG4gICAgdGhpcy5fcHJvZ3JhbVdyYXBwZXJJZCA9IGlkO1xuICAgIHRoaXMuX3Byb2dyYW1XcmFwcGVyUHJvbWlzZSA9IHByb2dyYW1XcmFwcGVyU3RvcmUuZ2V0UHJvZ3JhbVdyYXBwZXJQcm9taXNlKGlkKVxuICAgICAgICAudGhlbihwcm9ncmFtV3JhcHBlciA9PiB0aGlzLl9wcm9ncmFtV3JhcHBlciA9IHByb2dyYW1XcmFwcGVyKTtcbiAgICBQcm9taXNlLmFsbChbdGhpcy5fcHJvZ3JhbVdyYXBwZXJQcm9taXNlLCB0aGlzLl90ZXh0dXJlUHJvbWlzZV0pXG4gICAgICAgIC50aGVuKCgpID0+IHByb2dyYW1XcmFwcGVyU3RvcmUucmVnaXN0ZXJEcmF3RnJhbWVIYW5kbGVyKGlkLCB0aGlzLl9kcmF3RnJhbWVIYW5kbGVyKSk7XG4gICAgcmV0dXJuIHRoaXMuX3Byb2dyYW1XcmFwcGVyUHJvbWlzZTtcbiAgfVxufVxuXG5leHBvcnQge01vZGVsQ29udHJvbGxlcn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gTW9kZWxDb250cm9sbGVySW50ZXJmYWNlXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9uLjxQcm9taXNlPn0gZ2V0SXNSZWFkeVxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gcmVzZXRcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGRlc3Ryb3lcbiAqIEBwcm9wZXJ0eSB7bWF0NH0gbG9jYWxUcmFuc2Zvcm1cbiAqIEBwcm9wZXJ0eSB7bWF0NH0gd29ybGRUcmFuc2Zvcm1cbiAqIEBwcm9wZXJ0eSB7dmVjM30gcG9zaXRpb25cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IE1vZGVsQ29udHJvbGxlckNvbmZpZ1xuICogQHByb3BlcnR5IHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9uLjxtYXQ0Pn0gZ2V0Vmlld01hdHJpeFxuICogQHByb3BlcnR5IHtGdW5jdGlvbi48bWF0ND59IGdldFByb2plY3Rpb25NYXRyaXhcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb24uPG1hdDQ+fSBnZXRQYXJlbnRXb3JsZFRyYW5zZm9ybVxuICogQHByb3BlcnR5IHtzdHJpbmd9IHByb2dyYW1XcmFwcGVySWRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdGV4dHVyZVBhdGhdXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBNb2RlbEdyb3VwQ29udHJvbGxlckNvbmZpZ1xuICogQHByb3BlcnR5IHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9uLjxtYXQ0Pn0gZ2V0Vmlld01hdHJpeFxuICogQHByb3BlcnR5IHtGdW5jdGlvbi48bWF0ND59IGdldFByb2plY3Rpb25NYXRyaXhcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb24uPG1hdDQ+fSBnZXRQYXJlbnRXb3JsZFRyYW5zZm9ybVxuICovXG4iLCJpbXBvcnQgeyBQZXJzaXN0ZW50QW5pbWF0aW9uSm9iIH0gZnJvbSAnbHNsLWFuaW1hdGV4JztcblxuLyoqXG4gKiBUaGlzIGNsYXNzIGNvbnRyb2xzIGdyb3VwcyBvZiBtb2RlbHMuXG4gKlxuICogVGhpcyBpcyB1c2VmdWwgZm9yIGhpZ2hlci1sZXZlbCBjb250cm9sbGVycyB0aGF0IGNvbnRyb2wgb3RoZXIgbW9kZWxzIGFuZCBhbHNvIHRyYW5zZm9ybSB0aGVtLlxuICpcbiAqIEBpbXBsZW1lbnRzIHtNb2RlbENvbnRyb2xsZXJJbnRlcmZhY2V9XG4gKiBAYWJzdHJhY3RcbiAqL1xuY2xhc3MgTW9kZWxHcm91cENvbnRyb2xsZXIgZXh0ZW5kcyBQZXJzaXN0ZW50QW5pbWF0aW9uSm9iIHtcbiAgLyoqXG4gICAqIElmIGVpdGhlciBvZiB0aGUgc2hhZGVyIHBhdGhzIGFyZSBvbWl0dGVkLCB0aGVuIHRoaXMgbW9kZWwgY29udHJvbGxlciB3aWxsIG5vdCBjcmVhdGUgYVxuICAgKiByZW5kZXJpbmcgcHJvZ3JhbSBjb25maWd1cmF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge01vZGVsR3JvdXBDb250cm9sbGVyQ29uZmlnfSBwYXJhbXNcbiAgICovXG4gIGNvbnN0cnVjdG9yKHBhcmFtcykge1xuICAgIHN1cGVyKCk7XG5cbiAgICAvLyBNb2RlbEdyb3VwQ29udHJvbGxlciBpcyBhbiBhYnN0cmFjdCBjbGFzcy4gSXQgc2hvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQgZGlyZWN0bHkuXG4gICAgaWYgKG5ldy50YXJnZXQgPT09IE1vZGVsR3JvdXBDb250cm9sbGVyKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29uc3RydWN0IE1vZGVsR3JvdXBDb250cm9sbGVyIGluc3RhbmNlcyBkaXJlY3RseScpO1xuICAgIH1cblxuICAgIHRoaXMuX2dsID0gcGFyYW1zLmdsO1xuICAgIHRoaXMuX2dldFZpZXdNYXRyaXggPSBwYXJhbXMuZ2V0Vmlld01hdHJpeDtcbiAgICB0aGlzLl9nZXRQcm9qZWN0aW9uTWF0cml4ID0gcGFyYW1zLmdldFByb2plY3Rpb25NYXRyaXg7XG4gICAgdGhpcy5fZ2V0UGFyZW50V29ybGRUcmFuc2Zvcm0gPSBwYXJhbXMuZ2V0UGFyZW50V29ybGRUcmFuc2Zvcm0gfHwgKCgpID0+IG1hdDQuY3JlYXRlKCkpO1xuICAgIHRoaXMuX2xvY2FsVHJhbnNmb3JtID0gbWF0NC5jcmVhdGUoKTtcbiAgICB0aGlzLl93b3JsZFRyYW5zZm9ybSA9IG1hdDQuY3JlYXRlKCk7XG4gICAgdGhpcy5fbW9kZWxDdHJscyA9IFtdO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmNsZWFyTW9kZWxDb250cm9sbGVycygpO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5fdHJpZ2dlck9uQWxsTW9kZWxDb250cm9sbGVycygncmVzZXQnKTtcbiAgfVxuXG4gIGNsZWFyTW9kZWxDb250cm9sbGVycygpIHtcbiAgICB0aGlzLl90cmlnZ2VyT25BbGxNb2RlbENvbnRyb2xsZXJzKCdkZXN0cm95Jyk7XG4gICAgdGhpcy5fbW9kZWxDdHJscyA9IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxzIHVwZGF0ZSwgdXBkYXRlVHJhbnNmb3JtcywgYW5kIHVwZGF0ZUNoaWxkcmVuLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUhpZ2hSZXNUaW1lU3RhbXB9IGN1cnJlbnRUaW1lXG4gICAqIEBwYXJhbSB7RE9NSGlnaFJlc1RpbWVTdGFtcH0gZGVsdGFUaW1lXG4gICAqL1xuICB1cGRhdGVTZWxmQW5kQ2hpbGRyZW4oY3VycmVudFRpbWUsIGRlbHRhVGltZSkge1xuICAgIHRoaXMudXBkYXRlKGN1cnJlbnRUaW1lLCBkZWx0YVRpbWUpO1xuICAgIHRoaXMudXBkYXRlVHJhbnNmb3JtcygpO1xuICAgIHRoaXMudXBkYXRlQ2hpbGRyZW4oY3VycmVudFRpbWUsIGRlbHRhVGltZSk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyByZWxldmFudCBzdGF0ZSBmb3IgdGhlIHN1Yi1jbGFzcy5cbiAgICpcbiAgICogLSBUaGlzIGRvZXMgbm90IHJlY3Vyc2l2ZWx5IHVwZGF0ZSBkZXNjZW5kYW50IG1vZGVsIGNvbnRyb2xsZXJzOyB0aGF0J3MgaGFuZGxlZCBieVxuICAgKiAgIHVwZGF0ZUNoaWxkcmVuLlxuICAgKiAtIFRoaXMgZG9lcyBub3QgdXBkYXRlIHRoZSBsb2NhbCBvciB3b3JsZC1jb29yZGluYXRlIHRyYW5zZm9ybXM7IHRoYXQncyBoYW5kbGVkIGJ5XG4gICAqICAgdXBkYXRlVHJhbnNmb3Jtcy5cbiAgICogLSBUaGlzIGlzIGNhbGxlZCBiZWZvcmUgdXBkYXRlTG9jYWxUcmFuc2Zvcm0gYW5kIHVwZGF0ZUNoaWxkcmVuLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUhpZ2hSZXNUaW1lU3RhbXB9IGN1cnJlbnRUaW1lXG4gICAqIEBwYXJhbSB7RE9NSGlnaFJlc1RpbWVTdGFtcH0gZGVsdGFUaW1lXG4gICAqL1xuICB1cGRhdGUoY3VycmVudFRpbWUsIGRlbHRhVGltZSkge31cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgd29ybGQtY29vcmRpbmF0ZSBhbmQgbG9jYWwtY29vcmRpbmF0ZSBtb2RlbCBtYXRyaWNlcy5cbiAgICpcbiAgICogVGhpcyBpcyBjYWxsZWQgYWZ0ZXIgdXBkYXRlIGFuZCBiZWZvcmUgdXBkYXRlQ2hpbGRyZW4uXG4gICAqXG4gICAqIE5PVEU6IEFsbCBpbXBsZW1lbnRhdGlvbnMgb2YgdGhpcyBtZXRob2Qgc2hvdWxkIHVwZGF0ZSBbdGhpcy5fbG9jYWxUcmFuc2Zvcm1dLlxuICAgKi9cbiAgdXBkYXRlVHJhbnNmb3JtcygpIHtcbiAgICBtYXQ0Lm11bHRpcGx5KHRoaXMuX3dvcmxkVHJhbnNmb3JtLCB0aGlzLl9nZXRQYXJlbnRXb3JsZFRyYW5zZm9ybSgpLCB0aGlzLl9sb2NhbFRyYW5zZm9ybSk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyByZWxldmFudCBzdGF0ZSBmb3IgYW55IGNoaWxkcmVuIG1vZGVsIGNvbnRyb2xsZXJzLlxuICAgKlxuICAgKiBUaGlzIGlzIGNhbGxlZCBhZnRlciB1cGRhdGUgYW5kIHVwZGF0ZUxvY2FsVHJhbnNmb3JtLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUhpZ2hSZXNUaW1lU3RhbXB9IGN1cnJlbnRUaW1lXG4gICAqIEBwYXJhbSB7RE9NSGlnaFJlc1RpbWVTdGFtcH0gZGVsdGFUaW1lXG4gICAqL1xuICB1cGRhdGVDaGlsZHJlbihjdXJyZW50VGltZSwgZGVsdGFUaW1lKSB7XG4gICAgdGhpcy5fdHJpZ2dlck9uQWxsTW9kZWxDb250cm9sbGVycygndXBkYXRlU2VsZkFuZENoaWxkcmVuJywgW2N1cnJlbnRUaW1lLCBkZWx0YVRpbWVdKTtcbiAgfVxuXG4gIGRyYXcoKSB7XG4gICAgLy8gV2UgZG9uJ3QgY2FsbCBkcmF3IG9uIHRoZSBjaGlsZHJlbiBtb2RlbCBjb250cm9sbGVycywgYmVjYXVzZSB0aGV5IHJlZ2lzdGVyIHRoZW1zZWx2ZXMgdG8gYmVcbiAgICAvLyBkcmF3biB3aXRoIHRoZWlyIGdpdmVuIHNoYWRlciBwcm9ncmFtLlxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7TW9kZWxDb250cm9sbGVySW50ZXJmYWNlfSBtb2RlbEN0cmxcbiAgICogQHJldHVybnMge1Byb21pc2UuPE1vZGVsQ29udHJvbGxlckludGVyZmFjZT59XG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9zdGFydE1vZGVsQ29udHJvbGxlcihtb2RlbEN0cmwpIHtcbiAgICByZXR1cm4gbW9kZWxDdHJsLmdldElzUmVhZHkoKS50aGVuKCgpID0+IHtcbiAgICAgIG1vZGVsQ3RybC5yZXNldCgpO1xuICAgICAgdGhpcy5fbW9kZWxDdHJscy5wdXNoKG1vZGVsQ3RybCk7XG4gICAgICByZXR1cm4gbW9kZWxDdHJsO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7TW9kZWxDb250cm9sbGVySW50ZXJmYWNlfSBtb2RlbEN0cmxcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX29uTW9kZWxDb250cm9sbGVyRGVzdHJveWVkKG1vZGVsQ3RybCkge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fbW9kZWxDdHJscy5pbmRleE9mKG1vZGVsQ3RybCk7XG4gICAgdGhpcy5fbW9kZWxDdHJscy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIG1vZGVsQ3RybC5kZXN0cm95KCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHt2ZWMzfSB0YXJnZXRQb3NpdGlvblxuICAgKiBAcGFyYW0ge251bWJlcn0gbWF4U3F1YXJlZERpc3RhbmNlXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9yZW1vdmVEaXN0YW50TW9kZWxDb250cm9sbGVycyh0YXJnZXRQb3NpdGlvbiwgbWF4U3F1YXJlZERpc3RhbmNlKSB7XG4gICAgdGhpcy5fbW9kZWxDdHJsc1xuICAgICAgLy8gR2V0IHRoZSBNb2RlbENvbnRyb2xsZXJzIHRoYXQgYXJlIHRvbyBmYXIgYXdheS5cbiAgICAgIC5maWx0ZXIobW9kZWxDdHJsID0+XG4gICAgICAgIHZlYzMuc3F1YXJlZERpc3RhbmNlKG1vZGVsQ3RybC5wb3NpdGlvbiwgdGFyZ2V0UG9zaXRpb24pID4gbWF4U3F1YXJlZERpc3RhbmNlKVxuICAgICAgLy8gUmVtb3ZlIHRoZSBmYXItYXdheSBNb2RlbENvbnRyb2xsZXJzLlxuICAgICAgLmZvckVhY2gobW9kZWxDdHJsID0+IHRoaXMuX29uTW9kZWxDb250cm9sbGVyRGVzdHJveWVkKG1vZGVsQ3RybCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG1vZGVsIHRyYW5zZm9ybSBtYXRyaXgsIGluIGxvY2FsIGNvb3JkaW5hdGVzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7bWF0NH1cbiAgICovXG4gIGdldCBsb2NhbFRyYW5zZm9ybSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbG9jYWxUcmFuc2Zvcm07XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbW9kZWwgdHJhbnNmb3JtIG1hdHJpeCwgaW4gd29ybGQgY29vcmRpbmF0ZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHttYXQ0fVxuICAgKi9cbiAgZ2V0IHdvcmxkVHJhbnNmb3JtKCkge1xuICAgIHJldHVybiB0aGlzLl93b3JsZFRyYW5zZm9ybTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhpcyBtb2RlbCBjb250cm9sbGVyIGlzIHJlYWR5IGZvciB0aGUgYXBwIHRvIHJ1bi5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAqL1xuICBnZXRJc1JlYWR5KCkge1xuICAgIHJldHVybiBQcm9taXNlLmFsbCh0aGlzLl9tb2RlbEN0cmxzLm1hcChjb250cm9sbGVyID0+IGNvbnRyb2xsZXIuZ2V0SXNSZWFkeSgpKSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWVcbiAgICogQHBhcmFtIHtBcnJheS48Kj59IFthcmdzXVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfdHJpZ2dlck9uQWxsTW9kZWxDb250cm9sbGVycyhtZXRob2ROYW1lLCBhcmdzID0gW10pIHtcbiAgICAvL3RoaXMuX2RlbW9PYmplY3RbbWV0aG9kTmFtZV0oLi4uYXJncyk7XG4gICAgdGhpcy5fbW9kZWxDdHJscy5mb3JFYWNoKG9iamVjdCA9PiBvYmplY3RbbWV0aG9kTmFtZV0oLi4uYXJncykpO1xuICB9XG59XG5cbmV4cG9ydCB7IE1vZGVsR3JvdXBDb250cm9sbGVyIH07XG4iLCIvKipcbiAqIFRoaXMgY2xhc3MgZGVmaW5lcyBhIHRvcC1sZXZlbCBtb2RlbC5cbiAqXG4gKiBAYWJzdHJhY3RcbiAqL1xuY2xhc3MgTW9kZWwge1xuICAvKipcbiAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsXG4gICAqL1xuICBjb25zdHJ1Y3RvcihnbCkge1xuICAgIC8vIE1vZGVsIGlzIGFuIGFic3RyYWN0IGNsYXNzLiBJdCBzaG91bGQgbm90IGJlIGluc3RhbnRpYXRlZCBkaXJlY3RseS5cbiAgICBpZiAobmV3LnRhcmdldCA9PT0gTW9kZWwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb25zdHJ1Y3QgTW9kZWwgaW5zdGFuY2VzIGRpcmVjdGx5Jyk7XG4gICAgfVxuXG4gICAgdGhpcy5fZ2wgPSBnbDtcbiAgICB0aGlzLmJvdW5kcyA9IG51bGw7XG5cbiAgICB0aGlzLl92ZXJ0ZXhQb3NpdGlvbnNCdWZmZXIgPSBudWxsO1xuICAgIHRoaXMuX3ZlcnRleE5vcm1hbHNCdWZmZXIgPSBudWxsO1xuICAgIHRoaXMuX3RleHR1cmVDb29yZGluYXRlc0J1ZmZlciA9IG51bGw7XG5cbiAgICB0aGlzLl92ZXJ0ZXhQb3NpdGlvbnNDb25maWcgPSBudWxsO1xuICAgIHRoaXMuX3RleHR1cmVDb29yZGluYXRlc0NvbmZpZyA9IG51bGw7XG4gICAgdGhpcy5fdmVydGV4Tm9ybWFsc0NvbmZpZyA9IG51bGw7XG5cbiAgICAvLyBJZiB0aGlzIGlzIGtlcHQgbnVsbCwgdGhlbiBnbC5kcmF3QXJyYXlzIHdpbGwgYmUgdXNlZCAod2l0aCBnbC5BUlJBWV9CVUZGRVIpIGluc3RlYWQgb2ZcbiAgICAvLyBnbC5kcmF3RWxlbWVudHMgKHdpdGggZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIpLlxuICAgIHRoaXMuX3ZlcnRleEluZGljZXNCdWZmZXIgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIG5vcm1hbHMgb24gdGhpcyBzaGFwZSB0byBlaXRoZXIgYmUgc3BoZXJpY2FsIChwb2ludCBvdXR3YXJkcyBmcm9tIHRoZSBjZW50ZXIpIG9yXG4gICAqIG9ydGhvZ29uYWwgdG8gdGhlIGZhY2VzIG9mIHRoZWlyIHRyaWFuZ2xlcy5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBpc1VzaW5nU3BoZXJpY2FsTm9ybWFsc1xuICAgKiBAcHJvdGVjdGVkXG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgX3NldE5vcm1hbHMoaXNVc2luZ1NwaGVyaWNhbE5vcm1hbHMpIHtcbiAgICAvLyBFeHRlbmRpbmcgY2xhc3NlcyBzaG91bGQgaW1wbGVtZW50IHRoaXMgbWV0aG9kLlxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQnKTtcbiAgfVxuXG4gIC8qKiBAcmV0dXJucyB7P0F0dHJpYnV0ZUNvbmZpZ30gKi9cbiAgZ2V0IHZlcnRleFBvc2l0aW9uc0NvbmZpZygpIHtcbiAgICByZXR1cm4gdGhpcy5fdmVydGV4UG9zaXRpb25zQ29uZmlnO1xuICB9XG5cbiAgLyoqIEByZXR1cm5zIHs/QXR0cmlidXRlQ29uZmlnfSAqL1xuICBnZXQgdGV4dHVyZUNvb3JkaW5hdGVzQ29uZmlnKCkge1xuICAgIHJldHVybiB0aGlzLl90ZXh0dXJlQ29vcmRpbmF0ZXNDb25maWc7XG4gIH1cblxuICAvKiogQHJldHVybnMgez9BdHRyaWJ1dGVDb25maWd9ICovXG4gIGdldCB2ZXJ0ZXhOb3JtYWxzQ29uZmlnKCkge1xuICAgIHJldHVybiB0aGlzLl92ZXJ0ZXhOb3JtYWxzQ29uZmlnO1xuICB9XG5cbiAgLyoqIEByZXR1cm5zIHs/V2ViR0xCdWZmZXJ9ICovXG4gIGdldCB2ZXJ0ZXhJbmRpY2VzQnVmZmVyKCkge1xuICAgIHJldHVybiB0aGlzLl92ZXJ0ZXhJbmRpY2VzQnVmZmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgZ2V0IGVsZW1lbnRDb3VudCgpIHtcbiAgICAvLyBFeHRlbmRpbmcgY2xhc3NlcyBzaG91bGQgaW1wbGVtZW50IHRoaXMgbWV0aG9kLlxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIGdldCBtb2RlKCkge1xuICAgIC8vIEV4dGVuZGluZyBjbGFzc2VzIHNob3VsZCBpbXBsZW1lbnQgdGhpcyBtZXRob2QuXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZCcpO1xuICB9XG59XG5cbmV4cG9ydCB7TW9kZWx9O1xuIiwiaW1wb3J0IHtyZW5kZXJhYmxlU2hhcGVGYWN0b3J5fSBmcm9tICcuLi8uLi9yZW5kZXJhYmxlLXNoYXBlcyc7XG5cbmltcG9ydCB7TW9kZWxDb250cm9sbGVyfSBmcm9tICcuL21vZGVsLWNvbnRyb2xsZXInO1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgZGVmaW5lcyBhbiBleHRlbnNpb24gb2YgdGhlIG1vZGVsLWNvbnRyb2xsZXIgY2xhc3MgdGhhdCB1c2VzIGEgY29tbW9uIHNldCBvZiBwcm9ncmFtXG4gKiB2YXJpYWJsZXMgYW5kIHRyYW5zZm9ybWF0aW9uIG1hdHJpY2VzLlxuICovXG5jbGFzcyBTdGFuZGFyZE1vZGVsQ29udHJvbGxlciBleHRlbmRzIE1vZGVsQ29udHJvbGxlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge01vZGVsQ29udHJvbGxlckNvbmZpZ30gcGFyYW1zXG4gICAqIEBwYXJhbSB7UmVuZGVyYWJsZVNoYXBlQ29uZmlnfSBzaGFwZVBhcmFtc1xuICAgKi9cbiAgY29uc3RydWN0b3IocGFyYW1zLCBzaGFwZVBhcmFtcykge1xuICAgIHN1cGVyKHBhcmFtcyk7XG5cbiAgICB0aGlzLnNjYWxlID0gc2hhcGVQYXJhbXMuc2NhbGUgfHwgdmVjMy5mcm9tVmFsdWVzKDEsIDEsIDEpO1xuICAgIHRoaXMuX212TWF0cml4ID0gbWF0NC5jcmVhdGUoKTtcbiAgICB0aGlzLl9ub3JtYWxNYXRyaXggPSBtYXQ0LmNyZWF0ZSgpO1xuICAgIHRoaXMuX21vZGVsID0gcmVuZGVyYWJsZVNoYXBlRmFjdG9yeS5jcmVhdGVNb2RlbCh0aGlzLl9nbCwgc2hhcGVQYXJhbXMpO1xuICB9XG5cbiAgdXBkYXRlKGN1cnJlbnRUaW1lLCBkZWx0YVRpbWUpIHt9XG5cbiAgZHJhdygpIHtcbiAgICAvLyBVcGRhdGUgdGhlIG1vZGVsLXZpZXcgbWF0cml4LlxuICAgIG1hdDQubXVsdGlwbHkodGhpcy5fbXZNYXRyaXgsIHRoaXMuX2dldFZpZXdNYXRyaXgoKSwgdGhpcy5fd29ybGRUcmFuc2Zvcm0pO1xuXG4gICAgLy8gVXBkYXRlIHRoZSBub3JtYWwgbWF0cml4LlxuICAgIG1hdDQuaW52ZXJ0KHRoaXMuX25vcm1hbE1hdHJpeCwgdGhpcy5fbXZNYXRyaXgpO1xuICAgIG1hdDQudHJhbnNwb3NlKHRoaXMuX25vcm1hbE1hdHJpeCwgdGhpcy5fbm9ybWFsTWF0cml4KTtcblxuICAgIC8vIFVwZGF0ZSB0aGUgdW5pZm9ybSB2YXJpYWJsZXMuXG4gICAgdGhpcy5fcHJvZ3JhbVZhcmlhYmxlc0NvbmZpZy51bmlmb3Jtc1sndVBNYXRyaXgnXSA9IHRoaXMuX2dldFByb2plY3Rpb25NYXRyaXgoKTtcbiAgICB0aGlzLl9wcm9ncmFtVmFyaWFibGVzQ29uZmlnLnVuaWZvcm1zWyd1TVZNYXRyaXgnXSA9IHRoaXMuX212TWF0cml4O1xuICAgIHRoaXMuX3Byb2dyYW1WYXJpYWJsZXNDb25maWcudW5pZm9ybXNbJ3VOb3JtYWxNYXRyaXgnXSA9IHRoaXMuX25vcm1hbE1hdHJpeDtcblxuICAgIC8vIERyYXcgc2hhcGVzIHVzaW5nIHRoZSBjdXJyZW50IHZhcmlhYmxlcyBjb25maWd1cmF0aW9uLlxuICAgIHRoaXMuX3Byb2dyYW1XcmFwcGVyLmRyYXcodGhpcy5fZ2wsIHRoaXMuX3Byb2dyYW1WYXJpYWJsZXNDb25maWcsIDAsIHRoaXMuX21vZGVsLmVsZW1lbnRDb3VudCk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIHByb2dyYW0gdmFyaWFibGVzIGNvbmZpZ3VyYXRpb24uXG4gICAqXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9zZXRVcFByb2dyYW1WYXJpYWJsZXNDb25maWcoKSB7XG4gICAgdGhpcy5fcHJvZ3JhbVZhcmlhYmxlc0NvbmZpZyA9IHtcbiAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgYVZlcnRleFBvc2l0aW9uOiB0aGlzLl9tb2RlbC52ZXJ0ZXhQb3NpdGlvbnNDb25maWcsXG4gICAgICAgIGFUZXh0dXJlQ29vcmQ6IHRoaXMuX21vZGVsLnRleHR1cmVDb29yZGluYXRlc0NvbmZpZyxcbiAgICAgICAgYVZlcnRleE5vcm1hbDogdGhpcy5fbW9kZWwudmVydGV4Tm9ybWFsc0NvbmZpZyxcbiAgICAgIH0sXG4gICAgICB1bmlmb3Jtczoge1xuICAgICAgICB1UE1hdHJpeDogdGhpcy5fZ2V0UHJvamVjdGlvbk1hdHJpeCgpLFxuICAgICAgICB1TVZNYXRyaXg6IHRoaXMuX212TWF0cml4LFxuICAgICAgICB1Tm9ybWFsTWF0cml4OiB0aGlzLl9ub3JtYWxNYXRyaXgsXG4gICAgICAgIHVTYW1wbGVyOiB0aGlzLl90ZXh0dXJlLFxuICAgICAgfSxcbiAgICAgIG1vZGU6IHRoaXMuX21vZGVsLm1vZGUsXG4gICAgICB2ZXJ0ZXhJbmRpY2VzOiB0aGlzLl9tb2RlbC52ZXJ0ZXhJbmRpY2VzQnVmZmVyLFxuICAgICAgZWxlbWVudENvdW50OiB0aGlzLl9tb2RlbC5lbGVtZW50Q291bnQsXG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQge1N0YW5kYXJkTW9kZWxDb250cm9sbGVyfTtcbiIsImV4cG9ydCAqIGZyb20gJy4vc3JjL3Byb2dyYW0td3JhcHBlcic7XG5leHBvcnQgKiBmcm9tICcuL3NyYy9wcm9ncmFtLXdyYXBwZXItc3RvcmUnO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvdGV4dHVyZS1zdG9yZSc7XG5leHBvcnQgKiBmcm9tICcuL3NyYy91bmlmb3JtLXNldHRlcic7XG4iLCJpbXBvcnQge2JpbmRGcmFtZWJ1ZmZlcn0gZnJvbSAnLi4vLi4vdXRpbCc7XG5cbmltcG9ydCB7cHJvZ3JhbVdyYXBwZXJTdG9yZX0gZnJvbSAnLi9wcm9ncmFtLXdyYXBwZXItc3RvcmUnO1xuXG4vKipcbiAqIFRoaXMgY2xhc3Mgd3JhcHMgYSBjb2xsZWN0aW9uIG9mIFByb2dyYW1XcmFwcGVycyBhbmQgc3VwcG9ydHMgZHJhd2luZyB0aGVtIGFzIGEgZ3JvdXAuXG4gKi9cbmNsYXNzIEdyb3VwUHJvZ3JhbVdyYXBwZXIge1xuICAvKipcbiAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsXG4gICAqIEBwYXJhbSB7UHJvZ3JhbVdyYXBwZXJDb25maWd9IGNvbmZpZ1xuICAgKi9cbiAgY29uc3RydWN0b3IoZ2wsIGNvbmZpZykge1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIHRoaXMuX2NoaWxkcmVuUHJvZ3JhbVdyYXBwZXJzID0gW107XG4gICAgdGhpcy5faXNSZWFkeSA9IG51bGw7XG5cbiAgICB0aGlzLl9sb2FkQ2hpbGRyZW4oZ2wsIGNvbmZpZykudGhlbigoKSA9PiB7XG4gICAgICBpZiAoY29uZmlnLmluaXRpYWxpemUpIGNvbmZpZy5pbml0aWFsaXplKGdsKTtcbiAgICAgIGlmIChjb25maWcuaXNBUG9zdFByb2Nlc3Nvcikge1xuICAgICAgICBfY3JlYXRlQ2hpbGRyZW5GcmFtZWJ1ZmZlcnNBbmRUZXh0dXJlcyhnbCwgY29uZmlnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBAcmV0dXJucyB7c3RyaW5nfSAqL1xuICBnZXQgcHJvZ3JhbUlkKCkge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5pZDtcbiAgfVxuXG4gIC8qKiBAcmV0dXJucyB7UHJvbWlzZX0gKi9cbiAgZ2V0SXNSZWFkeSgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNSZWFkeTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHNoYXBlcyB1c2luZyB0aGlzIHByb2dyYW0uXG4gICAqXG4gICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbFxuICAgKi9cbiAgZHJhdyhnbCkge1xuICAgIGlmICh0aGlzLmNvbmZpZy53ZWJHTFN0YXRlU2V0dGVyKSB0aGlzLmNvbmZpZy53ZWJHTFN0YXRlU2V0dGVyKGdsKTtcbiAgICB0aGlzLmNvbmZpZy5jaGlsZHJlbkZyYW1lYnVmZmVySWRzLmZvckVhY2goX2NsZWFyRnJhbWVidWZmZXIuYmluZCh0aGlzLCBnbCkpO1xuICAgIHRoaXMuY29uZmlnLmNoaWxkcmVuUHJvZ3JhbXNUb0RyYXcuZm9yRWFjaChfZHJhd0NoaWxkUHJvZ3JhbVdyYXBwZXIuYmluZCh0aGlzLCBnbCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbFxuICAgKiBAcGFyYW0ge1Byb2dyYW1XcmFwcGVyQ29uZmlnfSBjb25maWdcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9sb2FkQ2hpbGRyZW4oZ2wsIGNvbmZpZykge1xuICAgIHRoaXMuX2lzUmVhZHkgPSBQcm9taXNlLmFsbChcbiAgICAgICAgY29uZmlnLmNoaWxkcmVuUHJvZ3JhbUNvbmZpZ3MubWFwKGNvbmZpZyA9PlxuICAgICAgICAgICAgcHJvZ3JhbVdyYXBwZXJTdG9yZS5sb2FkUHJvZ3JhbVdyYXBwZXIoZ2wsIGNvbmZpZylcbiAgICAgICAgICAgICAgICAudGhlbihwcm9ncmFtV3JhcHBlciA9PiB0aGlzLl9jaGlsZHJlblByb2dyYW1XcmFwcGVycy5wdXNoKHByb2dyYW1XcmFwcGVyKSkpKTtcbiAgICByZXR1cm4gdGhpcy5faXNSZWFkeTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbFxuICogQHBhcmFtIHtzdHJpbmd9IGlkXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfY2xlYXJGcmFtZWJ1ZmZlcihnbCwgaWQpIHtcbiAgY29uc3QgZnJhbWVidWZmZXIgPSBwcm9ncmFtV3JhcHBlclN0b3JlLmdldEZyYW1lYnVmZmVyKGlkKTtcbiAgYmluZEZyYW1lYnVmZmVyKGdsLCBmcmFtZWJ1ZmZlcik7XG4gIGdsLmNsZWFyKGdsLkNPTE9SX0JVRkZFUl9CSVQgfCBnbC5ERVBUSF9CVUZGRVJfQklUKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2xcbiAqIEBwYXJhbSB7UHJvZ3JhbVdyYXBwZXJDb25maWd9IGNvbmZpZ1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX2NyZWF0ZUNoaWxkcmVuRnJhbWVidWZmZXJzQW5kVGV4dHVyZXMoZ2wsIGNvbmZpZykge1xuICBjb25maWcuY2hpbGRyZW5GcmFtZWJ1ZmZlcklkcy5mb3JFYWNoKGlkID0+XG4gICAgICBwcm9ncmFtV3JhcHBlclN0b3JlLmNyZWF0ZU5ld0ZyYW1lYnVmZmVyQW5kVGV4dHVyZShnbCwgaWQsIGZhbHNlKSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsXG4gKiBAcGFyYW0ge0NoaWxkUHJvZ3JhbUFuZEZyYW1lYnVmZmVySWRzfSBjaGlsZFByb2dyYW1BbmRGcmFtZWJ1ZmZlcklkc1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX2RyYXdDaGlsZFByb2dyYW1XcmFwcGVyKGdsLCBjaGlsZFByb2dyYW1BbmRGcmFtZWJ1ZmZlcklkcykge1xuICBjb25zdCB7cHJvZ3JhbUlkLCBpbnB1dEZyYW1lYnVmZmVySWRzLCBvdXRwdXRGcmFtZWJ1ZmZlcklkfSA9IGNoaWxkUHJvZ3JhbUFuZEZyYW1lYnVmZmVySWRzO1xuXG4gIGNvbnN0IGZyYW1lYnVmZmVyID0gb3V0cHV0RnJhbWVidWZmZXJJZCA/XG4gICAgICBwcm9ncmFtV3JhcHBlclN0b3JlLmdldEZyYW1lYnVmZmVyKG91dHB1dEZyYW1lYnVmZmVySWQpIDogbnVsbDtcbiAgY29uc3QgcHJvZ3JhbVdyYXBwZXIgPSBwcm9ncmFtV3JhcHBlclN0b3JlLmdldFByb2dyYW1XcmFwcGVyKHByb2dyYW1JZCk7XG4gIGNvbnN0IHByb2dyYW1WYXJpYWJsZXNDb25maWcgPVxuICAgICAgcHJvZ3JhbVdyYXBwZXIuY29uZmlnLmdldFByb2dyYW1WYXJpYWJsZXNDb25maWcoZ2wsIGlucHV0RnJhbWVidWZmZXJJZHMpO1xuXG4gIGJpbmRGcmFtZWJ1ZmZlcihnbCwgZnJhbWVidWZmZXIpO1xuICBwcm9ncmFtV3JhcHBlci5zZXRQcm9ncmFtKGdsKTtcbiAgcHJvZ3JhbVdyYXBwZXIuZHJhdyhnbCwgcHJvZ3JhbVZhcmlhYmxlc0NvbmZpZyk7XG59XG5cbmV4cG9ydCB7R3JvdXBQcm9ncmFtV3JhcHBlcn07XG4iLCJpbXBvcnQge2NyZWF0ZUZyYW1lYnVmZmVyLCBjcmVhdGVSZW5kZXJCdWZmZXIsIGNyZWF0ZVRleHR1cmVGb3JSZW5kZXJpbmd9IGZyb20gJy4uLy4uL3V0aWwnO1xuXG5pbXBvcnQge0dyb3VwUHJvZ3JhbVdyYXBwZXJ9IGZyb20gJy4vZ3JvdXAtcHJvZ3JhbS13cmFwcGVyJztcbmltcG9ydCB7UHJvZ3JhbVdyYXBwZXJ9IGZyb20gJy4vcHJvZ3JhbS13cmFwcGVyJztcblxuLyoqXG4gKiBUaGlzIGNsYXNzIGxvYWRzLCBjb21waWxlcywgYW5kIHN0b3JlcyBXZWJHTCByZW5kZXJpbmcgcHJvZ3JhbXMuXG4gKlxuICogQWxzbywgdGhpcyBzdG9yZXMgZHJhdy1mcmFtZSBoYW5kbGVycyBmb3IgYSBnaXZlbiBwcm9ncmFtLiBUaGlzIG1ha2VzIGl0IGVhc3kgZm9yIGEgdG9wLWxldmVsXG4gKiBjb250cm9sbGVyIHRvIGdyb3VwIHRvZ2V0aGVyIGRyYXcgY2FsbHMgZm9yIGEgZ2l2ZW4gcHJvZ3JhbSBhbmQgdGhlcmVmb3JlIG1pbmltaXplIHByb2dyYW1cbiAqIHN3aXRjaGVzLlxuICpcbiAqIEFsc28sIHRoaXMgZGlzdGluZ3Vpc2hlcyBiZXR3ZWVuIHJlbmRlcmluZyBwcm9ncmFtcyB0aGF0IGFyZSB1c2VkIGZvciByZW5kZXJpbmcgaW5kaXZpZHVhbCBtb2RlbHNcbiAqIGFuZCBwb3N0LXByb2Nlc3NpbmcgcHJvZ3JhbXMgdGhhdCBhcmUgdXNlZCBmb3IgbWFuaXB1bGF0aW5nIHRoZSBlbnRpcmUgZnJhbWUgYWZ0ZXIgYWxsIHRoZSBtb2RlbHNcbiAqIGhhdmUgcmVuZGVyZWQuXG4gKlxuICogVGhpcyBhbHNvIGFsbG93cyBmb3IgZ3JvdXBpbmcgcHJvZ3JhbXMsIHdoaWNoIGNvbnNpc3Qgb2YgbXVsdGlwbGUgY2hpbGQgcHJvZ3JhbXMgdGhhdCBhcmUgYWxsXG4gKiByZW5kZXJlZCBpbiBzZXF1ZW5jZSBmb3IgYSByZWxhdGVkIHB1cnBvc2UuXG4gKi9cbmNsYXNzIFByb2dyYW1XcmFwcGVyU3RvcmUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9tb2RlbFByb2dyYW1DYWNoZSA9IHt9O1xuICAgIHRoaXMuX3NvcnRlZE1vZGVsUHJvZ3JhbXMgPSBbXTtcbiAgICB0aGlzLl9wb3N0UHJvY2Vzc2luZ1Byb2dyYW1DYWNoZSA9IHt9O1xuICAgIHRoaXMuX3NvcnRlZFBvc3RQcm9jZXNzaW5nUHJvZ3JhbXMgPSBbXTtcbiAgICB0aGlzLl9mcmFtYnVmZmVycyA9IHt9O1xuICAgIHRoaXMuX3RleHR1cmVzID0ge307XG4gICAgdGhpcy5fcmVuZGVyQnVmZmVycyA9IHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIExvYWRzIGFuZCBjYWNoZXMgYSBwcm9ncmFtIHdyYXBwZXIgdXNpbmcgdGhlIGdpdmVuIGNvbmZpZ3VyYXRpb24uXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGlzIGlkZW1wb3RlbnQ7IGEgZ2l2ZW4gcHJvZ3JhbSB3aWxsIG9ubHkgYmUgY2FjaGVkIG9uY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbFxuICAgKiBAcGFyYW0ge1Byb2dyYW1XcmFwcGVyQ29uZmlnfSBwYXJhbXNcbiAgICogQHJldHVybnMge1Byb21pc2UuPFByb2dyYW1XcmFwcGVyfEdyb3VwUHJvZ3JhbVdyYXBwZXIsIEVycm9yPn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGxvYWRQcm9ncmFtV3JhcHBlcihnbCwgcGFyYW1zKSB7XG4gICAgbGV0IGNhY2hlO1xuICAgIGxldCBzb3J0ZWRMaXN0O1xuICAgIGlmIChwYXJhbXMuaXNBUG9zdFByb2Nlc3Nvcikge1xuICAgICAgY2FjaGUgPSB0aGlzLl9wb3N0UHJvY2Vzc2luZ1Byb2dyYW1DYWNoZTtcbiAgICAgIHNvcnRlZExpc3QgPSB0aGlzLl9zb3J0ZWRQb3N0UHJvY2Vzc2luZ1Byb2dyYW1zO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWNoZSA9IHRoaXMuX21vZGVsUHJvZ3JhbUNhY2hlO1xuICAgICAgc29ydGVkTGlzdCA9IHRoaXMuX3NvcnRlZE1vZGVsUHJvZ3JhbXM7XG4gICAgfVxuICAgIGxldCBjYWNoZUluZm8gPSBjYWNoZVtwYXJhbXMuaWRdO1xuXG4gICAgLy8gQ2FjaGUgdGhlIHByb2dyYW0gaWYgaXQgaGFzIG5vdCBiZWVuIHByZXZpb3VzbHkgcmVnaXN0ZXJlZC5cbiAgICBpZiAoIWNhY2hlSW5mbykge1xuICAgICAgY2FjaGVJbmZvID0ge307XG5cbiAgICAgIGNhY2hlSW5mby5wYXJhbXMgPSBwYXJhbXM7XG4gICAgICBjYWNoZUluZm8ucmVuZGVyUHJpb3JpdHkgPSBwYXJhbXMucmVuZGVyUHJpb3JpdHk7XG5cbiAgICAgIGxldCBwcm9ncmFtV3JhcHBlciA9IHBhcmFtcy5jaGlsZHJlblByb2dyYW1Db25maWdzID9cbiAgICAgICAgICBuZXcgR3JvdXBQcm9ncmFtV3JhcHBlcihnbCwgcGFyYW1zKSA6IG5ldyBQcm9ncmFtV3JhcHBlcihnbCwgcGFyYW1zKTtcblxuICAgICAgY2FjaGVJbmZvLnByb2dyYW1XcmFwcGVyID0gcHJvZ3JhbVdyYXBwZXI7XG4gICAgICBjYWNoZUluZm8ucHJvbWlzZSA9IHByb2dyYW1XcmFwcGVyLmdldElzUmVhZHkoKS50aGVuKCgpID0+IGNhY2hlSW5mby5wcm9ncmFtV3JhcHBlcik7XG5cbiAgICAgIGlmIChwYXJhbXMuaXNBUG9zdFByb2Nlc3Nvcikge1xuICAgICAgICAvLyBBcyBzb29uIGFzIHdlIGtub3cgd2UnbGwgdXNlIGEgcG9zdC1wcm9jZXNzaW5nIHByb2dyYW0sIG1ha2Ugc3VyZSB3ZSBjcmVhdGUgdGhlIGRlZmF1bHRcbiAgICAgICAgLy8gZnJhbWVidWZmZXIvdGV4dHVyZSBmb3IgcmVuZGVyaW5nIG1vZGVscyBpbnRvLlxuICAgICAgICBpZiAoIXRoaXMubW9kZWxzRnJhbWVidWZmZXIpIHtcbiAgICAgICAgICB0aGlzLmNyZWF0ZU5ld0ZyYW1lYnVmZmVyQW5kVGV4dHVyZShnbCwgTU9ERUxTX0ZSQU1FQlVGRkVSX0lELCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUG9zdC1wcm9jZXNzaW5nIHByb2dyYW1zIGFyZSBub3QgdXNlZCBmb3IgcmVuZGVyaW5nIGluZGl2aWR1YWwgbW9kZWxzLlxuICAgICAgICBjYWNoZUluZm8uZHJhd0ZyYW1lSGFuZGxlcnMgPSBuZXcgU2V0KCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFN0b3JlIHRoZSBwcm9ncmFtIGNhY2hlIGluZm8gaW4gYm90aCBhIG1hcCBhbmQgYSBsaXN0IHRoYXQgaXMgc29ydGVkIGJ5IHJlbmRlciBwcmlvcml0eS5cbiAgICAgIGNhY2hlW3BhcmFtcy5pZF0gPSBjYWNoZUluZm87XG4gICAgICBzb3J0ZWRMaXN0LnB1c2goY2FjaGVJbmZvKTtcbiAgICAgIHNvcnRlZExpc3Quc29ydChfY29tcGFyZVByb2dyYW1DYWNoZUluZm8pO1xuICAgIH1cblxuICAgIHJldHVybiBjYWNoZUluZm8ucHJvbWlzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgdGhlIGdpdmVuIGRyYXctZnJhbWUgZXZlbnQgaGFuZGxlciBmb3IgdGhlIGdpdmVuIHByb2dyYW0uXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGlzIGlkZW1wb3RlbnQ7IGRyYXctZnJhbWUgaGFuZGxlcnMgYXJlIHN0b3JlZCBpbiBhIHNldCwgc28gZHVwbGljYXRlIGFkZGl0aW9ucyB3aWxsXG4gICAqIG92ZXJ3cml0ZSBwcmV2aW91cyBhZGRpdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBkcmF3RnJhbWVIYW5kbGVyXG4gICAqL1xuICByZWdpc3RlckRyYXdGcmFtZUhhbmRsZXIoaWQsIGRyYXdGcmFtZUhhbmRsZXIpIHtcbiAgICBjb25zdCBwcm9ncmFtQ2FjaGVJbmZvID0gdGhpcy5fbW9kZWxQcm9ncmFtQ2FjaGVbaWRdO1xuXG4gICAgaWYgKCFwcm9ncmFtQ2FjaGVJbmZvKSB7XG4gICAgICBpZiAodGhpcy5fcG9zdFByb2Nlc3NpbmdQcm9ncmFtQ2FjaGVbaWRdKSB7XG4gICAgICAgIC8vIFRoZSBwcm9ncmFtIGlzIG5vdCBzZXQgdXAgZm9yIHJlbmRlcmluZyBpbmRpdmlkdWFsIG1vZGVscy5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgcmVnaXN0ZXIgYSBkcmF3LWZyYW1lIGhhbmRsZXIgZm9yIGEgcHJvZ3JhbSB0aGF0IGlzIG5vdCBzZXQgdXAgZm9yIFxuICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcmluZyBpbmRpdmlkdWFsIG1vZGVscyByZWdpc3RlcmVkOiAke2lkfWApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVGhlIHByb2dyYW0gaGFzIG5vdCBiZWVuIHJlZ2lzdGVyZWQuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHJlZ2lzdGVyIGEgZHJhdy1mcmFtZSBoYW5kbGVyIGZvciBhIHByb2dyYW0gdGhhdCBoYXMgbm90IHlldCBiZWVuIFxuICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lzdGVyZWQ6ICR7aWR9YCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU3RvcmUgdGhlIGRyYXctZnJhbWUgaGFuZGxlci5cbiAgICBwcm9ncmFtQ2FjaGVJbmZvLmRyYXdGcmFtZUhhbmRsZXJzLmFkZChkcmF3RnJhbWVIYW5kbGVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXQVJOSU5HOiBUaGlzIHdpbGwgcmVtb3ZlIHRoZSBwcm9ncmFtIGZyb20gdGhlIHN0b3JlIGV2ZW4gaWYgdGhlcmUgYXJlIHN0aWxsIG90aGVyIGNvbXBvbmVudHNcbiAgICogZGVwZW5kaW5nIG9uIHRoaXMgcHJvZ3JhbSBvciBpdHMgZHJhdy1mcmFtZSBoYW5kbGVycy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkXG4gICAqL1xuICBkZWxldGVQcm9ncmFtV3JhcHBlcihpZCkge1xuICAgIC8vIERldGVybWluZSB3aGljaCBjb2xsZWN0aW9ucyB3ZSdyZSByZW1vdmluZyB0aGUgcHJvZ3JhbSBmcm9tLlxuICAgIGxldCBzb3J0ZWRQcm9ncmFtcztcbiAgICBsZXQgcHJvZ3JhbUNhY2hlO1xuICAgIGlmICh0aGlzLl9tb2RlbFByb2dyYW1DYWNoZVtpZF0pIHtcbiAgICAgIHNvcnRlZFByb2dyYW1zID0gdGhpcy5fc29ydGVkTW9kZWxQcm9ncmFtcztcbiAgICAgIHByb2dyYW1DYWNoZSA9IHRoaXMuX21vZGVsUHJvZ3JhbUNhY2hlO1xuICAgIH0gZWxzZSB7XG4gICAgICBzb3J0ZWRQcm9ncmFtcyA9IHRoaXMuX3NvcnRlZFBvc3RQcm9jZXNzaW5nUHJvZ3JhbXM7XG4gICAgICBwcm9ncmFtQ2FjaGUgPSB0aGlzLl9wb3N0UHJvY2Vzc2luZ1Byb2dyYW1DYWNoZTtcbiAgICB9XG4gICAgY29uc3QgcHJvZ3JhbUNhY2hlSW5mbyA9IHByb2dyYW1DYWNoZVtpZF07XG5cbiAgICAvLyBSZW1vdmUgdGhlIHByb2dyYW0uXG4gICAgc29ydGVkUHJvZ3JhbXMuc3BsaWNlKHNvcnRlZFByb2dyYW1zLmluZGV4T2YocHJvZ3JhbUNhY2hlSW5mbyksIDEpO1xuICAgIGRlbGV0ZSBwcm9ncmFtQ2FjaGVbaWRdO1xuICB9XG5cbiAgLy8gVE9ETzogRG9uJ3QgZm9yZ2V0IHRvIHVucmVnaXN0ZXIgZHJhdy1mcmFtZSBoYW5kbGVycyB3aGVuIGRlc3Ryb3lpbmcgbW9kZWxzIChhc3Rlcm9pZHMsIFVGT3MsXG4gIC8vIGV0Yy4pXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZHJhd0ZyYW1lSGFuZGxlclxuICAgKi9cbiAgdW5yZWdpc3RlckRyYXdGcmFtZUhhbmRsZXIoaWQsIGRyYXdGcmFtZUhhbmRsZXIpIHtcbiAgICB0aGlzLl9tb2RlbFByb2dyYW1DYWNoZVtpZF0uZHJhd0ZyYW1lSGFuZGxlcnMuZGVsZXRlKGRyYXdGcmFtZUhhbmRsZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICogQHRocm93cyBJZiB0aGVyZSBpcyBubyBwcm9ncmFtIHJlZ2lzdGVyZWQgd2l0aCB0aGUgZ2l2ZW4gSUQuXG4gICAqL1xuICBnZXRQcm9ncmFtV3JhcHBlclByb21pc2UoaWQpIHtcbiAgICBjb25zdCBjYWNoZUluZm8gPSB0aGlzLl9tb2RlbFByb2dyYW1DYWNoZVtpZF0gfHwgdGhpcy5fcG9zdFByb2Nlc3NpbmdQcm9ncmFtQ2FjaGVbaWRdO1xuICAgIHJldHVybiBjYWNoZUluZm8ucHJvbWlzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWRcbiAgICogQHJldHVybnMge1Byb2dyYW1XcmFwcGVyfVxuICAgKiBAdGhyb3dzIElmIHRoZXJlIGlzIG5vIHByb2dyYW0gcmVnaXN0ZXJlZCB3aXRoIHRoZSBnaXZlbiBJRC5cbiAgICovXG4gIGdldFByb2dyYW1XcmFwcGVyKGlkKSB7XG4gICAgY29uc3QgY2FjaGVJbmZvID0gdGhpcy5fbW9kZWxQcm9ncmFtQ2FjaGVbaWRdIHx8IHRoaXMuX3Bvc3RQcm9jZXNzaW5nUHJvZ3JhbUNhY2hlW2lkXTtcbiAgICByZXR1cm4gY2FjaGVJbmZvLnByb2dyYW1XcmFwcGVyO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxzIHRoZSBnaXZlbiBjYWxsYmFjayBvbmNlIGZvciBlYWNoIHJlZ2lzdGVyZWQgcGVyLW1vZGVsIHByb2dyYW0gd3JhcHBlci5cbiAgICpcbiAgICogVGhlIGNhbGxiYWNrIGlzIHBhc3NlZCB0d28gYXJndW1lbnRzOiB0aGUgcHJvZ3JhbSB3cmFwcGVyIGFuZCB0aGUgcmVnaXN0ZXJlZCBkcmF3LWZyYW1lXG4gICAqIGhhbmRsZXJzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cbiAgZm9yRWFjaE1vZGVsUHJvZ3JhbShjYWxsYmFjaykge1xuICAgIHRoaXMuX3NvcnRlZE1vZGVsUHJvZ3JhbXMuZm9yRWFjaChwcm9ncmFtQ2FjaGVJbmZvID0+XG4gICAgICAgIGNhbGxiYWNrKHByb2dyYW1DYWNoZUluZm8ucHJvZ3JhbVdyYXBwZXIsIHByb2dyYW1DYWNoZUluZm8uZHJhd0ZyYW1lSGFuZGxlcnMpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxscyB0aGUgZ2l2ZW4gY2FsbGJhY2sgb25jZSBmb3IgZWFjaCByZWdpc3RlcmVkIHBvc3QtcHJvY2Vzc2luZyBwcm9ncmFtIHdyYXBwZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuICBmb3JFYWNoUG9zdFByb2Nlc3NpbmdQcm9ncmFtKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5fc29ydGVkUG9zdFByb2Nlc3NpbmdQcm9ncmFtcy5mb3JFYWNoKFxuICAgICAgICBwcm9ncmFtQ2FjaGVJbmZvID0+IGNhbGxiYWNrKHByb2dyYW1DYWNoZUluZm8ucHJvZ3JhbVdyYXBwZXIpKTtcbiAgfVxuXG4gIC8qKiBAcmV0dXJucyB7Ym9vbGVhbn0gKi9cbiAgZ2V0IGlzVXNpbmdQb3N0UHJvY2Vzc2luZ1Byb2dyYW1zKCkge1xuICAgIHJldHVybiB0aGlzLl9zb3J0ZWRQb3N0UHJvY2Vzc2luZ1Byb2dyYW1zLmxlbmd0aCA+IDA7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbmQgc3RvcmVzIGEgZnJhbWVidWZmZXIgd2l0aCBhIHRleHR1cmUuXG4gICAqXG4gICAqIEJvdGggdGhlIGZyYW1lYnVmZmVyIGFuZCB0ZXh0dXJlIGNhbiBiZSBhY2Nlc3NlZCBsYXRlciB1c2luZyB0aGUgZ2l2ZW4gSUQuXG4gICAqXG4gICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbFxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWRcbiAgICogQHBhcmFtIHtib29sZWFufSBbc2hvdWxkU3RvcmVEZXB0aEluZm89ZmFsc2VdXG4gICAqL1xuICBjcmVhdGVOZXdGcmFtZWJ1ZmZlckFuZFRleHR1cmUoZ2wsIGlkLCBzaG91bGRTdG9yZURlcHRoSW5mbz1mYWxzZSkge1xuICAgIGxldCByZW5kZXJCdWZmZXI7XG4gICAgaWYgKHNob3VsZFN0b3JlRGVwdGhJbmZvKSB7XG4gICAgICByZW5kZXJCdWZmZXIgPSBjcmVhdGVSZW5kZXJCdWZmZXIoZ2wpO1xuICAgICAgdGhpcy5fcmVuZGVyQnVmZmVyc1tpZF0gPSByZW5kZXJCdWZmZXI7XG4gICAgfVxuXG4gICAgY29uc3QgdGV4dHVyZSA9IGNyZWF0ZVRleHR1cmVGb3JSZW5kZXJpbmcoZ2wpO1xuICAgIHRoaXMuX3RleHR1cmVzW2lkXSA9IHRleHR1cmU7XG5cbiAgICBjb25zdCBmcmFtZWJ1ZmZlciA9IGNyZWF0ZUZyYW1lYnVmZmVyKGdsLCB0ZXh0dXJlLCByZW5kZXJCdWZmZXIpO1xuICAgIHRoaXMuX2ZyYW1idWZmZXJzW2lkXSA9IGZyYW1lYnVmZmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICAgKiBAcmV0dXJucyB7P1dlYkdMRnJhbWVidWZmZXJ9XG4gICAqL1xuICBnZXRGcmFtZWJ1ZmZlcihpZCkge1xuICAgIHJldHVybiB0aGlzLl9mcmFtYnVmZmVyc1tpZF07XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkXG4gICAqIEByZXR1cm5zIHs/V2ViR0xUZXh0dXJlfVxuICAgKi9cbiAgZ2V0VGV4dHVyZShpZCkge1xuICAgIHJldHVybiB0aGlzLl90ZXh0dXJlc1tpZF07XG4gIH1cblxuICAvKipcbiAgICogSWYgd2UgYXJlIHVzaW5nIGEgcG9zdC1wcm9jZXNzaW5nIHByb2dyYW0sIHRoZW4gdGhpcyBpcyB0aGUgZGVmYXVsdCBmcmFtZWJ1ZmZlciBmb3IgcmVuZGVyaW5nXG4gICAqIG1vZGVscyBpbnRvLlxuICAgKlxuICAgKiBAcmV0dXJucyB7P1dlYkdMRnJhbWVidWZmZXJ9XG4gICAqL1xuICBnZXQgbW9kZWxzRnJhbWVidWZmZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ZyYW1idWZmZXJzW01PREVMU19GUkFNRUJVRkZFUl9JRF07XG4gIH1cblxuICAvKipcbiAgICogSWYgd2UgYXJlIHVzaW5nIGEgcG9zdC1wcm9jZXNzaW5nIHByb2dyYW0sIHRoZW4gdGhpcyBpcyB0aGUgZGVmYXVsdCB0ZXh0dXJlIGZvciByZW5kZXJpbmdcbiAgICogbW9kZWxzIGludG8uXG4gICAqXG4gICAqIEByZXR1cm5zIHs/V2ViR0xUZXh0dXJlfVxuICAgKi9cbiAgZ2V0IG1vZGVsc1RleHR1cmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RleHR1cmVzW01PREVMU19GUkFNRUJVRkZFUl9JRF07XG4gIH1cblxuICAvKipcbiAgICogSWYgd2UgYXJlIHVzaW5nIGEgcG9zdC1wcm9jZXNzaW5nIHByb2dyYW0sIHRoZW4gdGhpcyBpcyB0aGUgZGVmYXVsdCBkZXB0aCByZW5kZXIgYnVmZmVyIGZvclxuICAgKiByZW5kZXJpbmcgbW9kZWxzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7P1dlYkdMUmVuZGVyQnVmZmVyfVxuICAgKi9cbiAgZ2V0IG1vZGVsc1JlbmRlckJ1ZmZlcigpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVuZGVyQnVmZmVyc1tNT0RFTFNfRlJBTUVCVUZGRVJfSURdO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jb21wYXJlUHJvZ3JhbUNhY2hlSW5mbyhhLCBiKSB7XG4gIHJldHVybiBhLnJlbmRlclByaW9yaXR5IC0gYi5yZW5kZXJQcmlvcml0eTtcbn1cblxuZXhwb3J0IGNvbnN0IE1PREVMU19GUkFNRUJVRkZFUl9JRCA9ICdtb2RlbHMnO1xuXG5leHBvcnQgY29uc3QgcHJvZ3JhbVdyYXBwZXJTdG9yZSA9IG5ldyBQcm9ncmFtV3JhcHBlclN0b3JlKCk7XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUHJvZ3JhbUNhY2hlSW5mb1xuICogQHByb3BlcnR5IHtQcm9ncmFtV3JhcHBlckNvbmZpZ30gcGFyYW1zXG4gKiBAcHJvcGVydHkge1Byb2dyYW1XcmFwcGVyfEdyb3VwUHJvZ3JhbVdyYXBwZXJ9IFtwcm9ncmFtV3JhcHBlcl1cbiAqIEBwcm9wZXJ0eSB7U2V0LjxGdW5jdGlvbj59IFtkcmF3RnJhbWVIYW5kbGVyc11cbiAqIEBwcm9wZXJ0eSB7QXJyYXkuPFByb2dyYW1XcmFwcGVyPn0gW2NoaWxkcmVuUHJvZ3JhbVdyYXBwZXJzXVxuICovXG4iLCJpbXBvcnQge1xuICBpc0luRGV2TW9kZSxcbiAgZ2V0Vmlld3BvcnRIZWlnaHQsXG4gIGdldFZpZXdwb3J0V2lkdGgsXG4gIGxvYWRQcm9ncmFtLFxufSBmcm9tICcuLi8uLi91dGlsJztcblxuaW1wb3J0IHtVbmlmb3JtU2V0dGVyfSBmcm9tICcuL3VuaWZvcm0tc2V0dGVyJztcblxuLyoqXG4gKiBUaGlzIGNsYXNzIHdyYXBzIGEgbmF0aXZlIFdlYkdMUHJvZ3JhbSBvYmplY3QgYW5kIHByb3ZpZGVzIGNvbnZlbmllbmNlIG1ldGhvZHMgZm9yOlxuICogLSBzZXR0aW5nIHRoZSB3cmFwcGVkIHByb2dyYW0gZm9yIHVzZSBvbiB0aGUgV2ViR0wgcmVuZGVyaW5nIGNvbnRleHQsXG4gKiAtIGVuYWJsaW5nIHRoZSBhdHRyaWJ1dGUgdmFyaWFibGVzIGZvciB0aGUgcHJvZ3JhbSxcbiAqIC0gc2V0dGluZyB0aGUgYXR0cmlidXRlIGFuZCB1bmlmb3JtIHZhcmlhYmxlcyBmb3IgdGhlIHByb2dyYW0sXG4gKiAtIGRyYXdpbmcgc2hhcGVzIHdpdGggdGhlIHByb2dyYW0gYW5kIGl0cyBjdXJyZW50IGNvbmZpZ3VyYXRpb24uXG4gKi9cbmNsYXNzIFByb2dyYW1XcmFwcGVyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbFxuICAgKiBAcGFyYW0ge1Byb2dyYW1XcmFwcGVyQ29uZmlnfSBjb25maWdcbiAgICovXG4gIGNvbnN0cnVjdG9yKGdsLCBjb25maWcpIHtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgICB0aGlzLl9wcm9ncmFtID0gbnVsbDtcbiAgICB0aGlzLl91bmlmb3JtU2V0dGVycyA9IG51bGw7XG4gICAgdGhpcy5fYXR0cmlidXRlRW5hYmxlcnMgPSBudWxsO1xuICAgIHRoaXMuX2F0dHJpYnV0ZVNldHRlcnMgPSBudWxsO1xuXG4gICAgLy8gVGhpcyBpcyB1c2VkIGZvciBhc3NpZ25pbmcgZGlmZmVyZW50IHRleHR1cmVzIHRvIGRpZmZlcmVudCB0ZXh0dXJlIHVuaXRzLlxuICAgIHRoaXMuYmFzZVRleHR1cmVVbml0SW5kZXggPSAwO1xuXG4gICAgdGhpcy5fYnVpbGRXZWJHTFByb2dyYW1Qcm9taXNlID0gdGhpcy5fYnVpbGRXZWJHTFByb2dyYW0oZ2wsIGNvbmZpZyk7XG5cbiAgICAvLyBUT0RPOiBGcmVlemUgdGhpcyBvYmplY3QgYWZ0ZXIgaW5pdGlhbGl6aW5nXG4gIH1cblxuICAvKiogQHJldHVybnMge3N0cmluZ30gKi9cbiAgZ2V0IHByb2dyYW1JZCgpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcuaWQ7XG4gIH1cblxuICAvKiogQHJldHVybnMge1Byb21pc2V9ICovXG4gIGdldElzUmVhZHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2J1aWxkV2ViR0xQcm9ncmFtUHJvbWlzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoaXMgcHJvZ3JhbSB0byB1c2UgZm9yIHJlbmRlcmluZyBvbiB0aGUgZ2l2ZW4gV2ViR0wgY29udGV4dC5cbiAgICpcbiAgICogVGhpcyBhbHNvIGVuYWJsZXMgYWxsIHJlbGV2YW50IGF0dHJpYnV0ZSB2YXJpYWJsZXMgZm9yIHRoaXMgcHJvZ3JhbS5cbiAgICpcbiAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsXG4gICAqL1xuICBzZXRQcm9ncmFtKGdsKSB7XG4gICAgZ2wudXNlUHJvZ3JhbSh0aGlzLl9wcm9ncmFtKTtcbiAgICB0aGlzLl9lbmFibGVBdHRyaWJ1dGVzKCk7XG4gICAgaWYgKHRoaXMuY29uZmlnLndlYkdMU3RhdGVTZXR0ZXIpIHRoaXMuY29uZmlnLndlYkdMU3RhdGVTZXR0ZXIoZ2wpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgc2hhcGVzIHVzaW5nIHRoaXMgcHJvZ3JhbSB3aXRoIHRoZSBnaXZlbiB2YXJpYWJsZXMgY29uZmlndXJhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsXG4gICAqIEBwYXJhbSB7UHJvZ3JhbVZhcmlhYmxlc0NvbmZpZ30gW3Byb2dyYW1WYXJpYWJsZXNDb25maWddXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0PTBdIE9mZnNldCBpbnRvIHRoZSBlbGVtZW50IGFycmF5IGJ1ZmZlciB0byByZW5kZXIgZnJvbS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtjb3VudD1wcm9ncmFtVmFyaWFibGVzQ29uZmlnLmVsZW1lbnRDb3VudF0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byByZW5kZXIuXG4gICAqL1xuICBkcmF3KGdsLCBwcm9ncmFtVmFyaWFibGVzQ29uZmlnLCBvZmZzZXQsIGNvdW50KSB7XG4gICAgcHJvZ3JhbVZhcmlhYmxlc0NvbmZpZyA9IHByb2dyYW1WYXJpYWJsZXNDb25maWcgfHwgdGhpcy5jb25maWcuZ2V0UHJvZ3JhbVZhcmlhYmxlc0NvbmZpZyhnbCk7XG4gICAgdGhpcy5fc2V0VmFyaWFibGVzKGdsLCBwcm9ncmFtVmFyaWFibGVzQ29uZmlnKTtcbiAgICB0aGlzLl9kcmF3KGdsLCBwcm9ncmFtVmFyaWFibGVzQ29uZmlnLCBvZmZzZXQsIGNvdW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHVwIHRoaXMgV2ViR0wgcmVuZGVyaW5nIHByb2dyYW0gdG8gZHJhdyBzaGFwZXMgd2l0aCB0aGUgZ2l2ZW4gcHJvZ3JhbSB2YXJpYWJsZXNcbiAgICogY29uZmlndXJhdGlvbiBhbmQgdGhlIGF0dHJpYnV0ZS91bmlmb3JtIHNldHRlcnMgdGhhdCBoYXZlIGJlZW4gc2V0IHVwIGZvciB0aGlzIHByb2dyYW0uXG4gICAqXG4gICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbFxuICAgKiBAcGFyYW0ge1Byb2dyYW1WYXJpYWJsZXNDb25maWd9IHByb2dyYW1WYXJpYWJsZXNDb25maWdcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRWYXJpYWJsZXMoZ2wsIHByb2dyYW1WYXJpYWJsZXNDb25maWcpIHtcbiAgICB0aGlzLl9zZXRBdHRyaWJ1dGVzKHByb2dyYW1WYXJpYWJsZXNDb25maWcuYXR0cmlidXRlcyk7XG4gICAgdGhpcy5fc2V0VW5pZm9ybXMocHJvZ3JhbVZhcmlhYmxlc0NvbmZpZy51bmlmb3Jtcyk7XG5cbiAgICAvLyBDaGVjayB3aGV0aGVyIHdlIGFyZSBzZXQgdXAgdG8gZHJhdyB1c2luZyBnbC5kcmF3RWxlbWVudHMgcmF0aGVyIHRoYW4gZ2wuZHJhd0FycmF5cy5cbiAgICBpZiAocHJvZ3JhbVZhcmlhYmxlc0NvbmZpZy52ZXJ0ZXhJbmRpY2VzKSB7XG4gICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBwcm9ncmFtVmFyaWFibGVzQ29uZmlnLnZlcnRleEluZGljZXMpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHNoYXBlcyBhY2NvcmRpbmcgdG8gdGhpcyBwcm9ncmFtJ3MgY3VycmVudCBjb25maWd1cmF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2xcbiAgICogQHBhcmFtIHtQcm9ncmFtVmFyaWFibGVzQ29uZmlnfSBwcm9ncmFtVmFyaWFibGVzQ29uZmlnXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0PTBdIE9mZnNldCBpbnRvIHRoZSBlbGVtZW50IGFycmF5IGJ1ZmZlciB0byByZW5kZXIgZnJvbS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtjb3VudD1wcm9ncmFtVmFyaWFibGVzQ29uZmlnLmVsZW1lbnRDb3VudF0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byByZW5kZXIuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZHJhdyhnbCwgcHJvZ3JhbVZhcmlhYmxlc0NvbmZpZywgb2Zmc2V0LCBjb3VudCkge1xuICAgIG9mZnNldCA9IHR5cGVvZiBvZmZzZXQgPT09ICdudW1iZXInID8gb2Zmc2V0IDogMDtcbiAgICBjb3VudCA9IHR5cGVvZiBjb3VudCA9PT0gJ251bWJlcicgPyBjb3VudCA6IHByb2dyYW1WYXJpYWJsZXNDb25maWcuZWxlbWVudENvdW50O1xuXG4gICAgaWYgKGlzSW5EZXZNb2RlKSB7XG4gICAgICB0aGlzLl9jaGVja1RoYXRHaXZlblZhcmlhYmxlc01hdGNoUHJvZ3JhbShwcm9ncmFtVmFyaWFibGVzQ29uZmlnKTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayB3aGV0aGVyIHdlIGFyZSBzZXQgdXAgdG8gZHJhdyB1c2luZyBnbC5kcmF3RWxlbWVudHMgb3IgZ2wuZHJhd0FycmF5cy5cbiAgICBpZiAocHJvZ3JhbVZhcmlhYmxlc0NvbmZpZy52ZXJ0ZXhJbmRpY2VzKSB7XG4gICAgICBnbC5kcmF3RWxlbWVudHMocHJvZ3JhbVZhcmlhYmxlc0NvbmZpZy5tb2RlLCBjb3VudCwgZ2wuVU5TSUdORURfU0hPUlQsIG9mZnNldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdsLmRyYXdBcnJheXMocHJvZ3JhbVZhcmlhYmxlc0NvbmZpZy5tb2RlLCBvZmZzZXQsIGNvdW50KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGF0dHJpYnV0ZSBhbmQgdW5pZm9ybSB2YXJpYWJsZXMgc3BlY2lmaWVkIGluIHRoZSBnaXZlbiBjb25maWcgbWF0Y2ggdGhvc2VcbiAgICogZGVmaW5lZCBpbiB0aGlzIHByb2dyYW0uXG4gICAqXG4gICAqIEBwYXJhbSB7UHJvZ3JhbVZhcmlhYmxlc0NvbmZpZ30gcHJvZ3JhbVZhcmlhYmxlc0NvbmZpZ1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2NoZWNrVGhhdEdpdmVuVmFyaWFibGVzTWF0Y2hQcm9ncmFtKHByb2dyYW1WYXJpYWJsZXNDb25maWcpIHtcbiAgICBpZiAoT2JqZWN0LmtleXMocHJvZ3JhbVZhcmlhYmxlc0NvbmZpZy5hdHRyaWJ1dGVzKS5sZW5ndGggIT09XG4gICAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLl9hdHRyaWJ1dGVTZXR0ZXJzKS5sZW5ndGggfHxcbiAgICAgICAgT2JqZWN0LmtleXMocHJvZ3JhbVZhcmlhYmxlc0NvbmZpZy51bmlmb3JtcykubGVuZ3RoICE9PVxuICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5fdW5pZm9ybVNldHRlcnMpLmxlbmd0aCkge1xuICAgICAgY29uc29sZS53YXJuKCdUaGUgYXR0cmlidXRlL3VuaWZvcm0gdmFyaWFibGVzIGluIHRoZSBQcm9ncmFtVmFyaWFibGVzQ29uZmlnIGRvIG5vdCBtYXRjaCAnICtcbiAgICAgICAgICAndGhvc2Ugc3BlY2lmaWVkIGluIHRoZSBzaGFkZXJzLicsIHByb2dyYW1WYXJpYWJsZXNDb25maWcsIHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB1bmlmb3JtIHZhbHVlcyBmb3IgdGhpcyBwcm9ncmFtLlxuICAgKlxuICAgKiBTcGVjaWZpY2FsbHksIHRoaXMgY2FsbHMgYGdsLnVuaWZvcm08Li4uPihsb2NhdGlvbiwgdmFsdWUpYCBmb3IgZWFjaFxuICAgKiB2YXJpYWJsZS1uYW1lL3ZhcmlhYmxlLXZhbHVlIGtleS12YWx1ZSBwYWlyIGluIHRoZSBnaXZlbiBtYXAuIEFzIHBhcnQgb2YgdGhlIHNldHVwIHByb2Nlc3MsIHRoZVxuICAgKiB1bmlmb3JtIHZhcmlhYmxlIGxvY2F0aW9ucyBhcmUgc3RvcmVkIGluIGEgbWFwIGZyb20gdGhlaXIgY29ycmVzcG9uZGluZyB2YXJpYWJsZSBuYW1lcy4gU28gb25seVxuICAgKiB0aGUgdmFyaWFibGUgbmFtZXMgYXJlIG5lZWRlZCBpbiBvcmRlciB0byBjYWxsIHRoaXMgZnVuY3Rpb24gYXQgcmVuZGVyIHRpbWUuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0LjxTdHJpbmcsIFVuaWZvcm1EYXRhPn0gdW5pZm9ybVZhbHVlc1xuICAgKi9cbiAgX3NldFVuaWZvcm1zKHVuaWZvcm1WYWx1ZXMpIHtcbiAgICBPYmplY3Qua2V5cyh1bmlmb3JtVmFsdWVzKS5mb3JFYWNoKHVuaWZvcm1OYW1lID0+IHtcbiAgICAgIGNvbnN0IHVuaWZvcm1TZXR0ZXIgPSB0aGlzLl91bmlmb3JtU2V0dGVyc1t1bmlmb3JtTmFtZV07XG4gICAgICBjb25zdCB1bmlmb3JtVmFsdWUgPSB1bmlmb3JtVmFsdWVzW3VuaWZvcm1OYW1lXTtcbiAgICAgIHVuaWZvcm1TZXR0ZXIuc2V0VW5pZm9ybSh1bmlmb3JtVmFsdWUpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGF0dHJpYnV0ZSBidWZmZXJzIGZvciB0aGlzIHByb2dyYW0uXG4gICAqXG4gICAqIFNwZWNpZmljYWxseSwgdGhpcyBjYWxscyBgZ2wuYmluZEJ1ZmZlciguLi4pYCBhbmQgYGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoLi4uKWAgZm9yIGVhY2hcbiAgICogdmFyaWFibGUtbmFtZS92YXJpYWJsZS12YWx1ZSBwYWlyIGluIHRoZSBnaXZlbiBhdHRyaWJ1dGUtaW5mbyBtYXAuIEFzIHBhcnQgb2YgdGhlIHNldHVwXG4gICAqIHByb2Nlc3MsIHRoZSB1bmlmb3JtIHZhcmlhYmxlIGxvY2F0aW9ucyBhcmUgc3RvcmVkIGluIGEgbWFwIGZyb20gdGhlaXIgY29ycmVzcG9uZGluZyB2YXJpYWJsZVxuICAgKiBuYW1lcy4gU28gb25seSB0aGUgdmFyaWFibGUgbmFtZXMgYXJlIG5lZWRlZCBpbiBvcmRlciB0byBjYWxsIHRoaXMgZnVuY3Rpb24gYXQgcmVuZGVyIHRpbWUuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0LjxTdHJpbmcsIEF0dHJpYnV0ZUNvbmZpZz59IGF0dHJpYnV0ZUNvbmZpZ3NcbiAgICovXG4gIF9zZXRBdHRyaWJ1dGVzKGF0dHJpYnV0ZUNvbmZpZ3MpIHtcbiAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVDb25maWdzKS5mb3JFYWNoKGF0dHJpYnV0ZU5hbWUgPT4ge1xuICAgICAgY29uc3QgYXR0cmlidXRlU2V0dGVyID0gdGhpcy5fYXR0cmlidXRlU2V0dGVyc1thdHRyaWJ1dGVOYW1lXTtcbiAgICAgIGNvbnN0IGF0dHJpYnV0ZUNvbmZpZyA9IGF0dHJpYnV0ZUNvbmZpZ3NbYXR0cmlidXRlTmFtZV07XG4gICAgICBhdHRyaWJ1dGVTZXR0ZXIoYXR0cmlidXRlQ29uZmlnKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2VuYWJsZUF0dHJpYnV0ZXMoKSB7XG4gICAgdGhpcy5fYXR0cmlidXRlRW5hYmxlcnMuZm9yRWFjaChhdHRyaWJ1dGVFbmFibGVyID0+IGF0dHJpYnV0ZUVuYWJsZXIoKSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyB1bmlmb3JtIHNldHRlcnMgZm9yIHRoaXMgcHJvZ3JhbSBhbmQgc2F2ZXMgdGhlbSBpbiB0aGUgX3VuaWZvcm1TZXR0ZXJzIHByb3BlcnR5LlxuICAgKlxuICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2xcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9jcmVhdGVVbmlmb3JtU2V0dGVycyhnbCkge1xuICAgIGNvbnN0IHVuaWZvcm1Db3VudCA9IGdsLmdldFByb2dyYW1QYXJhbWV0ZXIodGhpcy5fcHJvZ3JhbSwgZ2wuQUNUSVZFX1VOSUZPUk1TKTtcblxuICAgIHRoaXMuX3VuaWZvcm1TZXR0ZXJzID0ge307XG5cbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdW5pZm9ybUNvdW50OyBpbmRleCsrKSB7XG4gICAgICBjb25zdCB1bmlmb3JtSW5mbyA9IGdsLmdldEFjdGl2ZVVuaWZvcm0odGhpcy5fcHJvZ3JhbSwgaW5kZXgpO1xuICAgICAgbGV0IHVuaWZvcm1OYW1lID0gdW5pZm9ybUluZm8ubmFtZTtcblxuICAgICAgLy8gUmVtb3ZlIGFueSBhcnJheSBzdWZmaXguXG4gICAgICAvLyBUT0RPOiBJcyB0aGlzIHJlbW92YWwgcmVkdW5kYW50IHdpdGggdGhlIGlzQXJyYXkgY2hlY2sgYmVsb3c/P1xuICAgICAgaWYgKHVuaWZvcm1OYW1lLnN1YnN0cigtMykgPT09ICdbMF0nKSB7XG4gICAgICAgIHVuaWZvcm1OYW1lID0gdW5pZm9ybU5hbWUuc3Vic3RyKDAsIHVuaWZvcm1OYW1lLmxlbmd0aCAtIDMpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl91bmlmb3JtU2V0dGVyc1t1bmlmb3JtTmFtZV0gPSBuZXcgVW5pZm9ybVNldHRlcihnbCwgdGhpcy5fcHJvZ3JhbSwgdW5pZm9ybUluZm8sIHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGF0dHJpYnV0ZSBlbmFibGVycyBhbmQgc2V0dGVycyBmb3IgdGhpcyBwcm9ncmFtIGFuZCBzYXZlcyB0aGVtIGluIHRoZVxuICAgKiBfYXR0cmlidXRlRW5hYmxlcnMgYW5kIF9hdHRyaWJ1dGVTZXR0ZXJzIHByb3BlcnRpZXMsIHJlc3BlY3RpdmVseS5cbiAgICpcbiAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfY3JlYXRlQXR0cmlidXRlRW5hYmxlcnNBbmRTZXR0ZXJzKGdsKSB7XG4gICAgdGhpcy5fYXR0cmlidXRlRW5hYmxlcnMgPSBbXTtcbiAgICB0aGlzLl9hdHRyaWJ1dGVTZXR0ZXJzID0ge307XG5cbiAgICBjb25zdCBhdHRyaWJ1dGVDb3VudCA9IGdsLmdldFByb2dyYW1QYXJhbWV0ZXIodGhpcy5fcHJvZ3JhbSwgZ2wuQUNUSVZFX0FUVFJJQlVURVMpO1xuXG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGF0dHJpYnV0ZUNvdW50OyBpbmRleCsrKSB7XG4gICAgICBjb25zdCBhdHRyaWJ1dGVOYW1lID0gZ2wuZ2V0QWN0aXZlQXR0cmliKHRoaXMuX3Byb2dyYW0sIGluZGV4KS5uYW1lO1xuICAgICAgY29uc3QgbG9jYXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbih0aGlzLl9wcm9ncmFtLCBhdHRyaWJ1dGVOYW1lKTtcblxuICAgICAgdGhpcy5fYXR0cmlidXRlRW5hYmxlcnMucHVzaChQcm9ncmFtV3JhcHBlci5fY3JlYXRlQXR0cmlidXRlRW5hYmxlcihnbCwgbG9jYXRpb24pKTtcbiAgICAgIHRoaXMuX2F0dHJpYnV0ZVNldHRlcnNbYXR0cmlidXRlTmFtZV0gPSBQcm9ncmFtV3JhcHBlci5fY3JlYXRlQXR0cmlidXRlU2V0dGVyKGdsLCBsb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIExvYWRzIHRoZSBzaGFkZXIgc291cmNlIGNvZGUgZnJvbSB0aGUgZ2l2ZW4gVVJMcywgY29tcGlsZXMgdGhlIHNoYWRlciBzb3VyY2UgY29kZSwgYW5kIGNyZWF0ZXNcbiAgICogYSBwcm9ncmFtIGZyb20gdGhlIHJlc3VsdGluZyBzaGFkZXJzLlxuICAgKlxuICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2xcbiAgICogQHBhcmFtIHtQcm9ncmFtV3JhcHBlckNvbmZpZ30gY29uZmlnXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2J1aWxkV2ViR0xQcm9ncmFtKGdsLCBjb25maWcpIHtcbiAgICByZXR1cm4gbG9hZFByb2dyYW0oZ2wsIGNvbmZpZy52ZXJ0ZXhTaGFkZXJQYXRoLCBjb25maWcuZnJhZ21lbnRTaGFkZXJQYXRoKVxuICAgICAgICAudGhlbih3ZWJHTFByb2dyYW0gPT4ge1xuICAgICAgICAgIHRoaXMuX3Byb2dyYW0gPSB3ZWJHTFByb2dyYW07XG4gICAgICAgICAgdGhpcy5fY3JlYXRlVW5pZm9ybVNldHRlcnMoZ2wpO1xuICAgICAgICAgIHRoaXMuX2NyZWF0ZUF0dHJpYnV0ZUVuYWJsZXJzQW5kU2V0dGVycyhnbCk7XG4gICAgICAgICAgaWYgKGNvbmZpZy5pbml0aWFsaXplKSBjb25maWcuaW5pdGlhbGl6ZShnbCk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKCgpID0+IGNvbnNvbGUuaW5mbyhgUHJvZ3JhbSBsb2FkZWQ6ICR7Y29uZmlnLmlkfWApKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2xcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxvY2F0aW9uXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHN0YXRpYyBfY3JlYXRlQXR0cmlidXRlRW5hYmxlcihnbCwgbG9jYXRpb24pIHtcbiAgICByZXR1cm4gKCkgPT4gZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkobG9jYXRpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbFxuICAgKiBAcGFyYW0ge251bWJlcn0gbG9jYXRpb25cbiAgICogQHJldHVybnMge0Z1bmN0aW9uLjxBdHRyaWJ1dGVDb25maWc+fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc3RhdGljIF9jcmVhdGVBdHRyaWJ1dGVTZXR0ZXIoZ2wsIGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIGF0dHJpYnV0ZUNvbmZpZyA9PiB7XG4gICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgYXR0cmlidXRlQ29uZmlnLmJ1ZmZlcik7XG4gICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKFxuICAgICAgICAgIGxvY2F0aW9uLFxuICAgICAgICAgIGF0dHJpYnV0ZUNvbmZpZy5zaXplLFxuICAgICAgICAgIHR5cGVvZiBhdHRyaWJ1dGVDb25maWcudHlwZSAhPT0gJ3VuZGVmaW5lZCcgPyBhdHRyaWJ1dGVDb25maWcudHlwZSA6IGdsLkZMT0FULFxuICAgICAgICAgIHR5cGVvZiBhdHRyaWJ1dGVDb25maWcubm9ybWFsaXplZCAhPT0gJ3VuZGVmaW5lZCcgPyBhdHRyaWJ1dGVDb25maWcubm9ybWFsaXplZCA6IGZhbHNlLFxuICAgICAgICAgIHR5cGVvZiBhdHRyaWJ1dGVDb25maWcuc3RyaWRlICE9PSAndW5kZWZpbmVkJyA/IGF0dHJpYnV0ZUNvbmZpZy5zdHJpZGUgOiAwLFxuICAgICAgICAgIHR5cGVvZiBhdHRyaWJ1dGVDb25maWcub2Zmc2V0ICE9PSAndW5kZWZpbmVkJyA/IGF0dHJpYnV0ZUNvbmZpZy5vZmZzZXQgOiAwKTtcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCB7UHJvZ3JhbVdyYXBwZXJ9O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFByb2dyYW1XcmFwcGVyQ29uZmlnXG4gKiBAcHJvcGVydHkge3N0cmluZ30gaWRcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IFtpbml0aWFsaXplXSBBIG1ldGhvZCBmb3Igb25lLXRpbWUgaW5pdGlhbGl6YXRpb24gb2YgdGhlIEdMIHN0YXRlIGZvciB0aGlzXG4gKiBwcm9ncmFtLlxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gW3dlYkdMU3RhdGVTZXR0ZXJdIEEgbWV0aG9kIGZvciBzZXR0aW5nIHVwIHRoZSBHTCBzdGF0ZSBmb3IgdGhpcyBwcm9ncmFtXG4gKiB3cmFwcGVyIGluIHByZXBhcmF0aW9uIGZvciB0aGUgY3VycmVudCBkcmF3IGNhbGwuXG4gKiBAcHJvcGVydHkge251bWJlcn0gW3JlbmRlclByaW9yaXR5XSBQcm9ncmFtcyB3aXRoIGxvd2VyIHByaW9yaXR5IHdpbGwgcmVuZGVyIGZpcnN0LiBUaGlzIGRvZXMgbm90XG4gKiBuZWVkIHRvIGJlIHByZXNlbnQgZm9yIFByb2dyYW1XcmFwcGVycyB0aGF0IGFyZSBjaGlsZHJlbiBvZiBhIEdyb3VwUHJvZ3JhbVdyYXBwZXIuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3ZlcnRleFNoYWRlclBhdGhdIFRoaXMgd2lsbCBiZSBwcmVzZW50IG9uIGNvbmZpZ3MgZm9yIG5vbi1ncm91cFxuICogUHJvZ3JhbVdyYXBwZXJzLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtmcmFnbWVudFNoYWRlclBhdGhdIFRoaXMgd2lsbCBiZSBwcmVzZW50IG9uIGNvbmZpZ3MgZm9yIG5vbi1ncm91cFxuICogUHJvZ3JhbVdyYXBwZXJzLlxuICogQHByb3BlcnR5IHtib29sZWFufSBbaXNBUG9zdFByb2Nlc3Nvcj1mYWxzZV0gQSBwb3N0LXByb2Nlc3NpbmcgcHJvZ3JhbSBpcyB1c2VkIGZvciBtYW5pcHVsYXRpbmdcbiAqIHRoZSBlbnRpcmUgZnJhbWUgYWZ0ZXIgYWxsIHRoZSBtb2RlbHMgaGF2ZSByZW5kZXJlZC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2NoaWxkcmVuUHJvZ3JhbUNvbmZpZ3NdIEEgZ3JvdXBpbmcgcHJvZ3JhbSBjb25zaXN0cyBvZiBtdWx0aXBsZSBjaGlsZFxuICogcHJvZ3JhbXMgdGhhdCBhcmUgYWxsIHJlbmRlcmVkIGluIHNlcXVlbmNlIGZvciBhIHJlbGF0ZWQgcHVycG9zZS5cbiAqIEBwcm9wZXJ0eSB7QXJyYXkuPENoaWxkUHJvZ3JhbUFuZEZyYW1lYnVmZmVySWRzPn0gW2NoaWxkcmVuUHJvZ3JhbXNUb0RyYXddIFRoZSBJRHMgZm9yIHRoZVxuICogc2VxdWVuY2Ugb2YgY2hpbGRyZW4gUHJvZ3JhbVdyYXBwZXJzIHRvIGRyYXcsIGFzIHdlbGwgYXMgdGhlIElEcyBmb3IgdGhlIGlucHV0IGFuZCBvdXRwdXRcbiAqIGZyYW1lYnVmZmVycy90ZXh0dXJlcyB0byB1c2UuIFRoaXMgd2lsbCBiZSBwcmVzZW50IG9uIGNvbmZpZ3MgZm9yIEdyb3VwUHJvZ3JhbVdyYXBwZXJzLlxuICogQHByb3BlcnR5IHtBcnJheS48c3RyaW5nPn0gW2NoaWxkcmVuRnJhbWVidWZmZXJJZHNdIFRoZSBJRHMgb2YgYWxsIHRoZSBmcmFtZWJ1ZmZlcnMvdGV4dHVyZXMgdGhhdFxuICogd2lsbCBuZWVkIHRvIGJlIGNyZWF0ZWQgZm9yIHRoaXMgcHJvZ3JhbS4gVGhpcyB3aWxsIGJlIHByZXNlbnQgb24gY29uZmlncyBmb3JcbiAqIEdyb3VwUHJvZ3JhbVdyYXBwZXJzLlxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gW2dldFByb2dyYW1WYXJpYWJsZXNDb25maWddIEEgbWV0aG9kIGZvciBnZXR0aW5nIHRoZSB2YXJpYWJsZXMgbmVlZGVkIGZvclxuICogZHJhd2luZyB0aGlzIHByb2dyYW0uIFRoaXMgd2lsbCBiZSBwcmVzZW50IG9uIGNvbmZpZ3Mgb2YgcHJvZ3JhbXMgdGhhdCBhcmUgY2hpbGRyZW4gb2YgYVxuICogR3JvdXBQcm9ncmFtV3JhcHBlci5cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IENoaWxkUHJvZ3JhbUFuZEZyYW1lYnVmZmVySWRzXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcHJvZ3JhbUlkIFRoZSBJRCBvZiB0aGUgcHJvZ3JhbSB0byBkcmF3IHdpdGguXG4gKiBAcHJvcGVydHkge0FycmF5LjxzdHJpbmc+fSBpbnB1dEZyYW1lYnVmZmVySWRzIFRoZSBJRHMgb2YgZnJhbWVidWZmZXJzIHdob3NlIHRleHR1cmVzIHdpbGwgYmVcbiAqIHVzZWQgYXMgaW5wdXRzIGZvciB0aGlzIHByb2dyYW0ncyBzaGFkZXJzLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IG91dHB1dEZyYW1lYnVmZmVySWQgUHJvdmlkZSBudWxsIGluIG9yZGVyIHRvIHJlbmRlciB0byB0aGUgY2FudmFzLlxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUHJvZ3JhbVZhcmlhYmxlc0NvbmZpZ1xuICogQHByb3BlcnR5IHtPYmplY3QuPFN0cmluZywgQXR0cmlidXRlQ29uZmlnPn0gYXR0cmlidXRlcyBBIG1hcHBpbmcgZnJvbSBhdHRyaWJ1dGUgbmFtZXMgdG9cbiAqIGF0dHJpYnV0ZSBpbmZvLlxuICogQHByb3BlcnR5IHtPYmplY3QuPFN0cmluZywgVW5pZm9ybURhdGE+fSB1bmlmb3JtcyBBIG1hcHBpbmcgZnJvbSB1bmlmb3JtIG5hbWVzIHRvIHVuaWZvcm0gaW5mby5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBtb2RlIFNwZWNpZmllcyB0aGUgdHlwZSBvZiBwcmltaXRpdmVzIHRvIHJlbmRlcjsgb25lIG9mOlxuICogICAtIGdsLlBPSU5UUyxcbiAqICAgLSBnbC5MSU5FUyxcbiAqICAgLSBnbC5MSU5FX1NUUklQLFxuICogICAtIGdsLkxJTkVfTE9PUCxcbiAqICAgLSBnbC5UUklBTkdMRVMsXG4gKiAgIC0gZ2wuVFJJQU5HTEVfU1RSSVAsXG4gKiAgIC0gZ2wuVFJJQU5HTEVfRkFOLlxuICogQHByb3BlcnR5IHtXZWJHTEJ1ZmZlcn0gW3ZlcnRleEluZGljZXNdIFRoZSBpbmRpY2VzIHRvIHVzZSBmb3IgcmV0cmlldmluZyB0aGUgdmVydGV4IGluZm8gZnJvbVxuICogZWFjaCBvZiB0aGUgb3RoZXIgYXR0cmlidXRlIHZhcmlhYmxlIGJ1ZmZlcnMuIElmIHRoaXMgcHJvcGVydHkgaXMgcHJlc2VudCwgdGhlbiB0aGUgcmVuZGVyaW5nXG4gKiBwaXBlbGluZSB3aWxsIGJlIHNldCB1cCB0byB1c2UgZ2wuZHJhd0VsZW1lbnRzICh3aXRoIGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSKSBpbnN0ZWFkIG9mXG4gKiBnbC5kcmF3QXJyYXlzLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGVsZW1lbnRDb3VudCBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzL3ZlcnRpY2VzIHRvIHJlbmRlciBmb3IgdGhpcyB2YXJpYWJsZXNcbiAqIGNvbmZpZ3VyYXRpb24uXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBBdHRyaWJ1dGVDb25maWdcbiAqIEBwcm9wZXJ0eSB7V2ViR0xCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIGNvbnRhaW5pbmcgdGhpcyBhdHRyaWJ1dGUncyBkYXRhLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGluZGV4IEluZGV4IG9mIHRhcmdldCBhdHRyaWJ1dGUgaW4gdGhlIGJ1ZmZlciBib3VuZCB0byBnbC5BUlJBWV9CVUZGRVIuXG4gKiBAcHJvcGVydHkge251bWJlcn0gc2l6ZSBUaGUgbnVtYmVyIG9mIGNvbXBvbmVudHMgcGVyIGF0dHJpYnV0ZS4gTXVzdCBiZSAxLDIsMyxvciA0LlxuICogQHByb3BlcnR5IHtudW1iZXJ9IHR5cGUgU3BlY2lmaWVzIHRoZSBkYXRhIHR5cGUgb2YgZWFjaCBjb21wb25lbnQgaW4gdGhlIGFycmF5LiBVc2UgZWl0aGVyXG4gKiBnbC5GTE9BVCBvciBnbC5GSVhFRC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gbm9ybWFsaXplZCBJZiB0cnVlLCB0aGVuIHZhbHVlcyB3aWxsIGJlIG5vcm1hbGl6ZWQgdG8gYSByYW5nZSBvZiAtMSBvciAwIHRvXG4gKiAxLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IHN0cmlkZSBTcGVjaWZpZXMgdGhlIG9mZnNldCBpbiBieXRlcyBiZXR3ZWVuIHRoZSBiZWdpbm5pbmcgb2YgY29uc2VjdXRpdmVcbiAqIHZlcnRleCBhdHRyaWJ1dGVzLiBEZWZhdWx0IHZhbHVlIGlzIDAsIG1heGltdW0gaXMgMjU1LiBNdXN0IGJlIGEgbXVsdGlwbGUgb2YgdHlwZS5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBvZmZzZXQgU3BlY2lmaWVzIGFuIG9mZnNldCBpbiBieXRlcyBvZiB0aGUgZmlyc3QgY29tcG9uZW50IG9mIHRoZSBmaXJzdFxuICogdmVydGV4IGF0dHJpYnV0ZSBpbiB0aGUgYXJyYXkuIERlZmF1bHQgaXMgMCB3aGljaCBtZWFucyB0aGF0IHZlcnRleCBhdHRyaWJ1dGVzIGFyZSB0aWdodGx5XG4gKiBwYWNrZWQuIE11c3QgYmUgYSBtdWx0aXBsZSBvZiB0eXBlLlxuICovXG5cbi8qKiBAdHlwZWRlZiB7Kn0gVW5pZm9ybURhdGEgKi9cbiIsImltcG9ydCB7bG9hZEltYWdlU3JjfSBmcm9tICcuLi8uLi91dGlsJztcblxuLyoqXG4gKiBUaGlzIGNsYXNzIGxvYWRzLCBzZXRzIHVwLCBhbmQgc3RvcmVzIFdlYkdMIHRleHR1cmUgb2JqZWN0cy5cbiAqXG4gKiBOT1RFOiBPbmx5IHRleHR1cmVzIHdob3NlIHNpZGUgbGVuZ3RocyBhcmUgcG93ZXJzIG9mIHR3byBhcmUgc3VwcG9ydGVkLlxuICovXG5jbGFzcyBUZXh0dXJlU3RvcmUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnRleHR1cmVDYWNoZSA9IHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0dXJlUGF0aFxuICAgKiBAcmV0dXJucyB7V2ViR0xUZXh0dXJlfVxuICAgKi9cbiAgZ2V0VGV4dHVyZSh0ZXh0dXJlUGF0aCkge1xuICAgIHJldHVybiB0aGlzLnRleHR1cmVDYWNoZVt0ZXh0dXJlUGF0aF0udGV4dHVyZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkcyB0aGUgdGV4dHVyZSBpbWFnZSBhdCB0aGUgZ2l2ZW4gcGF0aCwgY3JlYXRlcyBhIHRleHR1cmUgb2JqZWN0IGZyb20gaXQsIGNhY2hlcyB0aGVcbiAgICogdGV4dHVyZSwgYW5kIHJldHVybnMgYSBwcm9taXNlIGZvciB0aGUgdGV4dHVyZS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgaXMgaWRlbXBvdGVudDsgYSBnaXZlbiB0ZXh0dXJlIHdpbGwgb25seSBiZSBsb2FkZWQgb25jZS5cbiAgICpcbiAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0dXJlUGF0aFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZS48V2ViR0xUZXh0dXJlLCBFcnJvcj59XG4gICAqL1xuICBsb2FkVGV4dHVyZShnbCwgdGV4dHVyZVBhdGgpIHtcbiAgICBsZXQgdGV4dHVyZUNhY2hlSW5mbyA9IHRoaXMudGV4dHVyZUNhY2hlW3RleHR1cmVQYXRoXTtcblxuICAgIC8vIExvYWQsIGNyZWF0ZSwgYW5kIGNhY2hlIHRoZSB0ZXh0dXJlIGlmIGl0IGhhcyBub3QgYmVlbiBwcmV2aW91c2x5IHJlZ2lzdGVyZWQuXG4gICAgaWYgKCF0ZXh0dXJlQ2FjaGVJbmZvKSB7XG4gICAgICB0ZXh0dXJlQ2FjaGVJbmZvID0ge1xuICAgICAgICB0ZXh0dXJlUHJvbWlzZTogbnVsbCxcbiAgICAgICAgdGV4dHVyZTogbnVsbCxcbiAgICAgICAgaW1hZ2U6IG5ldyBJbWFnZSgpXG4gICAgICB9O1xuICAgICAgdGhpcy50ZXh0dXJlQ2FjaGVbdGV4dHVyZVBhdGhdID0gdGV4dHVyZUNhY2hlSW5mbztcbiAgICAgIHRleHR1cmVDYWNoZUluZm8udGV4dHVyZVByb21pc2UgPSBsb2FkSW1hZ2VTcmModGV4dHVyZUNhY2hlSW5mby5pbWFnZSwgdGV4dHVyZVBhdGgpXG4gICAgICAgICAgLnRoZW4oXyA9PiB0aGlzLl9jcmVhdGVUZXh0dXJlKGdsLCB0ZXh0dXJlQ2FjaGVJbmZvKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRleHR1cmVDYWNoZUluZm8udGV4dHVyZVByb21pc2U7XG4gIH1cblxuICAvLyBUT0RPOiBNYWtlIHRoaXMgbW9yZSBnZW5lcmFsL2NvbmZpZ3VyYWJsZSBieSBjcmVhdGluZyBhIG5ldyBUZXh0dXJlQ29uZmlnIHR5cGVkZWYgd2l0aCBtb3N0IG9mXG4gIC8vIHRoZSBnbC54eHggcGFyYW1zIGluY2x1ZGVkIGJlbG93IChsaWtlIHRoZSBBdHRyaWJ1dGVDb25maWcgdHlwZWRlZn0sIHBhc3NpbmcgYSB0ZXh0dXJlQ29uZmlnIGluXG4gIC8vIHRoZSByZWdpc3RlciBtZXRob2QsIGFuZCBzYXZpbmcgaXQgb24gdGhlIHRleHR1cmVDYWNoZUluZm8gb2JqZWN0LlxuICAvKipcbiAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsXG4gICAqIEBwYXJhbSB7VGV4dHVyZUNhY2hlSW5mb30gdGV4dHVyZUNhY2hlSW5mb1xuICAgKiBAcmV0dXJucyB7V2ViR0xUZXh0dXJlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2NyZWF0ZVRleHR1cmUoZ2wsIHRleHR1cmVDYWNoZUluZm8pIHtcbiAgICBjb25zb2xlLmluZm8oYFRleHR1cmUgbG9hZGVkOiAke3RleHR1cmVDYWNoZUluZm8uaW1hZ2Uuc3JjfWApO1xuXG4gICAgdGV4dHVyZUNhY2hlSW5mby50ZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xuICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleHR1cmVDYWNoZUluZm8udGV4dHVyZSk7XG4gICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCB0ZXh0dXJlQ2FjaGVJbmZvLmltYWdlKTtcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTElORUFSKTtcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTElORUFSX01JUE1BUF9ORUFSRVNUKTtcbiAgICBnbC5nZW5lcmF0ZU1pcG1hcChnbC5URVhUVVJFXzJEKTtcbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBudWxsKTtcblxuICAgIHJldHVybiB0ZXh0dXJlQ2FjaGVJbmZvLnRleHR1cmU7XG4gIH1cblxuICAvKipcbiAgICogV0FSTklORzogVGhpcyB3aWxsIHJlbW92ZSB0aGUgdGV4dHVyZSBmcm9tIHRoZSBzdG9yZSBldmVuIGlmIHRoZXJlIGFyZSBzdGlsbCBvdGhlciBjb21wb25lbnRzXG4gICAqIGRlcGVuZGluZyBvbiB0aGlzIHRleHR1cmUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0dXJlUGF0aFxuICAgKi9cbiAgZGVsZXRlVGV4dHVyZSh0ZXh0dXJlUGF0aCkge1xuICAgIGRlbGV0ZSB0aGlzLnRleHR1cmVDYWNoZVt0ZXh0dXJlUGF0aF07XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHRleHR1cmVTdG9yZSA9IG5ldyBUZXh0dXJlU3RvcmUoKTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBUZXh0dXJlQ2FjaGVJbmZvXG4gKiBAcHJvcGVydHkge1Byb21pc2UuPFdlYkdMVGV4dHVyZSwgRXJyb3I+fSB0ZXh0dXJlUHJvbWlzZVxuICogQHByb3BlcnR5IHtXZWJHTFRleHR1cmV9IFt0ZXh0dXJlXVxuICogQHByb3BlcnR5IHtIVE1MSW1hZ2VFbGVtZW50fSBbaW1hZ2VdXG4gKi9cbiIsIi8qKlxuICogVGhpcyBjbGFzcyBzdG9yZXMgYSBmdW5jdGlvbiBmb3Igc2V0dGluZyBhIHZhbHVlIHRvIGEgV2ViR0wgdW5pZm9ybSB2YXJpYWJsZS5cbiAqXG4gKiBUaGlzIGlzIGludGVuZGVkIGZvciB1c2UgYXMgYSBoZWxwZXIgZm9yIHRoZSBQcm9ncmFtV3JhcHBlciBjbGFzcy5cbiAqL1xuLy8gVE9ETzogV3JpdGUgdGVzdHMgZm9yIHRoaXMgY2xhc3MuXG5jbGFzcyBVbmlmb3JtU2V0dGVyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbFxuICAgKiBAcGFyYW0ge1dlYkdMUHJvZ3JhbX0gcHJvZ3JhbVxuICAgKiBAcGFyYW0ge1dlYkdMQWN0aXZlSW5mb30gdW5pZm9ybUluZm9cbiAgICogQHBhcmFtIHtQcm9ncmFtV3JhcHBlcn0gcHJvZ3JhbVdyYXBwZXJcbiAgICogQHRocm93cyBJZiB0aGUgZ2l2ZW4gdW5pZm9ybUluZm8gc3BlY2lmaWVzIGFuIHVuZXhwZWN0ZWQgdW5pZm9ybS12YWx1ZSB0eXBlLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZ2wsIHByb2dyYW0sIHVuaWZvcm1JbmZvLCBwcm9ncmFtV3JhcHBlcikge1xuICAgIHRoaXMuX2xvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sIHVuaWZvcm1JbmZvLm5hbWUpO1xuICAgIHRoaXMuX3NldHRlciA9IHRoaXMuX2dldFNldHRlcihnbCwgdW5pZm9ybUluZm8sIHByb2dyYW1XcmFwcGVyKTtcblxuICAgIC8vIFRPRE86IEZyZWV6ZSB0aGlzIG9iamVjdCBhZnRlciBpbml0aWFsaXppbmdcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1VuaWZvcm1EYXRhfSB1bmlmb3JtVmFsdWVcbiAgICovXG4gIHNldFVuaWZvcm0odW5pZm9ybVZhbHVlKSB7XG4gICAgdW5pZm9ybVZhbHVlID0gdW5pZm9ybVZhbHVlIGluc3RhbmNlb2YgQXJyYXkgPyBuZXcgRmxvYXQzMkFycmF5KHVuaWZvcm1WYWx1ZSkgOiB1bmlmb3JtVmFsdWU7XG4gICAgdGhpcy5fc2V0dGVyKHVuaWZvcm1WYWx1ZSk7XG4gIH1cblxuICAvKiogQHJldHVybnMge1dlYkdMVW5pZm9ybUxvY2F0aW9ufSAqL1xuICBnZXQgbG9jYXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xvY2F0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbFxuICAgKiBAcGFyYW0ge1dlYkdMQWN0aXZlSW5mb30gdW5pZm9ybUluZm9cbiAgICogQHBhcmFtIHtQcm9ncmFtV3JhcHBlcn0gcHJvZ3JhbVdyYXBwZXJcbiAgICogQHJldHVybnMge0Z1bmN0aW9uLjwqPn1cbiAgICogQHRocm93cyBJZiB0aGUgZ2l2ZW4gdW5pZm9ybUluZm8gc3BlY2lmaWVzIGFuIHVuZXhwZWN0ZWQgdW5pZm9ybS12YWx1ZSB0eXBlLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldFNldHRlcihnbCwgdW5pZm9ybUluZm8sIHByb2dyYW1XcmFwcGVyKSB7XG4gICAgY29uc3QgaXNBcnJheSA9IHVuaWZvcm1JbmZvLnNpemUgPiAxICYmIHVuaWZvcm1JbmZvLm5hbWUuc3Vic3RyKC0zKSA9PT0gJ1swXSc7XG4gICAgY29uc3Qgc2V0dGVyTWFwID0gaXNBcnJheSA/IHtcbiAgICAgIFtnbC5GTE9BVF06IHZhbHVlID0+IGdsLnVuaWZvcm0xZnYodGhpcy5fbG9jYXRpb24sIHZhbHVlKSxcbiAgICAgIFtnbC5JTlRdOiB2YWx1ZSA9PiBnbC51bmlmb3JtMWl2KHRoaXMuX2xvY2F0aW9uLCB2YWx1ZSksXG4gICAgICBbZ2wuU0FNUExFUl8yRF06IHRoaXMuX2dldFVuaWZvcm1UZXh0dXJlQXJyYXlTZXR0ZXIoZ2wsIGdsLlRFWFRVUkVfMkQsIHVuaWZvcm1JbmZvLnNpemUsXG4gICAgICAgICAgcHJvZ3JhbVdyYXBwZXIpLFxuICAgICAgW2dsLlNBTVBMRVJfQ1VCRV06IHRoaXMuX2dldFVuaWZvcm1UZXh0dXJlQXJyYXlTZXR0ZXIoZ2wsIGdsLlRFWFRVUkVfQ1VCRV9NQVAsXG4gICAgICAgICAgdW5pZm9ybUluZm8uc2l6ZSwgcHJvZ3JhbVdyYXBwZXIpLFxuICAgIH0gOiB7XG4gICAgICBbZ2wuRkxPQVRdOiB2YWx1ZSA9PiBnbC51bmlmb3JtMWYodGhpcy5fbG9jYXRpb24sIHZhbHVlKSxcbiAgICAgIFtnbC5GTE9BVF9WRUMyXTogdmFsdWUgPT4gZ2wudW5pZm9ybTJmdih0aGlzLl9sb2NhdGlvbiwgdmFsdWUpLFxuICAgICAgW2dsLkZMT0FUX1ZFQzNdOiB2YWx1ZSA9PiBnbC51bmlmb3JtM2Z2KHRoaXMuX2xvY2F0aW9uLCB2YWx1ZSksXG4gICAgICBbZ2wuRkxPQVRfVkVDNF06IHZhbHVlID0+IGdsLnVuaWZvcm00ZnYodGhpcy5fbG9jYXRpb24sIHZhbHVlKSxcbiAgICAgIFtnbC5JTlRdOiB2YWx1ZSA9PiBnbC51bmlmb3JtMWkodGhpcy5fbG9jYXRpb24sIHZhbHVlKSxcbiAgICAgIFtnbC5JTlRfVkVDMl06IHZhbHVlID0+IGdsLnVuaWZvcm0yaXYodGhpcy5fbG9jYXRpb24sIHZhbHVlKSxcbiAgICAgIFtnbC5JTlRfVkVDM106IHZhbHVlID0+IGdsLnVuaWZvcm0zaXYodGhpcy5fbG9jYXRpb24sIHZhbHVlKSxcbiAgICAgIFtnbC5JTlRfVkVDNF06IHZhbHVlID0+IGdsLnVuaWZvcm00aXYodGhpcy5fbG9jYXRpb24sIHZhbHVlKSxcbiAgICAgIFtnbC5CT09MXTogdmFsdWUgPT4gZ2wudW5pZm9ybTFpKHRoaXMuX2xvY2F0aW9uLCB2YWx1ZSksXG4gICAgICBbZ2wuQk9PTF9WRUMyXTogdmFsdWUgPT4gZ2wudW5pZm9ybTJpdih0aGlzLl9sb2NhdGlvbiwgdmFsdWUpLFxuICAgICAgW2dsLkJPT0xfVkVDM106IHZhbHVlID0+IGdsLnVuaWZvcm0zaXYodGhpcy5fbG9jYXRpb24sIHZhbHVlKSxcbiAgICAgIFtnbC5CT09MX1ZFQzRdOiB2YWx1ZSA9PiBnbC51bmlmb3JtNGl2KHRoaXMuX2xvY2F0aW9uLCB2YWx1ZSksXG4gICAgICBbZ2wuRkxPQVRfTUFUMl06IHZhbHVlID0+IGdsLnVuaWZvcm1NYXRyaXgyZnYodGhpcy5fbG9jYXRpb24sIGZhbHNlLCB2YWx1ZSksXG4gICAgICBbZ2wuRkxPQVRfTUFUM106IHZhbHVlID0+IGdsLnVuaWZvcm1NYXRyaXgzZnYodGhpcy5fbG9jYXRpb24sIGZhbHNlLCB2YWx1ZSksXG4gICAgICBbZ2wuRkxPQVRfTUFUNF06IHZhbHVlID0+IGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fbG9jYXRpb24sIGZhbHNlLCB2YWx1ZSksXG4gICAgICBbZ2wuU0FNUExFUl8yRF06IHRoaXMuX2dldFVuaWZvcm1UZXh0dXJlU2V0dGVyKGdsLCBnbC5URVhUVVJFXzJELFxuICAgICAgICAgIHByb2dyYW1XcmFwcGVyLmJhc2VUZXh0dXJlVW5pdEluZGV4KyspLFxuICAgICAgW2dsLlNBTVBMRVJfQ1VCRV06IHRoaXMuX2dldFVuaWZvcm1UZXh0dXJlU2V0dGVyKGdsLCBnbC5URVhUVVJFX0NVQkVfTUFQLFxuICAgICAgICAgIHByb2dyYW1XcmFwcGVyLmJhc2VUZXh0dXJlVW5pdEluZGV4KyspLFxuICAgIH07XG4gICAgcmV0dXJuIHNldHRlck1hcFt1bmlmb3JtSW5mby50eXBlXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2xcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRhcmdldCBBbiBlbnVtIGRlc2NyaWJpbmcgdGhlIHR5cGUgb2YgdGhpcyBidWZmZXI7IG9uZSBvZjpcbiAgICogICAtIGdsLlRFWFRVUkVfMkQsXG4gICAqICAgLSBnbC5URVhUVVJFX0NVQkVfTUFQLlxuICAgKiBAcGFyYW0ge251bWJlcn0gdW5pZm9ybVNpemVcbiAgICogQHBhcmFtIHtQcm9ncmFtV3JhcHBlcn0gcHJvZ3JhbVdyYXBwZXJcbiAgICogQHJldHVybnMge0Z1bmN0aW9uLjwqPn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9nZXRVbmlmb3JtVGV4dHVyZUFycmF5U2V0dGVyKGdsLCB0YXJnZXQsIHVuaWZvcm1TaXplLCBwcm9ncmFtV3JhcHBlcikge1xuICAgIGNvbnN0IHRleHR1cmVVbml0SW5kaWNlcyA9XG4gICAgICAgIEFycmF5LmZyb20oe2xlbmd0aDogdW5pZm9ybVNpemV9LCBfID0+IHByb2dyYW1XcmFwcGVyLmJhc2VUZXh0dXJlVW5pdEluZGV4KyspO1xuXG4gICAgcmV0dXJuIHRleHR1cmVzID0+IHtcbiAgICAgIHRleHR1cmVzLmZvckVhY2goKHRleHR1cmUsIGluZGV4KSA9PiB7XG4gICAgICAgIGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTAgKyB0ZXh0dXJlVW5pdEluZGljZXNbaW5kZXhdKTtcbiAgICAgICAgZ2wuYmluZFRleHR1cmUodGFyZ2V0LCB0ZXh0dXJlKTtcbiAgICAgIH0pO1xuICAgICAgZ2wudW5pZm9ybTFpdih0aGlzLl9sb2NhdGlvbiwgdGV4dHVyZVVuaXRJbmRpY2VzKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbFxuICAgKiBAcGFyYW0ge251bWJlcn0gdGFyZ2V0IEFuIGVudW0gZGVzY3JpYmluZyB0aGUgdHlwZSBvZiB0aGlzIGJ1ZmZlcjsgb25lIG9mOlxuICAgKiAgIC0gZ2wuVEVYVFVSRV8yRCxcbiAgICogICAtIGdsLlRFWFRVUkVfQ1VCRV9NQVAuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0ZXh0dXJlVW5pdEluZGV4XG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbi48Kj59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0VW5pZm9ybVRleHR1cmVTZXR0ZXIoZ2wsIHRhcmdldCwgdGV4dHVyZVVuaXRJbmRleCkge1xuICAgIHJldHVybiB0ZXh0dXJlID0+IHtcbiAgICAgIGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTAgKyB0ZXh0dXJlVW5pdEluZGV4KTtcbiAgICAgIGdsLmJpbmRUZXh0dXJlKHRhcmdldCwgdGV4dHVyZSk7XG4gICAgICBnbC51bmlmb3JtMWkodGhpcy5fbG9jYXRpb24sIHRleHR1cmVVbml0SW5kZXgpO1xuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IHtVbmlmb3JtU2V0dGVyfTtcbiIsImltcG9ydCB7cmVuZGVyYWJsZVNoYXBlRmFjdG9yeX0gZnJvbSAnLi9zcmMvcmVuZGVyYWJsZS1zaGFwZS1mYWN0b3J5JztcblxuaW1wb3J0IHtjYXBzdWxlUmVuZGVyYWJsZVNoYXBlRmFjdG9yeX0gZnJvbSAnLi9zcmMvc2hhcGUtY29uZmlncy9jYXBzdWxlLXJlbmRlcmFibGUtc2hhcGUnO1xuaW1wb3J0IHtjdWJlUmVuZGVyYWJsZVNoYXBlRmFjdG9yeX0gZnJvbSAnLi9zcmMvc2hhcGUtY29uZmlncy9jdWJlLXJlbmRlcmFibGUtc2hhcGUnO1xuaW1wb3J0IHtpY29zYWhlZHJvblJlbmRlcmFibGVTaGFwZUZhY3Rvcnl9IGZyb20gJy4vc3JjL3NoYXBlLWNvbmZpZ3MvaWNvc2FoZWRyb24tcmVuZGVyYWJsZS1zaGFwZSc7XG5pbXBvcnQge2ljb3NwaGVyZVJlbmRlcmFibGVTaGFwZUZhY3Rvcnl9IGZyb20gJy4vc3JjL3NoYXBlLWNvbmZpZ3MvaWNvc3BoZXJlLXJlbmRlcmFibGUtc2hhcGUnO1xuaW1wb3J0IHtsYXRMb25nU3BoZXJlUmVuZGVyYWJsZVNoYXBlRmFjdG9yeX0gZnJvbSAnLi9zcmMvc2hhcGUtY29uZmlncy9sYXQtbG9uZy1zcGhlcmUtcmVuZGVyYWJsZS1zaGFwZSc7XG5pbXBvcnQge3RldHJhaGVkcm9uUmVuZGVyYWJsZVNoYXBlRmFjdG9yeX0gZnJvbSAnLi9zcmMvc2hhcGUtY29uZmlncy90ZXRyYWhlZHJvbi1yZW5kZXJhYmxlLXNoYXBlJztcblxuW1xuICBjYXBzdWxlUmVuZGVyYWJsZVNoYXBlRmFjdG9yeSxcbiAgY3ViZVJlbmRlcmFibGVTaGFwZUZhY3RvcnksXG4gIGljb3NhaGVkcm9uUmVuZGVyYWJsZVNoYXBlRmFjdG9yeSxcbiAgaWNvc3BoZXJlUmVuZGVyYWJsZVNoYXBlRmFjdG9yeSxcbiAgbGF0TG9uZ1NwaGVyZVJlbmRlcmFibGVTaGFwZUZhY3RvcnksXG4gIHRldHJhaGVkcm9uUmVuZGVyYWJsZVNoYXBlRmFjdG9yeVxuXS5mb3JFYWNoKHJlbmRlcmFibGVTaGFwZUZhY3RvcnkucmVnaXN0ZXJSZW5kZXJhYmxlU2hhcGVGYWN0b3J5KTtcblxuZXhwb3J0ICogZnJvbSAnLi9zcmMvc2hhcGUtY29uZmlncy9jYXBzdWxlLXJlbmRlcmFibGUtc2hhcGUnO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvc2hhcGUtY29uZmlncy9jdWJlLXJlbmRlcmFibGUtc2hhcGUnO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvc2hhcGUtY29uZmlncy9pY29zYWhlZHJvbi1yZW5kZXJhYmxlLXNoYXBlJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL3NoYXBlLWNvbmZpZ3MvaWNvc3BoZXJlLXJlbmRlcmFibGUtc2hhcGUnO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvc2hhcGUtY29uZmlncy9sYXQtbG9uZy1zcGhlcmUtcmVuZGVyYWJsZS1zaGFwZSc7XG5leHBvcnQgKiBmcm9tICcuL3NyYy9zaGFwZS1jb25maWdzL3RldHJhaGVkcm9uLXJlbmRlcmFibGUtc2hhcGUnO1xuXG5leHBvcnQgKiBmcm9tICcuL3NyYy9yZW5kZXJhYmxlLXNoYXBlLWZhY3RvcnknO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvcmVuZGVyYWJsZS1zaGFwZS1zdG9yZSc7XG4iLCJpbXBvcnQge0RlZmF1bHRNb2RlbH0gZnJvbSAnLi4vLi4vbW9kZWxzJztcbmltcG9ydCB7cmVuZGVyYWJsZVNoYXBlU3RvcmV9IGZyb20gJy4vcmVuZGVyYWJsZS1zaGFwZS1zdG9yZSc7XG5cbi8qKlxuICogVGhpcyBtb2R1bGUgZGVmaW5lcyBhIGZhY3RvcnkgZm9yIERlZmF1bHRSaWdpZE1vZGFsIGluc3RhbmNlcyB0aGF0IGFyZSBiYXNlZCBvbiB0aGUgdmFyaW91c1xuICogcHJlLWRlZmluZWQgcmVuZGVyYWJsZSBzaGFwZXMgaW4gdGhpcyBkaXJlY3RvcnkuXG4gKi9cblxuY29uc3QgcmVuZGVyYWJsZVNoYXBlRmFjdG9yeSA9IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbFxuICAgKiBAcGFyYW0ge1JlbmRlcmFibGVTaGFwZUNvbmZpZ30gcGFyYW1zXG4gICAqIEByZXR1cm5zIHtEZWZhdWx0TW9kZWx9XG4gICAqL1xuICBjcmVhdGVNb2RlbDogKGdsLCBwYXJhbXMpID0+IHtcbiAgICBjb25zdCBzaGFwZUNvbmZpZyA9IHJlbmRlcmFibGVTaGFwZUZhY3RvcnkuZ2V0UmVuZGVyYWJsZVNoYXBlKHBhcmFtcyk7XG4gICAgcmV0dXJuIG5ldyBEZWZhdWx0TW9kZWwoZ2wsIHNoYXBlQ29uZmlnKTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtSZW5kZXJhYmxlU2hhcGVDb25maWd9IHBhcmFtc1xuICAgKiBAcmV0dXJucyB7UmVuZGVyYWJsZVNoYXBlfVxuICAgKi9cbiAgZ2V0UmVuZGVyYWJsZVNoYXBlOiBwYXJhbXMgPT4ge1xuICAgIHBhcmFtcy5pc1VzaW5nU3BoZXJpY2FsTm9ybWFscyA9IHBhcmFtcy5pc1VzaW5nU3BoZXJpY2FsTm9ybWFscyB8fCBmYWxzZTtcbiAgICBwYXJhbXMuZGl2aXNpb25zQ291bnQgPSB0eXBlb2YgcGFyYW1zLmRpdmlzaW9uc0NvdW50ID09PSAnbnVtYmVyJyA/IHBhcmFtcy5kaXZpc2lvbnNDb3VudCA6IDA7XG5cbiAgICBsZXQgc2hhcGVDb25maWcgPSByZW5kZXJhYmxlU2hhcGVTdG9yZS5nZXRTaGFwZShwYXJhbXMpO1xuICAgIGlmICghc2hhcGVDb25maWcpIHtcbiAgICAgIHNoYXBlQ29uZmlnID0gX3NoYXBlSWRzVG9SZW5kZXJhYmxlU2hhcGVGYWN0b3JpZXNbcGFyYW1zLnNoYXBlSWRdLmdldFJlbmRlcmFibGVTaGFwZShwYXJhbXMpO1xuICAgICAgX3VwZGF0ZVRleHR1cmVDb29yZGluYXRlc1NwYW4oc2hhcGVDb25maWcsIHBhcmFtcy50ZXh0dXJlU3Bhbik7XG4gICAgICByZW5kZXJhYmxlU2hhcGVTdG9yZS5yZWdpc3RlclNoYXBlKHNoYXBlQ29uZmlnLCBwYXJhbXMpO1xuICAgIH1cbiAgICByZXR1cm4gc2hhcGVDb25maWc7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UmVuZGVyYWJsZVNoYXBlRmFjdG9yeX0gc2hhcGVDb25maWdGYWN0b3J5XG4gICAqL1xuICByZWdpc3RlclJlbmRlcmFibGVTaGFwZUZhY3Rvcnk6IHNoYXBlQ29uZmlnRmFjdG9yeSA9PiB7XG4gICAgX3NoYXBlSWRzVG9SZW5kZXJhYmxlU2hhcGVGYWN0b3JpZXNbc2hhcGVDb25maWdGYWN0b3J5LnNoYXBlSWRdID0gc2hhcGVDb25maWdGYWN0b3J5O1xuICAgIHJlbmRlcmFibGVTaGFwZVN0b3JlLnJlZ2lzdGVyUmVuZGVyYWJsZVNoYXBlRmFjdG9yeShzaGFwZUNvbmZpZ0ZhY3RvcnkpO1xuICB9XG59O1xuXG5jb25zdCBfc2hhcGVJZHNUb1JlbmRlcmFibGVTaGFwZUZhY3RvcmllcyA9IHt9O1xuXG4vKipcbiAqIEBwYXJhbSB7UmVuZGVyYWJsZVNoYXBlfSBzaGFwZUNvbmZpZ1xuICogQHBhcmFtIHtUZXh0dXJlU3Bhbn0gdGV4dHVyZVNwYW5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF91cGRhdGVUZXh0dXJlQ29vcmRpbmF0ZXNTcGFuKHNoYXBlQ29uZmlnLCB0ZXh0dXJlU3Bhbikge1xuICBpZiAoIXRleHR1cmVTcGFuKSByZXR1cm47XG5cbiAgY29uc3QgbWluWCA9IHRleHR1cmVTcGFuLm1pblg7XG4gIGNvbnN0IG1pblkgPSB0ZXh0dXJlU3Bhbi5taW5ZO1xuICBjb25zdCByYW5nZVggPSB0ZXh0dXJlU3Bhbi5tYXhYIC0gdGV4dHVyZVNwYW4ubWluWDtcbiAgY29uc3QgcmFuZ2VZID0gdGV4dHVyZVNwYW4ubWF4WSAtIHRleHR1cmVTcGFuLm1pblk7XG5cbiAgY29uc3QgdGV4dHVyZUNvb3JkaW5hdGVzID0gc2hhcGVDb25maWcudGV4dHVyZUNvb3JkaW5hdGVzLnNsaWNlKCk7XG4gIHNoYXBlQ29uZmlnLnRleHR1cmVDb29yZGluYXRlcyA9IHRleHR1cmVDb29yZGluYXRlcztcblxuICBmb3IgKGxldCBpID0gMCwgY291bnQgPSB0ZXh0dXJlQ29vcmRpbmF0ZXMubGVuZ3RoOyBpIDwgY291bnQ7IGkgKz0gMikge1xuICAgIHRleHR1cmVDb29yZGluYXRlc1tpXSA9IG1pblggKyByYW5nZVggKiB0ZXh0dXJlQ29vcmRpbmF0ZXNbaV07XG4gICAgdGV4dHVyZUNvb3JkaW5hdGVzW2kgKyAxXSA9IG1pblkgKyByYW5nZVkgKiB0ZXh0dXJlQ29vcmRpbmF0ZXNbaSArIDFdO1xuICB9XG59XG5cbmV4cG9ydCB7cmVuZGVyYWJsZVNoYXBlRmFjdG9yeX07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUmVuZGVyYWJsZVNoYXBlRmFjdG9yeVxuICogQHByb3BlcnR5IHtzdHJpbmd9IHNoYXBlSWRcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb24uPFJlbmRlcmFibGVTaGFwZT59IGdldFJlbmRlcmFibGVTaGFwZVxuICogQHByb3BlcnR5IHtGdW5jdGlvbi48U3RyaW5nPn0gZ2V0Q2FjaGVJZFxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUmVuZGVyYWJsZVNoYXBlXG4gKiBAcHJvcGVydHkge0FycmF5LjxOdW1iZXI+fSB2ZXJ0ZXhQb3NpdGlvbnNcbiAqIEBwcm9wZXJ0eSB7QXJyYXkuPE51bWJlcj59IHZlcnRleE5vcm1hbHNcbiAqIEBwcm9wZXJ0eSB7QXJyYXkuPE51bWJlcj59IHRleHR1cmVDb29yZGluYXRlc1xuICogQHByb3BlcnR5IHtBcnJheS48TnVtYmVyPn0gW3ZlcnRleEluZGljZXNdXG4gKiBAcHJvcGVydHkge251bWJlcn0gZWxlbWVudENvdW50XG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBUZXh0dXJlU3BhblxuICogQHByb3BlcnR5IHtudW1iZXJ9IG1pblhcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBtaW5ZXG4gKiBAcHJvcGVydHkge251bWJlcn0gbWF4WFxuICogQHByb3BlcnR5IHtudW1iZXJ9IG1heFlcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFJlbmRlcmFibGVTaGFwZUNvbmZpZ1xuICogQHByb3BlcnR5IHtzdHJpbmd9IHNoYXBlSWQgVGhlIElEIG9mIHRoZSB0eXBlIG9mIHJlbmRlcmFibGUgc2hhcGUuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtpc1VzaW5nU3BoZXJpY2FsTm9ybWFscz1mYWxzZV0gV2hldGhlciBsaWdodCByZWZsZWN0aW9ucyBzaG91bGQgc2hvdyBzaGFycFxuICogZWRnZXMuXG4gKiBAcHJvcGVydHkge1RleHR1cmVTcGFufSBbdGV4dHVyZVNwYW5dIEZvciBpbmRpY2F0aW5nIGhvdyBtdWNoIGEgdGV4dHVyZSBzaG91bGQgcmVwZWF0IGluIGJvdGggYXhlcy5cbiAqIEEgcmFuZ2Ugb2YgMC0wLjUgc2hvdWxkIHNob3cgaGFsZiB0aGUgdGV4dHVyZS4gQSByYW5nZSBvZiAwLTIgd291bGQgc2hvdyB0aGUgdGV4dHVyZSB0d2ljZS4gVGhlXG4gKiBkZWZhdWx0IGlzIDAtMSBpbiBib3RoIGRpcmVjdGlvbnMuXG4gKiBAcHJvcGVydHkge3ZlYzN9IFtzY2FsZV1cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtSZW5kZXJhYmxlU2hhcGVDb25maWd9IFNwaGVyaWNhbFJlbmRlcmFibGVTaGFwZVBhcmFtc1xuICogQHByb3BlcnR5IHtudW1iZXJ9IGRpdmlzaW9uc0NvdW50IEhvdyBtYW55IHRpbWVzIHRvIHN1Yi1kaXZpZGUgdGhlIHNwaGVyZS5cbiAqL1xuIiwiLyoqXG4gKiBUaGlzIGNsYXNzIGNhY2hlcyByZW5kZXJhYmxlIHNoYXBlIGRhdGEuXG4gKi9cbmNsYXNzIFJlbmRlcmFibGVTaGFwZVN0b3JlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fc2hhcGVDYWNoZSA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1JlbmRlcmFibGVTaGFwZUNvbmZpZ30gcGFyYW1zXG4gICAqIEByZXR1cm5zIHtSZW5kZXJhYmxlU2hhcGV9XG4gICAqL1xuICBnZXRTaGFwZShwYXJhbXMpIHtcbiAgICBjb25zdCBrZXkgPSBfc2hhcGVJZHNUb0NhY2hlS2V5Q2FsY3VsYXRvcnNbcGFyYW1zLnNoYXBlSWRdKHBhcmFtcyk7XG4gICAgcmV0dXJuIHRoaXMuX3NoYXBlQ2FjaGUuZ2V0KGtleSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FjaGVzIHRoZSBnaXZlbiBzaGFwZSBpbmZvLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlbmRlcmFibGVTaGFwZX0gc2hhcGVDb25maWdcbiAgICogQHBhcmFtIHtSZW5kZXJhYmxlU2hhcGVDb25maWd9IHBhcmFtc1xuICAgKi9cbiAgcmVnaXN0ZXJTaGFwZShzaGFwZUNvbmZpZywgcGFyYW1zKSB7XG4gICAgY29uc3Qga2V5ID0gX3NoYXBlSWRzVG9DYWNoZUtleUNhbGN1bGF0b3JzW3BhcmFtcy5zaGFwZUlkXShwYXJhbXMpO1xuICAgIHRoaXMuX3NoYXBlQ2FjaGUuc2V0KGtleSwgc2hhcGVDb25maWcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UmVuZGVyYWJsZVNoYXBlRmFjdG9yeX0gc2hhcGVDb25maWdGYWN0b3J5XG4gICAqL1xuICByZWdpc3RlclJlbmRlcmFibGVTaGFwZUZhY3Rvcnkoc2hhcGVDb25maWdGYWN0b3J5KSB7XG4gICAgX3NoYXBlSWRzVG9DYWNoZUtleUNhbGN1bGF0b3JzW3NoYXBlQ29uZmlnRmFjdG9yeS5zaGFwZUlkXSA9IHNoYXBlQ29uZmlnRmFjdG9yeS5nZXRDYWNoZUlkO1xuICB9XG5cbiAgLy8gVE9ETzogQWRkIHN1cHBvcnQgZm9yIHVuLXJlZ2lzdGVyaW5nIHNoYXBlcy5cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1JlbmRlcmFibGVTaGFwZUNvbmZpZ30gcGFyYW1zXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXRDYWNoZUtleShwYXJhbXMpIHtcbiAgY29uc3QgdGV4dHVyZVNwYW5TdHIgPSBwYXJhbXMudGV4dHVyZVNwYW5cbiAgICAgID8gYDoke3BhcmFtcy50ZXh0dXJlU3Bhbi5taW5YfSwke3BhcmFtcy50ZXh0dXJlU3Bhbi5taW5ZfSwke3BhcmFtcy50ZXh0dXJlU3Bhbi5tYXhYfSxgICtcbiAgYCR7cGFyYW1zLnRleHR1cmVTcGFuLm1heFl9YFxuICAgICAgOiAnJztcblxuICByZXR1cm4gYCR7cGFyYW1zLnNoYXBlSWR9OiR7cGFyYW1zLmlzVXNpbmdTcGhlcmljYWxOb3JtYWxzfSR7dGV4dHVyZVNwYW5TdHJ9YDtcbn1cblxuY29uc3QgX3NoYXBlSWRzVG9DYWNoZUtleUNhbGN1bGF0b3JzID0ge307XG5cbmNvbnN0IHJlbmRlcmFibGVTaGFwZVN0b3JlID0gbmV3IFJlbmRlcmFibGVTaGFwZVN0b3JlKCk7XG5leHBvcnQge3JlbmRlcmFibGVTaGFwZVN0b3JlLCBnZXRDYWNoZUtleX07XG4iLCIvKipcbiAqIFRoaXMgbW9kdWxlIGRlZmluZXMgYSBjb25maWd1cmF0aW9uIGZhY3RvcnkgZm9yIGEgY2Fwc3VsZSBzaGFwZS5cbiAqXG4gKiBUaGUgc2hhcGUgaXMgY2VudGVyZWQgYXJvdW5kIHRoZSBvcmlnaW4gd2l0aCB0aGUgcG9sZXMgYWxpZ25lZCB3aXRoIHRoZSB6LWF4aXMuXG4gKi9cblxuaW1wb3J0IHtcbiAgY2FsY3VsYXRlU3BoZXJpY2FsU2VjdGlvbixcbiAgY2FsY3VsYXRlT3J0aG9nb25hbFZlcnRleE5vcm1hbHMsXG4gIGRlZHVwVmVydGV4QXJyYXlXaXRoUG9zaXRpb25zQW5kSW5kaWNlc0FycmF5cyxcbiAgY2FsY3VsYXRlTGF0TG9uZ1RleHR1cmVDb29yZGluYXRlcyxcbiAgY2FsY3VsYXRlQ3lsaW5kcmljYWxTZWN0aW9uLFxuICBjYWxjdWxhdGVDeWxpbmRyaWNhbFRleHR1cmVDb29yZGluYXRlcyxcbiAgVFdPX1BJLFxufSBmcm9tICcuLi8uLi8uLi91dGlsJztcbmltcG9ydCB7Z2V0Q2FjaGVLZXl9IGZyb20gJy4uL3JlbmRlcmFibGUtc2hhcGUtc3RvcmUnO1xuXG4vLyBUT0RPOiBPbmNlIEkgaGF2ZSBhIGJldHRlciBjYW1lcmEgaW4gcGxhY2UsIHRlc3QgdGhhdCB0aGVzZSB0ZXh0dXJlIGNvb3JkaW5hdGUgY2FsY3VsYXRpb25zIGFyZVxuLy8gY29ycmVjdC5cblxuLyoqXG4gKiBAcGFyYW0ge0NhcHN1bGVSZW5kZXJhYmxlU2hhcGVQYXJhbXN9IHBhcmFtc1xuICogQHJldHVybnMge1JlbmRlcmFibGVTaGFwZX1cbiAqL1xuZnVuY3Rpb24gX2NhbGN1bGF0ZUNhcHN1bGVUb3BTaGFwZShwYXJhbXMpIHtcbiAgLy8gQ2FsY3VsYXRlIHRoZSBwb3NpdGlvbnMuXG4gIC8vIFRPRE86IFRoaXMgdXNlcyBsYXQtbG9uZyBzcGhlcmVzIGZvciB0aGUgZW5kcyBvZiB0aGUgY2Fwc3VsZS4gVXNlIGljb3NwaGVyZXMgaW5zdGVhZC5cbiAgY29uc3QgaW5kaXZpZHVhbFZlcnRleFBvc2l0aW9ucyA9IGNhbGN1bGF0ZVNwaGVyaWNhbFNlY3Rpb24oXG4gICAgICAwLCBwYXJhbXMuZGl2aXNpb25zQ291bnQgLyAyLCBNYXRoLlBJIC8gcGFyYW1zLmRpdmlzaW9uc0NvdW50LFxuICAgICAgMCwgcGFyYW1zLmRpdmlzaW9uc0NvdW50LCBUV09fUEkgLyBwYXJhbXMuZGl2aXNpb25zQ291bnQpO1xuXG4gIC8vIENhbGN1bGF0ZSB0aGUgaW5kaWNlcyBhbmQgbm9ybWFscy5cbiAgbGV0IHZlcnRleFBvc2l0aW9ucztcbiAgbGV0IHZlcnRleEluZGljZXM7XG4gIGxldCB2ZXJ0ZXhOb3JtYWxzO1xuICBpZiAoIXBhcmFtcy5pc1VzaW5nU3BoZXJpY2FsTm9ybWFscykge1xuICAgIC8vIElmIHdlIHVzZSBvcnRob2dvbmFsIG5vcm1hbHMsIHRoZW4gd2UgY2Fubm90IHVzZSB2ZXJ0ZXhJbmRpY2VzLlxuICAgIHZlcnRleFBvc2l0aW9ucyA9IGluZGl2aWR1YWxWZXJ0ZXhQb3NpdGlvbnM7XG4gICAgdmVydGV4SW5kaWNlcyA9IG51bGw7XG4gICAgdmVydGV4Tm9ybWFscyA9IGNhbGN1bGF0ZU9ydGhvZ29uYWxWZXJ0ZXhOb3JtYWxzKHZlcnRleFBvc2l0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgKHt2ZXJ0ZXhQb3NpdGlvbnMsIHZlcnRleEluZGljZXN9ID0gZGVkdXBWZXJ0ZXhBcnJheVdpdGhQb3NpdGlvbnNBbmRJbmRpY2VzQXJyYXlzKFxuICAgICAgICBpbmRpdmlkdWFsVmVydGV4UG9zaXRpb25zKSk7XG4gICAgdmVydGV4Tm9ybWFscyA9IHZlcnRleFBvc2l0aW9ucztcbiAgfVxuXG4gIGNvbnN0IHRleHR1cmVDb29yZGluYXRlcyA9IGNhbGN1bGF0ZUxhdExvbmdUZXh0dXJlQ29vcmRpbmF0ZXModmVydGV4UG9zaXRpb25zKTtcblxuICBsZXQgc2NhbGU7XG4gIGxldCB0cmFuc2xhdGlvbjtcblxuICAvLyBTY2FsZSBhbmQgdHJhbnNsYXRlIHRoZSBwb3NpdGlvbnMuXG4gIHNjYWxlID0gcGFyYW1zLnJhZGl1cztcbiAgdHJhbnNsYXRpb24gPSBwYXJhbXMuY2Fwc3VsZUVuZFBvaW50c0Rpc3RhbmNlIC8gMjtcbiAgZm9yIChsZXQgaSA9IDAsIGNvdW50ID0gdmVydGV4UG9zaXRpb25zLmxlbmd0aDsgaSA8IGNvdW50OyBpICs9IDMpIHtcbiAgICB2ZXJ0ZXhQb3NpdGlvbnNbaV0gKj0gc2NhbGU7XG4gICAgdmVydGV4UG9zaXRpb25zW2kgKyAxXSAqPSBzY2FsZTtcbiAgICB2ZXJ0ZXhQb3NpdGlvbnNbaSArIDJdID0gdmVydGV4UG9zaXRpb25zW2kgKyAyXSAqIHNjYWxlICsgdHJhbnNsYXRpb247XG4gIH1cblxuICAvLyBTY2FsZSBhbmQgdHJhbnNsYXRlIHRoZSB0ZXh0dXJlIGNvb3JkaW5hdGVzLlxuICBzY2FsZSA9IHBhcmFtcy5yYWRpdXMgLyAocGFyYW1zLnJhZGl1cyArIHBhcmFtcy5jYXBzdWxlRW5kUG9pbnRzRGlzdGFuY2UpO1xuICB0cmFuc2xhdGlvbiA9IDEgLSBzY2FsZTtcbiAgZm9yIChsZXQgaSA9IDEsIGNvdW50ID0gdGV4dHVyZUNvb3JkaW5hdGVzLmxlbmd0aDsgaSA8IGNvdW50OyBpICs9IDIpIHtcbiAgICB0ZXh0dXJlQ29vcmRpbmF0ZXNbaV0gPSB0ZXh0dXJlQ29vcmRpbmF0ZXNbaV0gKiBzY2FsZSArIHRyYW5zbGF0aW9uO1xuICB9XG5cbiAgY29uc3QgZWxlbWVudENvdW50ID0gdmVydGV4SW5kaWNlcyA/IHZlcnRleEluZGljZXMubGVuZ3RoIDogdmVydGV4UG9zaXRpb25zLmxlbmd0aCAvIDM7XG5cbiAgcmV0dXJuIHtcbiAgICB2ZXJ0ZXhQb3NpdGlvbnM6IHZlcnRleFBvc2l0aW9ucyxcbiAgICB2ZXJ0ZXhOb3JtYWxzOiB2ZXJ0ZXhOb3JtYWxzLFxuICAgIHRleHR1cmVDb29yZGluYXRlczogdGV4dHVyZUNvb3JkaW5hdGVzLFxuICAgIHZlcnRleEluZGljZXM6IHZlcnRleEluZGljZXMsXG4gICAgZWxlbWVudENvdW50OiBlbGVtZW50Q291bnRcbiAgfTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0NhcHN1bGVSZW5kZXJhYmxlU2hhcGVQYXJhbXN9IHBhcmFtc1xuICogQHJldHVybnMge1JlbmRlcmFibGVTaGFwZX1cbiAqL1xuZnVuY3Rpb24gX2NhbGN1bGF0ZUNhcHN1bGVCb3R0b21TaGFwZShwYXJhbXMpIHtcbiAgLy8gQ2FsY3VsYXRlIHRoZSBwb3NpdGlvbnMuXG4gIC8vIFRPRE86IFRoaXMgdXNlcyBsYXQtbG9uZyBzcGhlcmVzIGZvciB0aGUgZW5kcyBvZiB0aGUgY2Fwc3VsZS4gVXNlIGljb3NwaGVyZXMgaW5zdGVhZC5cbiAgY29uc3QgaW5kaXZpZHVhbFZlcnRleFBvc2l0aW9ucyA9IGNhbGN1bGF0ZVNwaGVyaWNhbFNlY3Rpb24oXG4gICAgICBwYXJhbXMuZGl2aXNpb25zQ291bnQgLyAyLCBwYXJhbXMuZGl2aXNpb25zQ291bnQsIE1hdGguUEkgLyBwYXJhbXMuZGl2aXNpb25zQ291bnQsXG4gICAgICAwLCBwYXJhbXMuZGl2aXNpb25zQ291bnQsIFRXT19QSSAvIHBhcmFtcy5kaXZpc2lvbnNDb3VudCk7XG5cbiAgLy8gQ2FsY3VsYXRlIHRoZSBpbmRpY2VzIGFuZCBub3JtYWxzLlxuICBsZXQgdmVydGV4UG9zaXRpb25zO1xuICBsZXQgdmVydGV4SW5kaWNlcztcbiAgbGV0IHZlcnRleE5vcm1hbHM7XG4gIGlmICghcGFyYW1zLmlzVXNpbmdTcGhlcmljYWxOb3JtYWxzKSB7XG4gICAgLy8gSWYgd2UgdXNlIG9ydGhvZ29uYWwgbm9ybWFscywgdGhlbiB3ZSBjYW5ub3QgdXNlIHZlcnRleEluZGljZXMuXG4gICAgdmVydGV4UG9zaXRpb25zID0gaW5kaXZpZHVhbFZlcnRleFBvc2l0aW9ucztcbiAgICB2ZXJ0ZXhJbmRpY2VzID0gbnVsbDtcbiAgICB2ZXJ0ZXhOb3JtYWxzID0gY2FsY3VsYXRlT3J0aG9nb25hbFZlcnRleE5vcm1hbHModmVydGV4UG9zaXRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBwb3NpdGlvbnNBbmRJbmRpY2VzID0gZGVkdXBWZXJ0ZXhBcnJheVdpdGhQb3NpdGlvbnNBbmRJbmRpY2VzQXJyYXlzKFxuICAgICAgICBpbmRpdmlkdWFsVmVydGV4UG9zaXRpb25zKTtcbiAgICB2ZXJ0ZXhQb3NpdGlvbnMgPSBwb3NpdGlvbnNBbmRJbmRpY2VzLnZlcnRleFBvc2l0aW9ucztcbiAgICB2ZXJ0ZXhJbmRpY2VzID0gcG9zaXRpb25zQW5kSW5kaWNlcy52ZXJ0ZXhJbmRpY2VzO1xuICAgIHZlcnRleE5vcm1hbHMgPSB2ZXJ0ZXhQb3NpdGlvbnM7XG4gIH1cblxuICBjb25zdCB0ZXh0dXJlQ29vcmRpbmF0ZXMgPSBjYWxjdWxhdGVMYXRMb25nVGV4dHVyZUNvb3JkaW5hdGVzKHZlcnRleFBvc2l0aW9ucyk7XG5cbiAgbGV0IHNjYWxlO1xuICBsZXQgdHJhbnNsYXRpb247XG5cbiAgLy8gU2NhbGUgYW5kIHRyYW5zbGF0ZSB0aGUgcG9zaXRpb25zLlxuICBzY2FsZSA9IHBhcmFtcy5yYWRpdXM7XG4gIHRyYW5zbGF0aW9uID0gLXBhcmFtcy5jYXBzdWxlRW5kUG9pbnRzRGlzdGFuY2UgLyAyO1xuICBmb3IgKGxldCBpID0gMCwgY291bnQgPSB2ZXJ0ZXhQb3NpdGlvbnMubGVuZ3RoOyBpIDwgY291bnQ7IGkgKz0gMykge1xuICAgIHZlcnRleFBvc2l0aW9uc1tpXSAqPSBzY2FsZTtcbiAgICB2ZXJ0ZXhQb3NpdGlvbnNbaSArIDFdICo9IHNjYWxlO1xuICAgIHZlcnRleFBvc2l0aW9uc1tpICsgMl0gPSB2ZXJ0ZXhQb3NpdGlvbnNbaSArIDJdICogc2NhbGUgKyB0cmFuc2xhdGlvbjtcbiAgfVxuXG4gIC8vIFNjYWxlIGFuZCB0cmFuc2xhdGUgdGhlIHRleHR1cmUgY29vcmRpbmF0ZXMuXG4gIHNjYWxlID0gcGFyYW1zLnJhZGl1cyAvIChwYXJhbXMucmFkaXVzICsgcGFyYW1zLmNhcHN1bGVFbmRQb2ludHNEaXN0YW5jZSk7XG4gIHRyYW5zbGF0aW9uID0gMDtcbiAgZm9yIChsZXQgaSA9IDEsIGNvdW50ID0gdGV4dHVyZUNvb3JkaW5hdGVzLmxlbmd0aDsgaSA8IGNvdW50OyBpICs9IDIpIHtcbiAgICB0ZXh0dXJlQ29vcmRpbmF0ZXNbaV0gPSB0ZXh0dXJlQ29vcmRpbmF0ZXNbaV0gKiBzY2FsZSArIHRyYW5zbGF0aW9uO1xuICB9XG5cbiAgY29uc3QgZWxlbWVudENvdW50ID0gdmVydGV4SW5kaWNlcyA/IHZlcnRleEluZGljZXMubGVuZ3RoIDogdmVydGV4UG9zaXRpb25zLmxlbmd0aCAvIDM7XG5cbiAgcmV0dXJuIHtcbiAgICB2ZXJ0ZXhQb3NpdGlvbnM6IHZlcnRleFBvc2l0aW9ucyxcbiAgICB2ZXJ0ZXhOb3JtYWxzOiB2ZXJ0ZXhOb3JtYWxzLFxuICAgIHRleHR1cmVDb29yZGluYXRlczogdGV4dHVyZUNvb3JkaW5hdGVzLFxuICAgIHZlcnRleEluZGljZXM6IHZlcnRleEluZGljZXMsXG4gICAgZWxlbWVudENvdW50OiBlbGVtZW50Q291bnRcbiAgfTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0NhcHN1bGVSZW5kZXJhYmxlU2hhcGVQYXJhbXN9IHBhcmFtc1xuICogQHJldHVybnMge1JlbmRlcmFibGVTaGFwZX1cbiAqL1xuZnVuY3Rpb24gX2NhbGN1bGF0ZUNhcHN1bGVNaWRkbGVTaGFwZShwYXJhbXMpIHtcbiAgbGV0IHNjYWxlO1xuICBsZXQgdHJhbnNsYXRpb247XG5cbiAgLy8gQ2FsY3VsYXRlIHRoZSBwb3NpdGlvbnMuXG4gIHRyYW5zbGF0aW9uID0gcGFyYW1zLmNhcHN1bGVFbmRQb2ludHNEaXN0YW5jZSAvIDI7XG4gIGNvbnN0IGluZGl2aWR1YWxWZXJ0ZXhQb3NpdGlvbnMgPSBjYWxjdWxhdGVDeWxpbmRyaWNhbFNlY3Rpb24oXG4gICAgICAtdHJhbnNsYXRpb24sIHRyYW5zbGF0aW9uLCAwLCBwYXJhbXMuZGl2aXNpb25zQ291bnQsIFRXT19QSSAvIHBhcmFtcy5kaXZpc2lvbnNDb3VudCk7XG5cbiAgbGV0IHZlcnRleFBvc2l0aW9ucztcbiAgbGV0IHZlcnRleEluZGljZXM7XG4gIGxldCB2ZXJ0ZXhOb3JtYWxzO1xuXG4gIC8vIENhbGN1bGF0ZSB0aGUgdmVydGV4IGluZGljZXMgYW5kIG5vcm1hbHMuXG4gIGlmICghcGFyYW1zLmlzVXNpbmdTcGhlcmljYWxOb3JtYWxzKSB7XG4gICAgLy8gSWYgd2UgdXNlIG9ydGhvZ29uYWwgbm9ybWFscywgdGhlbiB3ZSBjYW5ub3QgdXNlIHZlcnRleEluZGljZXMuXG4gICAgdmVydGV4UG9zaXRpb25zID0gaW5kaXZpZHVhbFZlcnRleFBvc2l0aW9ucztcbiAgICB2ZXJ0ZXhJbmRpY2VzID0gbnVsbDtcbiAgICB2ZXJ0ZXhOb3JtYWxzID0gY2FsY3VsYXRlT3J0aG9nb25hbFZlcnRleE5vcm1hbHModmVydGV4UG9zaXRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBwb3NpdGlvbnNBbmRJbmRpY2VzID0gZGVkdXBWZXJ0ZXhBcnJheVdpdGhQb3NpdGlvbnNBbmRJbmRpY2VzQXJyYXlzKFxuICAgICAgICBpbmRpdmlkdWFsVmVydGV4UG9zaXRpb25zKTtcbiAgICB2ZXJ0ZXhQb3NpdGlvbnMgPSBwb3NpdGlvbnNBbmRJbmRpY2VzLnZlcnRleFBvc2l0aW9ucztcbiAgICB2ZXJ0ZXhJbmRpY2VzID0gcG9zaXRpb25zQW5kSW5kaWNlcy52ZXJ0ZXhJbmRpY2VzO1xuXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSB2ZXJ0ZXggbm9ybWFscy5cbiAgICB2ZXJ0ZXhOb3JtYWxzID0gdmVydGV4UG9zaXRpb25zLm1hcCgoY29vcmQsIGluZGV4KSA9PiBpbmRleCAlIDMgPT09IDIgPyAwIDogY29vcmQpO1xuICB9XG5cbiAgLy8gQ2FsY3VsYXRlIHRoZSB0ZXh0dXJlIGNvb3JkaW5hdGVzLlxuICBjb25zdCB0ZXh0dXJlQ29vcmRpbmF0ZXMgPSBjYWxjdWxhdGVDeWxpbmRyaWNhbFRleHR1cmVDb29yZGluYXRlcyh2ZXJ0ZXhQb3NpdGlvbnMpO1xuXG4gIC8vIFNjYWxlIHRoZSB4IGFuZCB5IHBvc2l0aW9uIGNvb3JkaW5hdGVzLlxuICBzY2FsZSA9IHBhcmFtcy5yYWRpdXM7XG4gIGZvciAobGV0IGkgPSAwLCBjb3VudCA9IHZlcnRleFBvc2l0aW9ucy5sZW5ndGg7IGkgPCBjb3VudDsgaSArPSAzKSB7XG4gICAgdmVydGV4UG9zaXRpb25zW2ldICo9IHNjYWxlO1xuICAgIHZlcnRleFBvc2l0aW9uc1tpICsgMV0gKj0gc2NhbGU7XG4gIH1cblxuICAvLyBTY2FsZSBhbmQgdHJhbnNsYXRlIHRoZSB0ZXh0dXJlIGNvb3JkaW5hdGVzLlxuICBzY2FsZSA9IHBhcmFtcy5jYXBzdWxlRW5kUG9pbnRzRGlzdGFuY2UgLyAocGFyYW1zLnJhZGl1cyArIHBhcmFtcy5jYXBzdWxlRW5kUG9pbnRzRGlzdGFuY2UpO1xuICB0cmFuc2xhdGlvbiA9ICgxIC0gc2NhbGUpIC8gMjtcbiAgZm9yIChsZXQgaSA9IDEsIGNvdW50ID0gdGV4dHVyZUNvb3JkaW5hdGVzLmxlbmd0aDsgaSA8IGNvdW50OyBpICs9IDIpIHtcbiAgICB0ZXh0dXJlQ29vcmRpbmF0ZXNbaV0gPSB0ZXh0dXJlQ29vcmRpbmF0ZXNbaV0gKiBzY2FsZSArIHRyYW5zbGF0aW9uO1xuICB9XG5cbiAgY29uc3QgZWxlbWVudENvdW50ID0gdmVydGV4SW5kaWNlcyA/IHZlcnRleEluZGljZXMubGVuZ3RoIDogdmVydGV4UG9zaXRpb25zLmxlbmd0aCAvIDM7XG5cbiAgcmV0dXJuIHtcbiAgICB2ZXJ0ZXhQb3NpdGlvbnM6IHZlcnRleFBvc2l0aW9ucyxcbiAgICB2ZXJ0ZXhOb3JtYWxzOiB2ZXJ0ZXhOb3JtYWxzLFxuICAgIHRleHR1cmVDb29yZGluYXRlczogdGV4dHVyZUNvb3JkaW5hdGVzLFxuICAgIHZlcnRleEluZGljZXM6IHZlcnRleEluZGljZXMsXG4gICAgZWxlbWVudENvdW50OiBlbGVtZW50Q291bnRcbiAgfTtcbn1cblxuY29uc3QgY2Fwc3VsZVJlbmRlcmFibGVTaGFwZUZhY3RvcnkgPSB7XG4gIHNoYXBlSWQ6ICdDQVBTVUxFJyxcblxuICAvKipcbiAgICogQHBhcmFtIHtDYXBzdWxlUmVuZGVyYWJsZVNoYXBlUGFyYW1zfSBwYXJhbXNcbiAgICogQHJldHVybnMge1JlbmRlcmFibGVTaGFwZX1cbiAgICovXG4gIGdldFJlbmRlcmFibGVTaGFwZTogKHBhcmFtcykgPT4ge1xuICAgIC8vIEVuc3VyZSB0aGUgZGl2aXNpb25zIGNvdW50IGlzIGV2ZW4uXG4gICAgaWYgKHBhcmFtcy5kaXZpc2lvbnNDb3VudCAlIDIgPT09IDEpIHtcbiAgICAgIHBhcmFtcy5kaXZpc2lvbnNDb3VudCsrO1xuICAgIH1cblxuICAgIC8vIFRoZSBjYXBzdWxlJ3Mgc3ViLXNoYXBlcy5cbiAgICBjb25zdCB0b3BTaGFwZSA9IF9jYWxjdWxhdGVDYXBzdWxlVG9wU2hhcGUocGFyYW1zKTtcbiAgICBjb25zdCBib3R0b21TaGFwZSA9IF9jYWxjdWxhdGVDYXBzdWxlQm90dG9tU2hhcGUocGFyYW1zKTtcbiAgICBjb25zdCBtaWRkbGVTaGFwZSA9IF9jYWxjdWxhdGVDYXBzdWxlTWlkZGxlU2hhcGUocGFyYW1zKTtcblxuICAgIC8vIENvbmNhdGVuYXRlIHBvc2l0aW9ucywgbm9ybWFscywgdGV4dHVyZSBjb29yZGluYXRlcywgYW5kIGluZGljZXMuXG4gICAgY29uc3QgdmVydGV4UG9zaXRpb25zID0gdG9wU2hhcGUudmVydGV4UG9zaXRpb25zLmNvbmNhdChtaWRkbGVTaGFwZS52ZXJ0ZXhQb3NpdGlvbnMsIFxuICAgICAgICBib3R0b21TaGFwZS52ZXJ0ZXhQb3NpdGlvbnMpO1xuICAgIGNvbnN0IHZlcnRleE5vcm1hbHMgPSB0b3BTaGFwZS52ZXJ0ZXhOb3JtYWxzLmNvbmNhdChtaWRkbGVTaGFwZS52ZXJ0ZXhOb3JtYWxzLFxuICAgICAgICBib3R0b21TaGFwZS52ZXJ0ZXhOb3JtYWxzKTtcbiAgICBjb25zdCB0ZXh0dXJlQ29vcmRpbmF0ZXMgPSB0b3BTaGFwZS50ZXh0dXJlQ29vcmRpbmF0ZXMuY29uY2F0KG1pZGRsZVNoYXBlLnRleHR1cmVDb29yZGluYXRlcyxcbiAgICAgICAgYm90dG9tU2hhcGUudGV4dHVyZUNvb3JkaW5hdGVzKTtcbiAgICBjb25zdCB2ZXJ0ZXhJbmRpY2VzID0gdG9wU2hhcGUudmVydGV4SW5kaWNlc1xuICAgICAgICA/IHRvcFNoYXBlLnZlcnRleEluZGljZXMuY29uY2F0KG1pZGRsZVNoYXBlLnZlcnRleEluZGljZXMsIGJvdHRvbVNoYXBlLnZlcnRleEluZGljZXMpXG4gICAgICAgIDogbnVsbDtcbiAgICBjb25zdCBlbGVtZW50Q291bnQgPSB0b3BTaGFwZS5lbGVtZW50Q291bnQgKyBtaWRkbGVTaGFwZS5lbGVtZW50Q291bnQgKyBib3R0b21TaGFwZS5lbGVtZW50Q291bnQ7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdmVydGV4UG9zaXRpb25zOiB2ZXJ0ZXhQb3NpdGlvbnMsXG4gICAgICB2ZXJ0ZXhOb3JtYWxzOiB2ZXJ0ZXhOb3JtYWxzLFxuICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzOiB0ZXh0dXJlQ29vcmRpbmF0ZXMsXG4gICAgICB2ZXJ0ZXhJbmRpY2VzOiB2ZXJ0ZXhJbmRpY2VzLFxuICAgICAgZWxlbWVudENvdW50OiBlbGVtZW50Q291bnRcbiAgICB9O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0NhcHN1bGVSZW5kZXJhYmxlU2hhcGVQYXJhbXN9IHBhcmFtc1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0Q2FjaGVJZChwYXJhbXMpIHtcbiAgICByZXR1cm4gYCR7Z2V0Q2FjaGVLZXkocGFyYW1zKX06JHtwYXJhbXMuZGl2aXNpb25zQ291bnR9YDtcbiAgfVxufTtcblxuZXhwb3J0IHtjYXBzdWxlUmVuZGVyYWJsZVNoYXBlRmFjdG9yeX07XG5cbi8qKlxuICogQHR5cGVkZWYge1NwaGVyaWNhbFJlbmRlcmFibGVTaGFwZVBhcmFtc30gQ2Fwc3VsZVJlbmRlcmFibGVTaGFwZVBhcmFtc1xuICogQHByb3BlcnR5IHtudW1iZXJ9IHJhZGl1c1xuICogQHByb3BlcnR5IHtudW1iZXJ9IGNhcHN1bGVFbmRQb2ludHNEaXN0YW5jZSBUaGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgY2VudGVycyBvZiB0aGUgc3BoZXJlcyBvblxuICogZWl0aGVyIGVuZCBvZiB0aGUgY2Fwc3VsZS5cbiAqL1xuIiwiLyoqXG4gKiBUaGlzIG1vZGVsIGRlZmluZXMgYSBzaGFwZSBjb25maWd1cmF0aW9uIGZhY3RvcnkgZm9yIGEgY3ViZS5cbiAqXG4gKiBUaGlzIGN1YmUgaXMgb25lIHVuaXQgbG9uZyBvbiBlYWNoIHNpZGUuXG4gKi9cblxuaW1wb3J0IHtnZXRDYWNoZUtleX0gZnJvbSAnLi4vcmVuZGVyYWJsZS1zaGFwZS1zdG9yZSc7XG5cbmNvbnN0IFZFUlRFWF9DT09SRElOQVRFID0gMC41O1xuXG5jb25zdCB2ZXJ0ZXhQb3NpdGlvbnMgPSBbXG4gIC8vIEZyb250IGZhY2VcbiAgLVZFUlRFWF9DT09SRElOQVRFLCAtVkVSVEVYX0NPT1JESU5BVEUsIFZFUlRFWF9DT09SRElOQVRFLFxuICBWRVJURVhfQ09PUkRJTkFURSwgIC1WRVJURVhfQ09PUkRJTkFURSwgVkVSVEVYX0NPT1JESU5BVEUsXG4gIFZFUlRFWF9DT09SRElOQVRFLCAgVkVSVEVYX0NPT1JESU5BVEUsICBWRVJURVhfQ09PUkRJTkFURSxcbiAgLVZFUlRFWF9DT09SRElOQVRFLCBWRVJURVhfQ09PUkRJTkFURSwgIFZFUlRFWF9DT09SRElOQVRFLFxuICAvLyBCYWNrIGZhY2VcbiAgLVZFUlRFWF9DT09SRElOQVRFLCAtVkVSVEVYX0NPT1JESU5BVEUsIC1WRVJURVhfQ09PUkRJTkFURSxcbiAgLVZFUlRFWF9DT09SRElOQVRFLCBWRVJURVhfQ09PUkRJTkFURSwgIC1WRVJURVhfQ09PUkRJTkFURSxcbiAgVkVSVEVYX0NPT1JESU5BVEUsICBWRVJURVhfQ09PUkRJTkFURSwgIC1WRVJURVhfQ09PUkRJTkFURSxcbiAgVkVSVEVYX0NPT1JESU5BVEUsICAtVkVSVEVYX0NPT1JESU5BVEUsIC1WRVJURVhfQ09PUkRJTkFURSxcbiAgLy8gVG9wIGZhY2VcbiAgLVZFUlRFWF9DT09SRElOQVRFLCBWRVJURVhfQ09PUkRJTkFURSwgIC1WRVJURVhfQ09PUkRJTkFURSxcbiAgLVZFUlRFWF9DT09SRElOQVRFLCBWRVJURVhfQ09PUkRJTkFURSwgIFZFUlRFWF9DT09SRElOQVRFLFxuICBWRVJURVhfQ09PUkRJTkFURSwgIFZFUlRFWF9DT09SRElOQVRFLCAgVkVSVEVYX0NPT1JESU5BVEUsXG4gIFZFUlRFWF9DT09SRElOQVRFLCAgVkVSVEVYX0NPT1JESU5BVEUsICAtVkVSVEVYX0NPT1JESU5BVEUsXG4gIC8vIEJvdHRvbSBmYWNlXG4gIC1WRVJURVhfQ09PUkRJTkFURSwgLVZFUlRFWF9DT09SRElOQVRFLCAtVkVSVEVYX0NPT1JESU5BVEUsXG4gIFZFUlRFWF9DT09SRElOQVRFLCAgLVZFUlRFWF9DT09SRElOQVRFLCAtVkVSVEVYX0NPT1JESU5BVEUsXG4gIFZFUlRFWF9DT09SRElOQVRFLCAgLVZFUlRFWF9DT09SRElOQVRFLCBWRVJURVhfQ09PUkRJTkFURSxcbiAgLVZFUlRFWF9DT09SRElOQVRFLCAtVkVSVEVYX0NPT1JESU5BVEUsIFZFUlRFWF9DT09SRElOQVRFLFxuICAvLyBSaWdodCBmYWNlXG4gIFZFUlRFWF9DT09SRElOQVRFLCAgLVZFUlRFWF9DT09SRElOQVRFLCAtVkVSVEVYX0NPT1JESU5BVEUsXG4gIFZFUlRFWF9DT09SRElOQVRFLCAgVkVSVEVYX0NPT1JESU5BVEUsICAtVkVSVEVYX0NPT1JESU5BVEUsXG4gIFZFUlRFWF9DT09SRElOQVRFLCAgVkVSVEVYX0NPT1JESU5BVEUsICBWRVJURVhfQ09PUkRJTkFURSxcbiAgVkVSVEVYX0NPT1JESU5BVEUsICAtVkVSVEVYX0NPT1JESU5BVEUsIFZFUlRFWF9DT09SRElOQVRFLFxuICAvLyBMZWZ0IGZhY2VcbiAgLVZFUlRFWF9DT09SRElOQVRFLCAtVkVSVEVYX0NPT1JESU5BVEUsIC1WRVJURVhfQ09PUkRJTkFURSxcbiAgLVZFUlRFWF9DT09SRElOQVRFLCAtVkVSVEVYX0NPT1JESU5BVEUsIFZFUlRFWF9DT09SRElOQVRFLFxuICAtVkVSVEVYX0NPT1JESU5BVEUsIFZFUlRFWF9DT09SRElOQVRFLCAgVkVSVEVYX0NPT1JESU5BVEUsXG4gIC1WRVJURVhfQ09PUkRJTkFURSwgVkVSVEVYX0NPT1JESU5BVEUsICAtVkVSVEVYX0NPT1JESU5BVEVcbl07XG5cbmNvbnN0IG9ydGhvZ29uYWxWZXJ0ZXhOb3JtYWxzID0gW1xuICAvLyBGcm9udCBmYWNlXG4gIDAsIDAsIDEsXG4gIDAsIDAsIDEsXG4gIDAsIDAsIDEsXG4gIDAsIDAsIDEsXG4gIC8vIEJhY2sgZmFjZVxuICAwLCAwLCAtMSxcbiAgMCwgMCwgLTEsXG4gIDAsIDAsIC0xLFxuICAwLCAwLCAtMSxcbiAgLy8gVG9wIGZhY2VcbiAgMCwgMSwgMCxcbiAgMCwgMSwgMCxcbiAgMCwgMSwgMCxcbiAgMCwgMSwgMCxcbiAgLy8gQm90dG9tIGZhY2VcbiAgMCwgLTEsIDAsXG4gIDAsIC0xLCAwLFxuICAwLCAtMSwgMCxcbiAgMCwgLTEsIDAsXG4gIC8vIFJpZ2h0IGZhY2VcbiAgMSwgMCwgMCxcbiAgMSwgMCwgMCxcbiAgMSwgMCwgMCxcbiAgMSwgMCwgMCxcbiAgLy8gTGVmdCBmYWNlXG4gIC0xLCAwLCAwLFxuICAtMSwgMCwgMCxcbiAgLTEsIDAsIDAsXG4gIC0xLCAwLCAwXG5dO1xuXG5jb25zdCB0ZXh0dXJlQ29vcmRpbmF0ZXMgPSBbXG4gIC8vIEZyb250IGZhY2VcbiAgMSwgMCxcbiAgMCwgMCxcbiAgMCwgMSxcbiAgMSwgMSxcbiAgLy8gQmFjayBmYWNlXG4gIDEsIDAsXG4gIDAsIDAsXG4gIDAsIDEsXG4gIDEsIDEsXG4gIC8vIFRvcCBmYWNlXG4gIDEsIDAsXG4gIDAsIDAsXG4gIDAsIDEsXG4gIDEsIDEsXG4gIC8vIEJvdHRvbSBmYWNlXG4gIDEsIDAsXG4gIDAsIDAsXG4gIDAsIDEsXG4gIDEsIDEsXG4gIC8vIFJpZ2h0IGZhY2VcbiAgMSwgMCxcbiAgMCwgMCxcbiAgMCwgMSxcbiAgMSwgMSxcbiAgLy8gTGVmdCBmYWNlXG4gIDEsIDAsXG4gIDAsIDAsXG4gIDAsIDEsXG4gIDEsIDFcbl07XG5cbi8vIFRoaXMgYXJyYXkgZGVmaW5lcyBlYWNoIGZhY2UgYXMgdHdvIHRyaWFuZ2xlcywgdXNpbmcgdGhlIGluZGljZXMgaW50byB0aGUgdmVydGV4IGFycmF5XG4vLyB0byBzcGVjaWZ5IGVhY2ggdHJpYW5nbGUncyBwb3NpdGlvbi5cbmNvbnN0IHZlcnRleEluZGljZXMgPSBbXG4gIC8vIEZyb250IGZhY2VcbiAgMCwgIDEsICAyLFxuICAwLCAgMiwgIDMsXG4gIC8vIEJhY2sgZmFjZVxuICA0LCAgNSwgIDYsXG4gIDQsICA2LCAgNyxcbiAgLy8gVG9wIGZhY2VcbiAgOCwgIDksICAxMCxcbiAgOCwgIDEwLCAxMSxcbiAgLy8gQm90dG9tIGZhY2VcbiAgMTIsIDEzLCAxNCxcbiAgMTIsIDE0LCAxNSxcbiAgLy8gUmlnaHQgZmFjZVxuICAxNiwgMTcsIDE4LFxuICAxNiwgMTgsIDE5LFxuICAvLyBMZWZ0IGZhY2VcbiAgMjAsIDIxLCAyMixcbiAgMjAsIDIyLCAyM1xuXTtcblxuY29uc3QgY3ViZVJlbmRlcmFibGVTaGFwZUZhY3RvcnkgPSB7XG4gIHNoYXBlSWQ6ICdDVUJFJyxcblxuICAvKipcbiAgICogQHBhcmFtIHtSZW5kZXJhYmxlU2hhcGVDb25maWd9IHBhcmFtc1xuICAgKiBAcmV0dXJucyB7UmVuZGVyYWJsZVNoYXBlfVxuICAgKi9cbiAgZ2V0UmVuZGVyYWJsZVNoYXBlOiBwYXJhbXMgPT4ge1xuICAgIGNvbnN0IHZlcnRleE5vcm1hbHMgPSBwYXJhbXMuaXNVc2luZ1NwaGVyaWNhbE5vcm1hbHMgPyB2ZXJ0ZXhQb3NpdGlvbnMgOiBvcnRob2dvbmFsVmVydGV4Tm9ybWFscztcblxuICAgIHJldHVybiB7XG4gICAgICB2ZXJ0ZXhQb3NpdGlvbnM6IHZlcnRleFBvc2l0aW9ucyxcbiAgICAgIHZlcnRleE5vcm1hbHM6IHZlcnRleE5vcm1hbHMsXG4gICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXM6IHRleHR1cmVDb29yZGluYXRlcyxcbiAgICAgIHZlcnRleEluZGljZXM6IHZlcnRleEluZGljZXMsXG4gICAgICBlbGVtZW50Q291bnQ6IHZlcnRleEluZGljZXMubGVuZ3RoXG4gICAgfTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtSZW5kZXJhYmxlU2hhcGVDb25maWd9IHBhcmFtc1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0Q2FjaGVJZChwYXJhbXMpIHtcbiAgICByZXR1cm4gZ2V0Q2FjaGVLZXkocGFyYW1zKTtcbiAgfVxufTtcblxuZXhwb3J0IHtjdWJlUmVuZGVyYWJsZVNoYXBlRmFjdG9yeX07XG4iLCIvKipcbiAqIFRoaXMgbW9kZWwgZGVmaW5lcyBhIHNoYXBlIGNvbmZpZ3VyYXRpb24gZmFjdG9yeSBmb3IgYSByZWd1bGFyIGljb3NhaGVkcm9uLlxuICpcbiAqIFRoZSBzaGFwZSBpcyBjZW50ZXJlZCBhcm91bmQgdGhlIG9yaWdpbi5cbiAqL1xuXG5pbXBvcnQge1xuICBjYWxjdWxhdGVMYXRMb25nVGV4dHVyZUNvb3JkaW5hdGVzLFxuICBjYWxjdWxhdGVPcnRob2dvbmFsVmVydGV4Tm9ybWFscyxcbiAgZXhwYW5kVmVydGV4SW5kaWNlc0Fyb3VuZExvbmdpdHVkZVNlYW0sXG4gIGV4cGFuZFZlcnRleEluZGljZXNUb0R1cGxpY2F0ZVBvc2l0aW9ucyxcbn0gZnJvbSAnLi4vLi4vLi4vdXRpbCc7XG5pbXBvcnQge2dldENhY2hlS2V5fSBmcm9tICcuLi9yZW5kZXJhYmxlLXNoYXBlLXN0b3JlJztcblxuLy8gVGhlIGNvcm5lcnMgb2YgYSB1bml0IGljb3NhaGVkcm9uIHdpdGggdmVydGljZXMgYWxpZ25lZCB3aXRoIHRoZSB5LWF4aXMuXG5jb25zdCBpbmRpdmlkdWFsVmVydGV4UG9zaXRpb25zID0gW1xuICAtMC41MjU3MzEwODY3MzA5NTcsIC0wLjcyMzYwNjgyNDg3NDg3NzksIDAuNDQ3MjEzNTkwMTQ1MTExMSxcbiAgMC41MjU3MzEwODY3MzA5NTcsIC0wLjcyMzYwNjgyNDg3NDg3NzksIDAuNDQ3MjEzNTkwMTQ1MTExMSxcbiAgLTAuNTI1NzMxMDg2NzMwOTU3LCAwLjcyMzYwNjgyNDg3NDg3NzksIC0wLjQ0NzIxMzU5MDE0NTExMTEsXG4gIDAuNTI1NzMxMDg2NzMwOTU3LCAwLjcyMzYwNjgyNDg3NDg3NzksIC0wLjQ0NzIxMzU5MDE0NTExMTEsXG4gIDAsIDAsIDEsXG4gIDAsIDAuODk0NDI3MTgwMjkwMjIyMiwgMC40NDcyMTM2MTk5NDc0MzM0NyxcbiAgMCwgLTAuODk0NDI3MTgwMjkwMjIyMiwgLTAuNDQ3MjEzNjE5OTQ3NDMzNDcsXG4gIDAsIDAsIC0xLFxuICAwLjg1MDY1MDg0Njk1ODE2MDQsIDAuMjc2MzkzMjA0OTI3NDQ0NDYsIDAuNDQ3MjEzNTkwMTQ1MTExMSxcbiAgLTAuODUwNjUwODQ2OTU4MTYwNCwgMC4yNzYzOTMyMDQ5Mjc0NDQ0NiwgMC40NDcyMTM1OTAxNDUxMTExLFxuICAwLjg1MDY1MDg0Njk1ODE2MDQsIC0wLjI3NjM5MzIwNDkyNzQ0NDQ2LCAtMC40NDcyMTM1OTAxNDUxMTExLFxuICAtMC44NTA2NTA4NDY5NTgxNjA0LCAtMC4yNzYzOTMyMDQ5Mjc0NDQ0NiwgLTAuNDQ3MjEzNTkwMTQ1MTExMVxuXTtcblxuY29uc3QgaW5kaXZpZHVhbFZlcnRleEluZGljZXMgPSBbXG4gIDEsICA0LCAgMCxcbiAgNCwgIDksICAwLFxuICA0LCAgNSwgIDksXG4gIDgsICA1LCAgNCxcbiAgMSwgIDgsICA0LFxuICAxLCAgMTAsIDgsXG4gIDEwLCAzLCAgOCxcbiAgOCwgIDMsICA1LFxuICAzLCAgMiwgIDUsXG4gIDMsICA3LCAgMixcbiAgMywgIDEwLCA3LFxuICAxMCwgNiwgIDcsXG4gIDYsICAxMSwgNyxcbiAgNiwgIDAsICAxMSxcbiAgNiwgIDEsICAwLFxuICAxMCwgMSwgIDYsXG4gIDExLCAwLCAgOSxcbiAgMiwgIDExLCA5LFxuICA1LCAgMiwgIDksXG4gIDExLCAyLCAgN1xuXTtcblxubGV0IHZlcnRleFBvc2l0aW9uc0V4cGFuZGVkQXJvdW5kU2VhbSA9IG51bGw7XG5sZXQgdmVydGV4SW5kaWNlc0V4cGFuZGVkQXJvdW5kU2VhbSA9IG51bGw7XG5sZXQgdGV4dHVyZUNvb3JkaW5hdGVzID0gbnVsbDtcblxuY29uc3QgaWNvc2FoZWRyb25SZW5kZXJhYmxlU2hhcGVGYWN0b3J5ID0ge1xuICBzaGFwZUlkOiAnSUNPU0FIRURST04nLFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1JlbmRlcmFibGVTaGFwZUNvbmZpZ30gcGFyYW1zXG4gICAqIEByZXR1cm5zIHtSZW5kZXJhYmxlU2hhcGV9XG4gICAqL1xuICBnZXRSZW5kZXJhYmxlU2hhcGU6IHBhcmFtcyA9PiB7XG4gICAgbGV0IHZlcnRleFBvc2l0aW9ucztcbiAgICBsZXQgdmVydGV4SW5kaWNlcztcblxuICAgIGlmICghdmVydGV4UG9zaXRpb25zRXhwYW5kZWRBcm91bmRTZWFtKSB7XG4gICAgICAvLyBDYWxjdWxhdGUgdGhlIG1vZGlmaWVkIHBvc2l0aW9ucyBhbmQgaW5kaWNlcy5cbiAgICAgIGNvbnN0IHBvc2l0aW9uc0FuZEluZGljZXMgPSBleHBhbmRWZXJ0ZXhJbmRpY2VzQXJvdW5kTG9uZ2l0dWRlU2VhbShcbiAgICAgICAgICBpbmRpdmlkdWFsVmVydGV4UG9zaXRpb25zLCBpbmRpdmlkdWFsVmVydGV4SW5kaWNlcyk7XG4gICAgICB2ZXJ0ZXhQb3NpdGlvbnNFeHBhbmRlZEFyb3VuZFNlYW0gPSBwb3NpdGlvbnNBbmRJbmRpY2VzLnZlcnRleFBvc2l0aW9ucztcbiAgICAgIHZlcnRleEluZGljZXNFeHBhbmRlZEFyb3VuZFNlYW0gPSBwb3NpdGlvbnNBbmRJbmRpY2VzLnZlcnRleEluZGljZXM7XG4gICAgfVxuXG4gICAgdmVydGV4UG9zaXRpb25zID0gdmVydGV4UG9zaXRpb25zRXhwYW5kZWRBcm91bmRTZWFtO1xuICAgIHZlcnRleEluZGljZXMgPSB2ZXJ0ZXhJbmRpY2VzRXhwYW5kZWRBcm91bmRTZWFtO1xuXG4gICAgbGV0IHZlcnRleE5vcm1hbHM7XG4gICAgLy8gSWYgd2UgdXNlIG9ydGhvZ29uYWwgbm9ybWFscywgdGhlbiB3ZSBjYW5ub3QgdXNlIHZlcnRleEluZGljZXMuXG4gICAgaWYgKCFwYXJhbXMuaXNVc2luZ1NwaGVyaWNhbE5vcm1hbHMpIHtcbiAgICAgIHZlcnRleFBvc2l0aW9ucyA9IGV4cGFuZFZlcnRleEluZGljZXNUb0R1cGxpY2F0ZVBvc2l0aW9ucyh2ZXJ0ZXhQb3NpdGlvbnMsXG4gICAgICAgICAgdmVydGV4SW5kaWNlcyk7XG4gICAgICB2ZXJ0ZXhJbmRpY2VzID0gbnVsbDtcbiAgICAgIHZlcnRleE5vcm1hbHMgPSBjYWxjdWxhdGVPcnRob2dvbmFsVmVydGV4Tm9ybWFscyh2ZXJ0ZXhQb3NpdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2ZXJ0ZXhOb3JtYWxzID0gdmVydGV4UG9zaXRpb25zO1xuICAgIH1cblxuICAgIHRleHR1cmVDb29yZGluYXRlcyA9IHRleHR1cmVDb29yZGluYXRlc1xuICAgICAgICA/IHRleHR1cmVDb29yZGluYXRlc1xuICAgICAgICA6IGNhbGN1bGF0ZUxhdExvbmdUZXh0dXJlQ29vcmRpbmF0ZXModmVydGV4UG9zaXRpb25zKTtcblxuICAgIGNvbnN0IGVsZW1lbnRDb3VudCA9IHZlcnRleEluZGljZXMgPyB2ZXJ0ZXhJbmRpY2VzLmxlbmd0aCA6IHZlcnRleFBvc2l0aW9ucy5sZW5ndGggLyAzO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHZlcnRleFBvc2l0aW9uczogdmVydGV4UG9zaXRpb25zLFxuICAgICAgdmVydGV4Tm9ybWFsczogdmVydGV4Tm9ybWFscyxcbiAgICAgIHRleHR1cmVDb29yZGluYXRlczogdGV4dHVyZUNvb3JkaW5hdGVzLFxuICAgICAgdmVydGV4SW5kaWNlczogdmVydGV4SW5kaWNlcyxcbiAgICAgIGVsZW1lbnRDb3VudDogZWxlbWVudENvdW50XG4gICAgfTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtSZW5kZXJhYmxlU2hhcGVDb25maWd9IHBhcmFtc1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0Q2FjaGVJZChwYXJhbXMpIHtcbiAgICByZXR1cm4gZ2V0Q2FjaGVLZXkocGFyYW1zKTtcbiAgfVxufTtcblxuZXhwb3J0IHtpY29zYWhlZHJvblJlbmRlcmFibGVTaGFwZUZhY3Rvcnl9O1xuIiwiLyoqXG4gKiBUaGlzIG1vZHVsZSBkZWZpbmVzIGxvZ2ljIHRoYXQgY3JlYXRlcyBhIHNwaGVyaWNhbCBzaGFwZSBjb25maWd1cmF0aW9uIGJ5IHRha2luZyBhIHNoYXBlLFxuICogc3ViLWRpdmlkaW5nIGVhY2ggb2YgaXRzIHRyaWFuZ2xlcywgYW5kIHByb2plY3RpbmcgZWFjaCBuZXcgdmVydGV4IG9udG8gdGhlIGVkZ2Ugb2YgYSBzcGhlcmUuXG4gKlxuICogVGhpcyBpcyB0ZWNobmljYWxseSBvbmx5IGFuIFwiaWNvc3BoZXJlXCIgaWYgdGhlIHN0YXJ0aW5nIHNoYXBlIGlzIGFuIGljb3NhaGVkcm9uLlxuICpcbiAqIFRoaXMgc2hhcGUgYWxzbyBpcyBrbm93biBhcyBhIFwiZ2Vvc3BoZXJlXCIuXG4gKlxuICogVGhlIHNoYXBlIGlzIGNlbnRlcmVkIGFyb3VuZCB0aGUgb3JpZ2luLlxuICovXG5cbmltcG9ydCB7XG4gIGRlZXBDb3B5LFxuICBjYWxjdWxhdGVMYXRMb25nVGV4dHVyZUNvb3JkaW5hdGVzLFxuICBjYWxjdWxhdGVPcnRob2dvbmFsVmVydGV4Tm9ybWFscyxcbiAgZXhwYW5kVmVydGV4SW5kaWNlc0Fyb3VuZExvbmdpdHVkZVNlYW0sXG4gIGV4cGFuZFZlcnRleEluZGljZXNUb0R1cGxpY2F0ZVBvc2l0aW9ucyxcbiAgdGVzc2VsYXRlU3BoZXJlLFxufSBmcm9tICcuLi8uLi8uLi91dGlsJztcbmltcG9ydCB7Z2V0Q2FjaGVLZXl9IGZyb20gJy4uL3JlbmRlcmFibGUtc2hhcGUtc3RvcmUnO1xuaW1wb3J0IHtyZW5kZXJhYmxlU2hhcGVGYWN0b3J5fSBmcm9tICcuLi9yZW5kZXJhYmxlLXNoYXBlLWZhY3RvcnknO1xuXG5jb25zdCBpY29zcGhlcmVSZW5kZXJhYmxlU2hhcGVGYWN0b3J5ID0ge1xuICBzaGFwZUlkOiAnSUNPU1BIRVJFJyxcblxuICAvKipcbiAgICogQHBhcmFtIHtJY29zcGhlcmVSZW5kZXJhYmxlU2hhcGVQYXJhbXN9IHBhcmFtc1xuICAgKiBAcmV0dXJucyB7UmVuZGVyYWJsZVNoYXBlfVxuICAgKi9cbiAgZ2V0UmVuZGVyYWJsZVNoYXBlOiBwYXJhbXMgPT4ge1xuICAgIHBhcmFtcy5kaXZpc2lvbnNDb3VudCA9IE1hdGgubWF4KHBhcmFtcy5kaXZpc2lvbnNDb3VudCwgMSk7XG5cbiAgICBjb25zdCBjb3B5UGFyYW1zID0gZGVlcENvcHkocGFyYW1zKTtcbiAgICBjb3B5UGFyYW1zLnNoYXBlSWQgPSBwYXJhbXMuYmFzZVNoYXBlSWQgfHwgJ0lDT1NBSEVEUk9OJztcbiAgICBjb25zdCBiYXNlUmVuZGVyYWJsZVNoYXBlID0gcmVuZGVyYWJsZVNoYXBlRmFjdG9yeS5nZXRSZW5kZXJhYmxlU2hhcGUoY29weVBhcmFtcyk7XG5cbiAgICAvLyBDYWxjdWxhdGUgdGhlIHBvc2l0aW9ucyBhbmQgaW5kaWNlcy5cbiAgICBsZXQge3ZlcnRleFBvc2l0aW9ucywgdmVydGV4SW5kaWNlc30gPSB0ZXNzZWxhdGVTcGhlcmUocGFyYW1zLmRpdmlzaW9uc0NvdW50LFxuICAgICAgICBiYXNlUmVuZGVyYWJsZVNoYXBlLnZlcnRleFBvc2l0aW9ucywgYmFzZVJlbmRlcmFibGVTaGFwZS52ZXJ0ZXhJbmRpY2VzKTtcbiAgICAoe3ZlcnRleFBvc2l0aW9ucywgdmVydGV4SW5kaWNlc30gPSBleHBhbmRWZXJ0ZXhJbmRpY2VzQXJvdW5kTG9uZ2l0dWRlU2VhbShcbiAgICAgICAgdmVydGV4UG9zaXRpb25zLCB2ZXJ0ZXhJbmRpY2VzKSk7XG5cbiAgICBsZXQgdmVydGV4Tm9ybWFscztcbiAgICAvLyBJZiB3ZSB1c2Ugb3J0aG9nb25hbCBub3JtYWxzLCB0aGVuIHdlIGNhbm5vdCB1c2UgdmVydGV4SW5kaWNlcy5cbiAgICBpZiAoIXBhcmFtcy5pc1VzaW5nU3BoZXJpY2FsTm9ybWFscykge1xuICAgICAgdmVydGV4UG9zaXRpb25zID0gZXhwYW5kVmVydGV4SW5kaWNlc1RvRHVwbGljYXRlUG9zaXRpb25zKHZlcnRleFBvc2l0aW9ucyxcbiAgICAgICAgICB2ZXJ0ZXhJbmRpY2VzKTtcbiAgICAgIHZlcnRleEluZGljZXMgPSBudWxsO1xuICAgICAgdmVydGV4Tm9ybWFscyA9IGNhbGN1bGF0ZU9ydGhvZ29uYWxWZXJ0ZXhOb3JtYWxzKHZlcnRleFBvc2l0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZlcnRleE5vcm1hbHMgPSB2ZXJ0ZXhQb3NpdGlvbnM7XG4gICAgfVxuXG4gICAgY29uc3QgdGV4dHVyZUNvb3JkaW5hdGVzID0gY2FsY3VsYXRlTGF0TG9uZ1RleHR1cmVDb29yZGluYXRlcyh2ZXJ0ZXhQb3NpdGlvbnMpO1xuXG4gICAgY29uc3QgZWxlbWVudENvdW50ID0gdmVydGV4SW5kaWNlcyA/IHZlcnRleEluZGljZXMubGVuZ3RoIDogdmVydGV4UG9zaXRpb25zLmxlbmd0aCAvIDM7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdmVydGV4UG9zaXRpb25zOiB2ZXJ0ZXhQb3NpdGlvbnMsXG4gICAgICB2ZXJ0ZXhOb3JtYWxzOiB2ZXJ0ZXhOb3JtYWxzLFxuICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzOiB0ZXh0dXJlQ29vcmRpbmF0ZXMsXG4gICAgICB2ZXJ0ZXhJbmRpY2VzOiB2ZXJ0ZXhJbmRpY2VzLFxuICAgICAgZWxlbWVudENvdW50OiBlbGVtZW50Q291bnRcbiAgICB9O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0ljb3NwaGVyZVJlbmRlcmFibGVTaGFwZVBhcmFtc30gcGFyYW1zXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBnZXRDYWNoZUlkKHBhcmFtcykge1xuICAgIHJldHVybiBgJHtnZXRDYWNoZUtleShwYXJhbXMpfToke3BhcmFtcy5kaXZpc2lvbnNDb3VudH1gO1xuICB9XG59O1xuXG5leHBvcnQge2ljb3NwaGVyZVJlbmRlcmFibGVTaGFwZUZhY3Rvcnl9O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtTcGhlcmljYWxSZW5kZXJhYmxlU2hhcGVQYXJhbXN9IEljb3NwaGVyZVJlbmRlcmFibGVTaGFwZVBhcmFtc1xuICogQHByb3BlcnR5IHtzdHJpbmd9IGJhc2VTaGFwZUlkIFRoZSBJRCBvZiB0aGUgYmFzZSByZW5kZXJhYmxlIHNoYXBlIHRoYXQgd2lsbCBiZSBzdWItZGl2aWRlZCB0b1xuICogY3JlYXRlIHRoaXMgaWNvc3BoZXJlIHNoYXBlLlxuICovXG4iLCJpbXBvcnQge1xuICBjYWxjdWxhdGVMYXRMb25nVGV4dHVyZUNvb3JkaW5hdGVzLFxuICBjYWxjdWxhdGVPcnRob2dvbmFsVmVydGV4Tm9ybWFscyxcbiAgY2FsY3VsYXRlU3BoZXJpY2FsU2VjdGlvbixcbiAgZGVkdXBWZXJ0ZXhBcnJheVdpdGhQb3NpdGlvbnNBbmRJbmRpY2VzQXJyYXlzLFxuICBUV09fUEksXG59IGZyb20gJy4uLy4uLy4uL3V0aWwnO1xuaW1wb3J0IHtnZXRDYWNoZUtleX0gZnJvbSAnLi4vcmVuZGVyYWJsZS1zaGFwZS1zdG9yZSc7XG5cbi8qKlxuICogVGhpcyBtb2R1bGUgZGVmaW5lcyBhIGNvbmZpZ3VyYXRpb24gZmFjdG9yeSBmb3IgYSBzcGhlcmljYWwgc2hhcGUgd2hvc2UgdmVydGljZXMgbGllIGFsb25nXG4gKiBsYXRpdHVkZSBhbmQgbG9uZ2l0dWRlIGxpbmVzLlxuICpcbiAqIFRoaXMgc2hhcGUgYWxzbyBpcyBrbm93biBhcyBhIFwiVVYgc3BoZXJlXCIuXG4gKlxuICogVGhlIHNoYXBlIGlzIGNlbnRlcmVkIGFyb3VuZCB0aGUgb3JpZ2luIHdpdGggdGhlIHBvbGVzIGFsaWduZWQgd2l0aCB0aGUgei1heGlzLlxuICovXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGRpdmlzaW9uc0NvdW50XG4gKiBAcmV0dXJucyB7QXJyYXkuPE51bWJlcj59XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfY2FsY3VsYXRlTGF0TG9uZ1NwaGVyZVBvc2l0aW9ucyhkaXZpc2lvbnNDb3VudCkge1xuICBjb25zdCBkZWx0YVBpdGNoID0gTWF0aC5QSSAvIGRpdmlzaW9uc0NvdW50O1xuICBjb25zdCBkZWx0YUF6aW11dGggPSBUV09fUEkgLyBkaXZpc2lvbnNDb3VudDtcblxuICByZXR1cm4gY2FsY3VsYXRlU3BoZXJpY2FsU2VjdGlvbihcbiAgICAgIDAsIGRpdmlzaW9uc0NvdW50LCBkZWx0YVBpdGNoLFxuICAgICAgMCwgZGl2aXNpb25zQ291bnQsIGRlbHRhQXppbXV0aCk7XG59XG5cbmNvbnN0IGxhdExvbmdTcGhlcmVSZW5kZXJhYmxlU2hhcGVGYWN0b3J5ID0ge1xuICBzaGFwZUlkOiAnTEFUX0xPTkdfU1BIRVJFJyxcblxuICAvKipcbiAgICogQHBhcmFtIHtTcGhlcmljYWxSZW5kZXJhYmxlU2hhcGVQYXJhbXN9IHBhcmFtc1xuICAgKiBAcmV0dXJucyB7UmVuZGVyYWJsZVNoYXBlfVxuICAgKi9cbiAgZ2V0UmVuZGVyYWJsZVNoYXBlOiBwYXJhbXMgPT4ge1xuICAgIC8vIENhbGN1bGF0ZSB0aGUgcG9zaXRpb25zLlxuICAgIGNvbnN0IGluZGl2aWR1YWxWZXJ0ZXhQb3NpdGlvbnMgPSBfY2FsY3VsYXRlTGF0TG9uZ1NwaGVyZVBvc2l0aW9ucyhwYXJhbXMuZGl2aXNpb25zQ291bnQpO1xuXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBpbmRpY2VzIGFuZCBub3JtYWxzLlxuICAgIGxldCB2ZXJ0ZXhQb3NpdGlvbnM7XG4gICAgbGV0IHZlcnRleEluZGljZXM7XG4gICAgbGV0IHZlcnRleE5vcm1hbHM7XG4gICAgaWYgKCFwYXJhbXMuaXNVc2luZ1NwaGVyaWNhbE5vcm1hbHMpIHtcbiAgICAgIC8vIElmIHdlIHVzZSBvcnRob2dvbmFsIG5vcm1hbHMsIHRoZW4gd2UgY2Fubm90IHVzZSB2ZXJ0ZXhJbmRpY2VzLlxuICAgICAgdmVydGV4UG9zaXRpb25zID0gaW5kaXZpZHVhbFZlcnRleFBvc2l0aW9ucztcbiAgICAgIHZlcnRleEluZGljZXMgPSBudWxsO1xuICAgICAgdmVydGV4Tm9ybWFscyA9IGNhbGN1bGF0ZU9ydGhvZ29uYWxWZXJ0ZXhOb3JtYWxzKHZlcnRleFBvc2l0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICh7dmVydGV4UG9zaXRpb25zLCB2ZXJ0ZXhJbmRpY2VzfSA9IGRlZHVwVmVydGV4QXJyYXlXaXRoUG9zaXRpb25zQW5kSW5kaWNlc0FycmF5cyhcbiAgICAgICAgICBpbmRpdmlkdWFsVmVydGV4UG9zaXRpb25zKSk7XG4gICAgICB2ZXJ0ZXhOb3JtYWxzID0gdmVydGV4UG9zaXRpb25zO1xuICAgIH1cblxuICAgIGNvbnN0IHRleHR1cmVDb29yZGluYXRlcyA9IGNhbGN1bGF0ZUxhdExvbmdUZXh0dXJlQ29vcmRpbmF0ZXModmVydGV4UG9zaXRpb25zKTtcblxuICAgIGNvbnN0IGVsZW1lbnRDb3VudCA9IHZlcnRleEluZGljZXMgPyB2ZXJ0ZXhJbmRpY2VzLmxlbmd0aCA6IHZlcnRleFBvc2l0aW9ucy5sZW5ndGggLyAzO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHZlcnRleFBvc2l0aW9uczogdmVydGV4UG9zaXRpb25zLFxuICAgICAgdmVydGV4Tm9ybWFsczogdmVydGV4Tm9ybWFscyxcbiAgICAgIHRleHR1cmVDb29yZGluYXRlczogdGV4dHVyZUNvb3JkaW5hdGVzLFxuICAgICAgdmVydGV4SW5kaWNlczogdmVydGV4SW5kaWNlcyxcbiAgICAgIGVsZW1lbnRDb3VudDogZWxlbWVudENvdW50XG4gICAgfTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtTcGhlcmljYWxSZW5kZXJhYmxlU2hhcGVQYXJhbXN9IHBhcmFtc1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0Q2FjaGVJZChwYXJhbXMpIHtcbiAgICByZXR1cm4gYCR7Z2V0Q2FjaGVLZXkocGFyYW1zKX06JHtwYXJhbXMuZGl2aXNpb25zQ291bnR9YDtcbiAgfVxufTtcblxuZXhwb3J0IHtsYXRMb25nU3BoZXJlUmVuZGVyYWJsZVNoYXBlRmFjdG9yeX07XG4iLCJpbXBvcnQge2NhbGN1bGF0ZU9ydGhvZ29uYWxWZXJ0ZXhOb3JtYWxzfSBmcm9tICcuLi8uLi8uLi91dGlsJztcbmltcG9ydCB7Z2V0Q2FjaGVLZXl9IGZyb20gJy4uL3JlbmRlcmFibGUtc2hhcGUtc3RvcmUnO1xuXG4vKipcbiAqIFRoaXMgbW9kZWwgZGVmaW5lcyBhIHNoYXBlIGNvbmZpZ3VyYXRpb24gZmFjdG9yeSBmb3IgYSByZWd1bGFyIHRldHJhaGVkcm9uLlxuICpcbiAqIFRoZSBzaGFwZSBpcyBjZW50ZXJlZCBhcm91bmQgdGhlIG9yaWdpbi5cbiAqL1xuXG4vLyB8fChWRVJURVhfQ09PUkRJTkFURSwgVkVSVEVYX0NPT1JESU5BVEUsIFZFUlRFWF9DT09SRElOQVRFKXx8ID0gMVxuY29uc3QgVkVSVEVYX0NPT1JESU5BVEUgPSAwLjU3NzM1MDI1ODgyNzIwOTU7XG5cbmNvbnN0IHZlcnRleFBvc2l0aW9ucyA9IFtcbiAgLy8gTGVmdC10b3AtbmVhciBmYWNlXG4gIFZFUlRFWF9DT09SRElOQVRFLCAgVkVSVEVYX0NPT1JESU5BVEUsICBWRVJURVhfQ09PUkRJTkFURSxcbiAgLVZFUlRFWF9DT09SRElOQVRFLCAtVkVSVEVYX0NPT1JESU5BVEUsIFZFUlRFWF9DT09SRElOQVRFLFxuICAtVkVSVEVYX0NPT1JESU5BVEUsIFZFUlRFWF9DT09SRElOQVRFLCAgLVZFUlRFWF9DT09SRElOQVRFLFxuXG4gIC8vIFJpZ2h0LXRvcC1mYXIgZmFjZVxuICBWRVJURVhfQ09PUkRJTkFURSwgIFZFUlRFWF9DT09SRElOQVRFLCAgVkVSVEVYX0NPT1JESU5BVEUsXG4gIC1WRVJURVhfQ09PUkRJTkFURSwgVkVSVEVYX0NPT1JESU5BVEUsICAtVkVSVEVYX0NPT1JESU5BVEUsXG4gIFZFUlRFWF9DT09SRElOQVRFLCAgLVZFUlRFWF9DT09SRElOQVRFLCAtVkVSVEVYX0NPT1JESU5BVEUsXG5cbiAgLy8gUmlnaHQtYm90dG9tLW5lYXIgZmFjZVxuICBWRVJURVhfQ09PUkRJTkFURSwgIFZFUlRFWF9DT09SRElOQVRFLCAgVkVSVEVYX0NPT1JESU5BVEUsXG4gIFZFUlRFWF9DT09SRElOQVRFLCAgLVZFUlRFWF9DT09SRElOQVRFLCAtVkVSVEVYX0NPT1JESU5BVEUsXG4gIC1WRVJURVhfQ09PUkRJTkFURSwgLVZFUlRFWF9DT09SRElOQVRFLCBWRVJURVhfQ09PUkRJTkFURSxcblxuICAvLyBMZWZ0LWJvdHRvbS1mYXIgZmFjZVxuICAtVkVSVEVYX0NPT1JESU5BVEUsIC1WRVJURVhfQ09PUkRJTkFURSwgVkVSVEVYX0NPT1JESU5BVEUsXG4gIFZFUlRFWF9DT09SRElOQVRFLCAtVkVSVEVYX0NPT1JESU5BVEUsIC1WRVJURVhfQ09PUkRJTkFURSxcbiAgLVZFUlRFWF9DT09SRElOQVRFLCBWRVJURVhfQ09PUkRJTkFURSwgLVZFUlRFWF9DT09SRElOQVRFXG5dO1xuXG4vLyAxIC0gTWF0aC5zcXJ0KDMpIC8gMlxuY29uc3QgVEVYVFVSRV9CQVNFX0NPT1JESU5BVEUgPSAwLjEzMzk3NDU5NjIxO1xuXG5jb25zdCB0ZXh0dXJlQ29vcmRpbmF0ZXMgPSBbXG4gIC8vIExlZnQtdG9wLW5lYXIgZmFjZVxuICAwLCBURVhUVVJFX0JBU0VfQ09PUkRJTkFURSxcbiAgMC41LCAxLFxuICAxLCBURVhUVVJFX0JBU0VfQ09PUkRJTkFURSxcblxuICAvLyBSaWdodC10b3AtZmFyIGZhY2VcbiAgMCwgVEVYVFVSRV9CQVNFX0NPT1JESU5BVEUsXG4gIDAuNSwgMSxcbiAgMSwgVEVYVFVSRV9CQVNFX0NPT1JESU5BVEUsXG5cbiAgLy8gUmlnaHQtYm90dG9tLW5lYXIgZmFjZVxuICAwLCBURVhUVVJFX0JBU0VfQ09PUkRJTkFURSxcbiAgMC41LCAxLFxuICAxLCBURVhUVVJFX0JBU0VfQ09PUkRJTkFURSxcblxuICAvLyBMZWZ0LWJvdHRvbS1mYXIgZmFjZVxuICAwLCBURVhUVVJFX0JBU0VfQ09PUkRJTkFURSxcbiAgMC41LCAxLFxuICAxLCBURVhUVVJFX0JBU0VfQ09PUkRJTkFURVxuXTtcblxuY29uc3QgdGV0cmFoZWRyb25SZW5kZXJhYmxlU2hhcGVGYWN0b3J5ID0ge1xuICBzaGFwZUlkOiAnVEVUUkFIRURST04nLFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1JlbmRlcmFibGVTaGFwZUNvbmZpZ30gcGFyYW1zXG4gICAqIEByZXR1cm5zIHtSZW5kZXJhYmxlU2hhcGV9XG4gICAqL1xuICBnZXRSZW5kZXJhYmxlU2hhcGU6IHBhcmFtcyA9PiB7XG4gICAgY29uc3QgdmVydGV4Tm9ybWFscyA9IHBhcmFtcy5pc1VzaW5nU3BoZXJpY2FsTm9ybWFsc1xuICAgICAgICA/IHZlcnRleFBvc2l0aW9uc1xuICAgICAgICA6IGNhbGN1bGF0ZU9ydGhvZ29uYWxWZXJ0ZXhOb3JtYWxzKHZlcnRleFBvc2l0aW9ucyk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdmVydGV4UG9zaXRpb25zOiB2ZXJ0ZXhQb3NpdGlvbnMsXG4gICAgICB2ZXJ0ZXhOb3JtYWxzOiB2ZXJ0ZXhOb3JtYWxzLFxuICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzOiB0ZXh0dXJlQ29vcmRpbmF0ZXMsXG4gICAgICB2ZXJ0ZXhJbmRpY2VzOiBudWxsLFxuICAgICAgZWxlbWVudENvdW50OiB2ZXJ0ZXhQb3NpdGlvbnMubGVuZ3RoIC8gM1xuICAgIH07XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UmVuZGVyYWJsZVNoYXBlQ29uZmlnfSBwYXJhbXNcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGdldENhY2hlSWQocGFyYW1zKSB7XG4gICAgcmV0dXJuIGdldENhY2hlS2V5KHBhcmFtcyk7XG4gIH1cbn07XG5cbmV4cG9ydCB7dGV0cmFoZWRyb25SZW5kZXJhYmxlU2hhcGVGYWN0b3J5fTtcbiIsImltcG9ydCB7XG4gIGFuaW1hdG9yLFxuICBQZXJzaXN0ZW50QW5pbWF0aW9uSm9iXG59XG5mcm9tICcuLi8uLi8uLi9hbmltYXRleCc7XG5pbXBvcnQgeyBQaHlzaWNzRW5naW5lIH0gZnJvbSAnbHNsLXBoeXN4JztcbmltcG9ydCB7XG4gIFByb2dyYW1XcmFwcGVyLFxuICBwcm9ncmFtV3JhcHBlclN0b3JlLFxuICB0ZXh0dXJlU3RvcmVcbn1cbmZyb20gJy4uL3Byb2dyYW0td3JhcHBlcic7XG5pbXBvcnQge1xuICBiaW5kRnJhbWVidWZmZXIsXG4gIGJpbmRHTENvbnRleHRUb1ZpZXdwb3J0RGltZW5zaW9ucyxcbiAgZ2V0V2ViR0xDb250ZXh0LFxuICBnZXRWaWV3cG9ydEhlaWdodCxcbiAgZ2V0Vmlld3BvcnRXaWR0aCxcbn1cbmZyb20gJy4uL3V0aWwnO1xuXG4vKipcbiAqIFRoaXMgdG9wLWxldmVsIENvbnRyb2xsZXIgY2xhc3MgaW5pdGlhbGl6ZXMgYW5kIHJ1bnMgdGhlIHJlc3Qgb2YgdGhlIGFwcC5cbiAqL1xuY2xhc3MgR3JhZnhDb250cm9sbGVyIGV4dGVuZHMgUGVyc2lzdGVudEFuaW1hdGlvbkpvYiB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLl9jYW52YXMgPSBudWxsO1xuICAgIHRoaXMuX2dsID0gbnVsbDtcbiAgICB0aGlzLl9zY2VuZSA9IG51bGw7XG4gICAgdGhpcy5fY3VycmVudFByb2dyYW1XcmFwcGVyID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgYXBwLiBBZnRlciB0aGlzIGNvbXBsZXRlcyBzdWNjZXNzZnVsbHksIGNhbGwgcnVuIHRvIGFjdHVhbGx5IHN0YXJ0IHRoZSBhcHAuXG4gICAqXG4gICAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnR9IGNhbnZhc1xuICAgKiBAcGFyYW0ge0FycmF5LjxQcm9ncmFtV3JhcHBlckNvbmZpZz59IHByb2dyYW1Db25maWdzIENvbmZpZ3VyYXRpb25zIGZvciBwcm9ncmFtIHdyYXBwZXJzIHRoYXRcbiAgICogc2hvdWxkIGJlIHByZS1jYWNoZWQgYmVmb3JlIHN0YXJ0aW5nIHRoZSByZXN0IG9mIHRoZSBhcHAuXG4gICAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IHRleHR1cmVQYXRocyBUZXh0dXJlIGltYWdlcyB0aGF0IHNob3VsZCBiZSBwcmUtY2FjaGVkIGJlZm9yZVxuICAgKiBzdGFydGluZyB0aGUgcmVzdCBvZiB0aGUgYXBwLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9uLjxTY2VuZT59IHNjZW5lRmFjdG9yeVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICovXG4gIGluaXRpYWxpemUoY2FudmFzLCBwcm9ncmFtQ29uZmlncywgdGV4dHVyZVBhdGhzLCBzY2VuZUZhY3RvcnkpIHtcbiAgICB0aGlzLl9jYW52YXMgPSBjYW52YXM7XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgIC50aGVuKCgpID0+IHRoaXMuX3NldFVwV2ViR0xDb250ZXh0KCkpXG4gICAgICAudGhlbigoKSA9PiBQcm9taXNlLmFsbChbXG4gICAgICAgIHRoaXMuX3ByZUNhY2hlUHJvZ3JhbXMocHJvZ3JhbUNvbmZpZ3MpLFxuICAgICAgICB0aGlzLl9wcmVDYWNoZVRleHR1cmVzKHRleHR1cmVQYXRocylcbiAgICAgIF0pKVxuICAgICAgLnRoZW4oKCkgPT4gdGhpcy5fc2V0VXBTY2VuZShzY2VuZUZhY3RvcnkpKTtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7fVxuXG4gIHJlc2V0KCkge1xuICAgIC8vIEZJWE1FOiBXaWxsIGl0IGJlIGVhc2llciB0byByZXBsYWNlIHRoaXMgd2l0aCBpbml0aWFsaXplP1xuICAgIHRoaXMuX3NjZW5lLnJlc2V0KCk7XG4gIH1cblxuICAvKipcbiAgICogUnVucyB0aGUgYXBwLiBUaGlzIHNob3VsZCBiZSBjYWxsZWQgYWZ0ZXIgaW5pdGlhbGl6ZS5cbiAgICpcbiAgICogQSBmZXcgdGhpbmdzIGhhcHBlbiBpZiB0aGlzIGlzIHJ1biBpbiBkZXYgbW9kZTpcbiAgICogLSBUaGUgZHJhdyBhbmQgdXBkYXRlIHN0ZXBzIG9mIGVhY2ggZnJhbWUgYXJlIHdyYXBwZWQgaW4gYSB0cnkvY2F0Y2ggYmxvY2suXG4gICAqIC0gVGhpcyBtZXRob2QgcmV0dXJucyBhIFByb21pc2UgdGhhdCByZWplY3RzIGlmIGFuIGVycm9yIGlzIHRocm93IGR1cmluZyBhbnkgdXBkYXRlIG9yIGRyYXdcbiAgICogICBzdGVwIGFuZCByZXNvbHZlcyB3aGVuIHRoaXMgY29udHJvbGxlciBoYXMgZmluaXNoZWQgKGN1cnJlbnRseSBuZXZlcilcbiAgICovXG4gIHJ1bigpIHtcbiAgICB0aGlzLl9zdGFydEFuaW1hdG9yKCk7XG4gIH1cblxuICBfc3RhcnRBbmltYXRvcigpIHsgLy8gRklYTUU6IERlY291cGxlIHBoeXN4XG4gICAgYW5pbWF0b3Iuc3RhcnRKb2IoUGh5c2ljc0VuZ2luZS5pbnN0YW5jZSk7XG4gICAgYW5pbWF0b3Iuc3RhcnRKb2IodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgc2NlbmUuXG4gICAqXG4gICAqIFRoaXMgdXBkYXRlcyBhbGwgb2YgdGhlIGN1cnJlbnQgcGFyYW1ldGVycyBmb3IgZWFjaCBjb21wb25lbnQgaW4gdGhlIHNjZW5lIGZvciB0aGUgY3VycmVudFxuICAgKiBmcmFtZS4gSG93ZXZlciwgdGhpcyBkb2VzIG5vdCByZW5kZXIgYW55dGhpbmcuIFJlbmRlcmluZyBpcyBkb25lIGJ5IGEgZm9sbG93aW5nIGNhbGwgdG8gdGhlXG4gICAqIGRyYXcgZnVuY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NSGlnaFJlc1RpbWVTdGFtcH0gY3VycmVudFRpbWVcbiAgICogQHBhcmFtIHtET01IaWdoUmVzVGltZVN0YW1wfSBkZWx0YVRpbWVcbiAgICovXG4gIHVwZGF0ZShjdXJyZW50VGltZSwgZGVsdGFUaW1lKSB7XG4gICAgdGhpcy5fc2NlbmUudXBkYXRlU2VsZkFuZENoaWxkcmVuKGN1cnJlbnRUaW1lLCBkZWx0YVRpbWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdzIHRoZSBzY2VuZS5cbiAgICpcbiAgICogVGhpcyByZW5kZXJzIHRoZSBjdXJyZW50IGZyYW1lIGZvciBhbGwgY29tcG9uZW50cyBpbiB0aGUgc2NlbmUuIFRoaXMgYXNzdW1lcyB0aGF0IGFsbCByZWxldmFudFxuICAgKiBwYXJhbWV0ZXIgdXBkYXRlcyBmb3IgdGhpcyBmcmFtZSBoYXZlIGFscmVhZHkgYmVlbiBjb21wdXRlZCBieSBhIHByZXZpb3VzIGNhbGwgdG8gX3VwZGF0ZVNjZW5lLlxuICAgKi9cbiAgZHJhdygpIHtcbiAgICAvLyBDbGVhciB0aGUgY2FudmFzIGJlZm9yZSB3ZSBzdGFydCBkcmF3aW5nIG9uIGl0LlxuICAgIHRoaXMuX2dsLmNsZWFyKHRoaXMuX2dsLkNPTE9SX0JVRkZFUl9CSVQgfCB0aGlzLl9nbC5ERVBUSF9CVUZGRVJfQklUKTtcblxuICAgIC8vIElmIHdlIGFyZSB1c2luZyBhIHBvc3QtcHJvY2Vzc2luZyBwcm9ncmFtLCB0aGVuIHdlIG5lZWQgdG8gcmVuZGVyIG1vZGVscyB0byBhIGZyYW1lYnVmZmVyXG4gICAgLy8gcmF0aGVyIHRoYW4gZGlyZWN0bHkgdG8gdGhlIGNhbnZhcy5cbiAgICBpZiAocHJvZ3JhbVdyYXBwZXJTdG9yZS5pc1VzaW5nUG9zdFByb2Nlc3NpbmdQcm9ncmFtcykge1xuICAgICAgYmluZEZyYW1lYnVmZmVyKHRoaXMuX2dsLCBwcm9ncmFtV3JhcHBlclN0b3JlLm1vZGVsc0ZyYW1lYnVmZmVyKTtcbiAgICAgIHRoaXMuX2dsLmNsZWFyKHRoaXMuX2dsLkNPTE9SX0JVRkZFUl9CSVQgfCB0aGlzLl9nbC5ERVBUSF9CVUZGRVJfQklUKTtcbiAgICB9XG5cbiAgICAvLyBEcmF3IGVhY2ggcHJvZ3JhbSBzZXBhcmF0ZWx5LiBUaGlzIG1pbmltaXplcyBob3cgbWFueSB0aW1lcyB3ZSBuZWVkIHRvIHN3aXRjaCBwcm9ncmFtcyBieVxuICAgIC8vIGdyb3VwaW5nIGFsbCBvZiB0aGUgZHJhdyBjYWxscyBmb3IgbW9kZWxzIHRoYXQgdXNlIHRoZSBzYW1lIHByb2dyYW0vc2hhZGVycy5cbiAgICBwcm9ncmFtV3JhcHBlclN0b3JlLmZvckVhY2hNb2RlbFByb2dyYW0oKHByb2dyYW1XcmFwcGVyLCBkcmF3RnJhbWVIYW5kbGVycykgPT5cbiAgICAgIHRoaXMuX2RyYXdNb2RlbFByb2dyYW0ocHJvZ3JhbVdyYXBwZXIsIGRyYXdGcmFtZUhhbmRsZXJzKSk7XG4gICAgcHJvZ3JhbVdyYXBwZXJTdG9yZS5mb3JFYWNoUG9zdFByb2Nlc3NpbmdQcm9ncmFtKFxuICAgICAgKHByb2dyYW1XcmFwcGVyKSA9PiB0aGlzLl9kcmF3UG9zdFByb2Nlc3NpbmdQcm9ncmFtKHByb2dyYW1XcmFwcGVyKSk7XG4gIH1cblxuICAvKipcbiAgICogRm9yIHRoZSBnaXZlbiBwcm9ncmFtIGtleSwgdGhpcyBiaW5kcyB0aGUgcmVnaXN0ZXJlZCBzaGFkZXIgcHJvZ3JhbSB0byB0aGUgR0wgcmVuZGVyaW5nIGNvbnRleHRcbiAgICogYW5kIGNhbGxzIGVhY2ggb2YgdGhlIHJlZ2lzdGVyZWQgZHJhdy1mcmFtZSBoYW5kbGVycy5cbiAgICpcbiAgICogQHBhcmFtIHtQcm9ncmFtV3JhcHBlcnxHcm91cFByb2dyYW1XcmFwcGVyfSBwcm9ncmFtV3JhcHBlclxuICAgKiBAcGFyYW0ge1NldC48RnVuY3Rpb24+fSBbZHJhd0ZyYW1lSGFuZGxlcnNdXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZHJhd01vZGVsUHJvZ3JhbShwcm9ncmFtV3JhcHBlciwgZHJhd0ZyYW1lSGFuZGxlcnMpIHtcbiAgICAvLyBDaGVjayB3aGV0aGVyIHdlIG5lZWQgdG8gc3dpdGNoIHByb2dyYW1zIChhbHdheXMgdHJ1ZSBpZiB0aGVyZSBpcyBtb3JlIHRoYW4gb25lIHByb2dyYW1cbiAgICAvLyByZWdpc3RlcmVkKS5cbiAgICBpZiAodGhpcy5fY3VycmVudFByb2dyYW1XcmFwcGVyICE9PSBwcm9ncmFtV3JhcHBlcikge1xuICAgICAgcHJvZ3JhbVdyYXBwZXIuc2V0UHJvZ3JhbSh0aGlzLl9nbCk7XG4gICAgICB0aGlzLl9jdXJyZW50UHJvZ3JhbVdyYXBwZXIgPSBwcm9ncmFtV3JhcHBlcjtcbiAgICB9XG5cbiAgICAvLyBDYWxsIGVhY2ggb2YgdGhlIGRyYXctZnJhbWUgaGFuZGxlcnMgdGhhdCB1c2UgdGhlIGN1cnJlbnQgcmVuZGVyaW5nIHByb2dyYW0uXG4gICAgZHJhd0ZyYW1lSGFuZGxlcnMuZm9yRWFjaChkcmF3RnJhbWVIYW5kbGVyID0+IGRyYXdGcmFtZUhhbmRsZXIoKSk7XG4gIH1cblxuICAvKipcbiAgICogRm9yIHRoZSBnaXZlbiBwcm9ncmFtIGtleSwgdGhpcyBiaW5kcyB0aGUgcmVnaXN0ZXJlZCBzaGFkZXIgcHJvZ3JhbSB0byB0aGUgR0wgcmVuZGVyaW5nIGNvbnRleHRcbiAgICogYW5kIGNhbGxzIGVhY2ggb2YgdGhlIHJlZ2lzdGVyZWQgZHJhdy1mcmFtZSBoYW5kbGVycy5cbiAgICpcbiAgICogQHBhcmFtIHtQcm9ncmFtV3JhcHBlcnxHcm91cFByb2dyYW1XcmFwcGVyfSBwcm9ncmFtV3JhcHBlclxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2RyYXdQb3N0UHJvY2Vzc2luZ1Byb2dyYW0ocHJvZ3JhbVdyYXBwZXIpIHtcbiAgICB0aGlzLl9jdXJyZW50UHJvZ3JhbVdyYXBwZXIgPSBwcm9ncmFtV3JhcHBlcjtcbiAgICBwcm9ncmFtV3JhcHBlci5kcmF3KHRoaXMuX2dsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgV2ViR0wgcmVuZGVyaW5nIGNvbnRleHQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0VXBXZWJHTENvbnRleHQoKSB7XG4gICAgLy8gR2V0IHRoZSBXZWJHTCByZW5kZXJpbmcgY29udGV4dC5cbiAgICB0cnkge1xuICAgICAgdGhpcy5fZ2wgPSBnZXRXZWJHTENvbnRleHQodGhpcy5fY2FudmFzKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgIGFsZXJ0KCdXZWJHTCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHlvdXIgYnJvd3NlciEgOignKTtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuXG4gICAgLy8gSGF2ZSB0aGUgY2FudmFzIGNvbnRleHQgbWF0Y2ggdGhlIHJlc29sdXRpb24gb2YgdGhlIHdpbmRvdydzIHZpZXdwb3J0LlxuICAgIGJpbmRHTENvbnRleHRUb1ZpZXdwb3J0RGltZW5zaW9ucyh0aGlzLl9jYW52YXMsIHRoaXMuX2dsLCAoKSA9PiB0aGlzLl91cGRhdGVBc3BlY3RSYXRpbygpKTtcblxuICAgIC8vIENsZWFyIGV2ZXJ5dGhpbmcgdG8gYmxhY2suXG4gICAgdGhpcy5fZ2wuY2xlYXJDb2xvcigwLCAwLCAwLCAxKTtcbiAgICB0aGlzLl9nbC5jbGVhckRlcHRoKDEpO1xuXG4gICAgLy8gRW5hYmxlIGRlcHRoIHRlc3RpbmcuXG4gICAgdGhpcy5fZ2wuZW5hYmxlKHRoaXMuX2dsLkRFUFRIX1RFU1QpO1xuICAgIHRoaXMuX2dsLmRlcHRoRnVuYyh0aGlzLl9nbC5MRVFVQUwpO1xuICB9XG5cbiAgLyoqXG4gICAqIExvYWRzLCBjb21waWxlcywgY2FjaGVzLCBhbmQgaW5pdGlhbGl6ZXMgc29tZSByZW5kZXJpbmcgcHJvZ3JhbXMuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXkuPFByb2dyYW1XcmFwcGVyQ29uZmlnPn0gcHJvZ3JhbUNvbmZpZ3NcbiAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcHJlQ2FjaGVQcm9ncmFtcyhwcm9ncmFtQ29uZmlncykge1xuICAgIGNvbnN0IHByb21pc2VzID1cbiAgICAgIHByb2dyYW1Db25maWdzLm1hcChjb25maWcgPT4gcHJvZ3JhbVdyYXBwZXJTdG9yZS5sb2FkUHJvZ3JhbVdyYXBwZXIodGhpcy5fZ2wsIGNvbmZpZykpO1xuICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gIH1cblxuICAvKipcbiAgICogTG9hZHMsIGNvbXBpbGVzLCBhbmQgY2FjaGVzIHNvbWUgdGV4dHVyZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IHRleHR1cmVQYXRoc1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wcmVDYWNoZVRleHR1cmVzKHRleHR1cmVQYXRocykge1xuICAgIHJldHVybiBQcm9taXNlLmFsbCh0ZXh0dXJlUGF0aHNcbiAgICAgIC5tYXAodGV4dHVyZVBhdGggPT4gdGV4dHVyZVN0b3JlLmxvYWRUZXh0dXJlKHRoaXMuX2dsLCB0ZXh0dXJlUGF0aCkpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgc2NlbmUuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb24uPFNjZW5lPn0gc2NlbmVGYWN0b3J5XG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgKiBAYWJzdHJhY3RcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX3NldFVwU2NlbmUoc2NlbmVGYWN0b3J5KSB7XG4gICAgLy8gRXh0ZW5kaW5nIGNsYXNzZXMgc2hvdWxkIGltcGxlbWVudCB0aGlzIG1ldGhvZC5cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdNZXRob2Qgbm90IGltcGxlbWVudGVkJyk7XG4gIH1cblxuICAvKipcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX3VwZGF0ZUFzcGVjdFJhdGlvKCkge1xuICAgIHRoaXMuX3NjZW5lLmNhbWVyYS5hc3BlY3RSYXRpbyA9IGdldFZpZXdwb3J0V2lkdGgoKSAvIGdldFZpZXdwb3J0SGVpZ2h0KCk7XG4gICAgX3Jlc2l6ZUZyYW1lYnVmZmVyc1RvTWF0Y2hWaWV3cG9ydFNpemUodGhpcy5fZ2wpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHttYXQ0fVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfZ2V0Vmlld01hdHJpeCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2NlbmUuY2FtZXJhLnZpZXdNYXRyaXg7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge21hdDR9XG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9nZXRQcm9qZWN0aW9uTWF0cml4KCkge1xuICAgIHJldHVybiB0aGlzLl9zY2VuZS5jYW1lcmEucHJvamVjdGlvbk1hdHJpeDtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX3Jlc2l6ZUZyYW1lYnVmZmVyc1RvTWF0Y2hWaWV3cG9ydFNpemUoZ2wpIHtcbiAgaWYgKHByb2dyYW1XcmFwcGVyU3RvcmUuaXNVc2luZ1Bvc3RQcm9jZXNzaW5nUHJvZ3JhbXMpIHtcbiAgICBjb25zdCB3aWR0aCA9IGdldFZpZXdwb3J0V2lkdGgoKTtcbiAgICBjb25zdCBoZWlnaHQgPSBnZXRWaWV3cG9ydEhlaWdodCgpO1xuXG4gICAgLy8gVXBkYXRlIHRoZSBwZXItbW9kZWwgZnJhbWVidWZmZXIgdGV4dHVyZS5cbiAgICBjb25zdCB0ZXh0dXJlID0gcHJvZ3JhbVdyYXBwZXJTdG9yZS5tb2RlbHNUZXh0dXJlO1xuICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleHR1cmUpO1xuICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuUkdCQSwgd2lkdGgsIGhlaWdodCwgMCwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgbnVsbCk7XG5cbiAgICAvLyBVcGRhdGUgdGhlIHBlci1tb2RlbCBmcmFtZWJ1ZmZlciBkZXB0aCByZW5kZXIgYnVmZmVyLlxuICAgIGNvbnN0IHJlbmRlckJ1ZmZlciA9IHByb2dyYW1XcmFwcGVyU3RvcmUubW9kZWxzUmVuZGVyQnVmZmVyO1xuICAgIGdsLmJpbmRSZW5kZXJidWZmZXIoZ2wuUkVOREVSQlVGRkVSLCByZW5kZXJCdWZmZXIpO1xuICAgIGdsLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoZ2wuUkVOREVSQlVGRkVSLCBnbC5ERVBUSF9DT01QT05FTlQxNiwgd2lkdGgsIGhlaWdodCk7XG5cbiAgICAvLyBVcGRhdGUgdGhlIHBvc3QtcHJvY2Vzc2luZyBmcmFtZWJ1ZmZlciB0ZXh0dXJlcy5cbiAgICBwcm9ncmFtV3JhcHBlclN0b3JlLmZvckVhY2hQb3N0UHJvY2Vzc2luZ1Byb2dyYW0ocHJvZ3JhbVdyYXBwZXIgPT4ge1xuICAgICAgcHJvZ3JhbVdyYXBwZXIuY29uZmlnLmNoaWxkcmVuRnJhbWVidWZmZXJJZHMuZm9yRWFjaChpZCA9PiB7XG4gICAgICAgIGNvbnN0IHRleHR1cmUgPSBwcm9ncmFtV3JhcHBlclN0b3JlLmdldFRleHR1cmUoaWQpO1xuICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXh0dXJlKTtcbiAgICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCB3aWR0aCwgaGVpZ2h0LCAwLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBudWxsKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCB7IEdyYWZ4Q29udHJvbGxlciB9O1xuIiwiLyoqXG4gKiBUaGlzIGNsYXNzIGRlZmluZXMgYSBsaWdodCBzb3VyY2UuXG4gKi9cbmNsYXNzIExpZ2h0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLy8gVE9ET1xuICB9XG5cbiAgLy8gVE9ETzogSW1wbGVtZW50IHRoaXMuXG59XG5cbmV4cG9ydCB7TGlnaHR9O1xuIiwiaW1wb3J0IHsgTW9kZWxHcm91cENvbnRyb2xsZXIgfSBmcm9tICcuLi9tb2RlbHMnO1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgaGFuZGxlcyB0aGUgb3ZlcmFsbCBzY2VuZS5cbiAqL1xuY2xhc3MgU2NlbmUgZXh0ZW5kcyBNb2RlbEdyb3VwQ29udHJvbGxlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge01vZGVsR3JvdXBDb250cm9sbGVyQ29uZmlnfSBtb2RlbENvbnRyb2xsZXJQYXJhbXNcbiAgICovXG4gIGNvbnN0cnVjdG9yKG1vZGVsQ29udHJvbGxlclBhcmFtcykge1xuICAgIHN1cGVyKG1vZGVsQ29udHJvbGxlclBhcmFtcyk7XG5cbiAgICAvLyBTY2VuZSBpcyBhbiBhYnN0cmFjdCBjbGFzcy4gSXQgc2hvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQgZGlyZWN0bHkuXG4gICAgaWYgKG5ldy50YXJnZXQgPT09IFNjZW5lKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29uc3RydWN0IFNjZW5lIGluc3RhbmNlcyBkaXJlY3RseScpO1xuICAgIH1cblxuICAgIHRoaXMuX2dldFdvcmxkVHJhbnNmb3JtID0gKCkgPT4gdGhpcy53b3JsZFRyYW5zZm9ybTtcbiAgICB0aGlzLl9saWdodHMgPSBbXTtcbiAgICB0aGlzLl9jYW1lcmEgPSBudWxsO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgc3VwZXIucmVzZXQoKTtcbiAgICB0aGlzLl9saWdodHMuZm9yRWFjaChsaWdodCA9PiBsaWdodC5yZXNldCgpKTtcbiAgICB0aGlzLl9jYW1lcmEucmVzZXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0RPTUhpZ2hSZXNUaW1lU3RhbXB9IGN1cnJlbnRUaW1lXG4gICAqIEBwYXJhbSB7RE9NSGlnaFJlc1RpbWVTdGFtcH0gZGVsdGFUaW1lXG4gICAqL1xuICB1cGRhdGVDaGlsZHJlbihjdXJyZW50VGltZSwgZGVsdGFUaW1lKSB7XG4gICAgc3VwZXIudXBkYXRlQ2hpbGRyZW4oY3VycmVudFRpbWUsIGRlbHRhVGltZSk7XG4gICAgdGhpcy5fY2FtZXJhLnVwZGF0ZShjdXJyZW50VGltZSwgZGVsdGFUaW1lKTtcbiAgfVxuXG4gIC8qKiBAcmV0dXJucyB7Q2FtZXJhfSAqL1xuICBnZXQgY2FtZXJhKCkge1xuICAgIHJldHVybiB0aGlzLl9jYW1lcmE7XG4gIH1cbn1cblxuZXhwb3J0IHsgU2NlbmUgfTtcbiIsImV4cG9ydCAqIGZyb20gJy4vc3JjL2dlb21ldHJ5JztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2dsLXV0aWwnO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvaGFzaC1tYXAnO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvdXRpbCc7XG4iLCIvKipcbiAqIFRoaXMgbW9kdWxlIGRlZmluZXMgYSBjb2xsZWN0aW9uIG9mIHN0YXRpYyBnZW9tZXRyeSB1dGlsaXR5IGZ1bmN0aW9ucy5cbiAqL1xuXG5pbXBvcnQge3JhbmRvbUZsb2F0SW5SYW5nZX0gZnJvbSAnLi91dGlsJztcblxuY29uc3QgRVBTSUxPTiA9IDAuMDAwMDAwMTtcbmNvbnN0IERFR19UT19SQURfUkFUSU8gPSBNYXRoLlBJIC8gMTgwO1xuY29uc3QgUkFEX1RPX0RFR19SQVRJTyA9IDE4MCAvIE1hdGguUEk7XG5jb25zdCBIQUxGX1BJID0gTWF0aC5QSSAvIDI7XG5jb25zdCBUV09fUEkgPSBNYXRoLlBJICogMjtcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gZGVnXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5mdW5jdGlvbiBkZWdUb1JhZChkZWcpIHtcbiAgcmV0dXJuIGRlZyAqIERFR19UT19SQURfUkFUSU87XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHJhZFxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZnVuY3Rpb24gcmFkVG9EZWcocmFkKSB7XG4gIHJldHVybiByYWQgKiBSQURfVE9fREVHX1JBVElPO1xufVxuXG4vKipcbiAqIFRoaXMgY2hlY2tzIHdoZXRoZXIgdHdvIGZsb2F0aW5nLXBvaW50IG51bWJlcnMgYXJlIGNsb3NlIGVub3VnaCB0aGF0IHRoZXkgY291bGQgYmUgZXF1YWwgaWYgbm90XG4gKiBmb3Igcm91bmQtb2ZmIGVycm9ycy5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gYVxuICogQHBhcmFtIHtudW1iZXJ9IGJcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBhcmVDbG9zZShhLCBiKSB7XG4gIGNvbnN0IGRpZmYgPSBhIC0gYjtcbiAgcmV0dXJuIChkaWZmID4gMCA/IGRpZmYgOiAtZGlmZikgPCBFUFNJTE9OO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7dmVjM30gYVxuICogQHBhcmFtIHt2ZWMzfSBiXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gYXJlVmVjM3NFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhWzBdID09PSBiWzBdICYmXG4gICAgICBhWzFdID09PSBiWzFdICYmXG4gICAgICBhWzJdID09PSBiWzJdO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7dmVjM30gdlxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gdmVjM1RvU3RyaW5nKHYpIHtcbiAgcmV0dXJuIGAoJHt2WzBdfSwke3ZbMV19LCR7dlsyXX0pYDtcbn1cblxuLyoqXG4gKiBUT0RPOiBUaGlzIGZpbmRzIGEgcmFuZG9tIHBvaW50IHdpdGggdW5pZm9ybSBwcm9iYWJpbGl0eSB3aXRoaW4gYSBjdWJpYyBhcmVhLCB3aGljaCBiaWFzZXMgdGhlIHJlc3VsdGluZyB2ZWN0b3IgdG93YXJkIHRoZSBjb3JuZXJzIG9mIHRoaXMgY3ViaWMgYXJlYS4gUmUtd3JpdGUgdGhpcyB0byBwcm9kdWNlIGFuIHVuYmlhc2VkIHZlY3Rvci5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gW3NjYWxlPTFdXG4gKiBAcmV0dXJucyB7dmVjM31cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUmFuZG9tVmVjMyhzY2FsZSA9IDEpIHtcbiAgY29uc3QgdiA9IHZlYzMuY3JlYXRlKCk7XG4gIHJldHVybiBzZXRSYW5kb21WZWMzKHYsIHNjYWxlKTtcbn1cblxuLyoqXG4gKiBUT0RPOiBUaGlzIGZpbmRzIGEgcmFuZG9tIHBvaW50IHdpdGggdW5pZm9ybSBwcm9iYWJpbGl0eSB3aXRoaW4gYSBjdWJpYyBhcmVhLCB3aGljaCBiaWFzZXMgdGhlIHJlc3VsdGluZyB2ZWN0b3IgdG93YXJkIHRoZSBjb3JuZXJzIG9mIHRoaXMgY3ViaWMgYXJlYS4gUmUtd3JpdGUgdGhpcyB0byBwcm9kdWNlIGFuIHVuYmlhc2VkIHZlY3Rvci5cbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IHZcbiAqIEBwYXJhbSB7bnVtYmVyfSBbc2NhbGU9MV1cbiAqIEByZXR1cm5zIHt2ZWMzfVxuICovXG5mdW5jdGlvbiBzZXRSYW5kb21WZWMzKHYsIHNjYWxlID0gMSkge1xuICB2ZWMzLnNldCh2LCBNYXRoLnJhbmRvbSgpIC0gMC41LCBNYXRoLnJhbmRvbSgpIC0gMC41LCBNYXRoLnJhbmRvbSgpIC0gMC41KTtcbiAgdmVjMy5ub3JtYWxpemUodiwgdik7XG4gIHZlYzMuc2NhbGUodiwgdiwgc2NhbGUpO1xuICByZXR1cm4gdjtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIGEgdmVjdG9yIHRoYXQgaXMgb3J0aG9nb25hbCB0byB0aGUgZ2l2ZW4gdmVjdG9yLlxuICpcbiAqIFRPRE86IFRoaXMgZmluZHMgYSByYW5kb20gcG9pbnQgd2l0aCB1bmlmb3JtIHByb2JhYmlsaXR5IHdpdGhpbiBhIGN1YmljIGFyZWEsIHdoaWNoIGJpYXNlcyB0aGUgcmVzdWx0aW5nIHZlY3RvciB0b3dhcmQgdGhlIGNvcm5lcnMgb2YgdGhpcyBjdWJpYyBhcmVhLiBSZS13cml0ZSB0aGlzIHRvIHByb2R1Y2UgYW4gdW5iaWFzZWQgdmVjdG9yLlxuICpcbiAqIEBwYXJhbSB7dmVjM30gYmFzaXNcbiAqIEBwYXJhbSB7bnVtYmVyfSBbc2NhbGU9MV1cbiAqIEByZXR1cm5zIHt2ZWMzfVxuICovXG5mdW5jdGlvbiBjcmVhdGVSYW5kb21PcnRob2dvbmFsVmVjMyhiYXNpcywgc2NhbGUgPSAxKSB7XG4gIGNvbnN0IHJlc3VsdCA9IHZlYzMuY3JlYXRlKCk7XG4gIHJldHVybiBzZXRSYW5kb21PcnRob2dvbmFsVmVjMyhyZXN1bHQsIGJhc2lzLCBzY2FsZSk7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyBhIHZlY3RvciB0aGF0IGlzIG9ydGhvZ29uYWwgdG8gdGhlIGdpdmVuIHZlY3Rvci5cbiAqXG4gKiBUT0RPOiBUaGlzIGZpbmRzIGEgcmFuZG9tIHBvaW50IHdpdGggdW5pZm9ybSBwcm9iYWJpbGl0eSB3aXRoaW4gYSBjdWJpYyBhcmVhLCB3aGljaCBiaWFzZXMgdGhlIHJlc3VsdGluZyB2ZWN0b3IgdG93YXJkIHRoZSBjb3JuZXJzIG9mIHRoaXMgY3ViaWMgYXJlYS4gUmUtd3JpdGUgdGhpcyB0byBwcm9kdWNlIGFuIHVuYmlhc2VkIHZlY3Rvci5cbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IHJlc3VsdFxuICogQHBhcmFtIHt2ZWMzfSBiYXNpc1xuICogQHBhcmFtIHtudW1iZXJ9IFtzY2FsZT0xXVxuICogQHJldHVybnMge3ZlYzN9XG4gKi9cbmZ1bmN0aW9uIHNldFJhbmRvbU9ydGhvZ29uYWxWZWMzKHJlc3VsdCwgYmFzaXMsIHNjYWxlID0gMSkge1xuICBzZXRSYW5kb21WZWMzKHJlc3VsdCk7XG4gIC8vIFRoaXMgaXMgYmFzZWQgb24gdGhlIGRvdCBhbmQgY3Jvc3MgcHJvZHVjdHMgYW5kIHRoZSBmYWN0IHRoYXQgdGhlIGRvdCBwcm9kdWN0IGZvciB0d29cbiAgLy8gb3J0aG9nb25hbCB2ZWN0b3JzIGlzIHplcm8uXG4gIHJlc3VsdFsyXSA9IC0oYmFzaXNbMF0gKiByZXN1bHRbMF0gKyBiYXNpc1sxXSAqIHJlc3VsdFsxXSkgLyBiYXNpc1syXTtcbiAgdmVjMy5ub3JtYWxpemUocmVzdWx0LCByZXN1bHQpO1xuICB2ZWMzLnNjYWxlKHJlc3VsdCwgcmVzdWx0LCBzY2FsZSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQHBhcmFtIHt2ZWMzfSBhdmdcbiAqIEBwYXJhbSB7dmVjM30gcmFuZ2VcbiAqIEByZXR1cm5zIHt2ZWMzfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmFuZG9tVmVjM0luUmFuZ2UoYXZnLCByYW5nZSkge1xuICBjb25zdCBwb3NpdGlvbiA9IHZlYzMuY3JlYXRlKCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgY29uc3QgbWluID0gYXZnW2ldIC0gcmFuZ2VbaV0gLyAyO1xuICAgIGNvbnN0IG1heCA9IGF2Z1tpXSArIHJhbmdlW2ldIC8gMjtcbiAgICBwb3NpdGlvbltpXSA9IHJhbmRvbUZsb2F0SW5SYW5nZShtaW4sIG1heCk7XG4gIH1cbiAgcmV0dXJuIHBvc2l0aW9uO1xufVxuXG4vKipcbiAqIFJvdGF0ZXMgdGhlIGdpdmVuIHZlY3RvciBhcm91bmQgYSByYW5kb20gb3J0aG9nb25hbCBheGlzIGJ5IGEgcmFuZG9tIGFuZ2xlIHdpdGhpbiB0aGUgZ2l2ZW4gYW5nbGVcbiAqIGJvdW5kcy5cbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IHZcbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW5Sb3RhdGlvbkFuZ2xlXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4Um90YXRpb25BbmdsZVxuICovXG5mdW5jdGlvbiBhZGRSYW5kb21Sb3RhdGlvblRvVmVjdG9yKHYsIG1pblJvdGF0aW9uQW5nbGUsIG1heFJvdGF0aW9uQW5nbGUpIHtcbiAgLy8gQ3JlYXRlIGEgcmFuZG9tIG9ydGhvZ29uYWwgYXhpcy5cbiAgY29uc3Qgcm90YXRpb25BeGlzID0gY3JlYXRlUmFuZG9tVmVjMygpO1xuICB2ZWMzLmNyb3NzKHJvdGF0aW9uQXhpcywgcm90YXRpb25BeGlzLCB2KTtcbiAgdmVjMy5ub3JtYWxpemUocm90YXRpb25BeGlzLCByb3RhdGlvbkF4aXMpO1xuXG4gIC8vIENyZWF0ZSBhIHJhbmRvbSBhbmdsZS5cbiAgY29uc3Qgcm90YXRpb25BbmdsZSA9IHJhbmRvbUZsb2F0SW5SYW5nZShtaW5Sb3RhdGlvbkFuZ2xlLCBtYXhSb3RhdGlvbkFuZ2xlKTtcblxuICAvLyBDcmVhdGUgYSByb3RhdGlvbiBxdWF0ZXJuaW9uLlxuICBjb25zdCByb3RhdGlvbiA9IHF1YXQuY3JlYXRlKCk7XG4gIHF1YXQuc2V0QXhpc0FuZ2xlKHJvdGF0aW9uLCByb3RhdGlvbkF4aXMsIHJvdGF0aW9uQW5nbGUpO1xuXG4gIC8vIEFwcGx5IHRoZSByb3RhdGlvbiB0byB0aGUgdmVjdG9yLlxuICB2ZWMzLnRyYW5zZm9ybVF1YXQodiwgdiwgcm90YXRpb24pO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7cXVhdH0gb3V0XG4gKiBAcGFyYW0ge3F1YXR9IGFcbiAqIEBwYXJhbSB7cXVhdH0gYlxuICogQHBhcmFtIHtudW1iZXJ9IHNjYWxlXG4gKiBAcmV0dXJucyB7cXVhdH1cbiAqL1xuZnVuY3Rpb24gc2NhbGVBbmRBZGRRdWF0KG91dCwgYSwgYiwgc2NhbGUpIHtcbiAgcmV0dXJuIHF1YXQuc2V0KG91dCxcbiAgICAgIGFbMF0gKyBiWzBdICogc2NhbGUsXG4gICAgICBhWzFdICsgYlsxXSAqIHNjYWxlLFxuICAgICAgYVsyXSArIGJbMl0gKiBzY2FsZSxcbiAgICAgIGFbM10gKyBiWzNdICogc2NhbGUpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7dmVjM30gdlxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZnVuY3Rpb24gZ2V0TWF4VmVjM0RpbWVuc2lvbih2KSB7XG4gIGxldCBtYXggPSB2WzBdID4gdlsxXSA/IHZbMF0gOiB2WzFdO1xuICBtYXggPSBtYXggPiB2WzJdID8gbWF4IDogdlsyXTtcbiAgcmV0dXJuIG1heDtcbn1cblxuZXhwb3J0IHtcbiAgRVBTSUxPTixcbiAgSEFMRl9QSSxcbiAgVFdPX1BJLFxuICBkZWdUb1JhZCxcbiAgcmFkVG9EZWcsXG4gIGFyZUNsb3NlLFxuICBhcmVWZWMzc0VxdWFsLFxuICB2ZWMzVG9TdHJpbmcsXG4gIGNyZWF0ZVJhbmRvbVZlYzMsXG4gIHNldFJhbmRvbVZlYzMsXG4gIGNyZWF0ZVJhbmRvbU9ydGhvZ29uYWxWZWMzLFxuICBzZXRSYW5kb21PcnRob2dvbmFsVmVjMyxcbiAgcmFuZG9tVmVjM0luUmFuZ2UsXG4gIGFkZFJhbmRvbVJvdGF0aW9uVG9WZWN0b3IsXG4gIHNjYWxlQW5kQWRkUXVhdCxcbiAgZ2V0TWF4VmVjM0RpbWVuc2lvbixcbn07XG4iLCIvKipcbiAqIFRoaXMgbW9kdWxlIGRlZmluZXMgYSBjb2xsZWN0aW9uIG9mIHN0YXRpYyBnZW5lcmFsIHV0aWxpdHkgZnVuY3Rpb25zIGZvciBXZWJHTC5cbiAqL1xuXG5pbXBvcnQge0hhc2hNYXB9IGZyb20gJy4vaGFzaC1tYXAnO1xuaW1wb3J0IHtIQUxGX1BJLCBUV09fUEl9IGZyb20gJy4vZ2VvbWV0cnknO1xuaW1wb3J0IHtkZWJvdW5jZSwgaXNJbkRldk1vZGUsIGxvYWRUZXh0fSBmcm9tICcuL3V0aWwnO1xuaW1wb3J0IHtwcm9ncmFtV3JhcHBlclN0b3JlfSBmcm9tICcuLi8uLi9wcm9ncmFtLXdyYXBwZXIvc3JjL3Byb2dyYW0td3JhcHBlci1zdG9yZSc7XG5cbmxldCB2aWV3cG9ydFdpZHRoID0gMTA7XG5sZXQgdmlld3BvcnRIZWlnaHQgPSAxMDtcblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxDYW52YXNFbGVtZW50fSBjYW52YXNcbiAqIEByZXR1cm5zIHs/V2ViR0xSZW5kZXJpbmdDb250ZXh0fVxuICogQHRocm93cyBJZiB1bmFibGUgdG8gZ2V0IGEgV2ViR0wgY29udGV4dC5cbiAqL1xuZnVuY3Rpb24gZ2V0V2ViR0xDb250ZXh0KGNhbnZhcykge1xuICBjb25zdCBwYXJhbXMgPSB7YWxwaGE6IGZhbHNlfTtcbiAgLy8gVHJ5IHRvIGdyYWIgdGhlIHN0YW5kYXJkIGNvbnRleHQuIElmIGl0IGZhaWxzLCBmYWxsYmFjayB0byB0aGUgZXhwZXJpbWVudGFsIGNvbnRleHQuXG4gIHJldHVybiBjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wnLCBwYXJhbXMpIHx8IGNhbnZhcy5nZXRDb250ZXh0KCdleHBlcmltZW50YWwtd2ViZ2wnLCBwYXJhbXMpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbFxuICogQHJldHVybnMgez9XZWJHTEJ1ZmZlcn1cbiAqIEB0aHJvd3MgSWYgdW5hYmxlIHRvIGNyZWF0ZSBhIGJ1ZmZlciBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlcihnbCkge1xuICBjb25zdCBidWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcbiAgaWYgKCFidWZmZXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0FuIGVycm9yIG9jY3VycmVkIGNyZWF0aW5nIHRoZSBidWZmZXIgb2JqZWN0Jyk7XG4gIH1cbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cbi8vIFRPRE86IHVzZSBhbGwgdGhpcyBoZWxwZXIgc3R1ZmYgaW4gdGhlIHByb2dyYW1XcmFwcGVyIGxvZ2ljP1xuLyoqXG4gKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2xcbiAqIEBwYXJhbSB7V2ViR0xQcm9ncmFtfSBwcm9ncmFtXG4gKiBAcGFyYW0ge3N0cmluZ30gbG9jYXRpb25OYW1lXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICogQHRocm93cyBJZiB1bmFibGUgdG8gZ2V0IGFuIGF0dHJpYnV0ZSBsb2NhdGlvbiBmb3IgdGhlIGdpdmVuIG5hbWUuXG4gKi9cbmZ1bmN0aW9uIGdldEF0dHJpYkxvY2F0aW9uKGdsLCBwcm9ncmFtLCBsb2NhdGlvbk5hbWUpIHtcbiAgY29uc3QgYXR0cmliTG9jYXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihwcm9ncmFtLCBsb2NhdGlvbk5hbWUpO1xuICBpZiAoYXR0cmliTG9jYXRpb24gPCAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBBbiBlcnJvciBvY2N1cnJlZCBnZXR0aW5nIHRoZSBhdHRyaWJ1dGUgbG9jYXRpb246ICR7bG9jYXRpb25OYW1lfWApO1xuICB9XG4gIHJldHVybiBhdHRyaWJMb2NhdGlvbjtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2xcbiAqIEBwYXJhbSB7V2ViR0xTaGFkZXJ9IHZlcnRleFNoYWRlclxuICogQHBhcmFtIHtXZWJHTFNoYWRlcn0gZnJhZ21lbnRTaGFkZXJcbiAqIEByZXR1cm5zIHtXZWJHTFByb2dyYW19XG4gKiBAdGhyb3dzIElmIHVuYWJsZSB0byBsaW5rIHRoZSBwcm9ncmFtLlxuICovXG5mdW5jdGlvbiBidWlsZFByb2dyYW0oZ2wsIHZlcnRleFNoYWRlciwgZnJhZ21lbnRTaGFkZXIpIHtcbiAgY29uc3QgcHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcbiAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIHZlcnRleFNoYWRlcik7XG4gIGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCBmcmFnbWVudFNoYWRlcik7XG4gIGdsLmxpbmtQcm9ncmFtKHByb2dyYW0pO1xuXG4gIGlmICghZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5MSU5LX1NUQVRVUykpIHtcbiAgICBjb25zdCBpbmZvTG9nID0gZ2wuZ2V0UHJvZ3JhbUluZm9Mb2cocHJvZ3JhbSk7XG4gICAgY29uc29sZS5lcnJvcignQW4gZXJyb3Igb2NjdXJyZWQgbGlua2luZyB0aGUgc2hhZGVyIHByb2dyYW0nLCBpbmZvTG9nKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0FuIGVycm9yIG9jY3VycmVkIGxpbmtpbmcgdGhlIHNoYWRlciBwcm9ncmFtJyk7XG4gIH1cblxuICByZXR1cm4gcHJvZ3JhbTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2xcbiAqIEBwYXJhbSB7c3RyaW5nfSBzaGFkZXJTb3VyY2VcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNGcmFnbWVudFNoYWRlclxuICogQHJldHVybnMge1dlYkdMU2hhZGVyfVxuICogQHRocm93cyBJZiB1bmFibGUgdG8gY29tcGlsZSB0aGUgc2hhZGVyLlxuICovXG5mdW5jdGlvbiBidWlsZFNoYWRlcihnbCwgc2hhZGVyU291cmNlLCBpc0ZyYWdtZW50U2hhZGVyKSB7XG4gIGNvbnN0IHNoYWRlclR5cGUgPSBpc0ZyYWdtZW50U2hhZGVyID8gZ2wuRlJBR01FTlRfU0hBREVSIDogZ2wuVkVSVEVYX1NIQURFUjtcbiAgY29uc3Qgc2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKHNoYWRlclR5cGUpO1xuICBnbC5zaGFkZXJTb3VyY2Uoc2hhZGVyLCBzaGFkZXJTb3VyY2UpO1xuICBnbC5jb21waWxlU2hhZGVyKHNoYWRlcik7XG5cbiAgaWYgKCFnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoc2hhZGVyLCBnbC5DT01QSUxFX1NUQVRVUykpIHtcbiAgICBjb25zdCBpbmZvTG9nID0gZ2wuZ2V0U2hhZGVySW5mb0xvZyhzaGFkZXIpO1xuICAgIGNvbnNvbGUuZXJyb3IoJ0FuIGVycm9yIG9jY3VycmVkIGNvbXBpbGluZyB0aGUgc2hhZGVyJywgaW5mb0xvZyk7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBbiBlcnJvciBvY2N1cnJlZCBjb21waWxpbmcgdGhlIHNoYWRlcicpO1xuICB9XG5cbiAgcmV0dXJuIHNoYWRlcjtcbn1cblxuLyoqXG4gKiBMb2FkcyBhIHNoYWRlciBwcm9ncmFtIGJ5IHNjb3VyaW5nIHRoZSBjdXJyZW50IGRvY3VtZW50LCBsb29raW5nIGZvciBhIHNjcmlwdCB3aXRoIHRoZSBzcGVjaWZpZWRcbiAqIElELlxuICpcbiAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbFxuICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICogQHJldHVybnMge1Byb21pc2UuPFdlYkdMU2hhZGVyLCBFcnJvcj59XG4gKi9cbmZ1bmN0aW9uIGxvYWRTaGFkZXIoZ2wsIHVybCkge1xuICByZXR1cm4gbG9hZFRleHQodXJsKVxuICAgICAgLnRoZW4oc2hhZGVyU291cmNlID0+IGJ1aWxkU2hhZGVyKGdsLCBzaGFkZXJTb3VyY2UsIHVybC5lbmRzV2l0aCgnLmZyYWcnKSkpO1xufVxuXG4vKipcbiAqIExvYWRzIHRoZSBzaGFkZXIgc291cmNlIGNvZGUgZnJvbSB0aGUgZ2l2ZW4gVVJMcywgY29tcGlsZXMgdGhlIHNoYWRlciBzb3VyY2UgY29kZSwgYW5kIGNyZWF0ZXNcbiAqIGEgcHJvZ3JhbSBmcm9tIHRoZSByZXN1bHRpbmcgc2hhZGVycy5cbiAqXG4gKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2xcbiAqIEBwYXJhbSB7c3RyaW5nfSB2ZXJ0ZXhTaGFkZXJVcmxcbiAqIEBwYXJhbSB7c3RyaW5nfSBmcmFnbWVudFNoYWRlclVybFxuICogQHJldHVybnMge1Byb21pc2UuPFdlYkdMUHJvZ3JhbSwgRXJyb3I+fVxuICogQHRocm93cyBJZiBhbnkgZXJyb3Igb2NjdXJzIHdoaWxlIGxvYWRpbmcgYW5kIGJ1aWxkaW5nIHRoZSBzaGFkZXJzIGFuZCBwcm9ncmFtLlxuICovXG5mdW5jdGlvbiBsb2FkUHJvZ3JhbShnbCwgdmVydGV4U2hhZGVyVXJsLCBmcmFnbWVudFNoYWRlclVybCkge1xuICByZXR1cm4gUHJvbWlzZS5hbGwoW1xuICAgICAgICB2ZXJ0ZXhTaGFkZXJVcmwsXG4gICAgICAgIGZyYWdtZW50U2hhZGVyVXJsXG4gICAgICBdLm1hcCh1cmwgPT4gbG9hZFNoYWRlcihnbCwgdXJsKSkpXG4gICAgICAudGhlbihzaGFkZXJzID0+IHtcbiAgICAgICAgY29uc3QgdmVydGV4U2hhZGVyID0gc2hhZGVyc1swXTtcbiAgICAgICAgY29uc3QgZnJhZ21lbnRTaGFkZXIgPSBzaGFkZXJzWzFdO1xuXG4gICAgICAgIHJldHVybiBidWlsZFByb2dyYW0oZ2wsIHZlcnRleFNoYWRlciwgZnJhZ21lbnRTaGFkZXIpO1xuICAgICAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlLCBiaW5kLCBhbmQgbW92ZSB0aGUgZ2l2ZW4gcmF3IGRhdGEgaW50byBhIFdlYkdMIGJ1ZmZlci5cbiAqXG4gKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2xcbiAqIEBwYXJhbSB7QXJyYXkuPE51bWJlcj59IHJhd0RhdGEgQSBwbGFpbiwgZmxhdCBhcnJheSBjb250YWluaW5nIHRoZSBkYXRhIHRvIGJpbmQgdG8gYSBidWZmZXIuXG4gKiBAcGFyYW0ge251bWJlcn0gW3RhcmdldD1nbC5BUlJBWV9CVUZGRVJdIEFuIGVudW0gZGVzY3JpYmluZyB0aGUgdHlwZSBvZiB0aGlzIGJ1ZmZlcjsgb25lIG9mOlxuICogICAtIGdsLkFSUkFZX0JVRkZFUixcbiAqICAgLSBnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbdXNhZ2U9Z2wuU1RBVElDX0RSQVddIEFuIGVudW0gZGVzY3JpYmluZyBob3cgdGhpcyBidWZmZXIgaXMgZ29pbmcgdG8gYmUgdXNlZDtcbiAqIG9uZSBvZjpcbiAqICAgLSBnbC5TVEFUSUNfRFJBVyxcbiAqICAgLSBnbC5EWU5BTUlDX0RSQVcsXG4gKiAgIC0gZ2wuU1RSRUFNX0RSQVcuXG4gKiBAcmV0dXJucyB7V2ViR0xCdWZmZXJ9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlckZyb21EYXRhKGdsLCByYXdEYXRhLCB0YXJnZXQsIHVzYWdlKSB7XG4gIHRhcmdldCA9IHRhcmdldCB8fCBnbC5BUlJBWV9CVUZGRVI7XG4gIHVzYWdlID0gdXNhZ2UgfHwgZ2wuU1RBVElDX0RSQVc7XG4gIGNvbnN0IHR5cGVkQXJyYXkgPSB0YXJnZXQgPT09IGdsLkFSUkFZX0JVRkZFUiA/IG5ldyBGbG9hdDMyQXJyYXkocmF3RGF0YSkgOiBuZXcgVWludDE2QXJyYXkocmF3RGF0YSk7XG5cbiAgY29uc3QgYnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG4gIGdsLmJpbmRCdWZmZXIodGFyZ2V0LCBidWZmZXIpO1xuICBnbC5idWZmZXJEYXRhKHRhcmdldCwgdHlwZWRBcnJheSwgdXNhZ2UpO1xuXG4gIC8vIE1ha2luZyB0aGUgb3JpZ2luYWwgZGF0YSB2aXNpYmxlIG9uIHRoZSBidWZmZXIgb2JqZWN0IGlzIGhlbHBmdWwgZm9yIGRlYnVnZ2luZy5cbiAgaWYgKGlzSW5EZXZNb2RlKSB7XG4gICAgYnVmZmVyLnJhd0RhdGEgPSB0eXBlZEFycmF5O1xuICB9XG5cbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cblxuLyoqXG4gKiBBZGp1c3RzIHRoZSBkaW1lbnNpb25zIG9mIHRoZSBnaXZlbiBlbGVtZW50IHRvIG1hdGNoIHRob3NlIG9mIHRoZSB2aWV3cG9ydC4gQWxzbywgd2hlbiB0aGVcbiAqIHZpZXdwb3J0IGlzIHJlc2l6ZWQsIHRoZSBnaXZlbiBlbGVtZW50IHdpbGwgYWxzbyBiZSByZXNpemVkIHRvIG1hdGNoLlxuICpcbiAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnR9IGNhbnZhc1xuICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvbkdMUmVzaXplZFxuICogQHBhcmFtIHs/TnVtYmVyfSBbdXBkYXRlSW50ZXJ2YWw9MTUwXVxuICovXG5mdW5jdGlvbiBiaW5kR0xDb250ZXh0VG9WaWV3cG9ydERpbWVuc2lvbnMoY2FudmFzLCBnbCwgb25HTFJlc2l6ZWQsIHVwZGF0ZUludGVydmFsID0gMTUwKSB7XG4gIF9yZXNpemVHTENvbnRleHRUb01hdGNoVmlld3BvcnREaW1lbnNpb25zKGNhbnZhcywgZ2wpO1xuICBjb25zdCBkZWJvdW5jZWRSZXNpemUgPVxuICAgICAgZGVib3VuY2UoXyA9PiB7XG4gICAgICAgIF9yZXNpemVHTENvbnRleHRUb01hdGNoVmlld3BvcnREaW1lbnNpb25zKGNhbnZhcywgZ2wpO1xuICAgICAgICBvbkdMUmVzaXplZCgpO1xuICAgICAgfSwgdXBkYXRlSW50ZXJ2YWwpO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZGVib3VuY2VkUmVzaXplKTtcbn1cblxuLyoqXG4gKiBSZXNpemVzIHRoZSBnaXZlbiBlbGVtZW50IHRvIG1hdGNoIHRoZSBkaW1lbnNpb25zIG9mIHRoZSB2aWV3cG9ydCBjb21wb25lbnRzLlxuICpcbiAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnR9IGNhbnZhc1xuICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfcmVzaXplR0xDb250ZXh0VG9NYXRjaFZpZXdwb3J0RGltZW5zaW9ucyhjYW52YXMsIGdsKSB7XG4gIC8vIEFjY291bnQgZm9yIGhpZ2gtZGVmaW5pdGlvbiBEUEkgZGlzcGxheXMuXG4gIGNvbnN0IGRldmljZVBpeGVsVG9Dc3NQaXhlbFJhdGlvID0gd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMTtcbiAgdmlld3BvcnRXaWR0aCA9IE1hdGguZmxvb3IoY2FudmFzLmNsaWVudFdpZHRoICogZGV2aWNlUGl4ZWxUb0Nzc1BpeGVsUmF0aW8pO1xuICB2aWV3cG9ydEhlaWdodCA9IE1hdGguZmxvb3IoY2FudmFzLmNsaWVudEhlaWdodCAqIGRldmljZVBpeGVsVG9Dc3NQaXhlbFJhdGlvKTtcbiAgY2FudmFzLndpZHRoID0gdmlld3BvcnRXaWR0aDtcbiAgY2FudmFzLmhlaWdodCA9IHZpZXdwb3J0SGVpZ2h0O1xuICBnbC52aWV3cG9ydCgwLCAwLCB2aWV3cG9ydFdpZHRoLCB2aWV3cG9ydEhlaWdodCk7XG59XG5cbi8qKlxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZnVuY3Rpb24gZ2V0Vmlld3BvcnRXaWR0aCgpIHtcbiAgcmV0dXJuIHZpZXdwb3J0V2lkdGg7XG59XG5cbi8qKlxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZnVuY3Rpb24gZ2V0Vmlld3BvcnRIZWlnaHQoKSB7XG4gIHJldHVybiB2aWV3cG9ydEhlaWdodDtcbn1cblxuLyoqXG4gKiBCaW5kcyBhIGZyYW1lYnVmZmVyIHRvIHRoZSBHTCBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbFxuICogQHBhcmFtIHtXZWJHTEZyYW1lYnVmZmVyfSBmcmFtZWJ1ZmZlclxuICovXG5mdW5jdGlvbiBiaW5kRnJhbWVidWZmZXIoZ2wsIGZyYW1lYnVmZmVyLCB3aWR0aCwgaGVpZ2h0KSB7XG4gIC8vIEZJWE1FOiBSZW1vdmUgb3IgYWRkIGJhY2sgaW4/XG4gIC8vIHdpZHRoID0gd2lkdGggfHwgZ2V0Vmlld3BvcnRXaWR0aCgpO1xuICAvLyBoZWlnaHQgPSBoZWlnaHQgfHwgZ2V0Vmlld3BvcnRIZWlnaHQoKTtcblxuICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIGZyYW1lYnVmZmVyKTtcbiAgLy8gRklYTUU6IFJlbW92ZSBvciBhZGQgYmFjayBpbj9cbiAgLy8gZ2wudmlld3BvcnQoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZyYW1lYnVmZmVyIGFuZCBhdHRhY2hlcyBhIHRleHR1cmUgdG8gdGhlIGZyYW1lYnVmZmVyLlxuICpcbiAqIFRoaXMgbWVhbnMgdGhhdCB3aGVuIHdlIGJpbmQgdG8gdGhlIGZyYW1lYnVmZmVyLCBkcmF3IGNhbGxzIHdpbGwgcmVuZGVyIHRvIHRoZSBnaXZlbiB0ZXh0dXJlLlxuICpcbiAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbFxuICogQHBhcmFtIHtXZWJHTFRleHR1cmV9IHRleHR1cmVcbiAqIEBwYXJhbSB7V2ViR0xSZW5kZXJCdWZmZXJ9IFtyZW5kZXJCdWZmZXJdXG4gKiBAcmV0dXJucyB7V2ViR0xGcmFtZWJ1ZmZlcn1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlRnJhbWVidWZmZXIoZ2wsIHRleHR1cmUsIHJlbmRlckJ1ZmZlcikge1xuICBjb25zdCBmcmFtZWJ1ZmZlciA9IGdsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XG5cbiAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBmcmFtZWJ1ZmZlcik7XG4gIGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKGdsLkZSQU1FQlVGRkVSLCBnbC5DT0xPUl9BVFRBQ0hNRU5UMCwgZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZSwgMCk7XG5cbiAgaWYgKHJlbmRlckJ1ZmZlcikge1xuICAgIGdsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBnbC5ERVBUSF9BVFRBQ0hNRU5ULCBnbC5SRU5ERVJCVUZGRVIsIHJlbmRlckJ1ZmZlcik7XG4gIH1cblxuICByZXR1cm4gZnJhbWVidWZmZXI7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHRleHR1cmUgZm9yIHJlbmRlcmluZyB0by5cbiAqXG4gKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2xcbiAqIEBwYXJhbSB7bnVtYmVyfSBbd2lkdGhdIERlZmF1bHRzIHRvIHRoZSB2aWV3cG9ydCB3aWR0aCBzdG9yZWQgaW4gZ2wtdXRpbC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbaGVpZ2h0XSBEZWZhdWx0cyB0byB0aGUgdmlld3BvcnQgaGVpZ2h0IHN0b3JlZCBpbiBnbC11dGlsLlxuICogQHJldHVybnMge1dlYkdMVGV4dHVyZX1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlVGV4dHVyZUZvclJlbmRlcmluZyhnbCwgd2lkdGgsIGhlaWdodCkge1xuICB3aWR0aCA9IHdpZHRoIHx8IGdldFZpZXdwb3J0V2lkdGgoKTtcbiAgaGVpZ2h0ID0gaGVpZ2h0IHx8IGdldFZpZXdwb3J0SGVpZ2h0KCk7XG5cbiAgLy8gVE9ETzogRG91YmxlLWNoZWNrIHRoZXNlIHBhcmFtc1xuICBjb25zdCB0ZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xuICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXh0dXJlKTtcbiAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfUywgZ2wuQ0xBTVBfVE9fRURHRSk7XG4gIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1QsIGdsLkNMQU1QX1RPX0VER0UpO1xuICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTkVBUkVTVCk7XG4gIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbC5ORUFSRVNUKTtcbiAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCB3aWR0aCwgaGVpZ2h0LCAwLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBudWxsKTtcblxuICByZXR1cm4gdGV4dHVyZTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgcmVuZGVyIGJ1ZmZlci5cbiAqXG4gKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2xcbiAqIEBwYXJhbSB7bnVtYmVyfSBbd2lkdGhdIERlZmF1bHRzIHRvIHRoZSB2aWV3cG9ydCB3aWR0aCBzdG9yZWQgaW4gZ2wtdXRpbC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbaGVpZ2h0XSBEZWZhdWx0cyB0byB0aGUgdmlld3BvcnQgaGVpZ2h0IHN0b3JlZCBpbiBnbC11dGlsLlxuICogQHJldHVybnMge1dlYkdMUmVuZGVyQnVmZmVyfVxuICovXG5mdW5jdGlvbiBjcmVhdGVSZW5kZXJCdWZmZXIoZ2wsIHdpZHRoLCBoZWlnaHQpIHtcbiAgd2lkdGggPSB3aWR0aCB8fCBnZXRWaWV3cG9ydFdpZHRoKCk7XG4gIGhlaWdodCA9IGhlaWdodCB8fCBnZXRWaWV3cG9ydEhlaWdodCgpO1xuXG4gIGNvbnN0IHJlbmRlckJ1ZmZlciA9IGdsLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpO1xuICBnbC5iaW5kUmVuZGVyYnVmZmVyKGdsLlJFTkRFUkJVRkZFUiwgcmVuZGVyQnVmZmVyKTtcbiAgZ2wucmVuZGVyYnVmZmVyU3RvcmFnZShnbC5SRU5ERVJCVUZGRVIsIGdsLkRFUFRIX0NPTVBPTkVOVDE2LCB3aWR0aCwgaGVpZ2h0KTtcblxuICByZXR1cm4gcmVuZGVyQnVmZmVyO1xufVxuXG5jb25zdCBfU1FVQVJFX0NPT1JESU5BVEVTXzJEID0gW1xuICAwLCAwLFxuICAxLCAwLFxuICAwLCAxLFxuXG4gIDEsIDAsXG4gIDEsIDEsXG4gIDAsIDEsXG5dO1xuXG4vKipcbiAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbFxuICogQHJldHVybnMge0F0dHJpYnV0ZUNvbmZpZ31cbiAqL1xuZnVuY3Rpb24gY3JlYXRlMkRTcXVhcmVQb3NpdGlvbnNDb25maWcoZ2wpIHtcbiAgY29uc3QgcG9zaXRpb25zQnVmZmVyID0gY3JlYXRlQnVmZmVyRnJvbURhdGEoZ2wsIF9TUVVBUkVfQ09PUkRJTkFURVNfMkQpO1xuICByZXR1cm4ge1xuICAgIGJ1ZmZlcjogcG9zaXRpb25zQnVmZmVyLFxuICAgIHNpemU6IDIsXG4gICAgdHlwZTogZ2wuRkxPQVQsXG4gICAgbm9ybWFsaXplZDogZmFsc2UsXG4gICAgc3RyaWRlOiAwLFxuICAgIG9mZnNldDogMFxuICB9O1xufVxuXG4vL1xuLy8gR2VvbWV0cmljYWwgY2FsY3VsYXRpb25zLlxuLy9cblxuLyoqXG4gKiBHaXZlbiBhbiBhcnJheSBvZiBpbmRpdmlkdWFsIHZlcnRleCBwb3NpdGlvbnMgYW5kIGFuIGFycmF5IG9mIHZlcnRleCBpbmRpY2VzLCBjcmVhdGVzIGFuIGV4cGFuZGVkXG4gKiBhcnJheSBvZiB0aGUgcG9zaXRpb25zIGdyb3VwZWQgYnkgdGhlIHRyaWFuZ2xlcyB0aGV5IGZvcm0uXG4gKlxuICogQHBhcmFtIHtBcnJheS48TnVtYmVyPn0gaW5kaXZpZHVhbFZlcnRleFBvc2l0aW9uc1xuICogQHBhcmFtIHtBcnJheS48TnVtYmVyPn0gdmVydGV4SW5kaWNlc1xuICogQHJldHVybnMge0FycmF5LjxOdW1iZXI+fVxuICovXG5mdW5jdGlvbiBleHBhbmRWZXJ0ZXhJbmRpY2VzVG9EdXBsaWNhdGVQb3NpdGlvbnMoaW5kaXZpZHVhbFZlcnRleFBvc2l0aW9ucywgdmVydGV4SW5kaWNlcykge1xuICBjb25zdCBleHBhbmRlZFZlcnRleFBvc2l0aW9ucyA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwLCBqID0gMCwgayA9IDAsIGNvdW50ID0gdmVydGV4SW5kaWNlcy5sZW5ndGg7IGkgPCBjb3VudDsgaSsrLCBrICs9IDMpIHtcbiAgICBqID0gdmVydGV4SW5kaWNlc1tpXSAqIDM7XG5cbiAgICBleHBhbmRlZFZlcnRleFBvc2l0aW9uc1trXSA9IGluZGl2aWR1YWxWZXJ0ZXhQb3NpdGlvbnNbal07XG4gICAgZXhwYW5kZWRWZXJ0ZXhQb3NpdGlvbnNbayArIDFdID0gaW5kaXZpZHVhbFZlcnRleFBvc2l0aW9uc1tqICsgMV07XG4gICAgZXhwYW5kZWRWZXJ0ZXhQb3NpdGlvbnNbayArIDJdID0gaW5kaXZpZHVhbFZlcnRleFBvc2l0aW9uc1tqICsgMl07XG4gIH1cblxuICByZXR1cm4gZXhwYW5kZWRWZXJ0ZXhQb3NpdGlvbnM7XG59XG5cbi8qKlxuICogQ29tcHV0ZXMgbm9ybWFsIHZlY3RvcnMgdGhhdCBhcmUgZWFjaCBvcnRob2dvbmFsIHRvIHRoZSB0cmlhbmdsZXMgdGhleSBhcmUgYSBwYXJ0IG9mLlxuICpcbiAqIFRoZSBnaXZlbiB2ZXJ0aWNlcyBzaG91bGQgcmVwcmVzZW50IGluZGl2aWR1YWwgdHJpYW5nbGVzIHdob3NlIHZlcnRpY2VzIGFyZSBkZWZpbmVkIGluIGNsb2Nrd2lzZVxuICogb3JkZXIgKGFzIHNlZW4gd2hlbiBsb29raW5nIGF0IHRoZSBleHRlcmlvciBzaWRlKS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5LjxOdW1iZXI+fSB2ZXJ0aWNlc1xuICogQHJldHVybnMge0FycmF5LjxOdW1iZXI+fVxuICovXG5mdW5jdGlvbiBjYWxjdWxhdGVPcnRob2dvbmFsVmVydGV4Tm9ybWFscyh2ZXJ0aWNlcykge1xuICBjb25zdCB2ZXJ0ZXgxID0gdmVjMy5jcmVhdGUoKTtcbiAgY29uc3QgdmVydGV4MiA9IHZlYzMuY3JlYXRlKCk7XG4gIGNvbnN0IHZlcnRleDMgPSB2ZWMzLmNyZWF0ZSgpO1xuICBjb25zdCB2ZWN0b3JBID0gdmVjMy5jcmVhdGUoKTtcbiAgY29uc3QgdmVjdG9yQiA9IHZlYzMuY3JlYXRlKCk7XG4gIGNvbnN0IG5vcm1hbDEgPSB2ZWMzLmNyZWF0ZSgpO1xuICBjb25zdCBub3JtYWwyID0gdmVjMy5jcmVhdGUoKTtcbiAgY29uc3Qgbm9ybWFsMyA9IHZlYzMuY3JlYXRlKCk7XG5cbiAgY29uc3Qgbm9ybWFscyA9IFtdO1xuXG4gIC8vIExvb3Agb3ZlciBlYWNoIHRyaWFuZ2xlIGluIHRoZSBmbGF0dGVuZWQgdmVydGV4IGFycmF5LlxuICBmb3IgKGxldCBpID0gMCwgY291bnQgPSB2ZXJ0aWNlcy5sZW5ndGg7IGkgPCBjb3VudDsgaSArPSA5KSB7XG4gICAgLy8gR2V0IHRoZSB2ZXJ0aWNlcyBvZiB0aGUgY3VycmVudCB0cmlhbmdsZSBmcm9tIHRoZSBmbGF0dGVuZWQgYXJyYXkuXG4gICAgdmVjMy5zZXQodmVydGV4MSwgdmVydGljZXNbaSArIDBdLCB2ZXJ0aWNlc1tpICsgMV0sIHZlcnRpY2VzW2kgKyAyXSk7XG4gICAgdmVjMy5zZXQodmVydGV4MiwgdmVydGljZXNbaSArIDNdLCB2ZXJ0aWNlc1tpICsgNF0sIHZlcnRpY2VzW2kgKyA1XSk7XG4gICAgdmVjMy5zZXQodmVydGV4MywgdmVydGljZXNbaSArIDZdLCB2ZXJ0aWNlc1tpICsgN10sIHZlcnRpY2VzW2kgKyA4XSk7XG5cbiAgICAvLyBDb21wdXRlIHRoZSBub3JtYWxzLlxuICAgIHZlYzMuc3VidHJhY3QodmVjdG9yQSwgdmVydGV4MywgdmVydGV4MSk7XG4gICAgdmVjMy5zdWJ0cmFjdCh2ZWN0b3JCLCB2ZXJ0ZXgyLCB2ZXJ0ZXgxKTtcbiAgICB2ZWMzLmNyb3NzKG5vcm1hbDEsIHZlY3RvckEsIHZlY3RvckIpO1xuICAgIHZlYzMubm9ybWFsaXplKG5vcm1hbDEsIG5vcm1hbDEpO1xuXG4gICAgdmVjMy5zdWJ0cmFjdCh2ZWN0b3JBLCB2ZXJ0ZXgxLCB2ZXJ0ZXgyKTtcbiAgICB2ZWMzLnN1YnRyYWN0KHZlY3RvckIsIHZlcnRleDMsIHZlcnRleDIpO1xuICAgIHZlYzMuY3Jvc3Mobm9ybWFsMiwgdmVjdG9yQSwgdmVjdG9yQik7XG4gICAgdmVjMy5ub3JtYWxpemUobm9ybWFsMiwgbm9ybWFsMik7XG5cbiAgICB2ZWMzLnN1YnRyYWN0KHZlY3RvckEsIHZlcnRleDIsIHZlcnRleDMpO1xuICAgIHZlYzMuc3VidHJhY3QodmVjdG9yQiwgdmVydGV4MSwgdmVydGV4Myk7XG4gICAgdmVjMy5jcm9zcyhub3JtYWwzLCB2ZWN0b3JBLCB2ZWN0b3JCKTtcbiAgICB2ZWMzLm5vcm1hbGl6ZShub3JtYWwzLCBub3JtYWwzKTtcblxuICAgIC8vIFNhdmUgdGhlIG5vcm1hbCB2ZWN0b3JzIGluIGEgZmxhdHRlbmVkIGFycmF5LlxuICAgIG5vcm1hbHNbaSArIDBdID0gbm9ybWFsMVswXTtcbiAgICBub3JtYWxzW2kgKyAxXSA9IG5vcm1hbDFbMV07XG4gICAgbm9ybWFsc1tpICsgMl0gPSBub3JtYWwxWzJdO1xuICAgIG5vcm1hbHNbaSArIDNdID0gbm9ybWFsMlswXTtcbiAgICBub3JtYWxzW2kgKyA0XSA9IG5vcm1hbDJbMV07XG4gICAgbm9ybWFsc1tpICsgNV0gPSBub3JtYWwyWzJdO1xuICAgIG5vcm1hbHNbaSArIDZdID0gbm9ybWFsM1swXTtcbiAgICBub3JtYWxzW2kgKyA3XSA9IG5vcm1hbDNbMV07XG4gICAgbm9ybWFsc1tpICsgOF0gPSBub3JtYWwzWzJdO1xuICB9XG5cbiAgcmV0dXJuIG5vcm1hbHM7XG59XG5cbmNvbnN0IE1BWF9URVhUVVJFX1ZfQ09PUkRJTkFURV9ERUxUQSA9IDAuNTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIGxhdC1sb25nIHRleHR1cmUgY29vcmRpbmF0ZXMgZm9yIHRoZSBnaXZlbiB2ZXJ0ZXggcG9zaXRpb25zLlxuICpcbiAqIEBwYXJhbSB7QXJyYXkuPE51bWJlcj59IHZlcnRleFBvc2l0aW9uc1xuICogQHJldHVybnMge0FycmF5LjxOdW1iZXI+fVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY2FsY3VsYXRlTGF0TG9uZ1RleHR1cmVDb29yZGluYXRlcyh2ZXJ0ZXhQb3NpdGlvbnMpIHtcbiAgY29uc3QgY3VycmVudFZlcnRleFBvc2l0aW9uID0gdmVjMy5jcmVhdGUoKTtcbiAgY29uc3QgY3VycmVudFRleHR1cmVDb29yZGluYXRlcyA9IHZlYzIuY3JlYXRlKCk7XG4gIGNvbnN0IHRleHR1cmVDb29yZGluYXRlcyA9IFtdO1xuXG4gIC8vIENhbGN1bGF0ZSB0aGUgdGV4dHVyZSBjb29yZGluYXRlcyBvZiBlYWNoIHZlcnRleC5cbiAgZm9yIChsZXQgaSA9IDAsIGogPSAwLCBjb3VudCA9IHZlcnRleFBvc2l0aW9ucy5sZW5ndGg7IGkgPCBjb3VudDsgaSArPSAzLCBqICs9IDIpIHtcbiAgICB2ZWMzLnNldChjdXJyZW50VmVydGV4UG9zaXRpb24sXG4gICAgICAgIHZlcnRleFBvc2l0aW9uc1tpXSwgdmVydGV4UG9zaXRpb25zW2kgKyAxXSwgdmVydGV4UG9zaXRpb25zW2kgKyAyXSk7XG4gICAgX2dldFRleHR1cmVDb29yZGluYXRlc09mTGF0TG9uZ1Bvc2l0aW9uKGN1cnJlbnRUZXh0dXJlQ29vcmRpbmF0ZXMsIGN1cnJlbnRWZXJ0ZXhQb3NpdGlvbik7XG4gICAgdGV4dHVyZUNvb3JkaW5hdGVzW2pdID0gY3VycmVudFRleHR1cmVDb29yZGluYXRlc1swXTtcbiAgICB0ZXh0dXJlQ29vcmRpbmF0ZXNbaiArIDFdID0gY3VycmVudFRleHR1cmVDb29yZGluYXRlc1sxXTtcbiAgfVxuXG4gIF9jb3JyZWN0VGV4dHVyZUZvclRyaWFuZ2xlc0Fyb3VuZFNlYW0odGV4dHVyZUNvb3JkaW5hdGVzKTtcblxuICByZXR1cm4gdGV4dHVyZUNvb3JkaW5hdGVzO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgY3lsaW5kcmljYWwgdGV4dHVyZSBjb29yZGluYXRlcyBmb3IgdGhlIGdpdmVuIHZlcnRleCBwb3NpdGlvbnMuXG4gKlxuICogVGhpcyBhc3N1bWVzIHRoZSBjeWxpbmRlciBpcyBhbGlnbmVkIHdpdGggdGhlIHotYXhpcyBhbmQgY2VudGVyZWQgYXQgdGhlIG9yaWdpbi5cbiAqXG4gKiBAcGFyYW0ge0FycmF5LjxOdW1iZXI+fSB2ZXJ0ZXhQb3NpdGlvbnNcbiAqIEByZXR1cm5zIHtBcnJheS48TnVtYmVyPn1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNhbGN1bGF0ZUN5bGluZHJpY2FsVGV4dHVyZUNvb3JkaW5hdGVzKHZlcnRleFBvc2l0aW9ucykge1xuICBjb25zdCBjdXJyZW50VmVydGV4UG9zaXRpb24gPSB2ZWMzLmNyZWF0ZSgpO1xuICBjb25zdCBjdXJyZW50VGV4dHVyZUNvb3JkaW5hdGVzID0gdmVjMi5jcmVhdGUoKTtcbiAgY29uc3QgdGV4dHVyZUNvb3JkaW5hdGVzID0gW107XG5cbiAgLy8gQ2FsY3VsYXRlIHRoZSB0ZXh0dXJlIGNvb3JkaW5hdGVzIG9mIGVhY2ggdmVydGV4LlxuICBmb3IgKGxldCBpID0gMCwgaiA9IDAsIGNvdW50ID0gdmVydGV4UG9zaXRpb25zLmxlbmd0aDsgaSA8IGNvdW50OyBpICs9IDMsIGogKz0gMikge1xuICAgIHZlYzMuc2V0KGN1cnJlbnRWZXJ0ZXhQb3NpdGlvbixcbiAgICAgICAgdmVydGV4UG9zaXRpb25zW2ldLCB2ZXJ0ZXhQb3NpdGlvbnNbaSArIDFdLCB2ZXJ0ZXhQb3NpdGlvbnNbaSArIDJdKTtcbiAgICBfZ2V0VGV4dHVyZUNvb3JkaW5hdGVzT2ZDeWxpbmRyaWNhbFBvc2l0aW9uKGN1cnJlbnRUZXh0dXJlQ29vcmRpbmF0ZXMsIGN1cnJlbnRWZXJ0ZXhQb3NpdGlvbik7XG4gICAgdGV4dHVyZUNvb3JkaW5hdGVzW2pdID0gY3VycmVudFRleHR1cmVDb29yZGluYXRlc1swXTtcbiAgICB0ZXh0dXJlQ29vcmRpbmF0ZXNbaiArIDFdID0gY3VycmVudFRleHR1cmVDb29yZGluYXRlc1sxXTtcbiAgfVxuXG4gIF9jb3JyZWN0VGV4dHVyZUZvclRyaWFuZ2xlc0Fyb3VuZFNlYW0odGV4dHVyZUNvb3JkaW5hdGVzKTtcblxuICByZXR1cm4gdGV4dHVyZUNvb3JkaW5hdGVzO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXkuPE51bWJlcj59IHRleHR1cmVDb29yZGluYXRlc1xuICovXG5mdW5jdGlvbiBfY29ycmVjdFRleHR1cmVGb3JUcmlhbmdsZXNBcm91bmRTZWFtKHRleHR1cmVDb29yZGluYXRlcykge1xuICBsZXQgdjE7XG4gIGxldCB2MjtcbiAgbGV0IHYzO1xuXG4gIC8vIERldGVybWluZSB3aGljaCB0cmlhbmdsZXMgc3BhbiB0aGUgc2VhbSBhY3Jvc3MgMC8yUEksIGFuZCBjb3JyZWN0IHRoZWlyIHRleHR1cmVzLlxuICBmb3IgKGxldCBpID0gMCwgY291bnQgPSB0ZXh0dXJlQ29vcmRpbmF0ZXMubGVuZ3RoOyBpIDwgY291bnQ7IGkgKz0gNikge1xuICAgIHYxID0gdGV4dHVyZUNvb3JkaW5hdGVzW2ldO1xuICAgIHYyID0gdGV4dHVyZUNvb3JkaW5hdGVzW2kgKyAyXTtcbiAgICB2MyA9IHRleHR1cmVDb29yZGluYXRlc1tpICsgNF07XG5cbiAgICBpZiAodjMgLSB2MSA+IE1BWF9URVhUVVJFX1ZfQ09PUkRJTkFURV9ERUxUQSB8fCB2MiAtIHYxID4gTUFYX1RFWFRVUkVfVl9DT09SRElOQVRFX0RFTFRBKSB7XG4gICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXNbaV0rKztcbiAgICB9XG4gICAgaWYgKHYzIC0gdjIgPiBNQVhfVEVYVFVSRV9WX0NPT1JESU5BVEVfREVMVEEgfHwgdjEgLSB2MiA+IE1BWF9URVhUVVJFX1ZfQ09PUkRJTkFURV9ERUxUQSkge1xuICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzW2kgKyAyXSsrO1xuICAgIH1cbiAgICBpZiAodjIgLSB2MyA+IE1BWF9URVhUVVJFX1ZfQ09PUkRJTkFURV9ERUxUQSB8fCB2MSAtIHYzID4gTUFYX1RFWFRVUkVfVl9DT09SRElOQVRFX0RFTFRBKSB7XG4gICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXNbaSArIDRdKys7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlIHRoZSB0ZXh0dXJlIGNvb3JkaW5hdGVzIGZvciBhIG5vcm1hbGl6ZWQgcG9pbnQgb24gYSBnbG9iZS5cbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IHRleHR1cmVDb29yZGluYXRlcyBPdXRwdXQgcGFyYW1ldGVyLlxuICogQHBhcmFtIHt2ZWMzfSB2ZXJ0ZXhQb3NpdGlvbiBJbnB1dCBwYXJhbWV0ZXIuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfZ2V0VGV4dHVyZUNvb3JkaW5hdGVzT2ZMYXRMb25nUG9zaXRpb24odGV4dHVyZUNvb3JkaW5hdGVzLCB2ZXJ0ZXhQb3NpdGlvbikge1xuICBjb25zdCB4ID0gdmVydGV4UG9zaXRpb25bMF07XG4gIGNvbnN0IHkgPSB2ZXJ0ZXhQb3NpdGlvblsxXTtcbiAgY29uc3QgeiA9IHZlcnRleFBvc2l0aW9uWzJdO1xuXG4gIGxldCBsb25naXR1ZGU7XG4gIGlmICh5ICE9PSAwKSB7XG4gICAgbG9uZ2l0dWRlID0gTWF0aC5hdGFuMih4LCB5KTtcbiAgfSBlbHNlIGlmICh4ID4gMCkge1xuICAgIGxvbmdpdHVkZSA9IEhBTEZfUEk7XG4gIH0gZWxzZSB7XG4gICAgbG9uZ2l0dWRlID0gLUhBTEZfUEk7XG4gIH1cblxuICBjb25zdCB1ID0gKGxvbmdpdHVkZSArIE1hdGguUEkpIC8gVFdPX1BJO1xuXG4gIC8vIFRPRE86IFNob3VsZCBJIGluc3RlYWQgYmUgY2FsY3VsYXRpbmcgdGhlIHYgdmFsdWUgZnJvbSB3cmFwcGluZyB0aGUgdGV4dHVyZSBhcm91bmQgdGhlIGdsb2JlXG4gIC8vIGN1cnZhdHVyZSByYXRoZXIgdGhhbiBzaW1wbHkgcHJvamVjdGluZyBpdCBkaXJlY3RseT9cblxuICAvLyBUaGlzIGFzc3VtZXMgdGhhdCB0aGUgdGV4dHVyZSBoYXMgYmVlbiB2ZXJ0aWNhbGx5IGRpc3RvcnRlZCBzbyB0aGF0IGl0IGNhbiBiZSBkaXJlY3RseVxuICAvLyBwcm9qZWN0ZWQgb250byB0aGUgY3VydmF0dXJlIG9mIHRoZSBnbG9iZS5cbiAgY29uc3QgdiA9ICh6ICsgMSkgKiAwLjU7XG5cbiAgdGV4dHVyZUNvb3JkaW5hdGVzWzBdID0gdTtcbiAgdGV4dHVyZUNvb3JkaW5hdGVzWzFdID0gdjtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIHRleHR1cmUgY29vcmRpbmF0ZXMgZm9yIGEgbm9ybWFsaXplZCBwb2ludCBvbiBhIGN5bGluZGVyLlxuICpcbiAqIFRoaXMgYXNzdW1lcyB0aGUgY3lsaW5kZXIgaXMgYWxpZ25lZCB3aXRoIHRoZSB6LWF4aXMgYW5kIGNlbnRlcmVkIGF0IHRoZSBvcmlnaW4uXG4gKlxuICogQHBhcmFtIHt2ZWMyfSB0ZXh0dXJlQ29vcmRpbmF0ZXMgT3V0cHV0IHBhcmFtZXRlci5cbiAqIEBwYXJhbSB7dmVjM30gdmVydGV4UG9zaXRpb24gSW5wdXQgcGFyYW1ldGVyLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX2dldFRleHR1cmVDb29yZGluYXRlc09mQ3lsaW5kcmljYWxQb3NpdGlvbih0ZXh0dXJlQ29vcmRpbmF0ZXMsIHZlcnRleFBvc2l0aW9uKSB7XG4gIGNvbnN0IHggPSB2ZXJ0ZXhQb3NpdGlvblswXTtcbiAgY29uc3QgeSA9IHZlcnRleFBvc2l0aW9uWzFdO1xuICBjb25zdCB6ID0gdmVydGV4UG9zaXRpb25bMl07XG5cbiAgbGV0IGxvbmdpdHVkZTtcbiAgaWYgKHkgIT09IDApIHtcbiAgICBsb25naXR1ZGUgPSBNYXRoLmF0YW4yKHgsIHkpO1xuICB9IGVsc2UgaWYgKHggPiAwKSB7XG4gICAgbG9uZ2l0dWRlID0gSEFMRl9QSTtcbiAgfSBlbHNlIHtcbiAgICBsb25naXR1ZGUgPSAtSEFMRl9QSTtcbiAgfVxuXG4gIGNvbnN0IHUgPSAobG9uZ2l0dWRlICsgTWF0aC5QSSkgLyBUV09fUEk7XG5cbiAgY29uc3QgdiA9IHogPiAwID8gMSA6IDA7XG5cbiAgdGV4dHVyZUNvb3JkaW5hdGVzWzBdID0gdTtcbiAgdGV4dHVyZUNvb3JkaW5hdGVzWzFdID0gdjtcbn1cblxuLyoqXG4gKiBFeHBhbmRzIHRoZSBnaXZlbiB2ZXJ0aWNlcyBhcm91bmQgdGhlIHNlYW0gd2hlcmUgbG9uZ2l0dWRlIHN3aXRjaGVzIGZyb20gMCB0byAyUEkuXG4gKlxuICogVGhpcyBpcyB1c2VmdWwgYmVjYXVzZSwgd2hlbiBhcHBseWluZyBhIHNwaGVyaWNhbCB0ZXh0dXJlIHVzaW5nIGxhdC1sb25nIGNvb3JkaW5hdGVzLCBhbnlcbiAqIHRyaWFuZ2xlIHRoYXQgc3BhbnMgdGhlIHNlYW0gKGZyb20gbG9uZ2l0dWRlIDJQSSB0byAwKSB3b3VsZCBvdGhlcndpc2Ugc2hvdyB0aGUgd3JvbmcgcmVzdWx0LlxuICpcbiAqIEBwYXJhbSB7QXJyYXkuPE51bWJlcj59IG9sZFZlcnRleFBvc2l0aW9uc1xuICogQHBhcmFtIHtBcnJheS48TnVtYmVyPn0gb2xkVmVydGV4SW5kaWNlc1xuICogQHJldHVybnMge3t2ZXJ0ZXhQb3NpdGlvbnM6IEFycmF5LjxOdW1iZXI+LCB2ZXJ0ZXhJbmRpY2VzOiBBcnJheS48TnVtYmVyPn19XG4gKi9cbmZ1bmN0aW9uIGV4cGFuZFZlcnRleEluZGljZXNBcm91bmRMb25naXR1ZGVTZWFtKG9sZFZlcnRleFBvc2l0aW9ucywgb2xkVmVydGV4SW5kaWNlcykge1xuICAvLyBjb25zdCBuZXdWZXJ0ZXhQb3NpdGlvbnMgPSBbXTtcbiAgLy8gY29uc3QgbmV3VmVydGV4SW5kaWNlcyA9IFtdO1xuICAvL1xuICAvLyAqKioqXG4gIC8vIC8vIFRPRE86IGxvb3Agb3ZlciB0cmlhbmdsZXMsIHVzZSBfZ2V0VGV4dHVyZUNvb3JkaW5hdGVzT2ZMYXRMb25nUG9zaXRpb24gb24gZWFjaCB2ZXJ0ZXgsXG4gIC8vIC8vIGNoZWNrIGlmIHR3byB2ZXJ0aWNlcyBpbiBhIHRyaWFuZ2xlIHNwYW4gdGhlIHNlYW07IHRvIGNoZWNrIHRoZSBzcGFuLCBqdXN0IGNoZWNrIGlmIGJvdGggYXJlXG4gIC8vIC8vIHdpdGhpbiBhIGRpc3RhbmNlIGZyb20gdGhlIHNlYW0sIGJ1dCBvbiBvcHBvc2l0ZSBlbmRzO1xuICAvL1xuICAvLyByZXR1cm4ge1xuICAvLyAgIHZlcnRleFBvc2l0aW9uczogbmV3VmVydGV4UG9zaXRpb25zLFxuICAvLyAgIHZlcnRleEluZGljZXM6IG5ld1ZlcnRleEluZGljZXNcbiAgLy8gfTtcblxuICByZXR1cm4ge1xuICAgIHZlcnRleFBvc2l0aW9uczogb2xkVmVydGV4UG9zaXRpb25zLFxuICAgIHZlcnRleEluZGljZXM6IG9sZFZlcnRleEluZGljZXNcbiAgfTtcbn1cblxuLyoqXG4gKiBTdWJkaXZpZGVzIHRoZSB0cmlhbmdsZXMgb2YgYSBzaGFwZSBhbmQgcHJvamVjdHMgYWxsIHJlc3VsdGluZyB2ZXJ0aWNlcyB0byBhIHJhZGl1cyBvZiBvbmUuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGRpdmlzaW9uRmFjdG9yXG4gKiBAcGFyYW0ge0FycmF5LjxOdW1iZXI+fSBvbGRQb3NpdGlvbnNcbiAqIEBwYXJhbSB7QXJyYXkuPE51bWJlcj59IFtvbGRJbmRpY2VzXVxuICogQHJldHVybnMge3t2ZXJ0ZXhQb3NpdGlvbnM6IEFycmF5LjxOdW1iZXI+LCB2ZXJ0ZXhJbmRpY2VzOiBBcnJheS48TnVtYmVyPn19XG4gKi9cbmZ1bmN0aW9uIHRlc3NlbGF0ZVNwaGVyZShkaXZpc2lvbkZhY3Rvciwgb2xkUG9zaXRpb25zLCBvbGRJbmRpY2VzKSB7XG4gIGNvbnN0IG5ld1Bvc2l0aW9ucyA9IF9leHBhbmRBbmRUZXNzZWxhdGVUcmlhbmdsZXMoZGl2aXNpb25GYWN0b3IsIG9sZFBvc2l0aW9ucywgb2xkSW5kaWNlcyk7XG5cbiAgLy8gQ29udmVydCB0aGUgZXhwYW5kZWQgcG9zaXRpb25zIGFycmF5IGludG8gYSB1bmlxdWUgcG9zaXRpb25zIGFycmF5IHdpdGggYSBjb3JyZXNwb25kaW5nIGluZGljZXNcbiAgLy8gYXJyYXkuXG4gIGNvbnN0IHBvc2l0aW9uc0FuZEluZGljZXMgPSBkZWR1cFZlcnRleEFycmF5V2l0aFBvc2l0aW9uc0FuZEluZGljZXNBcnJheXMobmV3UG9zaXRpb25zKTtcblxuICAvLyBQcm9qZWN0IHRoZSBnaXZlbiBwb3NpdGlvbnMgdG8gYSBkaXN0YW5jZSBvZiBvbmUuXG4gIF9ub3JtYWxpemVQb3NpdGlvbnMocG9zaXRpb25zQW5kSW5kaWNlcy52ZXJ0ZXhQb3NpdGlvbnMsIHBvc2l0aW9uc0FuZEluZGljZXMudmVydGV4UG9zaXRpb25zKTtcblxuICByZXR1cm4gcG9zaXRpb25zQW5kSW5kaWNlcztcbn1cblxuLyoqXG4gKiBTdWJkaXZpZGVzIHRyaWFuZ2xlcy5cbiAqXG4gKiBUaGlzIGhhcyB0aGUgc2lkZS1lZmZlY3Qgb2YgZmxhdHRlbmluZyB0aGUgZ2l2ZW4gdmVydGljZXMgaW50byBhbiBleHBhbmRlZCBsaXN0IHRoYXQgY2FuIGNvbnRhaW5cbiAqIGR1cGxpY2F0ZSBwb3NpdGlvbnMuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGRpdmlzaW9uRmFjdG9yXG4gKiBAcGFyYW0ge0FycmF5LjxOdW1iZXI+fSBvbGRQb3NpdGlvbnNcbiAqIEBwYXJhbSB7QXJyYXkuPE51bWJlcj59IFtvbGRJbmRpY2VzXVxuICogQHJldHVybnMge0FycmF5LjxOdW1iZXI+fVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX2V4cGFuZEFuZFRlc3NlbGF0ZVRyaWFuZ2xlcyhkaXZpc2lvbkZhY3Rvciwgb2xkUG9zaXRpb25zLCBvbGRJbmRpY2VzKSB7XG4gIGNvbnN0IGV4cGFuZGVkT2xkUG9zaXRpb25zID0gb2xkSW5kaWNlc1xuICAgICAgPyBleHBhbmRWZXJ0ZXhJbmRpY2VzVG9EdXBsaWNhdGVQb3NpdGlvbnMob2xkUG9zaXRpb25zLCBvbGRJbmRpY2VzKVxuICAgICAgOiBvbGRQb3NpdGlvbnM7XG5cbiAgY29uc3QgbmV3UG9zaXRpb25zID0gW107XG4gIGNvbnN0IGEgPSB2ZWMzLmNyZWF0ZSgpO1xuICBjb25zdCBiID0gdmVjMy5jcmVhdGUoKTtcbiAgY29uc3QgYyA9IHZlYzMuY3JlYXRlKCk7XG4gIGNvbnN0IGFUb0IgPSB2ZWMzLmNyZWF0ZSgpO1xuICBjb25zdCBhVG9DID0gdmVjMy5jcmVhdGUoKTtcbiAgY29uc3QgYlRvQyA9IHZlYzMuY3JlYXRlKCk7XG4gIGNvbnN0IHJvd0RlbHRhID0gdmVjMy5jcmVhdGUoKTtcbiAgY29uc3QgY29sdW1uRGVsdGEgPSB2ZWMzLmNyZWF0ZSgpO1xuICBjb25zdCBiYWNrd2FyZHNEZWx0YSA9IHZlYzMuY3JlYXRlKCk7XG4gIGNvbnN0IHJvd1N0YXJ0UG9pbnQgPSB2ZWMzLmNyZWF0ZSgpO1xuICBjb25zdCByb3dDb2x1bW5TdGFydFBvaW50ID0gdmVjMy5jcmVhdGUoKTtcbiAgY29uc3QgdGVtcFZlYyA9IHZlYzMuY3JlYXRlKCk7XG5cbiAgbGV0IG9sZEluZGV4O1xuICBsZXQgY291bnQ7XG4gIGxldCBuZXdJbmRleDtcbiAgbGV0IHJvd0luZGV4O1xuICBsZXQgY29sdW1uSW5kZXg7XG5cbiAgLy9cbiAgLy8gVGhlIGJhc2ljIHRlc3NlbGF0aW9uIGFsZ29yaXRobTpcbiAgLy8gLSBJdGVyYXRlIGFjcm9zcyB0aGUgb3JpZ2luYWwgdHJpYW5nbGVzIHRoYXQgd2UgYXJlIHN1Yi1kaXZpZGluZy5cbiAgLy8gLSBBLCBCLCBhbmQgQyBhcmUgdGhlIHZlcnRpY2VzIG9mIHRoZSBjdXJyZW50LCBvcmlnaW5hbCB0cmlhbmdsZS5cbiAgLy8gLSBDb25zaWRlciBcInJvd3NcIiB0byBpdGVyYXRlIGFjcm9zcyB0aGUgYS10by1iIGRpcmVjdGlvbiBhbmQgXCJjb2x1bW5zXCIgdG8gaXRlcmF0ZSBhY3Jvc3MgdGhlXG4gIC8vICAgYS10by1jIGRpcmVjdGlvbi5cbiAgLy8gLSBGaXJzdCBjYWxjdWxhdGUgdGhlIGRpc3RhbmNlIGJldHdlZW4gb25lIHJvdyBhbmQgb25lIGNvbHVtbi5cbiAgLy8gLSBUaGVuIGxvb3Agb3ZlciB0aGUgcm93cyBhbmQgY29sdW1ucyBhbmQgY3JlYXRlIGEgdGhlIG5ldyB0cmlhbmdsZSBmb3IgZWFjaCBcImNlbGxcIi5cbiAgLy9cbiAgLy8gICAgICAgICAgICAgICAgICAgL1xcXG4gIC8vICAgICAgICAgICAgICAgICBCICAgXFwtLS0gQSBcImNvbHVtblwiXG4gIC8vICAgICAgICAgICAgICAgICBvICAgIFxcXG4gIC8vICAgICAgICAgICAgICAgIC8gXFwgICAvXG4gIC8vICAgICAgICAgICAgICAgLyAgIFxcICAgICAgICAgICAgIHJvd0RlbHRhOiAgICAgIGNvbHVtbkRlbHRhOiAgICAgYmFja3dhcmRzRGVsdGE6XG4gIC8vICAgICAgICAgICAgICBvLS0tLS1vICAgICAgICAgICAgICAgICBvICAgICAgICAgICAgIG9cbiAgLy8gICAgICAgICAgICAgLyBcXCAgIC8gXFwgICAgICAgICAgICAgICAvICAgICAgICAgICAgICAgXFwgICAgICAgICAgICAgIG8tLS0tLW9cbiAgLy8gICAgICAgICAgICAvICAgXFwgLyAgIFxcICAgICAgICAgICAgIC8gICAgICAgICAgICAgICAgIFxcXG4gIC8vICAgICAgICAgICBvLS0tLS1vLS0tLS1vICAgICAgICAgICBvICAgICAgICAgICAgICAgICAgIG9cbiAgLy8gICAgICAgICAgLyBcXCAgIC8gXFwgICAvIFxcXG4gIC8vICAgICAgICAgLyAgIFxcIC8gICBcXCAvICAgXFxcbiAgLy8gICAgICAgIG8tLS0tLW8tLS0tLW8tLS0tLW9cbiAgLy8gICAgICAgLyBcXCAgIC8gXFwgICAvIFxcICAgLyBcXFxuICAvLyAgICAgIC8gICBcXCAvICAgXFwgLyAgIFxcIC8gICBcXFxuICAvLyAgQSAgby0tLS0tby0tLS0tby0tLS0tby0tLS0tbyAgQ1xuICAvL1xuICAvLyAgICAgICBcXF9fX19fXFxcbiAgLy8gICAgICAgICAgIFxcXG4gIC8vICAgICAgICAgQSBcInJvd1wiXG4gIC8vXG5cbiAgLy8gTG9vcCBvdmVyIHRoZSBvbGQgdHJpYW5nbGVzLlxuICBmb3IgKG9sZEluZGV4ID0gMCwgbmV3SW5kZXggPSAwLCBjb3VudCA9IGV4cGFuZGVkT2xkUG9zaXRpb25zLmxlbmd0aDtcbiAgICAgICBvbGRJbmRleCA8IGNvdW50O1xuICAgICAgIG9sZEluZGV4ICs9IDkpIHtcbiAgICAvLyBQdWxsIG91dCB0aGUgdGhyZWUgdmVydGljZXMgb2YgdGhlIGN1cnJlbnQgdHJpYW5nbGUuXG4gICAgdmVjMy5zZXQoYSxcbiAgICAgICAgZXhwYW5kZWRPbGRQb3NpdGlvbnNbb2xkSW5kZXhdLFxuICAgICAgICBleHBhbmRlZE9sZFBvc2l0aW9uc1tvbGRJbmRleCArIDFdLFxuICAgICAgICBleHBhbmRlZE9sZFBvc2l0aW9uc1tvbGRJbmRleCArIDJdKTtcbiAgICB2ZWMzLnNldChiLFxuICAgICAgICBleHBhbmRlZE9sZFBvc2l0aW9uc1tvbGRJbmRleCArIDNdLFxuICAgICAgICBleHBhbmRlZE9sZFBvc2l0aW9uc1tvbGRJbmRleCArIDRdLFxuICAgICAgICBleHBhbmRlZE9sZFBvc2l0aW9uc1tvbGRJbmRleCArIDVdKTtcbiAgICB2ZWMzLnNldChjLFxuICAgICAgICBleHBhbmRlZE9sZFBvc2l0aW9uc1tvbGRJbmRleCArIDZdLFxuICAgICAgICBleHBhbmRlZE9sZFBvc2l0aW9uc1tvbGRJbmRleCArIDddLFxuICAgICAgICBleHBhbmRlZE9sZFBvc2l0aW9uc1tvbGRJbmRleCArIDhdKTtcblxuICAgIHZlYzMuc3VidHJhY3QoYVRvQiwgYiwgYSk7XG4gICAgdmVjMy5zdWJ0cmFjdChiVG9DLCBjLCBiKTtcbiAgICB2ZWMzLnN1YnRyYWN0KGFUb0MsIGMsIGEpO1xuXG4gICAgdmVjMy5zY2FsZShyb3dEZWx0YSwgYVRvQiwgMSAvIGRpdmlzaW9uRmFjdG9yKTtcbiAgICB2ZWMzLnNjYWxlKGNvbHVtbkRlbHRhLCBiVG9DLCAxIC8gZGl2aXNpb25GYWN0b3IpO1xuICAgIHZlYzMuc2NhbGUoYmFja3dhcmRzRGVsdGEsIGFUb0MsIDEgLyBkaXZpc2lvbkZhY3Rvcik7XG5cbiAgICAvLyBMb29wIG92ZXIgZWFjaCBuZXcgZGl2aXNpb24gKHJvdykgZm9yIHRoZSBjdXJyZW50IHRyaWFuZ2xlLlxuICAgIGZvciAocm93SW5kZXggPSAwOyByb3dJbmRleCA8IGRpdmlzaW9uRmFjdG9yOyByb3dJbmRleCsrKSB7XG4gICAgICB2ZWMzLnNjYWxlQW5kQWRkKHJvd1N0YXJ0UG9pbnQsIGEsIHJvd0RlbHRhLCByb3dJbmRleCk7XG5cbiAgICAgIC8vIENyZWF0ZSB0aGUgZmlyc3QgdHJpYW5nbGUgaW4gdGhlIHJvdyAoYWRkcmVzcyB0aGUgZmVuY2UtcG9zdCBwcm9ibGVtKS5cbiAgICAgIG5ld1Bvc2l0aW9uc1tuZXdJbmRleCsrXSA9IHJvd1N0YXJ0UG9pbnRbMF07XG4gICAgICBuZXdQb3NpdGlvbnNbbmV3SW5kZXgrK10gPSByb3dTdGFydFBvaW50WzFdO1xuICAgICAgbmV3UG9zaXRpb25zW25ld0luZGV4KytdID0gcm93U3RhcnRQb2ludFsyXTtcbiAgICAgIHZlYzMuYWRkKHRlbXBWZWMsIHJvd1N0YXJ0UG9pbnQsIHJvd0RlbHRhKTtcbiAgICAgIG5ld1Bvc2l0aW9uc1tuZXdJbmRleCsrXSA9IHRlbXBWZWNbMF07XG4gICAgICBuZXdQb3NpdGlvbnNbbmV3SW5kZXgrK10gPSB0ZW1wVmVjWzFdO1xuICAgICAgbmV3UG9zaXRpb25zW25ld0luZGV4KytdID0gdGVtcFZlY1syXTtcbiAgICAgIHZlYzMuYWRkKHRlbXBWZWMsIHJvd1N0YXJ0UG9pbnQsIGJhY2t3YXJkc0RlbHRhKTtcbiAgICAgIG5ld1Bvc2l0aW9uc1tuZXdJbmRleCsrXSA9IHRlbXBWZWNbMF07XG4gICAgICBuZXdQb3NpdGlvbnNbbmV3SW5kZXgrK10gPSB0ZW1wVmVjWzFdO1xuICAgICAgbmV3UG9zaXRpb25zW25ld0luZGV4KytdID0gdGVtcFZlY1syXTtcblxuICAgICAgLy8gTG9vcCBvdmVyIHRoZSBuZXcgdHJpYW5nbGVzIGluIHRoZSBjdXJyZW50IGRpdmlzaW9uLlxuICAgICAgZm9yIChjb2x1bW5JbmRleCA9IDE7IGNvbHVtbkluZGV4IDw9IHJvd0luZGV4OyBjb2x1bW5JbmRleCsrKSB7XG4gICAgICAgIHZlYzMuc2NhbGVBbmRBZGQocm93Q29sdW1uU3RhcnRQb2ludCwgcm93U3RhcnRQb2ludCwgY29sdW1uRGVsdGEsIGNvbHVtbkluZGV4KTtcblxuICAgICAgICBuZXdQb3NpdGlvbnNbbmV3SW5kZXgrK10gPSByb3dDb2x1bW5TdGFydFBvaW50WzBdO1xuICAgICAgICBuZXdQb3NpdGlvbnNbbmV3SW5kZXgrK10gPSByb3dDb2x1bW5TdGFydFBvaW50WzFdO1xuICAgICAgICBuZXdQb3NpdGlvbnNbbmV3SW5kZXgrK10gPSByb3dDb2x1bW5TdGFydFBvaW50WzJdO1xuICAgICAgICB2ZWMzLnN1YnRyYWN0KHRlbXBWZWMsIHJvd0NvbHVtblN0YXJ0UG9pbnQsIGNvbHVtbkRlbHRhKTtcbiAgICAgICAgbmV3UG9zaXRpb25zW25ld0luZGV4KytdID0gdGVtcFZlY1swXTtcbiAgICAgICAgbmV3UG9zaXRpb25zW25ld0luZGV4KytdID0gdGVtcFZlY1sxXTtcbiAgICAgICAgbmV3UG9zaXRpb25zW25ld0luZGV4KytdID0gdGVtcFZlY1syXTtcbiAgICAgICAgdmVjMy5hZGQodGVtcFZlYywgcm93Q29sdW1uU3RhcnRQb2ludCwgcm93RGVsdGEpO1xuICAgICAgICBuZXdQb3NpdGlvbnNbbmV3SW5kZXgrK10gPSB0ZW1wVmVjWzBdO1xuICAgICAgICBuZXdQb3NpdGlvbnNbbmV3SW5kZXgrK10gPSB0ZW1wVmVjWzFdO1xuICAgICAgICBuZXdQb3NpdGlvbnNbbmV3SW5kZXgrK10gPSB0ZW1wVmVjWzJdO1xuXG4gICAgICAgIG5ld1Bvc2l0aW9uc1tuZXdJbmRleCsrXSA9IHJvd0NvbHVtblN0YXJ0UG9pbnRbMF07XG4gICAgICAgIG5ld1Bvc2l0aW9uc1tuZXdJbmRleCsrXSA9IHJvd0NvbHVtblN0YXJ0UG9pbnRbMV07XG4gICAgICAgIG5ld1Bvc2l0aW9uc1tuZXdJbmRleCsrXSA9IHJvd0NvbHVtblN0YXJ0UG9pbnRbMl07XG4gICAgICAgIHZlYzMuYWRkKHRlbXBWZWMsIHJvd0NvbHVtblN0YXJ0UG9pbnQsIHJvd0RlbHRhKTtcbiAgICAgICAgbmV3UG9zaXRpb25zW25ld0luZGV4KytdID0gdGVtcFZlY1swXTtcbiAgICAgICAgbmV3UG9zaXRpb25zW25ld0luZGV4KytdID0gdGVtcFZlY1sxXTtcbiAgICAgICAgbmV3UG9zaXRpb25zW25ld0luZGV4KytdID0gdGVtcFZlY1syXTtcbiAgICAgICAgdmVjMy5hZGQodGVtcFZlYywgcm93Q29sdW1uU3RhcnRQb2ludCwgYmFja3dhcmRzRGVsdGEpO1xuICAgICAgICBuZXdQb3NpdGlvbnNbbmV3SW5kZXgrK10gPSB0ZW1wVmVjWzBdO1xuICAgICAgICBuZXdQb3NpdGlvbnNbbmV3SW5kZXgrK10gPSB0ZW1wVmVjWzFdO1xuICAgICAgICBuZXdQb3NpdGlvbnNbbmV3SW5kZXgrK10gPSB0ZW1wVmVjWzJdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdQb3NpdGlvbnM7XG59XG5cbi8qKlxuICogUHJvamVjdHMgdGhlIGdpdmVuIHBvc2l0aW9ucyB0byBhIGRpc3RhbmNlIG9mIG9uZS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5LjxOdW1iZXI+fSBvdXRcbiAqIEBwYXJhbSB7QXJyYXkuPE51bWJlcj59IHBvc2l0aW9uc1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX25vcm1hbGl6ZVBvc2l0aW9ucyhvdXQsIHBvc2l0aW9ucykge1xuICBjb25zdCB0ZW1wVmVjID0gdmVjMy5jcmVhdGUoKTtcblxuICBmb3IgKGxldCBpID0gMCwgY291bnQgPSBwb3NpdGlvbnMubGVuZ3RoOyBpIDwgY291bnQ7IGkgKz0gMykge1xuICAgIHZlYzMuc2V0KHRlbXBWZWMsIHBvc2l0aW9uc1tpXSwgcG9zaXRpb25zW2kgKyAxXSwgcG9zaXRpb25zW2kgKyAyXSk7XG5cbiAgICB2ZWMzLm5vcm1hbGl6ZSh0ZW1wVmVjLCB0ZW1wVmVjKTtcblxuICAgIG91dFtpXSA9IHRlbXBWZWNbMF07XG4gICAgb3V0W2kgKyAxXSA9IHRlbXBWZWNbMV07XG4gICAgb3V0W2kgKyAyXSA9IHRlbXBWZWNbMl07XG4gIH1cbn1cblxuLyoqXG4gKiBHaXZlbiBhIGNvbGxlY3Rpb24gb2YgdmVydGljZXMgdGhhdCBwb3NzaWJseSBjb250YWlucyBkdXBsaWNhdGVzLCBjcmVhdGVzIGFuIGFycmF5IG9mIHRoZSB1bmlxdWVcbiAqIHZlcnRleCBwb3NpdGlvbnMgYW5kIGFuIGFycmF5IG9mIHRoZSBpbmRpY2VzIG9mIHRoZSBvcmlnaW5hbCwgZHVwbGljYXRlZCB2ZXJ0aWNlcyBpbiB0aGUgdW5pcXVlXG4gKiBhcnJheS5cbiAqXG4gKiBUaGlzIGlzIHVzZWZ1bCBmb3IgcmVuZGVyaW5nIHVzaW5nIGdsLmRyYXdFbGVtZW50cyAod2l0aCBnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUikgaW5zdGVhZCBvZlxuICogZ2wuZHJhd0FycmF5cy5cbiAqXG4gKiBOT1RFOiBBbHRob3VnaCB0aGlzIGZ1bmN0aW9uIGRvZXMgcGFydGlhbGx5IGFkZHJlc3MgZmxvYXRpbmctcG9pbnQgcm91bmQtb2ZmIGVycm9ycyB3aXRoaW4gdGhlXG4gKiBnaXZlbiBwb3NpdGlvbnMsIGl0IGRvZXMgbm90IGd1YXJhbnRlZSBjb3JyZWN0bmVzcy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5LjxOdW1iZXI+fSBvbGRWZXJ0ZXhQb3NpdGlvbnNcbiAqIEByZXR1cm5zIHt7dmVydGV4UG9zaXRpb25zOiBBcnJheS48TnVtYmVyPiwgdmVydGV4SW5kaWNlczogQXJyYXkuPE51bWJlcj59fVxuICovXG5mdW5jdGlvbiBkZWR1cFZlcnRleEFycmF5V2l0aFBvc2l0aW9uc0FuZEluZGljZXNBcnJheXMob2xkVmVydGV4UG9zaXRpb25zKSB7XG4gIGNvbnN0IHZlcnRleFBvc2l0aW9ucyA9IFtdO1xuICBjb25zdCB2ZXJ0ZXhJbmRpY2VzID0gW107XG5cbiAgY29uc3QgdmVydGV4VG9JbmRleE1hcCA9IG5ldyBIYXNoTWFwKF92ZXJ0ZXhIYXNoRnVuY3Rpb24pO1xuICBjb25zdCB2ZXJ0ZXggPSB2ZWMzLmNyZWF0ZSgpO1xuICBsZXQgb2xkQ29vcmRpbmF0ZUluZGV4O1xuICBsZXQgb2xkQ29vcmRpbmF0ZUNvdW50O1xuICBsZXQgbmV3VmVydGV4SW5kZXg7XG5cbiAgLy8gTG9vcCBvdmVyIHRoZSBvcmlnaW5hbCwgZHVwbGljYXRlZCB2ZXJ0ZXggcG9zaXRpb25zLlxuICBmb3IgKG9sZENvb3JkaW5hdGVJbmRleCA9IDAsIG9sZENvb3JkaW5hdGVDb3VudCA9IG9sZFZlcnRleFBvc2l0aW9ucy5sZW5ndGg7XG4gICAgICAgb2xkQ29vcmRpbmF0ZUluZGV4IDwgb2xkQ29vcmRpbmF0ZUNvdW50O1xuICAgICAgIG9sZENvb3JkaW5hdGVJbmRleCArPSAzKSB7XG4gICAgdmVjMy5zZXQodmVydGV4LFxuICAgICAgICBvbGRWZXJ0ZXhQb3NpdGlvbnNbb2xkQ29vcmRpbmF0ZUluZGV4XSxcbiAgICAgICAgb2xkVmVydGV4UG9zaXRpb25zW29sZENvb3JkaW5hdGVJbmRleCArIDFdLFxuICAgICAgICBvbGRWZXJ0ZXhQb3NpdGlvbnNbb2xkQ29vcmRpbmF0ZUluZGV4ICsgMl0pO1xuXG4gICAgLy8gSGFzIHRoaXMgcG9zaXRpb24gYWxyZWFkeSBiZWVuIHJlY29yZGVkP1xuICAgIGlmICghdmVydGV4VG9JbmRleE1hcC5oYXModmVydGV4KSkge1xuICAgICAgLy8gUmVjb3JkIHRoZSBpbmRleCBvZiB0aGUgdW5pcXVlIHZlcnRleCBwb3NpdGlvbi5cbiAgICAgIG5ld1ZlcnRleEluZGV4ID0gdmVydGV4UG9zaXRpb25zLmxlbmd0aCAvIDM7XG4gICAgICB2ZXJ0ZXhUb0luZGV4TWFwLnNldCh2ZXJ0ZXgsIG5ld1ZlcnRleEluZGV4KTtcblxuICAgICAgLy8gUmVjb3JkIHRoZSB1bmlxdWUgdmVydGV4IHBvc2l0aW9uLlxuICAgICAgdmVydGV4UG9zaXRpb25zLnB1c2godmVydGV4WzBdKTtcbiAgICAgIHZlcnRleFBvc2l0aW9ucy5wdXNoKHZlcnRleFsxXSk7XG4gICAgICB2ZXJ0ZXhQb3NpdGlvbnMucHVzaCh2ZXJ0ZXhbMl0pO1xuICAgIH1cblxuICAgIG5ld1ZlcnRleEluZGV4ID0gdmVydGV4VG9JbmRleE1hcC5nZXQodmVydGV4KTtcblxuICAgIC8vIFJlY29yZCB0aGUgaW5kZXggb2YgdGhlIHVuaXF1ZSBwb3NpdGlvbi5cbiAgICB2ZXJ0ZXhJbmRpY2VzLnB1c2gobmV3VmVydGV4SW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB2ZXJ0ZXhQb3NpdGlvbnM6IHZlcnRleFBvc2l0aW9ucyxcbiAgICB2ZXJ0ZXhJbmRpY2VzOiB2ZXJ0ZXhJbmRpY2VzXG4gIH07XG59XG5cbmNvbnN0IF9WRVJURVhfQ09PUkRJTkFURV9CVUNLRVRfU0laRV9ESUdJVFMgPSA0O1xuXG4vLyBUaGlzIG9mZnNldCBpcyBpbXBvcnRhbnQgZm9yIHByZXZlbnRpbmcgYnVja2V0LWFsaWduZWQgbnVtYmVycyBmcm9tIGJlaW5nIHBsYWNlZCBpbiBpbmNvbnNpc3RlbnRcbi8vIGJ1Y2tldHMuIEZvciBleGFtcGxlLCB3aG9sZSBpbnRlZ2VyIHZhbHVlcyBjb3VsZCBlYXNpbHkgYmUgcGxhY2VkIGluIGxvd2VyIG9yIGhpZ2hlciBidWNrZXRzXG4vLyBkZXBlbmRpbmcgb24gcm91bmQtb2ZmIGVycm9yLlxuY29uc3QgX09GRlNFVCA9IE1hdGgucmFuZG9tKCk7XG5cbi8qKlxuICogQ2FsY3VsYXRlcyBhIGhhc2ggY29kZSBmb3IgdGhlIGdpdmVuIHZlcnRleC5cbiAqXG4gKiBOT1RFOiBUaGlzIGRvZXMgbm90IGd1YXJhbnRlZSBjb3JyZWN0IHJlc3VsdHMuIER1ZSB0byByb3VuZC1vZmYgZXJyb3IsIFwiZXF1YWxcIiBjb29yZGluYXRlcyBjb3VsZFxuICogYmUgY2FsY3VsYXRlZCBpcyBiZWluZyBpbiBkaWZmZXJlbnQgYnVja2V0cy4gTGFyZ2VyIGJ1Y2tldCBzaXplcyBtaWdodCByZWR1Y2UgdGhlIHJhdGUgb2YgZmFsc2VcbiAqIG5lZ2F0aXZlcywgYnV0IHdpdGggdGhlIHRyYWRlLW9mZiBvZiBwb3RlbnRpYWxseSBpbnRyb2R1Y2luZyBmYWxzZSBwb3NpdGl2ZXMuXG4gKlxuICogQHBhcmFtIHt2ZWMzfSB2ZXJ0ZXhcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfdmVydGV4SGFzaEZ1bmN0aW9uKHZlcnRleCkge1xuICByZXR1cm4gYCR7KHZlcnRleFswXSArIF9PRkZTRVQpLnRvRml4ZWQoX1ZFUlRFWF9DT09SRElOQVRFX0JVQ0tFVF9TSVpFX0RJR0lUUyl9LGAgK1xuICAgICAgYCR7KHZlcnRleFsxXSArIF9PRkZTRVQpLnRvRml4ZWQoX1ZFUlRFWF9DT09SRElOQVRFX0JVQ0tFVF9TSVpFX0RJR0lUUyl9LGAgK1xuICAgICAgYCR7KHZlcnRleFsyXSArIF9PRkZTRVQpLnRvRml4ZWQoX1ZFUlRFWF9DT09SRElOQVRFX0JVQ0tFVF9TSVpFX0RJR0lUUyl9YDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIHZlcnRleCBwb3NpdGlvbnMgZm9yIGEgc2VjdGlvbiBvZiBhIHNwaGVyZS5cbiAqXG4gKiAtIFRoZXNlIHBvaW50cyB3aWxsIGxpZSBhbG9uZyBsYXRpdHVkZS1sb25naXR1ZGUgbGluZXMuXG4gKiAtIFRoZSBzaGFwZSBpcyBjZW50ZXJlZCBhcm91bmQgdGhlIG9yaWdpbiB3aXRoIHRoZSBwb2xlcyBhbGlnbmVkIHdpdGggdGhlIHotYXhpcy5cbiAqIC0gVGhlIHJhZGl1cyBvZiB0aGUgY2lyY2xlIHdpbGwgYmUgb25lLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydFBpdGNoSW5kZXhcbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmRQaXRjaEluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gZGVsdGFQaXRjaFxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0QXppbXV0aEluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gZW5kQXppbXV0aEluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gZGVsdGFBemltdXRoXG4gKiBAcmV0dXJuIHtBcnJheS48TnVtYmVyPn1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNhbGN1bGF0ZVNwaGVyaWNhbFNlY3Rpb24oc3RhcnRQaXRjaEluZGV4LCBlbmRQaXRjaEluZGV4LCBkZWx0YVBpdGNoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydEF6aW11dGhJbmRleCwgZW5kQXppbXV0aEluZGV4LCBkZWx0YUF6aW11dGgpIHtcbiAgY29uc3QgdmVydGV4UG9zaXRpb25zID0gW107XG4gIGxldCB2ZXJ0ZXhQb3NpdGlvbnNJbmRleCA9IDA7XG5cbiAgbGV0IHBpdGNoSW5kZXg7XG4gIGxldCBhemltdXRoSW5kZXg7XG4gIGxldCBsb3dlclBpdGNoO1xuICBsZXQgdXBwZXJQaXRjaDtcbiAgbGV0IGxvd2VyQXppbXV0aDtcbiAgbGV0IHVwcGVyQXppbXV0aDtcbiAgbGV0IHgxO1xuICBsZXQgeTE7XG4gIGxldCB6MTtcbiAgbGV0IHgyO1xuICBsZXQgeTI7XG4gIGxldCB6MjtcbiAgbGV0IHgzO1xuICBsZXQgeTM7XG4gIGxldCB6MztcbiAgbGV0IHg0O1xuICBsZXQgeTQ7XG4gIGxldCB6NDtcblxuICAvLyBUT0RPOiBUaGlzIGltcGxlbWVudGF0aW9uIGNhbGN1bGF0ZXMgYWxsIGNvb3JkaW5hdGVzIG11bHRpcGxlIHRpbWVzLiBSZWZhY3RvciBpdCB0byBiZSBtb3JlXG4gIC8vIGVmZmljaWVudC5cblxuICAvLyBMb29wIG92ZXIgZWFjaCBsYXRpdHVkaW5hbCBzdHJpcC5cbiAgZm9yIChwaXRjaEluZGV4ID0gc3RhcnRQaXRjaEluZGV4OyBwaXRjaEluZGV4IDwgZW5kUGl0Y2hJbmRleDsgcGl0Y2hJbmRleCsrKSB7XG4gICAgbG93ZXJQaXRjaCA9IGRlbHRhUGl0Y2ggKiBwaXRjaEluZGV4O1xuICAgIHVwcGVyUGl0Y2ggPSBkZWx0YVBpdGNoICsgbG93ZXJQaXRjaDtcblxuICAgIC8vIENyZWF0ZSB0aGUgdHJpYW5nbGVzIGZvciB0aGUgc3RyaXAgYXQgdGhlIGN1cnJlbnQgcGl0Y2guXG4gICAgZm9yIChhemltdXRoSW5kZXggPSBzdGFydEF6aW11dGhJbmRleDsgYXppbXV0aEluZGV4IDwgZW5kQXppbXV0aEluZGV4OyBhemltdXRoSW5kZXgrKykge1xuICAgICAgbG93ZXJBemltdXRoID0gZGVsdGFBemltdXRoICogYXppbXV0aEluZGV4O1xuICAgICAgdXBwZXJBemltdXRoID0gZGVsdGFBemltdXRoICsgbG93ZXJBemltdXRoO1xuXG4gICAgICAvLyBUaGUgY29ybmVycyBvZiB0aGUgY3VycmVudCBzcXVhcmUuXG5cbiAgICAgIHgxID0gTWF0aC5zaW4obG93ZXJQaXRjaCkgKiBNYXRoLmNvcyhsb3dlckF6aW11dGgpO1xuICAgICAgeTEgPSBNYXRoLnNpbihsb3dlclBpdGNoKSAqIE1hdGguc2luKGxvd2VyQXppbXV0aCk7XG4gICAgICB6MSA9IE1hdGguY29zKGxvd2VyUGl0Y2gpO1xuXG4gICAgICB4MiA9IE1hdGguc2luKHVwcGVyUGl0Y2gpICogTWF0aC5jb3MobG93ZXJBemltdXRoKTtcbiAgICAgIHkyID0gTWF0aC5zaW4odXBwZXJQaXRjaCkgKiBNYXRoLnNpbihsb3dlckF6aW11dGgpO1xuICAgICAgejIgPSBNYXRoLmNvcyh1cHBlclBpdGNoKTtcblxuICAgICAgeDMgPSBNYXRoLnNpbihsb3dlclBpdGNoKSAqIE1hdGguY29zKHVwcGVyQXppbXV0aCk7XG4gICAgICB5MyA9IE1hdGguc2luKGxvd2VyUGl0Y2gpICogTWF0aC5zaW4odXBwZXJBemltdXRoKTtcbiAgICAgIHozID0gTWF0aC5jb3MobG93ZXJQaXRjaCk7XG5cbiAgICAgIHg0ID0gTWF0aC5zaW4odXBwZXJQaXRjaCkgKiBNYXRoLmNvcyh1cHBlckF6aW11dGgpO1xuICAgICAgeTQgPSBNYXRoLnNpbih1cHBlclBpdGNoKSAqIE1hdGguc2luKHVwcGVyQXppbXV0aCk7XG4gICAgICB6NCA9IE1hdGguY29zKHVwcGVyUGl0Y2gpO1xuXG4gICAgICAvLyBUaGUgZmlyc3QgdHJpYW5nbGUuXG5cbiAgICAgIHZlcnRleFBvc2l0aW9uc1t2ZXJ0ZXhQb3NpdGlvbnNJbmRleF0gPSB4MTtcbiAgICAgIHZlcnRleFBvc2l0aW9uc1t2ZXJ0ZXhQb3NpdGlvbnNJbmRleCArIDFdID0geTE7XG4gICAgICB2ZXJ0ZXhQb3NpdGlvbnNbdmVydGV4UG9zaXRpb25zSW5kZXggKyAyXSA9IHoxO1xuICAgICAgdmVydGV4UG9zaXRpb25zW3ZlcnRleFBvc2l0aW9uc0luZGV4ICsgM10gPSB4MjtcbiAgICAgIHZlcnRleFBvc2l0aW9uc1t2ZXJ0ZXhQb3NpdGlvbnNJbmRleCArIDRdID0geTI7XG4gICAgICB2ZXJ0ZXhQb3NpdGlvbnNbdmVydGV4UG9zaXRpb25zSW5kZXggKyA1XSA9IHoyO1xuICAgICAgdmVydGV4UG9zaXRpb25zW3ZlcnRleFBvc2l0aW9uc0luZGV4ICsgNl0gPSB4MztcbiAgICAgIHZlcnRleFBvc2l0aW9uc1t2ZXJ0ZXhQb3NpdGlvbnNJbmRleCArIDddID0geTM7XG4gICAgICB2ZXJ0ZXhQb3NpdGlvbnNbdmVydGV4UG9zaXRpb25zSW5kZXggKyA4XSA9IHozO1xuXG4gICAgICAvLyBUaGUgc2Vjb25kIHRyaWFuZ2xlLlxuXG4gICAgICB2ZXJ0ZXhQb3NpdGlvbnNbdmVydGV4UG9zaXRpb25zSW5kZXggKyA5XSA9IHg0O1xuICAgICAgdmVydGV4UG9zaXRpb25zW3ZlcnRleFBvc2l0aW9uc0luZGV4ICsgMTBdID0geTQ7XG4gICAgICB2ZXJ0ZXhQb3NpdGlvbnNbdmVydGV4UG9zaXRpb25zSW5kZXggKyAxMV0gPSB6NDtcbiAgICAgIHZlcnRleFBvc2l0aW9uc1t2ZXJ0ZXhQb3NpdGlvbnNJbmRleCArIDEyXSA9IHgzO1xuICAgICAgdmVydGV4UG9zaXRpb25zW3ZlcnRleFBvc2l0aW9uc0luZGV4ICsgMTNdID0geTM7XG4gICAgICB2ZXJ0ZXhQb3NpdGlvbnNbdmVydGV4UG9zaXRpb25zSW5kZXggKyAxNF0gPSB6MztcbiAgICAgIHZlcnRleFBvc2l0aW9uc1t2ZXJ0ZXhQb3NpdGlvbnNJbmRleCArIDE1XSA9IHgyO1xuICAgICAgdmVydGV4UG9zaXRpb25zW3ZlcnRleFBvc2l0aW9uc0luZGV4ICsgMTZdID0geTI7XG4gICAgICB2ZXJ0ZXhQb3NpdGlvbnNbdmVydGV4UG9zaXRpb25zSW5kZXggKyAxN10gPSB6MjtcblxuICAgICAgdmVydGV4UG9zaXRpb25zSW5kZXggKz0gMTg7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZlcnRleFBvc2l0aW9ucztcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIHZlcnRleCBwb3NpdGlvbnMgZm9yIGEgc2VjdGlvbiBvZiBhIGN5bGluZGVyLlxuICpcbiAqIFRoZSBzaGFwZSBpcyBjZW50ZXJlZCBhcm91bmQgdGhlIG9yaWdpbiB3aXRoIHRoZSBwb2xlcyBhbGlnbmVkIHdpdGggdGhlIHotYXhpcy5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gY3lsaW5kZXJCb3R0b21cbiAqIEBwYXJhbSB7bnVtYmVyfSBjeWxpbmRlclRvcFxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0SW5kZXhcbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmRJbmRleFxuICogQHBhcmFtIHtudW1iZXJ9IGRlbHRhXG4gKiBAcmV0dXJucyB7QXJyYXkuPE51bWJlcj59XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjYWxjdWxhdGVDeWxpbmRyaWNhbFNlY3Rpb24oY3lsaW5kZXJCb3R0b20sIGN5bGluZGVyVG9wLCBzdGFydEluZGV4LCBlbmRJbmRleCwgZGVsdGEpIHtcbiAgY29uc3QgdmVydGV4UG9zaXRpb25zID0gW107XG4gIGxldCB2ZXJ0ZXhQb3NpdGlvbnNJbmRleCA9IDA7XG5cbiAgbGV0IGluZGV4O1xuICBsZXQgbG93ZXJBemltdXRoO1xuICBsZXQgdXBwZXJBemltdXRoO1xuICBsZXQgeDE7XG4gIGxldCB5MTtcbiAgbGV0IHoxO1xuICBsZXQgeDI7XG4gIGxldCB5MjtcbiAgbGV0IHoyO1xuICBsZXQgeDM7XG4gIGxldCB5MztcbiAgbGV0IHozO1xuICBsZXQgeDQ7XG4gIGxldCB5NDtcbiAgbGV0IHo0O1xuXG4gIC8vIENyZWF0ZSB0aGUgdHJpYW5nbGVzIGZvciB0aGUgY3lsaW5kcmljYWwgc3RyaXAuXG4gIGZvciAoaW5kZXggPSBzdGFydEluZGV4OyBpbmRleCA8IGVuZEluZGV4OyBpbmRleCsrKSB7XG4gICAgbG93ZXJBemltdXRoID0gZGVsdGEgKiBpbmRleDtcbiAgICB1cHBlckF6aW11dGggPSBkZWx0YSArIGxvd2VyQXppbXV0aDtcblxuICAgIC8vIFRoZSBjb3JuZXJzIG9mIHRoZSBjdXJyZW50IHNxdWFyZS5cblxuICAgIHgxID0gTWF0aC5jb3MobG93ZXJBemltdXRoKTtcbiAgICB5MSA9IE1hdGguc2luKGxvd2VyQXppbXV0aCk7XG4gICAgejEgPSBjeWxpbmRlckJvdHRvbTtcblxuICAgIHgyID0gTWF0aC5jb3MobG93ZXJBemltdXRoKTtcbiAgICB5MiA9IE1hdGguc2luKGxvd2VyQXppbXV0aCk7XG4gICAgejIgPSBjeWxpbmRlclRvcDtcblxuICAgIHgzID0gTWF0aC5jb3ModXBwZXJBemltdXRoKTtcbiAgICB5MyA9IE1hdGguc2luKHVwcGVyQXppbXV0aCk7XG4gICAgejMgPSBjeWxpbmRlckJvdHRvbTtcblxuICAgIHg0ID0gTWF0aC5jb3ModXBwZXJBemltdXRoKTtcbiAgICB5NCA9IE1hdGguc2luKHVwcGVyQXppbXV0aCk7XG4gICAgejQgPSBjeWxpbmRlclRvcDtcblxuICAgIC8vIFRoZSBmaXJzdCB0cmlhbmdsZS5cblxuICAgIHZlcnRleFBvc2l0aW9uc1t2ZXJ0ZXhQb3NpdGlvbnNJbmRleF0gPSB4MTtcbiAgICB2ZXJ0ZXhQb3NpdGlvbnNbdmVydGV4UG9zaXRpb25zSW5kZXggKyAxXSA9IHkxO1xuICAgIHZlcnRleFBvc2l0aW9uc1t2ZXJ0ZXhQb3NpdGlvbnNJbmRleCArIDJdID0gejE7XG4gICAgdmVydGV4UG9zaXRpb25zW3ZlcnRleFBvc2l0aW9uc0luZGV4ICsgM10gPSB4MjtcbiAgICB2ZXJ0ZXhQb3NpdGlvbnNbdmVydGV4UG9zaXRpb25zSW5kZXggKyA0XSA9IHkyO1xuICAgIHZlcnRleFBvc2l0aW9uc1t2ZXJ0ZXhQb3NpdGlvbnNJbmRleCArIDVdID0gejI7XG4gICAgdmVydGV4UG9zaXRpb25zW3ZlcnRleFBvc2l0aW9uc0luZGV4ICsgNl0gPSB4MztcbiAgICB2ZXJ0ZXhQb3NpdGlvbnNbdmVydGV4UG9zaXRpb25zSW5kZXggKyA3XSA9IHkzO1xuICAgIHZlcnRleFBvc2l0aW9uc1t2ZXJ0ZXhQb3NpdGlvbnNJbmRleCArIDhdID0gejM7XG5cbiAgICAvLyBUaGUgc2Vjb25kIHRyaWFuZ2xlLlxuXG4gICAgdmVydGV4UG9zaXRpb25zW3ZlcnRleFBvc2l0aW9uc0luZGV4ICsgOV0gPSB4NDtcbiAgICB2ZXJ0ZXhQb3NpdGlvbnNbdmVydGV4UG9zaXRpb25zSW5kZXggKyAxMF0gPSB5NDtcbiAgICB2ZXJ0ZXhQb3NpdGlvbnNbdmVydGV4UG9zaXRpb25zSW5kZXggKyAxMV0gPSB6NDtcbiAgICB2ZXJ0ZXhQb3NpdGlvbnNbdmVydGV4UG9zaXRpb25zSW5kZXggKyAxMl0gPSB4MztcbiAgICB2ZXJ0ZXhQb3NpdGlvbnNbdmVydGV4UG9zaXRpb25zSW5kZXggKyAxM10gPSB5MztcbiAgICB2ZXJ0ZXhQb3NpdGlvbnNbdmVydGV4UG9zaXRpb25zSW5kZXggKyAxNF0gPSB6MztcbiAgICB2ZXJ0ZXhQb3NpdGlvbnNbdmVydGV4UG9zaXRpb25zSW5kZXggKyAxNV0gPSB4MjtcbiAgICB2ZXJ0ZXhQb3NpdGlvbnNbdmVydGV4UG9zaXRpb25zSW5kZXggKyAxNl0gPSB5MjtcbiAgICB2ZXJ0ZXhQb3NpdGlvbnNbdmVydGV4UG9zaXRpb25zSW5kZXggKyAxN10gPSB6MjtcblxuICAgIHZlcnRleFBvc2l0aW9uc0luZGV4ICs9IDE4O1xuICB9XG5cbiAgcmV0dXJuIHZlcnRleFBvc2l0aW9ucztcbn1cblxuLyoqXG4gKiBTY2FsZSBhbmQgdGhlbiB0cmFuc2xhdGUgdGhlIDMtZGltZW5zaW9uYWwgcG9zaXRpb25zIGluIHRoZSBnaXZlbiBmbGF0dGVuZWQgYXJyYXkuXG4gKlxuICogVGhlIHNoYXBlIGlzIGNlbnRlcmVkIGFyb3VuZCB0aGUgb3JpZ2luIHdpdGggdGhlIHBvbGVzIGFsaWduZWQgd2l0aCB0aGUgei1heGlzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXkuPE51bWJlcj59IHZlcnRleFBvc2l0aW9ucyBPdXRwdXQuXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnRJbmRleFxuICogQHBhcmFtIHtudW1iZXJ9IGVuZEluZGV4XG4gKiBAcGFyYW0ge3ZlYzN9IHNjYWxlXG4gKiBAcGFyYW0ge3ZlYzN9IHRyYW5zbGF0ZVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2NhbGVUaGVuVHJhbnNsYXRlUG9zaXRpb25zKHZlcnRleFBvc2l0aW9ucywgc3RhcnRJbmRleCwgZW5kSW5kZXgsIHNjYWxlLCB0cmFuc2xhdGUpIHtcbiAgY29uc3Qgc2NhbGVYID0gc2NhbGVbMF07XG4gIGNvbnN0IHNjYWxlWSA9IHNjYWxlWzFdO1xuICBjb25zdCBzY2FsZVogPSBzY2FsZVsyXTtcbiAgY29uc3QgdHJhbnNsYXRlWCA9IHRyYW5zbGF0ZVswXTtcbiAgY29uc3QgdHJhbnNsYXRlWSA9IHRyYW5zbGF0ZVsxXTtcbiAgY29uc3QgdHJhbnNsYXRlWiA9IHRyYW5zbGF0ZVsyXTtcblxuICBmb3IgKGxldCBpID0gc3RhcnRJbmRleDsgaSA8IGVuZEluZGV4OyBpICs9IDMpIHtcbiAgICB2ZXJ0ZXhQb3NpdGlvbnNbaV0gPSB2ZXJ0ZXhQb3NpdGlvbnNbaV0gKiBzY2FsZVggKyB0cmFuc2xhdGVYO1xuICAgIHZlcnRleFBvc2l0aW9uc1tpICsgMV0gPSB2ZXJ0ZXhQb3NpdGlvbnNbaSArIDFdICogc2NhbGVZICsgdHJhbnNsYXRlWTtcbiAgICB2ZXJ0ZXhQb3NpdGlvbnNbaSArIDJdID0gdmVydGV4UG9zaXRpb25zW2kgKyAyXSAqIHNjYWxlWiArIHRyYW5zbGF0ZVo7XG4gIH1cbn1cblxuLy8gRXhwb3J0IHRoaXMgbW9kdWxlJ3MgbG9naWNcblxuZXhwb3J0IHtcbiAgZ2V0Vmlld3BvcnRXaWR0aCxcbiAgZ2V0Vmlld3BvcnRIZWlnaHQsXG4gIGdldFdlYkdMQ29udGV4dCxcbiAgY3JlYXRlQnVmZmVyLFxuICBnZXRBdHRyaWJMb2NhdGlvbixcbiAgYnVpbGRQcm9ncmFtLFxuICBidWlsZFNoYWRlcixcbiAgbG9hZFNoYWRlcixcbiAgbG9hZFByb2dyYW0sXG4gIGNyZWF0ZUJ1ZmZlckZyb21EYXRhLFxuICBiaW5kR0xDb250ZXh0VG9WaWV3cG9ydERpbWVuc2lvbnMsXG4gIGJpbmRGcmFtZWJ1ZmZlcixcbiAgY3JlYXRlRnJhbWVidWZmZXIsXG4gIGNyZWF0ZVRleHR1cmVGb3JSZW5kZXJpbmcsXG4gIGNyZWF0ZVJlbmRlckJ1ZmZlcixcbiAgY3JlYXRlMkRTcXVhcmVQb3NpdGlvbnNDb25maWcsXG5cbiAgZXhwYW5kVmVydGV4SW5kaWNlc1RvRHVwbGljYXRlUG9zaXRpb25zLFxuICBjYWxjdWxhdGVPcnRob2dvbmFsVmVydGV4Tm9ybWFscyxcbiAgY2FsY3VsYXRlTGF0TG9uZ1RleHR1cmVDb29yZGluYXRlcyxcbiAgY2FsY3VsYXRlQ3lsaW5kcmljYWxUZXh0dXJlQ29vcmRpbmF0ZXMsXG4gIGV4cGFuZFZlcnRleEluZGljZXNBcm91bmRMb25naXR1ZGVTZWFtLFxuICB0ZXNzZWxhdGVTcGhlcmUsXG4gIGRlZHVwVmVydGV4QXJyYXlXaXRoUG9zaXRpb25zQW5kSW5kaWNlc0FycmF5cyxcbiAgY2FsY3VsYXRlU3BoZXJpY2FsU2VjdGlvbixcbiAgY2FsY3VsYXRlQ3lsaW5kcmljYWxTZWN0aW9uLFxuICBzY2FsZVRoZW5UcmFuc2xhdGVQb3NpdGlvbnMsXG59O1xuXG4vLyBTb21lIHR5cGUgZGVmcyB0byBtYWtlIG15IGVkaXRvcidzIGF1dG8tY29tcGxldGUgaGFwcHkuXG5cbi8qKiBAdHlwZWRlZiB7T2JqZWN0fSBXZWJHTFByb2dyYW0gKi9cbi8qKiBAdHlwZWRlZiB7T2JqZWN0fSBXZWJHTFNoYWRlciAqL1xuLyoqIEB0eXBlZGVmIHtPYmplY3R9IFdlYkdMQnVmZmVyICovXG4vKiogQHR5cGVkZWYge09iamVjdH0gV2ViR0xUZXh0dXJlICovXG4vKiogQHR5cGVkZWYge0Zsb2F0MzJBcnJheXxBcnJheS48TnVtYmVyPn0gbWF0MyAqL1xuLyoqIEB0eXBlZGVmIHtGbG9hdDMyQXJyYXl8QXJyYXkuPE51bWJlcj59IG1hdDQgKi9cbi8qKiBAdHlwZWRlZiB7RmxvYXQzMkFycmF5fEFycmF5LjxOdW1iZXI+fSBxdWF0ICovXG4vKiogQHR5cGVkZWYge0Zsb2F0MzJBcnJheXxBcnJheS48TnVtYmVyPn0gdmVjMiAqL1xuLyoqIEB0eXBlZGVmIHtGbG9hdDMyQXJyYXl8QXJyYXkuPE51bWJlcj59IHZlYzMgKi9cbi8qKiBAdHlwZWRlZiB7RmxvYXQzMkFycmF5fEFycmF5LjxOdW1iZXI+fSB2ZWM0ICovXG4iLCIvKipcbiAqIEEgaGFzaCBtYXAgdGhhdCB1c2VzIGEgY3VzdG9tIGhhc2ggZnVuY3Rpb24uXG4gKi9cbmNsYXNzIEhhc2hNYXAge1xuICAvKipcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFzaEZ1bmN0aW9uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihoYXNoRnVuY3Rpb24pIHtcbiAgICB0aGlzLl9oYXNoRnVuY3Rpb24gPSBoYXNoRnVuY3Rpb247XG4gICAgdGhpcy5fbWFwID0gbmV3IE1hcCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBrZXlcbiAgICogQHBhcmFtIHtPYmplY3R9IHZhbHVlXG4gICAqL1xuICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIGNvbnN0IGhhc2hDb2RlID0gdGhpcy5faGFzaEZ1bmN0aW9uKGtleSk7XG4gICAgdGhpcy5fbWFwLnNldChoYXNoQ29kZSwgdmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBrZXlcbiAgICogQHJldHVybnMge09iamVjdH1cbiAgICovXG4gIGdldChrZXkpIHtcbiAgICBjb25zdCBoYXNoQ29kZSA9IHRoaXMuX2hhc2hGdW5jdGlvbihrZXkpO1xuICAgIHJldHVybiB0aGlzLl9tYXAuZ2V0KGhhc2hDb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge09iamVjdH0ga2V5XG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgaGFzKGtleSkge1xuICAgIGNvbnN0IGhhc2hDb2RlID0gdGhpcy5faGFzaEZ1bmN0aW9uKGtleSk7XG4gICAgcmV0dXJuIHRoaXMuX21hcC5oYXMoaGFzaENvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBpdGVtXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgcmVtb3ZlKGl0ZW0pIHtcbiAgICByZXR1cm4gdGhpcy5fbWFwLmRlbGV0ZShpdGVtKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cbiAgZm9yRWFjaChjYWxsYmFjaykge1xuICAgIHRoaXMuX21hcC5mb3JFYWNoKGNhbGxiYWNrKTtcbiAgfVxuXG4gIGNsZWFyKCkge1xuICAgIHRoaXMuX21hcC5jbGVhcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgc2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbWFwLnNpemU7XG4gIH1cbn1cblxuZXhwb3J0IHtIYXNoTWFwfTtcbiIsIi8qKlxuICogVGhpcyBtb2R1bGUgZGVmaW5lcyBhIGNvbGxlY3Rpb24gb2Ygc3RhdGljIGdlbmVyYWwgdXRpbGl0eSBmdW5jdGlvbnMuXG4gKi9cblxuLy8gVE9ETzogVGhpcyBzaG91bGQgYmUgc2V0IGZyb20gc29tZXdoZXJlIGVsc2UgKHByb2JhYmx5IGFzIGEgcGFyYW0gdG8gY29udHJvbGxlciBsaWtlIGJlZm9yZTsgYnV0IHRoZW4gSSBuZWVkIHRvIG1ha2UgdGhpcyB1cGRhdGFibGUpXG5jb25zdCBpc0luRGV2TW9kZSA9IHRydWU7XG5cbi8qKlxuICogQWRkcyBhbiBldmVudCBsaXN0ZW5lciBmb3IgZWFjaCBvZiB0aGUgZ2l2ZW4gZXZlbnRzIHRvIGVhY2ggb2YgdGhlIGdpdmVuIGVsZW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXkuPEhUTUxFbGVtZW50Pn0gZWxlbWVudHMgVGhlIGVsZW1lbnRzIHRvIGFkZCBldmVudCBsaXN0ZW5lcnMgdG8uXG4gKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBldmVudHMgVGhlIGV2ZW50IGxpc3RlbmVycyB0byBhZGQgdG8gdGhlIGVsZW1lbnRzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIHNpbmdsZSBjYWxsYmFjayBmb3IgaGFuZGxpbmcgdGhlIGV2ZW50cy5cbiAqL1xuZnVuY3Rpb24gbGlzdGVuVG9NdWx0aXBsZUZvck11bHRpcGxlKGVsZW1lbnRzLCBldmVudHMsIGNhbGxiYWNrKSB7XG4gIGVsZW1lbnRzLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgZXZlbnRzLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBjYWxsYmFjaywgZmFsc2UpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgRE9NIGVsZW1lbnQgd2l0aCB0aGUgZ2l2ZW4gdGFnIG5hbWUsIGFwcGVuZHMgaXQgdG8gdGhlIGdpdmVuIHBhcmVudCBlbGVtZW50LCBhbmRcbiAqIGdpdmVzIGl0IHRoZSBnaXZlbiBpZCBhbmQgY2xhc3Nlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnTmFtZSBUaGUgdGFnIG5hbWUgdG8gZ2l2ZSB0aGUgbmV3IGVsZW1lbnQuXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBbcGFyZW50XSBUaGUgcGFyZW50IGVsZW1lbnQgdG8gYXBwZW5kIHRoZSBuZXcgZWxlbWVudCB0by5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbaWRdIFRoZSBpZCB0byBnaXZlIHRoZSBuZXcgZWxlbWVudC5cbiAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IFtjbGFzc2VzXSBUaGUgY2xhc3NlcyB0byBnaXZlIHRoZSBuZXcgZWxlbWVudC5cbiAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH0gVGhlIG5ldyBlbGVtZW50LlxuICovXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50KHRhZ05hbWUsIHBhcmVudCwgaWQsIGNsYXNzZXMpIHtcbiAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG4gIGlmIChwYXJlbnQpIHtcbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gIH1cbiAgaWYgKGlkKSB7XG4gICAgZWxlbWVudC5pZCA9IGlkO1xuICB9XG4gIGlmIChjbGFzc2VzKSB7XG4gICAgY2xhc3Nlcy5mb3JFYWNoKGNsYXNzTmFtZSA9PiBhZGRDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpKTtcbiAgfVxuICByZXR1cm4gZWxlbWVudDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGdpdmVuIGVsZW1lbnQgY29udGFpbnMgdGhlIGdpdmVuIGNsYXNzLlxuICpcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgdG8gY2hlY2suXG4gKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIFRoZSBjbGFzcyB0byBjaGVjayBmb3IuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZWxlbWVudCBkb2VzIGNvbnRhaW4gdGhlIGNsYXNzLlxuICovXG5mdW5jdGlvbiBjb250YWluc0NsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICBsZXQgc3RhcnRJbmRleDtcbiAgbGV0IGluZGV4QWZ0ZXJFbmQ7XG4gIHN0YXJ0SW5kZXggPSBlbGVtZW50LmNsYXNzTmFtZS5pbmRleE9mKGNsYXNzTmFtZSk7XG4gIGlmIChzdGFydEluZGV4ID49IDApIHtcbiAgICBpZiAoc3RhcnRJbmRleCA9PT0gMCB8fCBlbGVtZW50LmNsYXNzTmFtZVtzdGFydEluZGV4IC0gMV0gPT09ICcgJykge1xuICAgICAgaW5kZXhBZnRlckVuZCA9IHN0YXJ0SW5kZXggKyBjbGFzc05hbWUubGVuZ3RoO1xuICAgICAgaWYgKGluZGV4QWZ0ZXJFbmQgPT09IGVsZW1lbnQuY2xhc3NOYW1lLmxlbmd0aCB8fFxuICAgICAgICBlbGVtZW50LmNsYXNzTmFtZVtpbmRleEFmdGVyRW5kXSA9PT0gJyAnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogVG9nZ2xlcyB3aGV0aGVyIHRoZSBnaXZlbiBlbGVtZW50IGhhcyB0aGUgZ2l2ZW4gY2xhc3MuIElmIHRoZSBlbmFibGVkIGFyZ3VtZW50IGlzIGdpdmVuLCB0aGVuXG4gKiB0aGUgaW5jbHVzaW9uIG9mIHRoZSBjbGFzcyB3aWxsIGJlIGZvcmNlZC4gVGhhdCBpcywgaWYgZW5hYmxlZD10cnVlLCB0aGVuIHRoaXMgd2lsbCBlbnN1cmUgdGhlXG4gKiBlbGVtZW50IGhhcyB0aGUgY2xhc3M7IGlmIGVuYWJsZWQ9ZmFsc2UsIHRoZW4gdGhpcyB3aWxsIGVuc3VyZSB0aGUgZWxlbWVudCBkb2VzIE5PVCBoYXZlIHRoZVxuICogY2xhc3M7IGlmIGVuYWJsZWQ9dW5kZWZpbmVkLCB0aGVuIHRoaXMgd2lsbCBzaW1wbHkgdG9nZ2xlIHdoZXRoZXIgdGhlIGVsZW1lbnQgaGFzIHRoZSBjbGFzcy5cbiAqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIGFkZCB0aGUgY2xhc3MgdG8gb3IgcmVtb3ZlIHRoZSBjbGFzcyBmcm9tLlxuICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSBUaGUgY2xhc3MgdG8gYWRkIG9yIHJlbW92ZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2VuYWJsZWRdIElmIGdpdmVuLCB0aGVuIHRoZSBpbmNsdXNpb24gb2YgdGhlIGNsYXNzIHdpbGwgYmUgZm9yY2VkLlxuICovXG5mdW5jdGlvbiB0b2dnbGVDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUsIGVuYWJsZWQpIHtcbiAgaWYgKHR5cGVvZiBlbmFibGVkID09PSAndW5kZWZpbmVkJykge1xuICAgIGlmIChjb250YWluc0NsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkpIHtcbiAgICAgIHJlbW92ZUNsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgYWRkQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICB9XG4gIH1cbiAgZWxzZSBpZiAoZW5hYmxlZCkge1xuICAgIGFkZENsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gIH1cbiAgZWxzZSB7XG4gICAgcmVtb3ZlQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgfVxufVxuXG4vKipcbiAqIEdldHMgdGhlIGNvb3JkaW5hdGVzIG9mIHRoZSBlbGVtZW50IHJlbGF0aXZlIHRvIHRoZSB0b3AtbGVmdCBjb3JuZXIgb2YgdGhlIHBhZ2UuXG4gKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCB0byBnZXQgdGhlIGNvb3JkaW5hdGVzIG9mLlxuICogQHJldHVybnMge3t4OiBOdW1iZXIsIHk6IE51bWJlcn19IFRoZSBjb29yZGluYXRlcyBvZiB0aGUgZWxlbWVudCByZWxhdGl2ZSB0byB0aGUgdG9wLWxlZnRcbiAqIGNvcm5lciBvZiB0aGUgcGFnZS5cbiAqL1xuZnVuY3Rpb24gZ2V0UGFnZU9mZnNldChlbGVtZW50KSB7XG4gIGxldCB4ID0gMDtcbiAgbGV0IHkgPSAwO1xuICB3aGlsZSAoZWxlbWVudCkge1xuICAgIHggKz0gZWxlbWVudC5vZmZzZXRMZWZ0O1xuICAgIHkgKz0gZWxlbWVudC5vZmZzZXRUb3A7XG4gICAgZWxlbWVudCA9IGVsZW1lbnQub2Zmc2V0UGFyZW50O1xuICB9XG4gIHggLT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQ7XG4gIHkgLT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDtcbiAgcmV0dXJuIHsgeDogeCwgeTogeSB9O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGRpbWVuc2lvbnMgb2YgdGhlIHZpZXdwb3J0LlxuICpcbiAqIEByZXR1cm5zIHt7dzogTnVtYmVyLCBoOiBOdW1iZXJ9fSBUaGUgZGltZW5zaW9ucyBvZiB0aGUgdmlld3BvcnQuXG4gKi9cbmZ1bmN0aW9uIGdldFZpZXdwb3J0U2l6ZSgpIHtcbiAgbGV0IHc7XG4gIGxldCBoO1xuICBpZiAodHlwZW9mIHdpbmRvdy5pbm5lcldpZHRoICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEdvb2QgYnJvd3NlcnNcbiAgICB3ID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgaCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgfVxuICBlbHNlIGlmICh0eXBlb2YgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggIT09ICd1bmRlZmluZWQnICYmXG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoICE9PSAwKSB7XG4gICAgLy8gSUU2IGluIHN0YW5kYXJkcyBjb21wbGlhbnQgbW9kZVxuICAgIHcgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XG4gICAgaCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIH1cbiAgZWxzZSB7XG4gICAgLy8gT2xkZXIgdmVyc2lvbnMgb2YgSUVcbiAgICB3ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXS5jbGllbnRXaWR0aDtcbiAgICBoID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXS5jbGllbnRIZWlnaHQ7XG4gIH1cbiAgcmV0dXJuIHsgdzogdywgaDogaCB9O1xufVxuXG4vKipcbiAqIFJlbW92ZXMgdGhlIGdpdmVuIGNoaWxkIGVsZW1lbnQgZnJvbSB0aGUgZ2l2ZW4gcGFyZW50IGVsZW1lbnQgaWYgdGhlIGNoaWxkIGRvZXMgaW5kZWVkIGJlbG9uZ1xuICogdG8gdGhlIHBhcmVudC5cbiAqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwYXJlbnQgVGhlIHBhcmVudCB0byByZW1vdmUgdGhlIGNoaWxkIGZyb20uXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBjaGlsZCBUaGUgY2hpbGQgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGNoaWxkIGRpZCBpbmRlZWQgYmVsb25nIHRvIHRoZSBwYXJlbnQuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUNoaWxkSWZQcmVzZW50KHBhcmVudCwgY2hpbGQpIHtcbiAgaWYgKGNoaWxkICYmIGNoaWxkLnBhcmVudE5vZGUgPT09IHBhcmVudCkge1xuICAgIHBhcmVudC5yZW1vdmVDaGlsZChjaGlsZCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIEFkZHMgdGhlIGdpdmVuIGNsYXNzIHRvIHRoZSBnaXZlbiBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgdG8gYWRkIHRoZSBjbGFzcyB0by5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWUgVGhlIGNsYXNzIHRvIGFkZC5cbiAqL1xuZnVuY3Rpb24gYWRkQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIGVsZW1lbnQuY2xhc3NOYW1lICsgJyAnICsgY2xhc3NOYW1lKTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIHRoZSBnaXZlbiBjbGFzcyBmcm9tIHRoZSBnaXZlbiBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgdG8gcmVtb3ZlIHRoZSBjbGFzcyBmcm9tLlxuICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSBUaGUgY2xhc3MgdG8gcmVtb3ZlLlxuICovXG5mdW5jdGlvbiByZW1vdmVDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJyxcbiAgICBlbGVtZW50LmNsYXNzTmFtZVxuICAgIC5zcGxpdCgnICcpXG4gICAgLmZpbHRlcih2YWx1ZSA9PiB2YWx1ZSAhPT0gY2xhc3NOYW1lKVxuICAgIC5qb2luKCcgJykpO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGNsYXNzZXMgZnJvbSB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIHJlbW92ZSBhbGwgY2xhc3NlcyBmcm9tLlxuICovXG5mdW5jdGlvbiBjbGVhckNsYXNzZXMoZWxlbWVudCkge1xuICBlbGVtZW50LmNsYXNzTmFtZSA9ICcnO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHdpZHRoIHRoYXQgdGhlIERPTSB3b3VsZCBnaXZlIHRvIGEgZGl2IHdpdGggdGhlIGdpdmVuIHRleHQuIFRoZSBnaXZlbiB0YWdcbiAqIG5hbWUsIHBhcmVudCwgaWQsIGFuZCBjbGFzc2VzIGFsbG93IHRoZSB3aWR0aCB0byBiZSBhZmZlY3RlZCBieSB2YXJpb3VzIENTUyBydWxlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUaGUgdGV4dCB0byBkZXRlcm1pbmUgdGhlIHdpZHRoIG9mLlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWUgVGhlIHRhZyBuYW1lIHRoaXMgdGV4dCB3b3VsZCBzdXBwb3NlZGx5IGhhdmUuXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBbcGFyZW50XSBUaGUgcGFyZW50IHRoaXMgdGV4dCB3b3VsZCBzdXBwb3NlZGx5IGJlIGEgY2hpbGQgb2Y7IGRlZmF1bHRzXG4gKiB0byB0aGUgZG9jdW1lbnQgYm9keS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbaWRdIFRoZSBpZCB0aGlzIHRleHQgd291bGQgc3VwcG9zZWRseSBoYXZlLlxuICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gW2NsYXNzZXNdIFRoZSBjbGFzc2VzIHRoaXMgdGV4dCB3b3VsZCBzdXBwb3NlZGx5IGhhdmUuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgd2lkdGggb2YgdGhlIHRleHQgdW5kZXIgdGhlc2UgY29uZGl0aW9ucy5cbiAqL1xuZnVuY3Rpb24gZ2V0VGV4dFdpZHRoKHRleHQsIHRhZ05hbWUsIHBhcmVudCwgaWQsIGNsYXNzZXMpIHtcbiAgbGV0IHRtcEVsZW1lbnQ7XG4gIGxldCB3aWR0aDtcbiAgcGFyZW50ID0gcGFyZW50IHx8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF07XG4gIHRtcEVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KHRhZ05hbWUsIG51bGwsIGlkLCBjbGFzc2VzKTtcbiAgdG1wRWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gIHRtcEVsZW1lbnQuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICB0bXBFbGVtZW50LnN0eWxlLndoaXRlU3BhY2UgPSAnbm93cmFwJztcbiAgcGFyZW50LmFwcGVuZENoaWxkKHRtcEVsZW1lbnQpO1xuICB0bXBFbGVtZW50LmlubmVySFRNTCA9IHRleHQ7XG4gIHdpZHRoID0gdG1wRWxlbWVudC5jbGllbnRXaWR0aDtcbiAgcGFyZW50LnJlbW92ZUNoaWxkKHRtcEVsZW1lbnQpO1xuICByZXR1cm4gd2lkdGg7XG59XG5cbi8qKlxuICogRW5jb2RlcyBhbmQgY29uY2F0ZW5hdGVzIHRoZSBnaXZlbiBVUkwgcGFyYW1ldGVycyBpbnRvIGEgc2luZ2xlIHF1ZXJ5IHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmF3UGFyYW1zIEFuIG9iamVjdCB3aG9zZSBwcm9wZXJ0aWVzIHJlcHJlc2VudCB0aGUgVVJMIHF1ZXJ5IHN0cmluZ1xuICogcGFyYW1ldGVycy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBxdWVyeSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGVuY29kZVF1ZXJ5U3RyaW5nKHJhd1BhcmFtcykge1xuICBsZXQgcGFyYW1ldGVyO1xuICBsZXQgZW5jb2RlZFBhcmFtcztcbiAgZW5jb2RlZFBhcmFtcyA9IFtdO1xuICBmb3IgKHBhcmFtZXRlciBpbiByYXdQYXJhbXMpIHtcbiAgICBpZiAocmF3UGFyYW1zLmhhc093blByb3BlcnR5KHBhcmFtZXRlcikpIHtcbiAgICAgIGVuY29kZWRQYXJhbXMucHVzaChlbmNvZGVVUklDb21wb25lbnQocGFyYW1ldGVyKSArICc9JyArXG4gICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChyYXdQYXJhbXNbcGFyYW1ldGVyXSkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gJz8nICsgZW5jb2RlZFBhcmFtcy5qb2luKCcmJyk7XG59XG5cbi8qKlxuICogUmV0cmlldmVzIHRoZSB2YWx1ZSBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlbiBuYW1lIGZyb20gdGhlIGdpdmVuIHF1ZXJ5IHN0cmluZy5cbiAqXG4gKiAoYm9ycm93ZWQgZnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzkwMTExNS9ob3ctY2FuLWktZ2V0LXF1ZXJ5LXN0cmluZy12YWx1ZXMtaW4tamF2YXNjcmlwdClcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcXVlcnlTdHJpbmcgVGhlIHF1ZXJ5IHN0cmluZyBjb250YWluaW5nIHRoZSBwYXJhbWV0ZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgKG5vbi1lbmNvZGVkKSBuYW1lIG9mIHRoZSBwYXJhbWV0ZXIgdmFsdWUgdG8gcmV0cmlldmUuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgcXVlcnkgc3RyaW5nIHBhcmFtZXRlciB2YWx1ZSwgb3IgbnVsbCBpZiB0aGUgcGFyYW1ldGVyIHdhcyBub3QgZm91bmQuXG4gKi9cbmZ1bmN0aW9uIGdldFF1ZXJ5U3RyaW5nUGFyYW1ldGVyVmFsdWUocXVlcnlTdHJpbmcsIG5hbWUpIHtcbiAgbGV0IHJlZ2V4O1xuICBsZXQgcmVzdWx0cztcbiAgbmFtZSA9IGVuY29kZVVSSUNvbXBvbmVudChuYW1lKTtcbiAgbmFtZSA9IG5hbWUucmVwbGFjZSgvW1xcW10vLCAnXFxcXFsnKS5yZXBsYWNlKC9bXFxdXS8sICdcXFxcXScpO1xuICByZWdleCA9IG5ldyBSZWdFeHAoJ1tcXFxcPyZdJyArIG5hbWUgKyAnPShbXiYjXSopJywgJ2knKTtcbiAgcmVzdWx0cyA9IHJlZ2V4LmV4ZWMocXVlcnlTdHJpbmcpO1xuICByZXR1cm4gcmVzdWx0cyA9PT0gbnVsbCA/IG51bGwgOiBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0c1sxXS5yZXBsYWNlKC9cXCsvZywgJyAnKSk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgQ1NTIHRyYW5zaXRpb24gc3R5bGUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgdHJhbnNpdGlvbiBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZWxlbWVudCwgdmFsdWUpIHtcbiAgZWxlbWVudC5zdHlsZS50cmFuc2l0aW9uID0gdmFsdWU7XG4gIGVsZW1lbnQuc3R5bGUuV2Via2l0VHJhbnNpdGlvbiA9IHZhbHVlO1xuICBlbGVtZW50LnN0eWxlLk1velRyYW5zaXRpb24gPSB2YWx1ZTtcbiAgZWxlbWVudC5zdHlsZS5tc1RyYW5zaXRpb24gPSB2YWx1ZTtcbiAgZWxlbWVudC5zdHlsZS5PVHJhbnNpdGlvbiA9IHZhbHVlO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIENTUyB0cmFuc2l0aW9uIGR1cmF0aW9uIHN0eWxlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIGR1cmF0aW9uLlxuICovXG5mdW5jdGlvbiBzZXRUcmFuc2l0aW9uRHVyYXRpb25TZWNvbmRzKGVsZW1lbnQsIHZhbHVlKSB7XG4gIGVsZW1lbnQuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gdmFsdWUgKyAncyc7XG4gIGVsZW1lbnQuc3R5bGUuV2Via2l0VHJhbnNpdGlvbkR1cmF0aW9uID0gdmFsdWUgKyAncyc7XG4gIGVsZW1lbnQuc3R5bGUuTW96VHJhbnNpdGlvbkR1cmF0aW9uID0gdmFsdWUgKyAncyc7XG4gIGVsZW1lbnQuc3R5bGUubXNUcmFuc2l0aW9uRHVyYXRpb24gPSB2YWx1ZSArICdzJztcbiAgZWxlbWVudC5zdHlsZS5PVHJhbnNpdGlvbkR1cmF0aW9uID0gdmFsdWUgKyAncyc7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgQ1NTIHRyYW5zaXRpb24gZGVsYXkgc3R5bGUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgZGVsYXkuXG4gKi9cbmZ1bmN0aW9uIHNldFRyYW5zaXRpb25EZWxheVNlY29uZHMoZWxlbWVudCwgdmFsdWUpIHtcbiAgZWxlbWVudC5zdHlsZS50cmFuc2l0aW9uRGVsYXkgPSB2YWx1ZSArICdzJztcbiAgZWxlbWVudC5zdHlsZS5XZWJraXRUcmFuc2l0aW9uRGVsYXkgPSB2YWx1ZSArICdzJztcbiAgZWxlbWVudC5zdHlsZS5Nb3pUcmFuc2l0aW9uRGVsYXkgPSB2YWx1ZSArICdzJztcbiAgZWxlbWVudC5zdHlsZS5tc1RyYW5zaXRpb25EZWxheSA9IHZhbHVlICsgJ3MnO1xuICBlbGVtZW50LnN0eWxlLk9UcmFuc2l0aW9uRGVsYXkgPSB2YWx1ZSArICdzJztcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSB1c2VyU2VsZWN0IHN0eWxlIG9mIHRoZSBnaXZlbiBlbGVtZW50IHRvICdub25lJy5cbiAqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHNldFVzZXJTZWxlY3ROb25lKGVsZW1lbnQpIHtcbiAgZWxlbWVudC5zdHlsZS51c2VyU2VsZWN0ID0gJ25vbmUnO1xuICBlbGVtZW50LnN0eWxlLndlYmtpdFVzZXJTZWxlY3QgPSAnbm9uZSc7XG4gIGVsZW1lbnQuc3R5bGUuTW96VXNlclNlbGVjdCA9ICdub25lJztcbiAgZWxlbWVudC5zdHlsZS5tc1VzZXJTZWxlY3QgPSAnbm9uZSc7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbnkgY2hpbGRyZW4gZWxlbWVudHMgZnJvbSB0aGUgZ2l2ZW4gcGFyZW50IHRoYXQgaGF2ZSB0aGUgZ2l2ZW4gY2xhc3MuXG4gKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcGFyZW50IFRoZSBwYXJlbnQgdG8gcmVtb3ZlIGNoaWxkcmVuIGZyb20uXG4gKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIFRoZSBjbGFzcyB0byBtYXRjaC5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQ2hpbGRyZW5XaXRoQ2xhc3MocGFyZW50LCBjbGFzc05hbWUpIHtcbiAgbGV0IG1hdGNoaW5nQ2hpbGRyZW4gPSBwYXJlbnQucXVlcnlTZWxlY3RvckFsbCgnLicgKyBjbGFzc05hbWUpO1xuXG4gIGZvciAobGV0IGkgPSAwLCBjb3VudCA9IG1hdGNoaW5nQ2hpbGRyZW4ubGVuZ3RoOyBpIDwgY291bnQ7IGkrKykge1xuICAgIHBhcmVudC5yZW1vdmVDaGlsZChtYXRjaGluZ0NoaWxkcmVuW2ldKTtcbiAgfVxufVxuXG4vKipcbiAqIFNldHMgdGhlIENTUyB0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbiBzdHlsZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudCB3aXRoIHRoZSBnaXZlbiBjdWJpYy1cbiAqIGJlemllciBwb2ludHMuXG4gKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudC5cbiAqIEBwYXJhbSB7e3AxeDogTnVtYmVyLCBwMXk6IE51bWJlciwgcDJ4OiBOdW1iZXIsIHAyeTogTnVtYmVyfX0gYmV6aWVyUHRzIFRoZSBjdWJpYy1iZXppZXJcbiAqIHBvaW50cyB0byB1c2UgZm9yIHRoaXMgdGltaW5nIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBzZXRUcmFuc2l0aW9uQ3ViaWNCZXppZXJUaW1pbmdGdW5jdGlvbihlbGVtZW50LCBiZXppZXJQdHMpIHtcbiAgY29uc3QgdmFsdWUgPSAnY3ViaWMtYmV6aWVyKCcgKyBiZXppZXJQdHMucDF4ICsgJywnICsgYmV6aWVyUHRzLnAxeSArICcsJyArIGJlemllclB0cy5wMnggKyAnLCcgK1xuICAgIGJlemllclB0cy5wMnkgKyAnKSc7XG4gIGVsZW1lbnQuc3R5bGUudHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uID0gdmFsdWU7XG4gIGVsZW1lbnQuc3R5bGUuV2Via2l0VHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uID0gdmFsdWU7XG4gIGVsZW1lbnQuc3R5bGUuTW96VHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uID0gdmFsdWU7XG4gIGVsZW1lbnQuc3R5bGUubXNUcmFuc2l0aW9uVGltaW5nRnVuY3Rpb24gPSB2YWx1ZTtcbiAgZWxlbWVudC5zdHlsZS5PVHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uID0gdmFsdWU7XG59XG5cbi8vIEEgY29sbGVjdGlvbiBvZiBkaWZmZXJlbnQgdHlwZXMgb2YgZWFzaW5nIGZ1bmN0aW9ucy5cbmNvbnN0IGVhc2luZ0Z1bmN0aW9ucyA9IHtcbiAgbGluZWFyOiB0ID0+IHQsXG4gIGVhc2VJblF1YWQ6IHQgPT4gdCAqIHQsXG4gIGVhc2VPdXRRdWFkOiB0ID0+IHQgKiAoMiAtIHQpLFxuICBlYXNlSW5PdXRRdWFkOiB0ID0+IHQgPCAwLjUgPyAyICogdCAqIHQgOiAtMSArICg0IC0gMiAqIHQpICogdCxcbiAgZWFzZUluQ3ViaWM6IHQgPT4gdCAqIHQgKiB0LFxuICBlYXNlT3V0Q3ViaWM6IHQgPT4gMSArIC0tdCAqIHQgKiB0LFxuICBlYXNlSW5PdXRDdWJpYzogdCA9PiB0IDwgMC41ID8gNCAqIHQgKiB0ICogdCA6ICh0IC0gMSkgKiAoMiAqIHQgLSAyKSAqICgyICogdCAtIDIpICsgMSxcbiAgZWFzZUluUXVhcnQ6IHQgPT4gdCAqIHQgKiB0ICogdCxcbiAgZWFzZU91dFF1YXJ0OiB0ID0+IDEgLSAtLXQgKiB0ICogdCAqIHQsXG4gIGVhc2VJbk91dFF1YXJ0OiB0ID0+IHQgPCAwLjUgPyA4ICogdCAqIHQgKiB0ICogdCA6IDEgLSA4ICogLS10ICogdCAqIHQgKiB0LFxuICBlYXNlSW5RdWludDogdCA9PiB0ICogdCAqIHQgKiB0ICogdCxcbiAgZWFzZU91dFF1aW50OiB0ID0+IDEgKyAtLXQgKiB0ICogdCAqIHQgKiB0LFxuICBlYXNlSW5PdXRRdWludDogdCA9PiB0IDwgMC41ID8gMTYgKiB0ICogdCAqIHQgKiB0ICogdCA6IDEgKyAxNiAqIC0tdCAqIHQgKiB0ICogdCAqIHRcbn07XG5cbi8vIEEgY29sbGVjdGlvbiBvZiB0aGUgaW52ZXJzZXMgb2YgZGlmZmVyZW50IHR5cGVzIG9mIGVhc2luZyBmdW5jdGlvbnMuXG5jb25zdCBpbnZlcnNlRWFzaW5nRnVuY3Rpb25zID0ge1xuICBsaW5lYXI6IHQgPT4gdCxcbiAgZWFzZUluUXVhZDogdCA9PiBNYXRoLnNxcnQodCksXG4gIGVhc2VPdXRRdWFkOiB0ID0+IDEgLSBNYXRoLnNxcnQoMSAtIHQpLFxuICBlYXNlSW5PdXRRdWFkOiB0ID0+IHQgPCAwLjUgPyBNYXRoLnNxcnQodCAqIDAuNSkgOiAxIC0gMC43MDcxMDY3OCAqIE1hdGguc3FydCgxIC0gdClcbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgeCBhbmQgeSBjb29yZGluYXRlcyByZXByZXNlbnRlZCBieSB0aGUgZ2l2ZW4gQmV6aWVyIGN1cnZlIGF0IHRoZSBnaXZlblxuICogcGVyY2VudGFnZS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gcGVyY2VudCBFeHByZXNzZWQgYXMgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxLlxuICogQHBhcmFtIHtBcnJheS48e3g6TnVtYmVyLHk6TnVtYmVyfT59IGNvbnRyb2xQb2ludHNcbiAqIEByZXR1cm5zIHt7eDpOdW1iZXIseTpOdW1iZXJ9fVxuICovXG5mdW5jdGlvbiBnZXRYWUZyb21QZXJjZW50V2l0aEJlemllcihwZXJjZW50LCBjb250cm9sUG9pbnRzKSB7XG4gIGxldCB4O1xuICBsZXQgeTtcbiAgbGV0IG9uZU1pbnVzUGVyY2VudDtcbiAgbGV0IHRtcDE7XG4gIGxldCB0bXAyO1xuICBsZXQgdG1wMztcbiAgbGV0IHRtcDQ7XG5cbiAgb25lTWludXNQZXJjZW50ID0gMSAtIHBlcmNlbnQ7XG4gIHRtcDEgPSBvbmVNaW51c1BlcmNlbnQgKiBvbmVNaW51c1BlcmNlbnQgKiBvbmVNaW51c1BlcmNlbnQ7XG4gIHRtcDIgPSAzICogcGVyY2VudCAqIG9uZU1pbnVzUGVyY2VudCAqIG9uZU1pbnVzUGVyY2VudDtcbiAgdG1wMyA9IDMgKiBwZXJjZW50ICogcGVyY2VudCAqIG9uZU1pbnVzUGVyY2VudDtcbiAgdG1wNCA9IHBlcmNlbnQgKiBwZXJjZW50ICogcGVyY2VudDtcblxuICB4ID0gY29udHJvbFBvaW50c1swXS54ICogdG1wMSArXG4gICAgY29udHJvbFBvaW50c1sxXS54ICogdG1wMiArXG4gICAgY29udHJvbFBvaW50c1syXS54ICogdG1wMyArXG4gICAgY29udHJvbFBvaW50c1szXS54ICogdG1wNDtcbiAgeSA9IGNvbnRyb2xQb2ludHNbMF0ueSAqIHRtcDEgK1xuICAgIGNvbnRyb2xQb2ludHNbMV0ueSAqIHRtcDIgK1xuICAgIGNvbnRyb2xQb2ludHNbMl0ueSAqIHRtcDMgK1xuICAgIGNvbnRyb2xQb2ludHNbM10ueSAqIHRtcDQ7XG5cbiAgcmV0dXJuIHsgeDogeCwgeTogeSB9O1xufVxuXG4vKipcbiAqIEFwcGxpZXMgdGhlIGdpdmVuIHRyYW5zZm9ybSB0byB0aGUgZ2l2ZW4gZWxlbWVudCBhcyBhIENTUyBzdHlsZSBpbiBhIGNyb3NzLWJyb3dzZXIgY29tcGF0aWJsZVxuICogbWFubmVyLlxuICpcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSB0cmFuc2Zvcm1cbiAqL1xuZnVuY3Rpb24gc2V0VHJhbnNmb3JtKGVsZW1lbnQsIHRyYW5zZm9ybSkge1xuICBlbGVtZW50LnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgZWxlbWVudC5zdHlsZS5Nb3pUcmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gIGVsZW1lbnQuc3R5bGUubXNUcmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gIGVsZW1lbnQuc3R5bGUuT1RyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGNvcHkgb2YgdGhlIGdpdmVuIGFycmF5IHdpdGggaXRzIGNvbnRlbnRzIHJlLWFycmFuZ2VkIGluIGEgcmFuZG9tIG9yZGVyLlxuICpcbiAqIFRoZSBvcmlnaW5hbCBhcnJheSBpcyBsZWZ0IGluIGl0cyBvcmlnaW5hbCBvcmRlci5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheVxuICogQHJldHVybnMge0FycmF5fVxuICovXG5mdW5jdGlvbiBzaHVmZmxlKGFycmF5KSB7XG4gIGxldCBpO1xuICBsZXQgajtcbiAgbGV0IGNvdW50O1xuICBsZXQgdGVtcDtcblxuICBmb3IgKGkgPSAwLCBjb3VudCA9IGFycmF5Lmxlbmd0aDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICBqID0gcGFyc2VJbnQoTWF0aC5yYW5kb20oKSAqIGNvdW50KTtcbiAgICB0ZW1wID0gYXJyYXlbal07XG4gICAgYXJyYXlbal0gPSBhcnJheVtpXTtcbiAgICBhcnJheVtpXSA9IHRlbXA7XG4gIH1cblxuICByZXR1cm4gYXJyYXk7XG59XG5cbi8qKlxuICogUGVyZm9ybXMgYSBzaGFsbG93IGNvcHkgb2YgdGhlIGdpdmVuIG9iamVjdC5cbiAqXG4gKiBUaGlzIG9ubHkgY29waWVzIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBzaGFsbG93Q29weShvYmplY3QpIHtcbiAgaWYgKHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnKSB7XG4gICAgY29uc3QgY2xvbmVPYmplY3QgPSB7fTtcblxuICAgIE9iamVjdC5rZXlzKG9iamVjdClcbiAgICAgIC5mb3JFYWNoKGtleSA9PiBjbG9uZU9iamVjdFtrZXldID0gb2JqZWN0W2tleV0pO1xuXG4gICAgcmV0dXJuIGNsb25lT2JqZWN0O1xuICB9XG4gIGVsc2Uge1xuICAgIHJldHVybiBvYmplY3Q7XG4gIH1cbn1cblxuLyoqXG4gKiBQZXJmb3JtcyBhIGRlZXAgY29weSBvZiB0aGUgZ2l2ZW4gb2JqZWN0LlxuICpcbiAqIFRoaXMgb25seSBjb3BpZXMgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGRlZXBDb3B5KG9iamVjdCkge1xuICBpZiAodHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyBIYWNrOiBOb3QgYSByb2J1c3QgY29weSBwb2xpY3lcbiAgICBsZXQgY2xvbmVPYmplY3Q7XG4gICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICBjbG9uZU9iamVjdCA9IFtdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGNsb25lT2JqZWN0ID0ge307XG4gICAgfVxuXG4gICAgT2JqZWN0LmtleXMob2JqZWN0KVxuICAgICAgLmZvckVhY2goa2V5ID0+IGNsb25lT2JqZWN0W2tleV0gPSBkZWVwQ29weShvYmplY3Rba2V5XSkpO1xuXG4gICAgcmV0dXJuIGNsb25lT2JqZWN0O1xuICB9XG4gIGVsc2Uge1xuICAgIHJldHVybiBvYmplY3Q7XG4gIH1cbn1cblxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gSFNMIGNvbG9yIHZhbHVlcyB0byBIU1YgY29sb3IgdmFsdWVzLlxuICpcbiAqIEdpdmVuIGFuZCByZXR1cm5lZCB2YWx1ZXMgd2lsbCBiZSBpbiB0aGUgcmFuZ2Ugb2YgWzAsIDFdLlxuICpcbiAqIEBwYXJhbSB7SHNsQ29sb3J9IGhzbFxuICogQHJldHVybnMge3toOk51bWJlcixzOk51bWJlcix2Ok51bWJlcn19XG4gKi9cbmZ1bmN0aW9uIGhzbFRvSHN2KGhzbCkge1xuICBjb25zdCB0ZW1wID0gaHNsLnMgKiAoaHNsLmwgPCAwLjUgPyBoc2wubCA6IDEgLSBoc2wubCk7XG4gIHJldHVybiB7XG4gICAgaDogaHNsLmgsXG4gICAgczogMiAqIHRlbXAgLyAoaHNsLmwgKyB0ZW1wKSxcbiAgICB2OiBoc2wubCArIHRlbXBcbiAgfTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gSFNWIGNvbG9yIHZhbHVlcyB0byBIU0wgY29sb3IgdmFsdWVzLlxuICpcbiAqIEdpdmVuIGFuZCByZXR1cm5lZCB2YWx1ZXMgd2lsbCBiZSBpbiB0aGUgcmFuZ2Ugb2YgWzAsIDFdLlxuICpcbiAqIEBwYXJhbSB7e2g6TnVtYmVyLHM6TnVtYmVyLHY6TnVtYmVyfX0gaHN2XG4gKiBAcmV0dXJucyB7SHNsQ29sb3J9XG4gKi9cbmZ1bmN0aW9uIGhzdlRvSHNsKGhzdikge1xuICBjb25zdCB0ZW1wID0gKDIgLSBoc3YucykgKiBoc3YudjtcbiAgcmV0dXJuIHtcbiAgICBoOiBoc3YuaCxcbiAgICBzOiBoc3YucyAqIGhzdi52IC8gKHRlbXAgPCAxID8gdGVtcCA6IDIuMDAwMDAwMDEgLSB0ZW1wKSxcbiAgICBsOiB0ZW1wICogMC41XG4gIH07XG59XG5cbi8qKlxuICogQ29udmVydHMgdGhlIGdpdmVuIEhTTCBjb2xvciB2YWx1ZXMgdG8gUkdCIGNvbG9yIHZhbHVlcy5cbiAqXG4gKiBHaXZlbiBhbmQgcmV0dXJuZWQgdmFsdWVzIHdpbGwgYmUgaW4gdGhlIHJhbmdlIG9mIFswLCAxXS5cbiAqXG4gKiBPcmlnaW5hbGx5IGFkYXB0ZWQgZnJvbSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0hTTF9jb2xvcl9zcGFjZS5cbiAqXG4gKiBAcGFyYW0ge0hzbENvbG9yfSBoc2xcbiAqIEByZXR1cm5zIHtSZ2JDb2xvcn0gcmdiXG4gKi9cbmZ1bmN0aW9uIGhzbFRvUmdiKGhzbCkge1xuICBsZXQgcjtcbiAgbGV0IGc7XG4gIGxldCBiO1xuXG4gIGlmIChoc2wucyA9PT0gMCkge1xuICAgIC8vIEFjaHJvbWF0aWMuXG4gICAgciA9IGhzbC5sO1xuICAgIGcgPSBoc2wubDtcbiAgICBiID0gaHNsLmw7XG4gIH1cbiAgZWxzZSB7XG4gICAgY29uc3QgcSA9IGhzbC5sIDwgMC41ID9cbiAgICAgIGhzbC5sICogKDEgKyBoc2wucykgOlxuICAgICAgaHNsLmwgKyBoc2wucyAtIGhzbC5sICogaHNsLnM7XG4gICAgY29uc3QgcCA9IDIgKiBoc2wubCAtIHE7XG5cbiAgICByID0gX2h1ZTJSZ2IocCwgcSwgaHNsLmggKyAxIC8gMyk7XG4gICAgZyA9IF9odWUyUmdiKHAsIHEsIGhzbC5oKTtcbiAgICBiID0gX2h1ZTJSZ2IocCwgcSwgaHNsLmggLSAxIC8gMyk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHI6IHIsXG4gICAgZzogZyxcbiAgICBiOiBiXG4gIH07XG59XG5cbmZ1bmN0aW9uIF9odWUyUmdiKHAsIHEsIHQpIHtcbiAgaWYgKHQgPCAwKSB7XG4gICAgdCsrO1xuICB9XG4gIGVsc2UgaWYgKHQgPiAxKSB7XG4gICAgdC0tO1xuICB9XG5cbiAgaWYgKHQgPCAxIC8gNikge1xuICAgIHJldHVybiBwICsgKHEgLSBwKSAqIDYgKiB0O1xuICB9XG4gIGVsc2UgaWYgKHQgPCAxIC8gMikge1xuICAgIHJldHVybiBxO1xuICB9XG4gIGVsc2UgaWYgKHQgPCAyIC8gMykge1xuICAgIHJldHVybiBwICsgKHEgLSBwKSAqICgyIC8gMyAtIHQpICogNjtcbiAgfVxuICBlbHNlIHtcbiAgICByZXR1cm4gcDtcbiAgfVxufVxuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBnaXZlbiBSR0IgY29sb3IgdmFsdWVzIHRvIEhTTCBjb2xvciB2YWx1ZXMuXG4gKlxuICogR2l2ZW4gYW5kIHJldHVybmVkIHZhbHVlcyB3aWxsIGJlIGluIHRoZSByYW5nZSBvZiBbMCwgMV0uXG4gKlxuICogT3JpZ2luYWxseSBhZGFwdGVkIGZyb20gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9IU0xfY29sb3Jfc3BhY2UuXG4gKlxuICogQHBhcmFtIHt7cjpOdW1iZXIsZzpOdW1iZXIsYjpOdW1iZXJ9fSByZ2JcbiAqIEByZXR1cm5zIHtIc2xDb2xvcn0gaHNsXG4gKi9cbmZ1bmN0aW9uIHJnYlRvSHNsKHJnYikge1xuICBjb25zdCBtYXggPSBNYXRoLm1heChyZ2IuciwgcmdiLmcsIHJnYi5iKTtcbiAgY29uc3QgbWluID0gTWF0aC5taW4ocmdiLnIsIHJnYi5nLCByZ2IuYik7XG4gIGxldCBoO1xuICBsZXQgcztcbiAgY29uc3QgbCA9IChtYXggKyBtaW4pIC8gMjtcblxuICBpZiAobWF4ID09PSBtaW4pIHtcbiAgICAvLyBBY2hyb21hdGljLlxuICAgIGggPSAwO1xuICAgIHMgPSAwO1xuICB9XG4gIGVsc2Uge1xuICAgIGNvbnN0IGQgPSBtYXggLSBtaW47XG4gICAgcyA9IGwgPiAwLjUgP1xuICAgICAgZCAvICgyIC0gbWF4IC0gbWluKSA6XG4gICAgICBkIC8gKG1heCArIG1pbik7XG5cbiAgICBzd2l0Y2ggKG1heCkge1xuICAgICAgY2FzZSByZ2IucjpcbiAgICAgICAgaCA9IChyZ2IuZyAtIHJnYi5iKSAvIGQgKyAocmdiLmcgPCByZ2IuYiA/IDYgOiAwKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHJnYi5nOlxuICAgICAgICBoID0gKHJnYi5iIC0gcmdiLnIpIC8gZCArIDI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSByZ2IuYjpcbiAgICAgICAgaCA9IChyZ2IuciAtIHJnYi5nKSAvIGQgKyA0O1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBoIC89IDY7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGg6IGgsXG4gICAgczogcyxcbiAgICBsOiBsXG4gIH07XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHZhbGlkIGNvbG9yIHN0cmluZyB0byBhc3NpZ24gdG8gYSBDU1MgcHJvcGVydHkgZnJvbSB0aGUgZ2l2ZW4gaC9zL2wgY29sb3IgdmFsdWVzLlxuICpcbiAqIEdpdmVuIHZhbHVlcyBzaG91bGQgYmUgaW4gdGhlIHJhbmdlIG9mIFswLDFdLlxuICpcbiAqIEBwYXJhbSB7SHNsQ29sb3J9IGhzbFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gY3JlYXRlSHNsQ29sb3JTdHJpbmcoaHNsKSB7XG4gIHJldHVybiB0eXBlb2YgaHNsLmEgIT09ICd1bmRlZmluZWQnID9cbiAgICBgaHNsYSgke2hzbC5oICogMzYwfSwke2hzbC5zICogMTAwfSUsJHtoc2wubCAqIDEwMH0lLCR7aHNsLmF9KWAgOlxuICAgIGBoc2woJHtoc2wuaCAqIDM2MH0sJHtoc2wucyAqIDEwMH0lLCR7aHNsLmwgKiAxMDB9JSlgO1xufVxuXG4vKipcbiAqIENoZWNrcyB0aGUgZ2l2ZW4gZWxlbWVudCBhbmQgYWxsIG9mIGl0cyBhbmNlc3RvcnMsIGFuZCByZXR1cm5zIHRoZSBmaXJzdCB0aGF0IGNvbnRhaW5zIHRoZVxuICogZ2l2ZW4gY2xhc3MuXG4gKlxuICogQHBhcmFtIHs/SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWVcbiAqIEByZXR1cm5zIHs/SFRNTEVsZW1lbnR9XG4gKi9cbmZ1bmN0aW9uIGZpbmRDbGFzc0luU2VsZk9yQW5jZXN0b3JzKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICB3aGlsZSAoZWxlbWVudCkge1xuICAgIGlmIChjb250YWluc0NsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkpIHtcbiAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5sZXQgdXRpbFN0eWxlU2hlZXQ7XG5cbi8qKlxuICogQWRkcyB0aGUgZ2l2ZW4gc3R5bGUgcnVsZSB0byBhIHN0eWxlIHNoZWV0IGZvciB0aGUgY3VycmVudCBkb2N1bWVudC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3R5bGVSdWxlXG4gKi9cbmZ1bmN0aW9uIGFkZFJ1bGVUb1N0eWxlU2hlZXQoc3R5bGVSdWxlKSB7XG4gIC8vIENyZWF0ZSB0aGUgY3VzdG9tIHN0eWxlIHNoZWV0IGlmIGl0IGRvZXNuJ3QgYWxyZWFkeSBleGlzdFxuICBpZiAoIXV0aWxTdHlsZVNoZWV0KSB7XG4gICAgdXRpbFN0eWxlU2hlZXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQodXRpbFN0eWxlU2hlZXQpO1xuICB9XG5cbiAgLy8gQWRkIHRoZSBnaXZlbiBydWxlIHRvIHRoZSBjdXN0b20gc3R5bGUgc2hlZXRcbiAgaWYgKHV0aWxTdHlsZVNoZWV0LnN0eWxlU2hlZXQpIHtcbiAgICB1dGlsU3R5bGVTaGVldC5zdHlsZVNoZWV0LmNzc1RleHQgPSBzdHlsZVJ1bGU7XG4gIH1cbiAgZWxzZSB7XG4gICAgdXRpbFN0eWxlU2hlZXQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoc3R5bGVSdWxlKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tGb3JTYWZhcmkoKSB7XG4gIHJldHVybiAvU2FmYXJpL2kudGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCkgJiYgIS9DaHJvbWUvaS50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTtcbn1cblxuZnVuY3Rpb24gY2hlY2tGb3JJb3MoKSB7XG4gIHJldHVybiAvaVBob25lfGlQb2R8aVBhZC9pLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBkZWJvdW5jZWQgdmVyc2lvbiBvZiB0aGUgZ2l2ZW4gZnVuY3Rpb24uXG4gKlxuICogRXZlbiBpZiB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIGlzIGludm9rZWQgbWFueSB0aW1lcywgdGhlIHdyYXBwZWQgZnVuY3Rpb24gd2lsbCBvbmx5IGJlIGludm9rZWRcbiAqIGFmdGVyIHRoZSBnaXZlbiBkZWxheSBoYXMgZWxsYXBzZWQgc2luY2UgdGhlIGxhc3QgaW52b2NhdGlvbi5cbiAqXG4gKiBJZiBpc0ludm9rZWRJbW1lZGlhdGVseSBpcyB0cnVlLCB0aGVuIHRoZSB3cmFwcGVkIGZ1bmN0aW9uIHdpbGwgYmUgdHJpZ2dlcmVkIGF0IHRoZSBzdGFydCBvZiB0aGVcbiAqIGludm9jYXRpb24gZ3JvdXAgcmF0aGVyIHRoYW4gYXQgdGhlIGVuZC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB3cmFwcGVkRnVuY3Rpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSBkZWxheSBJbiBtaWxsaXNlY29uZHMuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0ludm9rZWRJbW1lZGlhdGVseT1mYWxzZV1cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gZGVib3VuY2Uod3JhcHBlZEZ1bmN0aW9uLCBkZWxheSwgaXNJbnZva2VkSW1tZWRpYXRlbHkgPSBmYWxzZSkge1xuICBsZXQgdGltZW91dElkO1xuXG4gIHJldHVybiAoKSA9PiB7XG4gICAgLy8gU2F2ZSB0aGUgY29udGV4dCBhbmQgYXJndW1lbnRzIHBhc3NlZCBmcm9tIHRoZSBjbGllbnQgKHRoaXMgd2lsbCB1c2UgdGhlIHZhbHVlcyBmcm9tIHRoZVxuICAgIC8vIGZpcnN0IGludm9jYXRpb24gb2YgdGhlIGludm9jYXRpb24gZ3JvdXAuXG4gICAgY29uc3QgY29udGV4dCA9IHRoaXM7XG4gICAgY29uc3QgYXJncyA9IGFyZ3VtZW50cztcblxuICAgIC8vIEludm9rZSBpbW1lZGlhdGVseSBvbmx5IGlmIHRoaXMgaXMgdGhlIGZpcnN0IGludm9jYXRpb24gb2YgYSBncm91cC5cbiAgICBpZiAoaXNJbnZva2VkSW1tZWRpYXRlbHkgJiYgIXRpbWVvdXRJZCkge1xuICAgICAgd3JhcHBlZEZ1bmN0aW9uLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgIH1cblxuICAgIC8vIFJlc2V0IHRoZSBkZWxheS5cbiAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIC8vIFRoZSBpbnZvY2F0aW9uIGdyb3VwIGhhcyBlbmRlZC5cbiAgICAgIHRpbWVvdXRJZCA9IG51bGw7XG4gICAgICBpZiAoIWlzSW52b2tlZEltbWVkaWF0ZWx5KSB7XG4gICAgICAgIHdyYXBwZWRGdW5jdGlvbi5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgIH1cbiAgICB9LCBkZWxheSk7XG4gIH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHRocm90dGxlZCB2ZXJzaW9uIG9mIHRoZSBnaXZlbiBmdW5jdGlvbi5cbiAqXG4gKiBFdmVuIGlmIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gaXMgaW52b2tlZCBtYW55IHRpbWVzLCB0aGUgd3JhcHBlZCBmdW5jdGlvbiB3aWxsIG9ubHkgYmUgaW52b2tlZFxuICogYXQgZWFjaCBpbnRlcnZhbCBvZiB0aGUgZ2l2ZW4gZGVsYXkuIEFmdGVyIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gc3RvcHMgYmVpbmcgaW52b2tlZCwgdGhlblxuICogd3JhcHBlZCBmdW5jdGlvbiB3aWxsIGFsc28gc3RvcCBiZWluZyBpbnZva2VkLlxuICpcbiAqIElmIGlzSW52b2tlZEltbWVkaWF0ZWx5IGlzIHRydWUsIHRoZW4gdGhlIHdyYXBwZWQgZnVuY3Rpb24gd2lsbCBiZSB0cmlnZ2VyZWQgYXQgdGhlIHN0YXJ0IG9mIHRoZVxuICogaW52b2NhdGlvbiBkZWxheSByYXRoZXIgdGhhbiBhdCB0aGUgZW5kLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHdyYXBwZWRGdW5jdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IGRlbGF5IEluIG1pbGxpc2Vjb25kcy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzSW52b2tlZEltbWVkaWF0ZWx5PWZhbHNlXVxuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiB0aHJvdHRsZSh3cmFwcGVkRnVuY3Rpb24sIGRlbGF5LCBpc0ludm9rZWRJbW1lZGlhdGVseSA9IGZhbHNlKSB7XG4gIGxldCB0aW1lb3V0SWQ7XG5cbiAgcmV0dXJuICgpID0+IHtcbiAgICAvLyBTYXZlIHRoZSBjb250ZXh0IGFuZCBhcmd1bWVudHMgcGFzc2VkIGZyb20gdGhlIGNsaWVudCAodGhpcyB3aWxsIHVzZSB0aGUgdmFsdWVzIGZyb20gdGhlXG4gICAgLy8gZmlyc3QgaW52b2NhdGlvbiBvZiB0aGUgaW52b2NhdGlvbiBncm91cC5cbiAgICBjb25zdCBjb250ZXh0ID0gdGhpcztcbiAgICBjb25zdCBhcmdzID0gYXJndW1lbnRzO1xuXG4gICAgLy8gT25seSB0cmlnZ2VyIGEgbmV3IGludm9jYXRpb24gZ3JvdXAgaWYgd2UgYXJlIG5vdCBhbHJlYWR5L3N0aWxsIHdhaXRpbmcgb24gdGhlIGRlbGF5IGZyb20gYVxuICAgIC8vIHByZXZpb3VzIGludm9jYXRpb24uXG4gICAgaWYgKCF0aW1lb3V0SWQpIHtcbiAgICAgIGlmIChpc0ludm9rZWRJbW1lZGlhdGVseSkge1xuICAgICAgICB3cmFwcGVkRnVuY3Rpb24uYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIC8vIFN0YXJ0IHRoZSBkZWxheS5cbiAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAvLyBUaGUgaW52b2NhdGlvbiBncm91cCBoYXMgZW5kZWQuXG4gICAgICAgIHRpbWVvdXRJZCA9IG51bGw7XG4gICAgICAgIGlmICghaXNJbnZva2VkSW1tZWRpYXRlbHkpIHtcbiAgICAgICAgICB3cmFwcGVkRnVuY3Rpb24uYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH0sIGRlbGF5KTtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogQHBhcmFtIHtBcnJheS48Kj58U3RyaW5nfSBhcnJheVxuICogQHBhcmFtIHsqfSBkZWxpbWl0ZXJcbiAqIEByZXR1cm5zIHtBcnJheS48Kj59XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfaW50ZXJsZWF2ZShhcnJheSwgZGVsaW1pdGVyKSB7XG4gIGNvbnN0IHJlc3VsdCA9IG5ldyBBcnJheShhcnJheS5sZW5ndGggKiAyIC0gMSk7XG4gIGlmIChhcnJheS5sZW5ndGgpIHtcbiAgICByZXN1bHQucHVzaChhcnJheVswXSk7XG4gIH1cbiAgZm9yIChsZXQgaSA9IDEsIGNvdW50ID0gYXJyYXkubGVuZ3RoOyBpIDwgY291bnQ7IGkrKykge1xuICAgIHJlc3VsdC5wdXNoKGRlbGltaXRlcik7XG4gICAgcmVzdWx0LnB1c2goYXJyYXlbaV0pO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogTG9hZHMgdGhlIGdpdmVuIHNyYyBmb3IgdGhlIGdpdmVuIGltYWdlLlxuICpcbiAqIEBwYXJhbSB7SFRNTEltYWdlRWxlbWVudH0gaW1hZ2VcbiAqIEBwYXJhbSB7c3RyaW5nfSBzcmNcbiAqIEByZXR1cm5zIHtQcm9taXNlLjxIVE1MSW1hZ2VFbGVtZW50LCBFcnJvcj59XG4gKi9cbmZ1bmN0aW9uIGxvYWRJbWFnZVNyYyhpbWFnZSwgc3JjKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc29sZS5kZWJ1ZyhgTG9hZGluZyBpbWFnZTogJHtzcmN9YCk7XG5cbiAgICBpbWFnZS5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgXyA9PiByZXNvbHZlKGltYWdlKSk7XG4gICAgaW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCByZWplY3QpO1xuICAgIGltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgcmVqZWN0KTtcblxuICAgIGltYWdlLnNyYyA9IHNyYztcbiAgfSk7XG59XG5cbi8qKlxuICogTG9hZHMgdGV4dCBmcm9tIHRoZSBnaXZlbiBVUkwuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICogQHJldHVybnMge1Byb21pc2UuPFN0cmluZywgRXJyb3I+fVxuICovXG5mdW5jdGlvbiBsb2FkVGV4dCh1cmwpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIHhoci5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgXyA9PiByZXNvbHZlKHhoci5yZXNwb25zZSkpO1xuICAgIHhoci5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIHJlamVjdCk7XG4gICAgeGhyLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgcmVqZWN0KTtcblxuICAgIGNvbnNvbGUuZGVidWcoYExvYWRpbmcgdGV4dDogJHt1cmx9YCk7XG5cbiAgICB4aHIub3BlbignR0VUJywgdXJsKTtcbiAgICB4aHIuc2VuZCgpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBMb2FkcyBhIEpTT04gb2JqZWN0IGZyb20gdGhlIGdpdmVuIFVSTC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKiBAcmV0dXJucyB7UHJvbWlzZS48T2JqZWN0LCBFcnJvcj59XG4gKi9cbmZ1bmN0aW9uIGxvYWRKc29uKHVybCkge1xuICByZXR1cm4gbG9hZFRleHQodXJsKS50aGVuKGpzb25UZXh0ID0+IEpTT04ucGFyc2UoanNvblRleHQpKTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBjdXJyZW50IHN0YWNrIHRyYWNlLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGdldFN0YWNrVHJhY2UoKSB7XG4gIHJldHVybiBuZXcgRXJyb3IoKS5zdGFjaztcbn1cblxuLyoqXG4gKiBGcmVlemVzIHRoZSBnaXZlbiBvYmplY3QgYW5kIHJlY3Vyc2l2ZWx5IGZyZWV6ZXMgYWxsIG9mIGl0cyBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAqL1xuZnVuY3Rpb24gZGVlcEZyZWV6ZShvYmplY3QpIHtcbiAgaWYgKHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnKSB7XG4gICAgT2JqZWN0LmZyZWV6ZShvYmplY3QpO1xuICAgIE9iamVjdC5rZXlzKG9iamVjdCkuZm9yRWFjaChrZXkgPT4gZGVlcEZyZWV6ZShvYmplY3Rba2V5XSkpO1xuICB9XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIEdVSUQuXG4gKlxuICogR1VJRCBzcGVjaWZpY2F0aW9uOiBodHRwOi8vd3d3LmlldGYub3JnL3JmYy9yZmM0MTIyLnR4dFxuICpcbiAqIExvZ2ljIGFkb3B0ZWQgZnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMTE3NTIzLzQ4OTU2OC5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBjcmVhdGVHdWlkKCkge1xuICByZXR1cm4gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBjID0+IHtcbiAgICBjb25zdCByID0gTWF0aC5yYW5kb20oKSAqIDE2IHwgMDtcbiAgICBjb25zdCB2ID0gYyA9PT0gJ3gnID8gciA6IChyICYgMHgzIHwgMHg4KTtcbiAgICByZXR1cm4gdi50b1N0cmluZygxNik7XG4gIH0pO1xufVxuXG4vKipcbiAqIC0xMSAlIDMgPT09IC0yXG4gKiBtb2QoLTExLCAzKSA9PT0gMVxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBuXG4gKiBAcGFyYW0ge251bWJlcn0gbVxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZnVuY3Rpb24gbW9kKG4sIG0pIHtcbiAgcmV0dXJuICgobiAlIG0pICsgbSkgJSBtO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW5cbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXhcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIHJhbmRvbUZsb2F0SW5SYW5nZShtaW4sIG1heCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pICsgbWluO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gSW5jbHVzaXZlXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4IEV4Y2x1c2l2ZVxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZnVuY3Rpb24gcmFuZG9tSW50SW5SYW5nZShtaW4sIG1heCkge1xuICByZXR1cm4gcGFyc2VJbnQoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pICsgbWluKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5fSBsaXN0XG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZnVuY3Rpb24gcGlja1JhbmRvbShsaXN0KSB7XG4gIHJldHVybiBsaXN0W3JhbmRvbUludEluUmFuZ2UoMCwgbGlzdC5sZW5ndGgpXTtcbn1cblxuLyoqXG4gKiBUcmlnZ2VycyB0aGUgZ2l2ZW4gY2FsbGJhY2sgd2hlbiBlaXRoZXIgdGhlIGN1cnJlbnQgdGFiIG9yIHRoZSBicm93c2VyIHdpbmRvdyBsb3Nlcy9nYWlucyBmb2N1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmb2N1c0NoYW5nZUhhbmRsZXJcbiAqL1xuZnVuY3Rpb24gaGFuZGxlUGFnZUZvY3VzQ2hhbmdlKGZvY3VzQ2hhbmdlSGFuZGxlcikge1xuICAvLyBQYXVzZS91bnBhdXNlIHRoZSBhcHAgd2hlbiB0aGUgdGFiIGxvc2VzL2dhaW5zIGZvY3VzLlxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgKCkgPT4gZm9jdXNDaGFuZ2VIYW5kbGVyKCFkb2N1bWVudC5oaWRkZW4pKTtcbiAgLy8gUGF1c2UvdW5wYXVzZSB0aGUgYXBwIHdoZW4gdGhlIGJyb3dzZXIgd2luZG93IGxvc2VzL2dhaW5zIGZvY3VzLlxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsICgpID0+IGZvY3VzQ2hhbmdlSGFuZGxlcihmYWxzZSkpO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCAoKSA9PiBmb2N1c0NoYW5nZUhhbmRsZXIodHJ1ZSkpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgdGhlIGNvbnNlY3V0aXZlIG51bWJlcnMgZnJvbSBzdGFydCAoaW5jbHVzaXZlKSB0byBlbmQgKGV4Y2x1c2l2ZSkuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0XG4gKiBAcGFyYW0ge251bWJlcn0gZW5kXG4gKiBAcmV0dXJucyB7QXJyYXkuPE51bWJlcj59XG4gKi9cbmZ1bmN0aW9uIHJhbmdlKHN0YXJ0LCBlbmQpIHtcbiAgY29uc3QgciA9IFtdO1xuICBmb3IgKGxldCBpID0gMCwgaiA9IHN0YXJ0OyBqIDwgZW5kOyBpKyssIGorKykge1xuICAgIHJbaV0gPSBqO1xuICB9XG4gIHJldHVybiByO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0ludCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJlxuICAgIGlzRmluaXRlKHZhbHVlKSAmJlxuICAgIHBhcnNlSW50KHZhbHVlKSA9PT0gdmFsdWU7XG59XG5cbi8qKlxuICogRmluZCB0aGUgZmlyc3QgdmFsdWUgaW4gYSBsaXN0IHRoYXQgc2F0aXNmaWVzIGEgcHJlZGljYXRlLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGxpc3RcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZVxuICogQHJldHVybnMgeyp9XG4gKi9cbmZ1bmN0aW9uIGZpbmQobGlzdCwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGkgPSAwLCBjb3VudCA9IGxpc3QubGVuZ3RoOyBpIDwgY291bnQ7IGkrKykge1xuICAgIGNvbnN0IHZhbHVlID0gbGlzdFtpXTtcbiAgICBpZiAocHJlZGljYXRlLmNhbGwobnVsbCwgdmFsdWUsIGksIGxpc3QpKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5jb25zdCBrZXlDb2RlcyA9IHtcbiAgJ2EnOiA2NSxcbiAgJ2InOiA2NixcbiAgJ2MnOiA2NyxcbiAgJ2QnOiA2OCxcbiAgJ2UnOiA2OSxcbiAgJ2YnOiA3MCxcbiAgJ2cnOiA3MSxcbiAgJ2gnOiA3MixcbiAgJ2knOiA3MyxcbiAgJ2onOiA3NCxcbiAgJ2snOiA3NSxcbiAgJ2wnOiA3NixcbiAgJ20nOiA3NyxcbiAgJ24nOiA3OCxcbiAgJ28nOiA3OSxcbiAgJ3AnOiA4MCxcbiAgJ3EnOiA4MSxcbiAgJ3InOiA4MixcbiAgJ3MnOiA4MyxcbiAgJ3QnOiA4NCxcbiAgJ3UnOiA4NSxcbiAgJ3YnOiA4NixcbiAgJ3cnOiA4NyxcbiAgJ3gnOiA4OCxcbiAgJ3knOiA4OSxcbiAgJ3onOiA5MCxcbiAgJzAnOiA0OCxcbiAgJzEnOiA0OSxcbiAgJzInOiA1MCxcbiAgJzMnOiA1MSxcbiAgJzQnOiA1MixcbiAgJzUnOiA1MyxcbiAgJzYnOiA1NCxcbiAgJzcnOiA1NSxcbiAgJzgnOiA1NixcbiAgJzknOiA1NyxcbiAgJ1NQQUNFJzogMzIsXG4gICdFTlRFUic6IDEzLFxuICAnRVNDQVBFJzogMjcsXG4gICdMRUZUJzogMzcsXG4gICdVUCc6IDM4LFxuICAnUklHSFQnOiAzOSxcbiAgJ0RPV04nOiA0MFxufTtcblxuY29uc3Qgc3ZnTmFtZXNwYWNlID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJztcbmNvbnN0IHhsaW5rTmFtZXNwYWNlID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnO1xuXG5leHBvcnQge1xuICBpc0luRGV2TW9kZSxcbiAgbGlzdGVuVG9NdWx0aXBsZUZvck11bHRpcGxlLFxuICBjcmVhdGVFbGVtZW50LFxuICBjb250YWluc0NsYXNzLFxuICB0b2dnbGVDbGFzcyxcbiAgZ2V0UGFnZU9mZnNldCxcbiAgZ2V0Vmlld3BvcnRTaXplLFxuICByZW1vdmVDaGlsZElmUHJlc2VudCxcbiAgYWRkQ2xhc3MsXG4gIHJlbW92ZUNsYXNzLFxuICBjbGVhckNsYXNzZXMsXG4gIGdldFRleHRXaWR0aCxcbiAgZW5jb2RlUXVlcnlTdHJpbmcsXG4gIGdldFF1ZXJ5U3RyaW5nUGFyYW1ldGVyVmFsdWUsXG4gIHNldFRyYW5zaXRpb24sXG4gIHNldFRyYW5zaXRpb25EdXJhdGlvblNlY29uZHMsXG4gIHNldFRyYW5zaXRpb25EZWxheVNlY29uZHMsXG4gIHNldFVzZXJTZWxlY3ROb25lLFxuICByZW1vdmVDaGlsZHJlbldpdGhDbGFzcyxcbiAgc2V0VHJhbnNpdGlvbkN1YmljQmV6aWVyVGltaW5nRnVuY3Rpb24sXG4gIGVhc2luZ0Z1bmN0aW9ucyxcbiAgaW52ZXJzZUVhc2luZ0Z1bmN0aW9ucyxcbiAgZ2V0WFlGcm9tUGVyY2VudFdpdGhCZXppZXIsXG4gIHNldFRyYW5zZm9ybSxcbiAgc2h1ZmZsZSxcbiAgc2hhbGxvd0NvcHksXG4gIGRlZXBDb3B5LFxuICBoc3ZUb0hzbCxcbiAgaHNsVG9Ic3YsXG4gIGhzbFRvUmdiLFxuICByZ2JUb0hzbCxcbiAgY3JlYXRlSHNsQ29sb3JTdHJpbmcsXG4gIGZpbmRDbGFzc0luU2VsZk9yQW5jZXN0b3JzLFxuICBhZGRSdWxlVG9TdHlsZVNoZWV0LFxuICBjaGVja0ZvclNhZmFyaSxcbiAgY2hlY2tGb3JJb3MsXG4gIGRlYm91bmNlLFxuICB0aHJvdHRsZSxcbiAgbG9hZEltYWdlU3JjLFxuICBsb2FkVGV4dCxcbiAgbG9hZEpzb24sXG4gIGdldFN0YWNrVHJhY2UsXG4gIGRlZXBGcmVlemUsXG4gIGNyZWF0ZUd1aWQsXG4gIG1vZCxcbiAgcmFuZG9tRmxvYXRJblJhbmdlLFxuICByYW5kb21JbnRJblJhbmdlLFxuICBwaWNrUmFuZG9tLFxuICBoYW5kbGVQYWdlRm9jdXNDaGFuZ2UsXG4gIHJhbmdlLFxuICBpc0ludCxcbiAgZmluZCxcbiAga2V5Q29kZXMsXG4gIHN2Z05hbWVzcGFjZSxcbiAgeGxpbmtOYW1lc3BhY2UsXG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEhzbENvbG9yXG4gKiBAcHJvcGVydHkge051bWJlcn0gaCBJbiB0aGUgcmFuZ2Ugb2YgWzAsIDFdLlxuICogQHByb3BlcnR5IHtOdW1iZXJ9IHMgSW4gdGhlIHJhbmdlIG9mIFswLCAxXS5cbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBsIEluIHRoZSByYW5nZSBvZiBbMCwgMV0uXG4gKiBAcHJvcGVydHkge051bWJlcn0gW2FdIEluIHRoZSByYW5nZSBvZiBbMCwgMV0uXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBSZ2JDb2xvclxuICogQHByb3BlcnR5IHtOdW1iZXJ9IHIgSW4gdGhlIHJhbmdlIG9mIFswLCAxXS5cbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBnIEluIHRoZSByYW5nZSBvZiBbMCwgMV0uXG4gKiBAcHJvcGVydHkge051bWJlcn0gYiBJbiB0aGUgcmFuZ2Ugb2YgWzAsIDFdLlxuICogQHByb3BlcnR5IHtOdW1iZXJ9IFthXSBJbiB0aGUgcmFuZ2Ugb2YgWzAsIDFdLlxuICovXG4iXX0="}